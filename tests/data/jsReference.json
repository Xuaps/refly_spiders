[{"name": "JavaScript reference", "parent": "/javascript", "url": "/en-US/docs/Web/JavaScript/Reference", "parsed_url": "/javascript/javascript_reference", "content": "This part of the JavaScript section on MDN serves as a repository of facts\nabout the JavaScript language. Read more [about this reference][1].\n\n## Global Objects\n\nThis chapter documents all the [JavaScript standard built-in objects][2],\nalong with their methods and properties.\n\n### Value properties\n\nGlobal properties returning a simple value.\n\n  * [`Infinity`][3]\n  * [`NaN`][4]\n  * [`undefined`][5]\n  * [`null`][6] literal\n\n### Function properties\n\nGlobal functions returning the result of a specific routine.\n\n  * [`eval()`][7]\n  * [`uneval()`][8] _ _\n  * [`isFinite()`][9]\n  * [`isNaN()`][10]\n  * [`parseFloat()`][11]\n  * [`parseInt()`][12]\n  * [`decodeURI()`][13]\n  * [`decodeURIComponent()`][14]\n  * [`encodeURI()`][15]\n  * [`encodeURIComponent()`][16]\n  * [`escape()`][17] _ _\n  * [`unescape()`][18] _ _\n\n### Fundamental objects\n\nGeneral language objects, functions and errors.\n\n  * [`Object`][19]\n  * [`Function`][20]\n  * [`Boolean`][21]\n  * [`Symbol`][22] _ _\n  * [`Error`][23]\n  * [`EvalError`][24]\n  * [`InternalError`][25]\n  * [`RangeError`][26]\n  * [`ReferenceError`][27]\n  * [`StopIteration`][28]\n  * [`SyntaxError`][29]\n  * [`TypeError`][30]\n  * [`URIError`][31]\n\n### Numbers and dates\n\nObjects dealing with numbers, dates and mathematical calculations.\n\n  * [`Number`][32]\n  * [`Math`][33]\n  * [`Date`][34]\n\n### Text processing\n\nObjects for manipulating texts.\n\n  * [`String`][35]\n  * [`RegExp`][36]\n\n### Indexed collections\n\nCollections ordered by an index. Array-type objects.\n\n  * [`Array`][37]\n  * [`Int8Array`][38]\n  * [`Uint8Array`][39]\n  * [`Uint8ClampedArray`][40]\n  * [`Int16Array`][41]\n  * [`Uint16Array`][42]\n  * [`Int32Array`][43]\n  * [`Uint32Array`][44]\n  * [`Float32Array`][45]\n  * [`Float64Array`][46]\n  * [`ParallelArray`][47] _ _\n\n### Keyed collections\n\nCollections of objects as keys. Elements iterable in insertion order.\n\n  * [`Map`][48] _ _\n  * [`Set`][49] _ _\n  * [`WeakMap`][50] _ _\n  * [`WeakSet`][51] _ _\n\n### Structured data\n\nData buffers and **J**ava**S**cript **O**bject **N**otation.\n\n  * [`ArrayBuffer`][52]\n  * [`DataView`][53]\n  * [`JSON`][54]\n\n### Control abstraction objects\n\n  * [`Iterator`][55] _ _\n  * [`Generator`][56] _ _\n  * [`Promise`][57] _ _\n\n### Reflection\n\n  * [`Reflect`][58] _ _\n  * [`Proxy`][59] _ _\n\n### Internationalization\n\nAdditions to the ECMAScript core for language-sensitive functionalities.\n\n  * [`Intl`][60]\n  * [`Intl.Collator`][61]\n  * [`Intl.DateTimeFormat`][62]\n  * [`Intl.NumberFormat`][63]\n\n### Other\n\n  * [`arguments][64]`\n\n## Statements\n\nThis chapter documents all the [JavaScript statements and declarations][65].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Control flow\n\n[`Block`][66]\n\n     A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\n[`break`][67]\n\n     Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n[`continue`][68]\n\n     Terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n[`Empty`][69]\n\n     An empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n[`if...else`][70]\n\n     Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n[`switch`][71]\n\n     Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n[`throw`][72]\n\n     Throws a user-defined exception.\n[`try...catch`][73]\n\n     Marks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### Declarations\n\n[`var`][74]\n\n     Declares a variable, optionally initializing it to a value.\n_ _ [`let`][75]\n\n     Declares a block scope local variable, optionally initializing it to a value.\n_ _ [`const`][76]\n\n     Declares a read-only named constant.\n\n### Functions\n\n[`function`][77]\n\n     Declares a function with the specified parameters.\n_ _ [`function*`][78]\n\n     Generators functions enable writing [iterators][79] more easily.\n[`return`][80]\n\n     Specifies the value to be returned by a function.\n_ _ [`yield`][81]\n\n     See\u00a0[New_in_JavaScript 1.7][82]\u00a0&\u00a0[Iterators and generators][83]\n\n### Iterations\n\n[`do...while][84]`\n\n     Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n[`for`][85]\n\n     Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n_ _ _ _ [`for each...in`][86]\n\n     Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\n[`for...in`][87]\n\n     Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n_ _ [`for...of`][88]\n\n     Iterates over iterable objects (including [arrays][89], array-like objects, [iterators and generators][90]), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n[`while`][91]\n\n     Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### Others\n\n[`debugger`][92]\n\n     Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n_ _ [`export`][93]\n\n     Used to export functions to make them available for imports in external modules, another scripts.\n_ _ [`import`][94]\n\n     Used to import functions exported from an external module, another script.\n[`label`][95]\n\n     Provides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n_ _ [`with`][96]\n\n     Extends the scope chain for a statement.\n\n## Expressions and operators\n\nThis chapter documents all the [JavaScript expressions and operators][97].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Primary expressions\n\nBasic keywords and general expressions in JavaScript.\n\n[`this`][98]\n\n     The `this` keyword refers to the function's execution context.\n[`function`][99]\n\n     The `function` keyword defines a function expression.\n[`[]`][37]\n\n     Array initializer/literal syntax.\n[`{}`][100]\n\n     Object initializer/literal syntax.\n[`/ab+c/i`][36]\n\n     Regular expression literal syntax.\n_ _ [`[for (x of y) x]`][101]\n\n     Array comprehensions.\n_ _ [`(for (x of y) y)`][102]\n\n     Generator comprehensions.\n[`( )`][103]\n\n     Grouping operator.\n\n### Left-hand-side expressions\n\nLeft values are the destination of an assignment.\n\n[Property accessors][104]\n\n     Member operators provide access to a property or method of an object  \n(`object.property` and `object[\"property\"]`).\n\n[`new`][105]\n\n     The `new` operator creates an instance of a constructor.\n_ _ [`super`][106]\n\n     The `super` keyword calls the parent constructor.\n_ _ [`...obj`][107]\n\n     The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.\n\n### Increment and decrement\n\nPostfix/prefix increment and postfix/prefix decrement operators.\n\n[`A++`][108]\n\n     Postfix increment operator.\n[`A--`][109]\n\n     Postfix decrement operator.\n[`++A`][108]\n\n     Prefix increment operator.\n[`\\--A`][109]\n\n     Prefix decrement operator.\n\n### Unary operators\n\nA unary operation is operation with only one operand.\n\n[`delete`][110]\n\n     The `delete` operator deletes a property from an object.\n[`void`][111]\n\n     The `void` operator discards an expression's return value.\n[`typeof`][112]\n\n     The `typeof` operator determines the type of a given object.\n[`+`][113]\n\n     The unary plus operator converts its operand to Number type.\n[`-`][114]\n\n     The unary negation operator converts its operand to Number type and then negates it.\n[`~`][115]\n\n     Bitwise NOT operator.\n[`!`][116]\n\n     Logical NOT operator.\n\n### Arithmetic operators\n\nArithmetic operators take numerical values (either literals or variables) as\ntheir operands and return a single numerical value.\n\n[`+`][117]\n\n     Addition operator.\n[`-`][118]\n\n     Subtraction operator.\n[`/`][119]\n\n     Division operator.\n[`*`][120]\n\n     Multiplication operator.\n[`%`][121]\n\n     Remainder operator.\n\n### Relational operators\n\nA comparison operator compares its operands and returns a `Boolean` value\nbased on whether the comparison is true.\n\n[`in`][122]\n\n     The `in` operator determines whether an object has a given property.\n[`instanceof`][123]\n\n     The `instanceof` operator determines whether an object is an instance of another object.\n`<`\n\n     Less than operator.\n`>`\n\n     Greater than operator.\n`<[=`][124]\n\n     Less than or equal operator.\n`>[=`][125]\n\n     Greater than or equal operator.\n\n### Equality operators\n\nThe result of evaluating an equality operator is always of type `Boolean`\nbased on whether the comparison is true.\n\n[`==`][126]\n\n     Equality operator.\n[`!=`][127]\n\n     Inequality operator.\n[`===`][128]\n\n     Identity operator.\n[`!==`][129]\n\n     Nonidentity operator.\n\n### Bitwise shift operators\n\nOperations to shift all bits of the operand.\n\n`<<`\n\n     Bitwise left shift operator.\n`>>`\n\n     Bitwise right shift operator.\n`>>>`\n\n     Bitwise unsigned right shift operator.\n\n### Binary bitwise operators\n\nBitwise operators treat their operands as a set of 32 bits (zeros and ones)\nand return standard JavaScript numerical values.\n\n`&`\n\n     Bitwise AND.\n[`|`][130]\n\n     Bitwise OR.\n[`^`][131]\n\n     Bitwise XOR.\n\n### Binary logical operators\n\nLogical operators are typically used with boolean (logical) values, and when\nthey are, they return a boolean value.\n\n`&&`\n\n     Logical AND.\n[`||`][132]\n\n     Logical OR.\n\n### Conditional (ternary) operator\n\n[`(condition ? ifTrue : ifFalse)`][133]\n\n    \n\nThe conditional operator returns one of two values based on the logical value\nof the condition.\n\n### Assignment operators\n\nAn assignment operator assigns a value to its left operand based on the value\nof its right operand.\n\n[`=`][134]\n\n     Assignment operator.\n[`*=`][135]\n\n     Multiplication assignment.\n[`/=`][136]\n\n     Division assignment.\n[`%=`][137]\n\n     Remainder assignment.\n[`+=`][138]\n\n     Addition assignment.\n[`-=`][139]\n\n     Subtraction assignment\n`<<[=`][140]\n\n     Left shift assignment.\n`>>[=`][141]\n\n     Right shift assignment.\n`>>>[=`][142]\n\n     Unsigned right shift assignment.\n`&[=`][143]\n\n     Bitwise AND assignment.\n[`^=`][144]\n\n     Bitwise XOR assignment.\n[`|=`][145]\n\n     Bitwise OR assignment.\n_ _ [`[a, b] = [1, 2]`][146]  \n_ _ [`{a, b} = {a:1, b:2}`][146]\n\n    \n\nDestructuring assignment allows you to assign the properties of an array or\nobject to variables using syntax that looks similar to array or object\nliterals.\n\n### Comma operator\n\n[`,`][147]\n\n    \n\nThe comma operator allows multiple expressions to be evaluated in a single\nstatement and returns the result of the last expression.\n\n## Functions\n\nThis chapter documents how to work with [JavaScript functions][148] to develop\nyour applications.\n\n  * [`arguments`][149]\n  * [Arrow functions][150]\n  * [Default parameters][151]\n  * [Rest parameters][152]\n\n## Additional reference pages\n\n  * [Lexical grammar][153]\n  * [Data types and data structures][154]\n  * [Strict mode][155]\n  * [Deprecated features][156]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/About\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[28]: /en-US/docs/Web/JavaScript/Reference/StopIteration\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Reflect\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Statements\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[69]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[71]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[72]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[73]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[74]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[75]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[76]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[77]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[78]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[79]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[80]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[81]: /en-US/docs/Web/JavaScript/Reference/Statements/yield\n\n[82]: https://developer.mozilla.org/en/JavaScript/New_in_JavaScript/1.7\n\n[83]:\nhttps://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators\n\n[84]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[85]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[86]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[87]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[88]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[89]: https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Reference/Global_Objects/Array\n\n[90]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators\n\n[91]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[92]: /en-US/docs/Web/JavaScript/Reference/Statements/debugger\n\n[93]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n[94]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n[95]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[96]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[97]: /en-US/docs/Web/JavaScript/Reference/Operators\n\n[98]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[99]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[100]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[101]: /en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\n\n[102]: /en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\n\n[103]: /en-US/docs/Web/JavaScript/Reference/Operators/Grouping\n\n[104]: /en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\n\n[105]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[106]: /en-US/docs/Web/JavaScript/Reference/Operators/super\n\n[107]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[108]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[109]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement\n\n[110]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[111]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[112]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[113]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\n\n[114]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation\n\n[115]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\n\n[116]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT\n\n[117]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[118]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[119]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[120]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[121]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[122]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[123]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[124]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator\n\n[125]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator\n\n[126]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[127]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality\n\n[128]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[129]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity\n\n[130]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[131]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[132]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR\n\n[133]: /en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[134]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Assignment\n\n[135]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment\n\n[136]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment\n\n[137]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment\n\n[138]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment\n\n[139]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment\n\n[140]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment\n\n[141]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment\n\n[142]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment\n\n[143]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment\n\n[144]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment\n\n[145]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment\n\n[146]: /en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n\n[147]: /en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\n\n[148]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[149]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[150]: /en-US/docs/Web/JavaScript/Reference/arrow_functions\n\n[151]: /en-US/docs/Web/JavaScript/Reference/default_parameters\n\n[152]: /en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n\n[153]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n[154]: /en-US/docs/Web/JavaScript/Data_structures\n\n[155]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n[156]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\n\n", "docset": "JavaScript", "path": ["JavaScript"], "type": "others"},
{"name": "About this reference", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/About", "parsed_url": "/javascript/javascript_reference/about_this_reference", "content": "The JavaScript reference serves as a repository of facts about the JavaScript\nlanguage. The entire language is described here in detail. As you write\nJavaScript code, you'll refer to these pages often (thus the title \"JavaScript\nreference\"). If you're learning JavaScript, or need help understanding some of\nits capabilities or features, check out the [JavaScript guide][1].\n\nThe JavaScript language is intended to be used within some larger environment,\nbe it a browser, server-side scripts, or similar. For the most part, this\nreference attempts to be environment-agnostic and does not target a web\nbrowser environment.\n\n## Where to find JavaScript information\n\nJavaScript documentation of core language features (pure [ECMAScript][2], for\nthe most part) includes the following:\n\n  * The [JavaScript guide][1]\n  * The [JavaScript reference][3]\n\nIf you are new to JavaScript, start with the [guide][1]. Once you have a firm\ngrasp of the fundamentals, you can use the [reference][3] to get more details\non individual objects and language constructs.\n\n## Structure of the reference\n\nIn the JavaScript reference you can find the following chapters:\n\n[Standard built-in objects][4]\n\n     This chapter documents all the JavaScript standard built-in objects, along with their methods and properties.\n[Statements and declarations][5]\n\n     JavaScript applications consist of statements with an appropriate syntax. A single statement may span multiple lines. Multiple statements may occur on a single line if each statement is separated by a semicolon. This isn't a keyword, but a group of keywords.\n[Expressions and operators][6]\n\n     This chapter documents all the JavaScript language operators, expressions and keywords.\n[Functions][7]\n\n     Chapter about JavaScript functions.\n[New in JavaScript][8]\n\n     Chapter about JavaScript version history.\n\n### More reference pages\n\n  * [Deprecated and obsolete features][9]\n  * [Lexical grammar][10]\n  * [Data types and data structures][11]\n\n[1]: /en-US/docs/Web/JavaScript/Guide\n\n[2]: /en-US/docs/Web/JavaScript/Language_Resources\n\n[3]: /en-US/docs/Web/JavaScript/Reference\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[8]: /en-US/docs/Web/JavaScript/New_in_JavaScript\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n[11]: /en-US/docs/Web/JavaScript/Data_structures\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "return", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/return", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/return", "content": "## Summary\n\nThe **`return` statement** ends function execution and specifies a value to be\nreturned to the function caller.\n\n## Syntax\n\n    \n    \n    return [[expression]]; \n\n`expression`\n\n     The expression to return. If omitted, `undefined` is returned instead.\n\n## Description\n\nWhen a `return` statement is called in a function, the execution of this\nfunction is stopped. If specified, a given value is returned to the function\ncaller. If the expression is omitted, `undefined` is returned instead. The\nfollowing return statements all break the function execution:\n\n    \n    \n    return;\n    return true;\n    return false;\n    return x;\n    return x + y / 3;\n    \n\n### Automatic semicolon insertion\n\nThe `return` statement is affected by [automatic semicolon insertion\n(ASI)][1]. There is no line terminator between the `return` keyword and the\nexpression allowed.\n\n    \n    \n    return\n    a + b;\n    \n    // is transformed by ASI into\n    \n    return; \n    a + b;\n    \n\n## Examples\n\n### Example: Using `return`\n\nThe following function returns the square of its argument, `x`, where `x` is a\nnumber.\n\n    \n    \n    function square(x) {\n       return x * x;\n    }\n    \n\n### Example: Interrupt a function\n\nA function immediately stops at the point where `return` is called.\n\n    \n    \n    function counter() {\n      for (var count = 1; ; count++) {  // infinite loop\n        console.log(count + \"A\"); // until 5\n          if (count === 5) {          \n            return;\n          }\n          console.log(count + \"B\");  // until 4\n        }\n      console.log(count + \"C\");  // never appears\n    }\n    \n    counter();\n    \n    // Output:\n    // 1A\n    // 1B\n    // 2A\n    // 2B\n    // 3A\n    // 3B\n    // 4A\n    // 4B\n    // 5A\n    \n\n### Example: Returning a function\n\nTo learn more about closures, read the [JavaScript guide][2].\n\n    \n    \n    function magic(x) {\n      return function calc(x) { return x * 42};\n    }\n    \n    var answer = magic();\n    answer(1337); // 56154\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Return statement' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Return statement' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Functions][5]\n  * [Closures][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Closures\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.9\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-return-statement\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "function*", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/function*", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/function*", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\n`**function***` (`function` keyword followed by an asterisk) defines a\n_generator function_.  \n  \n<table>  \n<tr>  \n<td>\n\nExpression\n\n</td> </tr>  \n<tr>  \n<td>\n\nImplemented in:\n\n</td>  \n<td>\n\nFirefox 26 (SpiderMonkey 26)\n\n</td> </tr>  \n<tr>  \n<td>\n\nECMA Version:\n\n</td>  \n<td>\n\nECMAScript 6th Edition (Draft)\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    function* gen(i){\n      while(true){\n        yield i++;\n        yield* anotherGenerator(i);\n      }\n    }\n    \n\n## Description\n\nGenerators are functions which can be exited and later re-entered. Their\ncontext (variable bindings) will be saved across re-entrances.\n\nCalling a generator function does not execute its body immediately; an\n[iterator][1] object for the function is returned instead. When the iterator's\n`next()` method is called, the generator function's body is executed until the\nfirst `**[yield**`][2] statement, which specifies the value to be returned\nfrom the iterator or, with `**yield*** anotherGenerator()`, delegates to\nanother generator function.\n\n## Examples\n\n### Simple example\n\n    \n    \n    function* idMaker(){\n        var index = 0;\n        while(true)\n            yield index++;\n    }\n    \n    var gen = idMaker();\n    \n    console.log(gen.next().value); // 0\n    console.log(gen.next().value); // 1\n    console.log(gen.next().value); // 2\n    // ...\n\n## Specification\n\n  * [Harmony proposal][3]\n  * [Draft ES6 spec: 14.4 Generator Function Definitions][4].\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n29\n\n</td>  \n<td>\n\n[26.0][6] (26.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n16 [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nyes (when?)\n\n</td>  \n<td>\n\n27.0 (27.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] Behind a flag #enable-javascript-harmony\n\n### Generators and iterators in Firefox versions before 26\n\nOlder Firefox versions implement an older version of the generators proposal.\nIn the older version, generators were defined using a regular `function`\nkeyword (without an asterisk) among other differences.\n\n## See also\n\n  * [The Iterator protocol][1]\n  * [yield][2] statement\n  * Regular [function][7] statement\n  * Other web resources: \n    * [Regenerator][8] an ES6 generator compiler to ES5\n    * [Forbes Lindesay: Promises and Generators: control flow utopia -- JSConf EU 2013][9]\n    * [Task.js][10]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/yield\n\n[3]: http://wiki.ecmascript.org/doku.php?id=harmony:generators\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-generator-function-definitions\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/26\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[8]: http://facebook.github.io/regenerator/\n\n[9]: http://www.youtube.com/watch?v=qbKWsbJ76-s\n\n[10]: http://taskjs.org/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "function", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/function", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/function", "content": "## Summary\n\nThe **function statement** declares function with the specified parameters.\n\nYou can also define functions using the [`Function`][1] constructor and a\n[`function expression`][2].\n\n## Syntax\n\n    \n    \n    function _name_([_param_,[, _param_,[..., _param_]]]) {\n       [_statements_]\n    }\n    \n\n`name`\n\n     The function name.\n\n`param`\n\n     The name of an argument to be passed to the function. A function can have up to 255 arguments.\n\n`statements`\n\n     The statements which comprise the body of the function.\n\n## Description\n\nA function created with a function declaration is a `Function` object and has\nall the properties, methods and behavior of `Function` objects. See\n[`Function`][1] for detailed information on functions.\n\nA function can also be created using an expression (see [`function\nexpression`][2]).\n\nBy default, functions return `undefined`. To return any other value, the\nfunction must have a [`return`][3] statement that specifies the value to\nreturn.\n\n### Conditionally created functions\n\nFunctions can be conditionally declared, that is, a function declaration can\nbe nested within an `if` statement. Some browsers will treat such conditional\ndeclarations as an unconditional declaration and create the function whether\nthe condition is true or not. Therefore they should not be used.\n\n### Function declaration hoisting\n\nFunction declarations in JavaScript are hoisting the function definition. You\ncan use the function before you declared it:\n\n    \n    \n    hoisted(); // logs \"foo\"\n    \n    function hoisted() {\n      console.log(\"foo\");\n    }\n    \n\nNote that [function expressions][2] are not hoisted:\n\n    \n    \n    notHoisted(); // TypeError: notHoisted is not a function\n    \n    var notHoisted = function() {\n       console.log(\"bar\");\n    };\n    \n\n## Examples\n\n### Example: Using `function`\n\nThe following code declares a function that returns the total amount of sales,\nwhen given the number of units sold of products `a`, `b`, and `c`.\n\n    \n    \n    function calc_sales(units_a, units_b, units_c) {\n       return units_a*79 + units_b * 129 + units_c * 699;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function definition' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function definitions' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Functions and function scope][6]\n  * [`Function`][1]\n  * [`function expression`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-13\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-definitions\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "for...in", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/for...in", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/for...in", "content": "## Summary\n\nThe **`for..in` statement** iterates over the enumerable properties of an\nobject, in arbitrary order. For each distinct property, statements can be\nexecuted.\n\n## Syntax\n\n    \n    \n    for (variable in object) {_..._\n    }\n\n`variable`\n\n     A different property name is assigned to _variable_ on each iteration.\n`object`\n\n     Object whose enumerable properties are iterated.\n\n## Description\n\nA `for...in` loop only\u00a0iterates over enumerable properties. Objects created\nfrom built\u2013in constructors like `Array` and `Object` have inherited\nnon\u2013enumerable properties from `Object.prototype` and `String.prototype`, such\nas\u00a0[`String`][1]'s [`indexOf()`][2] method or [`Object`][3]'s\n[`toString()`][4] method. The loop will iterate over all enumerable properties\nof the object itself and those the object inherits from its constructor's\nprototype (properties closer to the object in the prototype chain override\nprototypes' properties).\n\n### Deleted, added or modified properties\n\nA `for...in` loop iterates over the properties of an object in an arbitrary\norder (see the [`delete` operator][5] for more on why one cannot depend on the\nseeming orderliness of iteration, at least in a cross-browser setting). If a\nproperty is modified in one iteration and then visited at a later time, its\nvalue in the loop is its value at that later time. A property that is deleted\nbefore it has been visited will not be visited later. Properties added to the\nobject over which iteration is occurring may either be visited or omitted from\niteration. In general it is best not to add, modify or remove properties from\nthe object during iteration, other than the property currently being visited.\nThere is no guarantee whether or not an added property will be visited,\nwhether a modified property (other than the current one) will be visited\nbefore or after it is modified, or whether a deleted property will be visited\nbefore it is deleted.\n\n### Array iteration and `for...in`\n\n**Note:** **`for..in` should not be used to iterate over an [`Array`][6] where index order is important.**\n\nArray indexes are just enumerable properties with integer names and are\notherwise identical to general Object properties. There is no guarantee that\n`for...in` will return the indexes in any particular order and it will return\nall enumerable properties, including those with non\u2013integer names and those\nthat are inherited.\n\nBecause the order of iteration is implementation dependent, iterating over an\narray may not visit elements in a consistent order. Therefore it is better to\nuse a [`for][7]` loop with a numeric index (or [`Array.forEach][8]` or the\n[`for...of][9]` loop) when iterating over arrays where the order of access is\nimportant.\n\n### Iterating over own properties only\n\nIf you only want to consider properties attached to the object itself, and not\nits prototypes, use [`getOwnPropertyNames][10]` or perform a\n[`hasOwnProperty][11]` check ([`propertyIsEnumerable][12]` can also be used).\nAlternatively, if you know there won't be any outside code interference, you\ncan extend built-in prototypes with a check method.\n\n## Examples\n\nThe following function takes as its argument an object. It then iterates over\nall the object's enumerable properties and returns a string of the property\nnames and their values.\n\n    \n    \n    var obj = {a:1, b:2, c:3};\n        \n    for (var prop in obj) {\n      console.log(\"o.\" + prop + \" = \" + obj[prop]);\n    }\n    \n    // Output:\n    // \"o.a = 1\"\n    // \"o.b = 2\"\n    // \"o.c = 3\"\n\nThe following function illustrates the use of [`hasOwnProperty()`][11]: theinherited properties are not displayed.            var triangle =\n\n{a:1, b:2, c:3};\n    \n    function ColoredTriangle() {\n      this.color = \"red\";\n    }\n    \n    ColoredTriangle.prototype = triangle;\n    \n    var obj = new ColoredTriangle();\n    \n    for (var prop in obj) {\n      if( obj.hasOwnProperty( prop ) ) {\n        console.log(\"o.\" + prop + \" = \" + obj[prop]);\n      } \n    }\n    \n    // Output:\n    // \"o.color = red\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'for...in statement' in that specification.][13]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'for...in statement' in that specification.][14]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][15].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`for...of`][9] \\- a similar statement that iterates over the property _values_\n  * [`for each...in`][16] \\- a similar statement, but iterates over the values of object's properties, rather than the property names themselves (deprecated)\n  * [`for][7]`\n  * [Generator expressions][17] (uses the `for...in` syntax)\n  * [Enumerability and ownership of properties][18]\n  * [`Object.getOwnPropertyNames()`][10]\n  * [`Object.prototype.hasOwnProperty()`][11]\n  * [`Array.prototype.forEach()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[13]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.4\n\n[14]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-in-and-for-of-statements\n\n[15]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[17]: /en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n\n[18]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "for each...in", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/for_each...in", "content": "The for each...in statement is deprecated as the part of ECMA-357 ([E4X][1])\nstandard. E4X support has been removed, but for each...in will not be disabled\nand removed because of backward compatibility considerations. Consider using\n[for...of][2] instead. (Please refer to [bug\u00a0791343][3].)\n\n## Summary\n\nThe` **for each...in**`** statement** iterates a specified variable over all\nvalues of object's properties. For each distinct property, a specified\nstatement is executed.\n\n## Syntax\n\n    \n    \n    for each (_variable_ in _object_) {\n      _statement_\n    }\n\n`variable`\n\n     Variable to iterate over property values, optionally declared with the `var` keyword. This variable is local to the function, not to the loop.\n\n`object`\n\n     Object for which the properties are iterated.\n\n`statement`\n\n     A statement to execute for each property. To execute multiple statements within the loop, use a [block][4] statement (`{ ... }`) to group those statements.\n\n## Description\n\nSome built-in properties are not iterated over. These include all built-in\nmethods of objects, e.g. `String`'s `indexOf` method. However, all user-\ndefined properties are iterated over.\n\n## Examples\n\n### Example: Using `for each...in`\n\n**Warning:** Never use a loop like this on arrays. Only use it on objects. See [`for...in`][5] for more details.\n\nThe following snippet iterates over an object's properties, calculating their\nsum:\n\n    \n    \n    var sum = 0;\n    var obj = {prop1: 5, prop2: 13, prop3: 8};\n    \n    for each (var item in obj) {\n      sum += item;\n    }\n    \n    print(sum); // prints \"26\", which is 5+13+8\n\n## Specifications\n\nNot part of a current ECMA-262 specification. Implemented in JavaScript 1.6\nand deprecated.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[1.5][6] (1.8)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`for...in][5]` \\- a similar statement that iterates over the property _names_.\n  * [`for...of][2]` \\- a similar statement that iterates over the property _values_ but there is some behavior that is different from `for each...in` statements.\n  * [`for][7]`\n\n[1]: /en-US/docs/Archive/Web/E4X\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=791343\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[6]: /en-US/Firefox/Releases/1.5\n\n[7]: /en-US/docs/JavaScript/Reference/Statements/for\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "debugger", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/debugger", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/debugger", "content": "## Summary\n\nThe **debugger statement** invokes any available debugging functionality, such\nas setting a breakpoint. If no debugging functionality is available, this\nstatement has no effect.\n\n## Syntax\n\n    \n    \n    debugger;\n\n## Examples\n\nThe following example shows code where a debugger statement has been inserted,\nto invoke a debugger (if one exists) when the function is called.\n\n    \n    \n    function potentiallyBuggyCode() {\n        debugger;\n        // do potentially buggy stuff to examine, step through, etc.\n    }\n\nWhen the debugger is invoked, execution is paused at the debugger statement.\nIt is like a breakpoint in the script source.\n\n![Paused at a debugger statement.][1]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Debugger statement' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Debugger statement' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Debugging JavaScript][4]\n  * [The Debugger in the Firefox Developer Tools][5]\n\n[1]: https://mdn.mozillademos.org/files/6963/Screen%20Shot%202014-02-07%20at%209.14.35%20AM.png\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.15\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-debugger-statement\n\n[4]: /en-US/docs/Debugging_JavaScript\n\n[5]: /en-US/docs/Tools/Debugger\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "do...while", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/do...while", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/do...while", "content": "## Summary\n\nThe `do...while` statement creates a loop that executes a specified statement\nuntil the test condition evaluates to false. The condition is evaluated after\nexecuting the statement, resulting in the specified statement executing at\nleast once.\n\n## Syntax\n\n    \n    \n    do\n       _statement_\n    while (_condition_);\n    \n\n`statement`\n\n     A statement that is executed at least once and is re-executed each time the condition evaluates to true. To execute multiple statements within the loop, use a [`block`][1] statement (`{ ... }`) to group those statements.\n\n`condition`\n\n     An expression evaluated after each pass through the loop. If `condition` evaluates to true, the `statement` is re-executed. When `condition` evaluates to false, control passes to the statement following the `do...while`.\n\n## Examples\n\n### Example: Using `do...while`\n\nIn the following example, the `do...while` loop iterates at least once and\nreiterates until `i` is no longer less than 5.\n\n    \n    \n    var i = 0;\n    do {\n       i += 1;\n       console.log(i);\n    } while (i < 5);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'do-while statement' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'do-while statement' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nTrailing ; is now optional.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nIE6+\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`while`][4]\n  * [`for`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.1\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-do-while-statement\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "for", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/for", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/for", "content": "## Summary\n\nThe **for statement** creates a loop that consists of three optional\nexpressions, enclosed in parentheses and separated by semicolons, followed by\na statement executed in the loop.\n\n## Syntax\n\n    \n    \n    for ([_initialization_]; [_condition_]; [_final-expression_])\n       _statement_\n    \n\n`initialization`\n\n     An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the `var` keyword. These variables are not local to the loop, i.e. they are in the same scope the `for` loop is in. The result of this expression is discarded.\n`condition`\n\n     An expression to be evaluated before each loop iteration. If this expression evaluates to true, `statement` is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the `for` construct.\n`final-expression`\n\n     An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of `condition`. Generally used to update or increment the counter variable.\n`statement`\n\n     A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a [block][1] statement (`{ ... }`) to group those statements. To execute no statement within the loop, use an [empty][2] statement (`;`).\n\n## Examples\n\n### Example: Using `for`\n\nThe following `for` statement starts by declaring the variable `i` and\ninitializing it to `0`. It checks that `i` is less than nine, performs the two\nsucceeding statements, and increments `i` by 1 after each pass through the\nloop.\n\n    \n    \n    for (var i = 0; i < 9; i++) {\n       console.log(i);\n       // more statements\n    }\n    \n\n### Example: Optional `for` expressions\n\nAll three expressions in the head of the `for` loop are optional.\n\nFor example, in the _initialization_ block it is not required to initialize\nvariables:\n\n    \n    \n    var i = 0;\n    for (; i < 9; i++) {\n        console.log(i);\n        // more statements\n    }\n    \n\nLike the _initialization_ block, the _condition_ block is also optional. If\nyou are omitting this expression, you must make sure to break the loop in the\nbody in order to not create an infinite loop.\n\n    \n    \n    for (var i = 0;; i++) {\n       console.log(i);\n       if (i > 3) break;\n       // more statements\n    }\n\nYou can also omit all three blocks. Again, make sure to use a [`break][3]`\nstatement to end the loop and also modify (increase) a variable, so that the\ncondition for the break statement is true at some point.\n\n    \n    \n    var i = 0;\n    \n    for (;;) {\n      if (i > 3) break;\n      console.log(i);\n      i++;\n    }\n    \n\n### Example: Using `for` with an empty statement\n\nThe following `for` cycle calculates the offset position of a node in the _\n[final-expression]_ section, and therefore it does not require the use of a\n`statement` or [`block][1] statement` section, an [empty][2] statement is used\ninstead.\n\n    \n    \n    function showOffsetPos (sId) {\n      var nLeft = 0, nTop = 0;\n    \n      for (var oItNode = document.getElementById(sId); // initialization\n           oItNode; // condition\n           nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent) // final-expression\n           /* empty statement */ ;\n      \n      console.log(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\");\n    }\n    \n    // Example call:\n    \n    showOffsetPos(\"content\");\n    \n    // Output:\n    // \"Offset position of \"content\" element:\n    // left: 0px;\n    // top: 153px;\"\n\n**Note:** In this case, when you do not use the `statement` section, **a semicolon is put immediately after the declaration of the cycle**.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'for statement' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'for statement' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`break`][3]\n  * [`continue`][6]\n  * [`empty`][7]\n  * [`while`][8]\n  * [`do...while`][9]\n  * [`for...in`][10]\n  * `[`for...of`][11]`\n\n[1]: /en-US/docs/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.3\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-statement\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/empty\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "for...of", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/for...of", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/for...of", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `for...of` statement creates a loop Iterating over [iterable objects][1]\n(including [`Array`][2],\u00a0[`Map`][3], [`Set`][4],\u00a0[arguments][5]\u00a0object and so\non), invoking a custom iteration hook with statements to be executed for the\nvalue of each distinct property.\n\n## Syntax\n\n    \n    \n    for (_variable_ of _object_)\n      _statement_\n    \n\n`variable`\n\n     On each iteration a value of a different property is assigned to _variable_.\n`object`\n\n     Object whose enumerable properties are iterated.\n\n## Examples\n\n### Difference between `for...of` and `for...in`\n\nThe following example shows the difference between a `for...of` loop and a\n[`for...in][6]` loop. While `for...in` iterates over property names,\n`for...of` iterates over property values:\n\n    \n    \n    let arr = [ 3, 5, 7 ];\n    arr.foo = \"hello\";\n    \n    for (let i in arr) {\n       console.log(i); // logs \"0\", \"1\", \"2\", \"foo\"\n    }\n    \n    for (let i of arr) {\n       console.log(i); // logs \"3\", \"5\", \"7\"\n    }\n    \n\n### Using `Array.prototype.forEach()`\n\nTo get the same property values the `for...of` loop would return, you can also\nuse the [`Array.prototype.forEach()`][7] method:\n\n    \n    \n    let arr = [ 3, 5, 7 ];\n    arr.foo = \"hello\";\n    \n    arr.forEach(function (element, index) {\n        console.log(element); // logs \"3\", \"5\", \"7\"\n        console.log(index);   // logs \"0\", \"1\", \"2\"\n    });\n    \n    // or with Object.keys()\n    \n    Object.keys(arr).forEach(function (element, index) {\n        console.log(arr[element]); // logs \"3\", \"5\", \"7\", \"hello\"\n        console.log(arr[index]);   // logs \"3\", \"5\", \"7\"\n    });\n\n### Iterating over DOM collections\n\nIterating over DOM collections like [`NodeList`][8]: the following exampleadds a\n\n`read` class to paragraphs that are direct descendants of an article:\n\n    \n    \n    // Note: This will only work in platforms that have\n    // implemented NodeList.prototype[Symbol.iterator]\n    let articleParagraphs = document.querySelectorAll(\"article > p\");\n    \n    for (let paragraph of articleParagraphs) {\n      paragraph.classList.add(\"read\");\n    }\n    \n\n### Iterating over generators\n\nYou can also iterate over [generators][9]:\n\n    \n    \n    function* fibonacci() { // a generator function\n        let [prev, curr] = [0, 1];\n        for (;;) {\n            [prev, curr] = [curr, prev + curr];\n            yield curr;\n        }\n    }\n    \n    for (let n of fibonacci()) {\n        // truncate the sequence at 1000\n        if (n > 1000)\n            break;\n        print(n);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'for...of statement' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n29[1]  \n38\n\n</td>  \n<td>\n\n[13][11] (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n29[1]  \n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n[1]\u00a0The feature is available behind a preference. In chrome://flags, activate\nthe entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [for each...in][12] \\- a similar statement, but iterates over the values of object's properties, rather than the property names themselves (deprecated).\n  * [`Array.prototype.forEach()`][7]\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[8]: /en-US/docs/Web/API/NodeList\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-for-in-and-for-of-statements\n\n[11]: /en-US/Firefox/Releases/13\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "while", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/while", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/while", "content": "## Summary\n\nThe **while statement** creates a loop that executes a specified statement as\nlong as the test condition evaluates to true. The condition is evaluated\nbefore executing the statement.\n\n## Syntax\n\n    \n    \n    while (_condition_) {\n      _statement_\n    }\n\n`condition`\n\n     An expression evaluated before each pass through the loop. If this condition evaluates to true, `statement` is executed. When condition evaluates to false, execution continues with the statement after the `while` loop.\n`statement`\n\n     A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a [block][1] statement (`{ ... }`) to group those statements.\n\n## Examples\n\nThe following `while` loop iterates as long as `n` is less than three.\n\n    \n    \n    var n = 0;\n    var x = 0;\n    \n    while (n < 3) {\n      n++;\n      x += n;\n    }\n\nEach iteration, the loop increments `n` and adds it to `x`. Therefore, `x` and\n`n` take on the following values:\n\n  * After the first pass: `n` = 1 and `x` = 1\n  * After the second pass: `n` = 2 and `x` = 3\n  * After the third pass: `n` = 3 and `x` = 6\n\nAfter completing the third pass, the condition `n` < 3 is no longer true, so\nthe loop terminates.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'while statement' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'while statement' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`do...while`][4]\n  * [`for`][5]\n\n[1]: /en-US/docs/JavaScript/Reference/Statements/block\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.6.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-while-statement\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "const", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/const", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/const", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe** const declaration** creates a read-only named constant.\n\n## Syntax\n\n    \n    \n    const _name1 = _value1 [_, _name2_ = _value2__ [_, ... [_, _nameN_ = _valueN]]]]_;\n\n`nameN`\n\n     Constant name. It can be any legal identifier.\n`valueN`\n\n     Value of the constant. It can be any legal expression.\n\n## Description\n\nThis declaration creates a constant that can be global or local to the\nfunction in which it is declared. Constants follow the same scope rules as\nvariables.\u00a0 The value of a constant cannot change through re-assignment, and a\nconstant cannot be re-declared. Because of this, although it is possible to\ndeclare a constant without initializing it, it would be useless to do so.\u00a0 A\nconstant cannot share its name with a function or a variable in the same\nscope.\n\n## Examples\n\nThe following example demonstrates how constants behave. Try this in you\nbrowser console. In Firefox and Chrome you will see this behavior:\n\n    \n    \n    // define my_fav as a constant and give it the value 7\n    const my_fav = 7;\n    \n    // this will fail silently in Firefox and Chrome (but does not fail in Safari)\n    my_fav = 20;\n    \n    // will print 7\n    console.log(\"my favorite number is: \" + my_fav);\n    \n    // trying to redeclare a constant will either throw and error, of fail silently\n    const my_fav = 20;\n    \n    // the name my_fav is reserved for constant above, so this will also fail\n    var my_fav = 20; \n    \n    // my_fav is still 7\n    console.log(\"my favorite number is \" + my_fav);\n    \n\nWhile almost all browsers today allow you to declare named constants, not all\nof them (notably Safari) respect the fact that it should be read only.\nTherefore, while you can use constants as a way of indicating to other\ndevelopers that you are creating a constant instead of a variable, currently\nyou can not rely on all browsers to enforce this and prevent the rest of the\ncode from changing your constant.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Let and Const Declarations' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n12.00 (maybe earlier)\n\n</td>  \n<td>\n\n5.1.7 (maybe earlier)\n\n</td> </tr>  \n<tr>  \n<td>\n\nReassignment fails\n\n</td>  \n<td>\n\n20\n\n</td>  \n<td>\n\n[13][2] (13)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nReassignment fails\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n### Notes\n\nThe current implementation of `const` in Firefox is a Mozilla-specific\nextension and is not part of ECMAScript 5.\n\nIt is supported in Firefox & Chrome (V8). As of Safari 5.1.7 and Opera 12.00,\nif you define a variable with `const` in these browsers, you can still change\nits value later. It is not supported in Internet Explorer 6-10, but is\nincluded in Internet Explorer 11.\n\nThe `const` keyword currently declares the constant in the function scope\n(like variables declared with `var`).\n\nFirefox, at least since version 13, throws a [`TypeError`][3] if you redeclare\na constant. None of the major browsers produce any notices or errors if you\nassign another value to a constant. The return value of such an operation is\nthat of the new value assigned, but the reassignment is unsuccessful only in\nFirefox 13 and Chrome (at least since version 20).\n\n`const` is defined in ECMAScript 6 (see above), but with different semantics.\nSimilar to variables declared with the `let` statement, constants declared\nwith `const` will be [block-scoped, do not hoist][4], and throw a SyntaxError\nexception if code attempts to access the binding before it has been declared.\nBugs for `const` ES6 compliance are [bug\u00a0950547][5] and [bug\u00a0611388][4].\n\n## See also\n\n  * [`var`][6]\n  * [`let`][7]\n  * [Constants in the JavaScript Guide][8]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=611388\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=950547\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[8]: /en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Constants\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "let", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/let", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/let", "content": "## Summary\n\nThe **`let`** statement declares a block scope local variable, optionally\ninitializing it to a value.\n\n**Note:**\u00a0The `let` keyword is only available to code blocks in HTML\u00a0wrapped in a `<script type=\"application/javascript;version=1.7\">` block (or higher version). [XUL][1] script tags have access to these features without needing this special block.\n\n## Syntax\n\n    \n    \n    let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];\n\n### Parameters\n\n`var1`, `var2`, \u2026, `varN`\n\n     Variable name. It can be any legal identifier.\n`value1`, `value2`, \u2026, `valueN`\n\n     Initial value of the variable. It can be any legal expression.\n\n## Description\n\n`let` allows you to declare variables, limiting its scope to the block,\nstatement, or expression on which it is used. This is unlike the [`var`][2]\nkeyword, which defines a variable globally, or locally to an entire function\nregardless of block scope.\n\n### Block scope with `let`\n\nThe `let` keyword can also be used to define variables inside a block.\n\n    \n    \n    if (x > y) {\n      let gamma = 12.7 + y;\n      i = gamma * x;\n    }\n    \n\nYou can use `let` definitions to alias pseudo-namespaced code in extensions.\n(See [Security best practices in extensions][3].)\n\n    \n    \n    let Cc = Components.classes, Ci = Components.interfaces;\n    \n\n`let` sometimes makes the code cleaner when inner functions are used.\n\n    \n    \n    var list = document.getElementById(\"list\");\n    \n    for (var i = 1; i <= 5; i++) {\n      var item = document.createElement(\"LI\");\n      item.appendChild(document.createTextNode(\"Item \" + i));\n    \n      let j = i;\n      item.onclick = function (ev) {\n        console.log(\"Item \" + j + \" is clicked.\");\n      };\n      list.appendChild(item);\n    }\n    \n\nThe example above works as intended because the five instances of the\n(anonymous) inner function refer to five different instances of variable `j`.\nNote that it does not work as intended if you replace `let` by `var` or if you\nremove the variable `j` and simply use the variable `i` in the inner function.\n\n#### Scoping rules\n\nVariables declared by `let` have as their scope the block in which they are\ndefined, as well as in any sub-blocks in which they aren't redefined. In this\nway, `let` works very much like `var`. The main difference is that the scope\nof a `var` variable is the entire enclosing function:\n\n    \n    \n    function varTest() {\n      var x = 31;\n      if (true) {\n        var x = 71;  // same variable!\n        console.log(x);  // 71\n      }\n      console.log(x);  // 71\n    }\n    \n    function letTest() {\n      let x = 31;\n      if (true) {\n        let x = 71;  // different variable\n        console.log(x);  // 71\n      }\n      console.log(x);  // 31\n    }\n    \n\nAt the top level of programs and functions, `let` behaves exactly like `var`\ndoes. For example:\n\n    \n    \n    var x = 'global';\n    let y = 'global';\n    console.log(this.x);\n    console.log(this.y);\n    \n\nThe output displayed by this code will display \"global\" twice.\n\n### Temporal dead zone and errors with `let`\n\nRedeclaration of the same variable in the same block scope raises a\n[`TypeError][4]`.\n\n    \n    \n    if (x) {\n      let foo;\n      let foo; // TypeError thrown.\n    }\n\nHowever, function bodies do not have this limitation!\n\n    \n    \n    function do_something() {\n      let foo;\n      let foo; // This works fine.\n    }\n\nIn ECMAScript 6, `let` **does not hoist** the variable to the top of the\nblock. If you reference a variable in a block before the `let` declaration for\nthat variable is encountered, this results in a [`ReferenceError][5]`, because\nthe variable is in a \"temporal dead zone\" from the start of the block until\nthe declaration is processed.\n\n    \n    \n    function do_something() {\n      console.log(foo); // ReferenceError\n      let foo = 2;\n    }\n\nYou may encounter errors in [`switch`][6] statements because there is only one\nunderlying block.\n\n    \n    \n    switch (x) {\n      case 0:\n        let foo;\n        break;\n        \n      case 1:\n        let foo; // TypeError for redeclaration.\n        break;\n    }\n\n### `let`-scoped variables in `for` loops\n\nYou can use the `let` keyword to bind variables locally in the scope of `for`\nloops. This is different from the var keyword in the head of a for loop, which\nmakes the variables visible in the whole function containing the loop.\n\n    \n    \n    var i=0;\n    for ( let i=i ; i < 10 ; i++ ) {\n      console.log(i);\n    }\n    \n\n#### Scoping rules\n\n    \n    \n    for (let expr1; expr2; expr3) statement\n    \n\nIn this example, expr2, expr3, and statement are enclosed in an implicit block\nthat contains the block local variables declared by `let expr1`. This is\ndemonstrated in the first loop above.\n\n## Examples\n\n### `let` vs `var`\n\nUsed inside a block, _let_ limits the variable's scope to that block. Note the\ndifference between _var _whose scope is inside the function where it is\ndeclared\n\n    \n    \n    var a = 5;\n    var b = 10;\n    \n    if (a === 5) {\n      let a = 4; // The scope is inside the if-block\n      var b = 1; // The scope is inside the function\n    \n      console.log(a);  // 4\n      console.log(b);  // 1\n    } \n    \n    console.log(a); // 5\n    console.log(b); // 1\n\n### `let` in loops\n\nYou can use the _let_ keyword to bind variables locally in the scope of loops\ninstead of using a global variable (defined using _var_) for that.\n\n    \n    \n    for (let i = 0; i<10; i++) {\n      console.log(i); // 0, 1, 2, 3, 4 ... 9\n    }\n    \n    console.log(i); // i is not defined\n\n## Non-standard `let` extensions\n\nThe `let` block and `let` expression syntax is non-standard and will be\nremoved in the future. Do not use them! See [bug\u00a01023609][7] for more details.\n\n### `let` block\n\nThe **`let` block** provides a way to associate values with variables within\nthe scope of a block, without affecting the values of like-named variables\noutside the block.\n\n#### Syntax\n\n    \n    \n    let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) statement;\n\n#### Description\n\nThe `let` block provides local scoping for variables. It works by binding zero\nor more variables in the lexical scope of a single block of code; otherwise,\nit is exactly the same as a block statement. Note in particular that the scope\nof a variable declared inside a `let` block using `var` is still the same as\nif it had been declared outside the `let` block; such variables still have\nfunction scoping. When using the `let` block syntax, the parentheses following\n`let` are required. Failure to include them will result in a syntax error.\n\n#### Example\n\n    \n    \n    var x = 5;\n    var y = 0;\n    \n    let (x = x+10, y = 12) {\n      console.log(x+y); // 27\n    }\n    \n    console.log(x + y); // 5\n    \n\nThe rules for the code block are the same as for any other code block in\nJavaScript. It may have its own local variables established using the `let`\ndeclarations.\n\n#### Scoping rules\n\nThe scope of variables defined using `let` is the `let` block itself, as well\nas any inner blocks contained inside it, unless those blocks define variables\nby the same names.\n\n### `let` expressions\n\nThe **`let` expression** lets you establish variables scoped only to a single\nexpression.\n\n#### Syntax\n\n    \n    \n    let (var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]) expression;\n\n#### Example\n\nYou can use `let` to establish variables that are scoped only to a single\nexpression:\n\n    \n    \n    var a = 5;\n    let(a = 6) console.log(a); // 6\n    console.log(a); // 5\n\n#### Scoping rules\n\nGiven a `let` expression:\n\n    \n    \n    let (decls) expr\n    \n\nThere is an implicit block created around expr.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Let and Const Declarations' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Does not specify let expressions or let statements.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[2.0][10] (1.8.1) [1]\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n17\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nTemporal dead zone\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n[35][11] (35) [1]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\n`let` expression _ _\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[2.0][10] (1.8.1) [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`let` block _ _\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[2.0][10] (1.8.1) [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n1.0 (1.8.1) [1]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nTemporal dead zone\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n35.0 (35) [1]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\n`let` expression _ _\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.8.1) [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`let` block _ _\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.8.1) [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### Firefox-specific notes\n\n  *[1]: Only available to code blocks in HTML\n\n\u00a0wrapped in a `<script type=\"application/javascript;version=1.7\">` block (or higher version). [XUL][1] script tags have access to these features without needing this special block. See [bug\u00a0932517][12] and [bug\u00a0932513][13].\n  * ES6 compliance for `let` in SpIderMonkey is tracked in [bug\u00a0950547][14] and non-standard extensions are going to be removed in the future [bug\u00a01023609][7].\n\n## See also\n\n  * [`var`][15]\n  * [`const`][16]\n\n[1]: /en-US/docs/XUL\n\n[2]: /en-US/docs/JavaScript/Reference/Statements/var\n\n[3]: /en-US/docs/Security_best_practices_in_extensions\n\n[4]: /en-US/docs/JavaScript/Reference/Global_Objects/TypeError\n\n[5]: /en-US/docs/JavaScript/Reference/Global_Objects/ReferenceError\n\n[6]: /en-US/docs/JavaScript/Reference/Statements/switch\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=1023609\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[10]: /en-US/Firefox/Releases/2\n\n[11]: /en-US/Firefox/Releases/35\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=932517\n\n[13]: https://bugzilla.mozilla.org/show_bug.cgi?id=932513\n\n[14]: https://bugzilla.mozilla.org/show_bug.cgi?id=950547\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "Method definitions", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions", "parsed_url": "/javascript/javascript_reference/functions/method_definitions", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nStarting with ECMAScript 6, a shorter syntax for method definitions on objects\ninitializers is introduced. It is a shorthand for a function assigned to the\nmethod's name.\n\n## Syntax\n\n    \n    \n    var obj = {\n      property([parameters]) {},\n      get property() {},\n      set property(value) {},\n      * generator() {}\n    };\n    \n\n## Description\n\nThe shorthand syntax is similar to the [getter][1] and [setter][2] syntax\nintroduced In ECMAScript 5.\n\nGiven the following code:\n\n    \n    \n    var obj = {\n      foo: function() {},\n      bar: function() {}\n    };\n\nYou are now able to shorten this to:\n\n    \n    \n    var obj = {\n      foo() {},\n    \u00a0 bar() {}\n    };\n\n### Shorthand generator methods\n\n[Generator methods][3] can be defined using the shorthand syntax as well. Note\nthat the asterisk (*) in the shorthand syntax can only be noted before the\ngenerator property name. That is, `* g(){}` will work and` g *(){}` will not.\n\n    \n    \n    // Using a named property (pre-ES6)\n    var obj2 = {\n      g: function*() {\n        var index = 0;\n        while(true)\n          yield index++;\n      }\n    };\n    \n    // The same object using shorthand syntax\n    var obj2 = { \n      * g() {\n        var index = 0;\n        while(true)\n          yield index++;\n      }\n    };\n    \n    var it = obj2.g();\n    console.log(it.next().value); // 0\n    console.log(it.next().value); // 1\n\n## Examples\n\n### Simple test case\n\n    \n    \n    var obj = {\n      a : \"foo\",\n      b(){ return this.a; }\n    };\n    console.log(obj.b()); // \"foo\"\n    \n\n### Computed property names\n\nThe shorthand syntax also supports computed property names.\n\n    \n    \n    var bar = {\n      foo0 : function (){return 0;},\n      foo1(){return 1;},\n      [\"foo\" + 2](){return 2;},\n    };\n    \n    console.log(bar.foo0()); // 0\n    console.log(bar.foo1()); // 1\n    console.log(bar.foo2()); // 2\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Method definitions' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nMethod definition shorthand\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][6] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nMethod definition shorthand\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`get][1]`\n  * [`set][2]`\n  * [Lexical grammar][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions/get\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions/set\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-method-definitions\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/34\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "try...catch", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/try...catch", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/try...catch", "content": "## Summary\n\nThe **`try...catch` statement** marks a block of statements to try, and\nspecifies a response, should an exception be thrown.\n\n## Syntax\n\n    \n    \n    try {\n       _try_statements_\n    }\n    [catch (_exception_var_1_ if _condition_1_) { // non-standard\n       _catch_statements_1_\n    }]\n    ...\n    [catch (_exception_var_2_) {\n       _catch_statements_2_\n    }]\n    [finally {\n       _finally_statements_\n    }]\n    \n\n`try_statements`\n\n     The statements to be executed.\n\n`catch_statements_1`, `catch_statements_2`\n\n     Statements that are executed if an exception is thrown in the `try` block.\n\n`exception_var_1`, `exception_var_2`\n\n     An identifier to hold an exception object for the associated `catch` clause.\n\n`condition_1`\n\n     A conditional expression.\n\n`finally_statements`\n\n     Statements that are executed after the `try` statement completes. These statements execute regardless of whether or not an exception was thrown or caught.\n\n## Description\n\nThe `try` statement consists of a `try` block, which contains one or more\nstatements, and at least one `catch` clause or a `finally` clause, or both.\nThat is, there are three forms of the `try` statement:\n\n  1. `try...catch`\n  2. `try...finally`\n  3. `try...catch...finally`\n\nA `catch` clause contain statements that specify what to do if an exception is\nthrown in the `try` block. That is, you want the `try` block to succeed, and\nif it does not succeed, you want control to pass to the `catch` block. If any\nstatement within the `try` block (or in a function called from within the\n`try` block) throws an exception, control immediately shifts to the `catch`\nclause. If no exception is thrown in the `try` block, the `catch` clause is\nskipped.\n\nThe `finally` clause executes after the `try` block and `catch` clause(s)\nexecute but before the statements following the `try` statement. It always\nexecutes, regardless of whether or not an exception was thrown or caught.\n\nYou can nest one or more `try` statements. If an inner `try` statement does\nnot have a `catch` clause, the enclosing `try` statement's `catch` clause is\nentered.\n\nYou also use the `try` statement to handle JavaScript exceptions. See the\n[JavaScript Guide][1] for more information on JavaScript exceptions.\n\n### Unconditional `catch` clause\n\nWhen a single, unconditional `catch` clause is used, the `catch` block is\nentered when any exception is thrown. For example, when the exception occurs\nin the following code, control transfers to the `catch` clause.\n\n    \n    \n    try {\n       throw \"myException\"; // generates an exception\n    }\n    catch (e) {\n       // statements to handle any exceptions\n       logMyErrors(e); // pass exception object to error handler\n    }\n    \n\n### Conditional `catch` clauses\n\n**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\nYou can also use one or more conditional `catch` clauses to handle specific\nexceptions. In this case, the appropriate `catch` clause is entered when the\nspecified exception is thrown. In the following example, code in the `try`\nblock can potentially throw three exceptions: [`TypeError`][2],\n[`RangeError`][3], and [`EvalError`][4]. When an exception occurs, control\ntransfers to the appropriate `catch` clause. If the exception is not one of\nthe specified exceptions and an unconditional `catch` clause is found, control\ntransfers to that `catch` clause.\n\nIf you use an unconditional `catch` clause with one or more conditional\n`catch` clauses, the unconditional `catch` clause must be specified last.\nOtherwise, the unconditional `catch` clause will intercept all types of\nexception before they can reach the conditional ones.\n\n    \n    \n    try {\n       myroutine(); // may throw three exceptions\n    } catch (e if e instanceof TypeError) {\n       // statements to handle TypeError exceptions\n    } catch (e if e instanceof RangeError) {\n       // statements to handle RangeError exceptions\n    } catch (e if e instanceof EvalError) {\n       // statements to handle EvalError exceptions\n    } catch (e) {\n       // statements to handle any unspecified exceptions\n       logMyErrors(e); // pass exception object to error handler\n    }\n    \n\nNote: This functionality is not part of the ECMAScript specification.\n\n### The exception identifier\n\nWhen an exception is thrown in the `try` block, _`exception_var`_ (e.g. the\n`e` in `catch (e)`) holds the value specified by the `throw` statement. You\ncan use this identifier to get information about the exception that was\nthrown.\n\nThis identifier is local to the `catch` clause. That is, it is created when\nthe `catch` clause is entered, and after the `catch` clause finishes\nexecuting, the identifier is no longer available.\n\n### The `finally` clause\n\nThe `finally` clause contains statements to execute after the `try` block and\n`catch` clause(s) execute, but before the statements following the `try`\nstatement. The `finally` clause executes regardless of whether or not an\nexception is thrown. If an exception is thrown, the statements in the\n`finally` clause execute even if no `catch` clause handles the exception.\n\nYou can use the `finally` clause to make your script fail gracefully when an\nexception occurs; for example, you may need to release a resource that your\nscript has tied up. The following example opens a file and then executes\nstatements that use the file (server-side JavaScript allows you to access\nfiles). If an exception is thrown while the file is open, the `finally` clause\ncloses the file before the script fails.\n\n    \n    \n    openMyFile()\n    try {\n       // tie up a resource\n       writeMyFile(theData);\n    }\n    finally {\n       closeMyFile(); // always close the resource\n    }\n    \n\n## Examples\n\n### Nested try-blocks\n\nFirst let's see what happens with this:\n\n    \n    \n    try {\n      try {\n        throw new Error(\"oops\");\n      }\n      finally {\n        console.log(\"finally\");\n      }\n    }\n    catch (ex) {\n      console.error(\"outer\", ex.message);\n    }\n    \n    // Output:\n    // \"finally\"\n    // \"outer\" \"oops\"\n    \n\nNow, if we already caught the exception in the inner try-block by adding a\ncatch block\n\n    \n    \n    try {\n      try {\n        throw new Error(\"oops\");\n      }\n      catch (ex) {\n        console.error(\"inner\", ex.message);\n      }\n      finally {\n        console.log(\"finally\");\n      }\n    }\n    catch (ex) {\n      console.error(\"outer\", ex.message);\n    }\n    \n    // Output:\n    // \"inner\" \"oops\"\n    // \"finally\"\n    \n\nAnd now, lets re-throw the error.\n\n    \n    \n    try {\n      try {\n        throw new Error(\"oops\");\n      }\n      catch (ex) {\n        console.error(\"inner\", ex.message);\n        throw ex;\n      }\n      finally {\n        console.log(\"finally\");\n      }\n    }\n    catch (ex) {\n      console.error(\"outer\", ex.message);\n    }\n    \n    // Output:\n    // \"inner\" \"oops\"\n    // \"finally\"\n    // \"outer\" \"oops\"\n    \n\nAny given exception will be caught only once by the nearest enclosing catch-\nblock, unless it is re-thrown. Of course, any new exceptions raised in the\n\"inner\" block (because code in catch-block may do something that throws), will\nbe caught by the \"outer\" block.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.4\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'try statement' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'try statement' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\nNot part of an ECMA-262 standard: Multiple catch clauses and conditional\nclauses (SpiderMonkey extension, JavaScript 1.5).\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nConditional clauses  \n(non-standard)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nConditional clauses  \n(non-standard)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][7]\n  * [`throw`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Guide\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.14\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-try-statement\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "var", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/var", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/var", "content": "## Summary\n\nThe **`variable` statement** declares a variable, optionally initializing it\nto a value.\n\n## Syntax\n\n    \n    \n    var _varname1 [_= _value1 [_, _varname2 [_, _varname3 ... [_, _varnameN]]]]_;\n\n`varnameN`\n\n     Variable name. It can be any legal identifier.\n\n`valueN`\n\n     Initial value of the variable. It can be any legal expression.\n\n## Description\n\nVariable declarations, wherever they occur, are processed before any code is\nexecuted. The scope of a variable declared with `var` is its current execution\ncontext, which is either the enclosing function or, for variables declared\noutside any function, global.\n\nAssigning a value to an undeclared variable implicitly creates it as a global\nvariable (it becomes a property of the global object) when the assignment is\nexecuted. The differences between declared and undeclared variables are:\n\n1\\. Declared variables are constrained in the execution context in which they\nare declared. Undeclared variables are always global.\n\n    \n    \n    function x() {\n      y = 1;   // Throws a ReferenceError in strict mode\n      var z = 2;\n    }\n    \n    x();\n    \n    console.log(y); // logs \"1\" \n    console.log(z); // Throws a ReferenceError: z is not defined outside x\n    \n\n2\\. Declared variables are created before any code is executed. Undeclared\nvariables do not exist until the code assigning to them is executed.\n\n    \n    \n    console.log(a);                // Throws a ReferenceError.\n    console.log('still going...'); // Never executes.\n    \n    \n    var a;\n    console.log(a);                // logs \"undefined\" or \"\" depending on browser.\n    console.log('still going...'); // logs \"still going...\".\n\n3\\. Declared variables are a non-configurable property of their execution\ncontext (function or global). Undeclared variables are configurable (e.g. can\nbe deleted).\n\n    \n    \n    var a = 1;\n    b = 2;\n    \n    delete this.a; // Throws a TypeError in strict mode. Fails silently otherwise.\n    delete this.b;\n    \n    console.log(a, b); // Throws a ReferenceError. \n    // The 'b' property was deleted and no longer exists.\n\nBecause of these three differences, failure to declare variables will very\nlikely lead to unexpected results. Thus **it is recommended to always declare\nvariables, regardless of whether they are in a function or global scope.** And\nin ECMAScript 5 [strict mode][1], assigning to an undeclared variable throws\nan error.\n\n### var hoisting\n\nBecause variable declarations (and declarations in general) are processed\nbefore any code is executed, declaring a variable anywhere in the code is\nequivalent to declaring it at the top. This also means that a variable can\nappear to be used before it's declared. This behavior is called \"hoisting\", as\nit appears that the variable declaration is moved to the top of the function\nor global code.\n\n    \n    \n    bla = 2\n    var bla;\n    // ...\n    \n    // is implicitly understood as:\n    \n    var bla;\n    bla = 2;\n    \n\nFor that reason, it is recommended to always declare variables at the top of\ntheir scope (the top of global code and the top of function code) so it's\nclear which variables are function scoped (local) and which are resolved on\nthe scope chain.\n\n## Examples\n\n### Declaring and initializing two variables\n\n    \n    \n    var a = 0, b = 0;\n    \n\n### Assigning two variables with single string value\n\n    \n    \n    var a = \"A\";\n    var b = a;\n    \n    // Equivalent to:\n    \n    var a, b = a = \"A\";\n    \n\nBe mindful of the order:\n\n    \n    \n    var x = y, y = 'A';\n    console.log(x + y); // undefinedA\n    \n\nHere, `x` and `y` are declared before any code is executed, the assignments\noccur later. At the time \"`x = y`\" is evaluated, y exists so no\n`ReferenceError` is thrown and its value is '`undefined`'. So, `o` is assigned\nthe undefined value. Then, `y` is assigned a value of 'A'. Consequently, after\nthe first line, `x === undefined && y === 'A'`, hence the result.\n\n### Initialization of several variables\n\n    \n    \n    var x = 0;\n    \n    function f(){\n      var x = y = 1; // x is declared locally. y is not!\n    }\n    f();\n    \n    console.log(x, y); // 0, 1\n    // x is the global one as expected\n    // y leaked outside of the function, though!\u00a0\n\n### Implicit globals and outer function scope\n\nVariables that appear to be implicit globals may be references to variables in\nan outer function scope:\n\n    \n    \n    var x = 0;  // x is declared global, then assigned a value of 0\n    \n    console.log(typeof z); // undefined, since z doesn't exist yet\n    \n    function a() { // when a is called,\n      var y = 2;   // y is declared local to function a, then assigned a value of 2\n    \n      console.log(x, y);   // 0 2 \n    \n      function b() {       // when b is called\n        x = 3;  // assigns 3 to existing global x, doesn't create a new global var\n        y = 4;  // assigns 4 to existing outer y, doesn't create a new global var\n        z = 5;  // creates a new global variable z and assigns a value of 5. \n      }         // (Throws a ReferenceError in strict mode.)\n    \n      b();     // calling b creates z as a global variable\n      console.log(x, y, z);  // 3 4 5\n    }\n    \n    a();                   // calling a also calls b\n    console.log(x, z);     // 3 5\n    console.log(typeof y); // undefined as y is local to function a\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'var statement' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'variable statement' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`let`][5]\n  * [`const`][6]\n  * [How One Missing `var` Ruined our Launch][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-variable-statement\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[7]: http://blog.safeshepherd.com/23/how-one-missing-var-ruined-our-launch/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "setter", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/set", "parsed_url": "/javascript/javascript_reference/functions/setter", "content": "## Summary\n\nThe **`set`** syntax binds an object property to a function to be called when\nthere is an attempt to set that property.\n\n## Syntax\n\n    \n    \n    {set _prop_(_val_) { . . . }}\n    {set [expression](_val_) { . . . }}\n\n### Parameters\n\n`prop`\n\n     The name of the property to bind to the given function.\n\n`val`\n\n     An alias for the variable that holds the value attempted to be assigned to `prop.`\nexpression\n\n     Starting with ECMAScript 6, you can also use expressions for a computed property name to bind to the given function.\n\n## Description\n\nIn JavaScript, a setter can be used to execute a function whenever a specified\nproperty is attempted to be changed. Setters are most often used in\nconjunction with getters to create a type of pseudo-property. It is not\npossible to simultaneously have a setter on a property that holds an actual\nvalue.\n\nNote the following when working with the `set` syntax:\n\n  * It can have an identifier which is either a number or a string;\n  * It must have exactly one parameter (see [Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments][1] for more information);\n  * It must not appear in an object literal with another `set` or with a data entry for the same property.  \n( `{ set x(v) { }, set x(v) { } }` and `{ x: ..., set x(v) { } }` are\nforbidden )\n\nA setter can be removed using the [`delete`][2] operator.\n\n## Examples\n\n### Defining a setter on new objects in object initializers\n\nThis will define a pseudo-property `current` of object `o` that, when assigned\na value, will update `log` with that value:\n\n    \n    \n    var o = {\n      set current (str) {\n        return this.log[this.log.length] = str;\n      },\n      log: []\n    }\n    \n\nNote that `current` is not defined and any attempts to access it will result\nin `undefined`.\n\n### Removing a setter with the `delete` operator\n\nIf you want to remove the setter, you can just [`delete][3]` it:\n\n    \n    \n    delete o.current;\n    \n\n### Defining a setter on existing objects using `defineProperty`\n\nTo append a setter to an existing object later at any time, use\n[`Object.defineProperty()`][4].\n\n    \n    \n    var o = { a:0 };\n    \n    Object.defineProperty(o, \"b\", { set: function (x) { this.a = x / 2; } });\n    \n    o.b = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property\n    console.log(o.a) // 5\n\n### Using a computed property name\n\n**Note:** Computed properties are experimental technology_,_ part of the ECMAScript 6 proposal, and are not widely supported by browsers yet. This will trigger a syntax error in non-supporting environments.\n    \n    \n    var expr = \"foo\";\n    \n    var obj = {\n      baz: \"bar\",\n      set [expr](v) { this.baz = v; }\n    };\n    \n    console.log(obj.baz); // \"bar\"\n    obj.foo = \"baz\";      // run the setter\n    console.log(obj.baz); // \"baz\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object Initializer' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Method definitions' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nAdded computed property names.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nBased on [Robert Nyman's page][7]. No support (notably in IE6-8) means that\nthe script will trigger a syntax error.\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n[2.0][9] (1.8.1)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n9.5\n\n</td>  \n<td>\n\n3\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][10] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8.1)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### SpiderMonkey-specific notes\n\n  * Starting with[ JavaScript 1.8.1][11], setters are no longer called when setting properties in object and array initializers.\n\n## See also\n\n  * [getter][12]\n  * [`delete`][2]\n  * [`Object.defineProperty()`][4]\n  * [`__defineGetter__`][13]\n  * [`__defineSetter__`][14]\n  * [Defining Getters and Setters][15] in JavaScript Guide\n\n[1]: http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-method-definitions\n\n[7]: http://robertnyman.com/javascript/javascript-getters-setters.html#regular-getters-and-setters\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/2\n\n[10]: /en-US/Firefox/Releases/34\n\n[11]: /en-US/docs/Web/JavaScript/New_in_JavaScript/1.8.1\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Functions/get\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\n\n[15]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "Object.prototype.propertyIsEnumerable()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.propertyisenumerable()", "content": "## Summary\n\nThe `**propertyIsEnumerable()**` method returns a Boolean indicating whether\nthe specified property is enumerable.\n\n## Syntax\n\n    \n    \n    obj.propertyIsEnumerable(prop)\n\n### Parameters\n\n`prop`\n\n    The name of the property to test.\n\n## Description\n\nEvery object has a `propertyIsEnumerable` method. This method can determine\nwhether the specified property in an object can be enumerated by a\n[`for...in`][1] loop, with the exception of properties inherited through the\nprototype chain. If the object does not have the specified property, this\nmethod returns `false`.\n\n## Examples\n\n### Example: A basic use of `propertyIsEnumerable`\n\nThe following example shows the use of `propertyIsEnumerable` on objects and\narrays:\n\n    \n    \n    var o = {};\n    var a = [];\n    o.prop = 'is enumerable';\n    a[0] = 'is enumerable';\n    \n    o.propertyIsEnumerable('prop');   // returns true\n    a.propertyIsEnumerable(0);        // returns true\n    \n\n### Example: User-defined versus built-in objects\n\nThe following example demonstrates the enumerability of user-defined versus\nbuilt-in properties:\n\n    \n    \n    var a = ['is enumerable'];\n    \n    a.propertyIsEnumerable(0);          // returns true\n    a.propertyIsEnumerable('length');   // returns false\n    \n    Math.propertyIsEnumerable('random');   // returns false\n    this.propertyIsEnumerable('Math');     // returns false\n    \n\n### Example: Direct versus inherited properties\n\n    \n    \n    var a = [];\n    a.propertyIsEnumerable('constructor');         // returns false\n    \n    function firstConstructor() {\n      this.property = 'is not enumerable';\n    }\n    \n    firstConstructor.prototype.firstMethod = function() {};\n    \n    function secondConstructor() {\n      this.method = function method() { return 'is enumerable'; };\n    }\n    \n    secondConstructor.prototype = new firstConstructor;\n    secondConstructor.prototype.constructor = secondConstructor;\n    \n    var o = new secondConstructor();\n    o.arbitraryProperty = 'is enumerable';\n    \n    o.propertyIsEnumerable('arbitraryProperty');   // returns true\n    o.propertyIsEnumerable('method');              // returns true\n    o.propertyIsEnumerable('property');            // returns false\n    \n    o.property = 'is enumerable';\n    \n    o.propertyIsEnumerable('property');            // returns true\n    \n    // These return false as they are on the prototype which \n    // propertyIsEnumerable does not consider (even though the last two\n    // are iteratable with for-in)\n    o.propertyIsEnumerable('prototype');   // returns false (as of JS 1.8.1/FF3.6)\n    o.propertyIsEnumerable('constructor'); // returns false\n    o.propertyIsEnumerable('firstMethod'); // returns false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.propertyIsEnumerable' in that\nspecification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.propertyIsEnumerable' in that\nspecification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\nStarting in JavaScript 1.8.1 (in Firefox 3.6),\n`propertyIsEnumerable('prototype')` returns `false` instead of `true`; this\nmakes the result compliant with ECMAScript 5.\n\n## See also\n\n  * [Enumerability and ownership of properties][5]\n  * [`for...in`][1]\n  * [`Object.keys()`][6]\n  * [`Object.defineProperty()`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.7\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.propertyisenumerable\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Default parameters", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters", "parsed_url": "/javascript/javascript_reference/functions/default_parameters", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\n**Default function parameters** allow formal parameters to be initialized with default values if no value or `undefined` is passed.\n\n## Syntax\n\n    \n    \n    function [_name_]([_param1_[ = defaultValue1 ][, ..., _paramN_[ = defaultValueN ]]]) {\n       _statements_\n    }\n    \n\n## Description\n\nIn JavaScript, parameters of functions default to `undefined`. However, in\nsome situations it might be useful to set a different default value. This is\nwhere default parameters can help.\n\nIn the past, the general strategy for setting defaults was to test parameter\nvalues in the body of the function and assign a value if they are `undefined`.\nIf in the following example, no value is provided for `b` in the call, its\nvalue would be `undefined`\u00a0 when evaluating `a*b` and the call to `multiple`\nwould have returned `NaN`. However, this is caught with the second line in\nthis example:\n\n    \n    \n    function multiply(a, b) {\n      b = typeof b !== 'undefined' ?  b : 1;\n    \n      return a*b;\n    }\n    \n    multiply(5); // 5\n    \n\nWith default parameters, the check in the function body is no longer\nnecessary. Now, you can simply put `1` as the default value for `b` in the\nfunction head:\n\n    \n    \n    function multiply(a, b = 1) {\n      return a*b;\n    }\n    \n    multiply(5); // 5\n\n## Examples\n\n### Passing `undefined`\n\nIn the second call here, even if the second argument is set explicitly to\n`undefined` when calling, the value of the `color` argument is the default\none.\n\n    \n    \n    function setBackgroundColor(element, color = 'rosybrown') {\n      element.style.backgroundColor = color;\n    }\n    \n    setBackgroundColor(someDiv);            // color set to 'rosybrown'\n    setBackgroundColor(someDiv, undefined); // color set to 'rosybrown' too\n    setBackgroundColor(someDiv, 'blue');    // color set to 'blue' \n    \n\n### Evaluated at call time\n\nThe default argument gets evaluated at call time, so unlike e.g. in Python, a\nnew object is created each time the function is called.\n\n    \n    \n    function append(value, array = []) {\n      array.push(value);\n      return array;\n    }\n    \n    append(1); //[1]\n    append(2); //[2], not [1, 2]\n    \n    \n\nThis even applies to functions and variables:\n\n    \n    \n    function callSomething(thing = something()) { return thing }\n    \n    callSomething(); //throws a ReferenceError\n    \n    let (something = function() \"sth\") {\n      callSomething(); //\"sth\"\n    }\n    \n\n### Default parameters are available to later default parameters\n\nParameters already encountered are available to later default parameters:\n\n    \n    \n    function singularAutoPlural(singular, plural = singular+\"s\", \n                                rallyingCry = plural + \" ATTACK!!!\") {\n      return [singular, plural, rallyingCry ]; \n    }\n    \n    //[\"Gecko\",\"Geckos\", \"Geckos ATTACK!!!\"]\n    singularAutoPlural(\"Gecko\");\n    \n    //[\"Fox\",\"Foxes\", \"Foxes ATTACK!!!\"]\n    singularAutoPlural(\"Fox\",\"Foxes\");\n    \n    //[\"Deer\", \"Deer\", \"Deer ... change.\"]\n    singularAutoPlural(\"Deer\", \"Deer\", \"Deer peaceably and respectfully\n       petition the government for positive change.\")\n    \n\nThis functionality is approximated in a straight forward fashion and\ndemonstrates how many edge case are handled.\n\n    \n    \n    function go() {\n      return \":P\"\n    }\n    \n    function withDefaults(a, b = 5, c = b, d = go(), e = this, \n                          f = arguments, g = this.value) {\n      return [a,b,c,d,e,f,g];\n    }\n    function withoutDefaults(a, b, c, d, e, f, g){\n      switch(arguments.length){\n        case 0:\n          a\n        case 1:\n          b = 5\n        case 2:\n          c = b\n        case 3:\n          d = go();\n        case 4:\n          e = this\n        case 5:\n          f = arguments\n        case 6:\n          g = this.value;\n        default:\n      }\n      return [a,b,c,d,e,f,g];\n    }\n    \n    withDefaults.call({value:\"=^_^=\"});\n    // [undefined, 5, 5, \":P\", window, arguments, \"=^_^=\"]\n    \n    \n    withoutDefaults.call({value:\"=^_^=\"});\n    // [undefined, 5, 5, \":P\", window, arguments, \"=^_^=\"]\n    \n\n### Functions defined inside function body\n\nIntroduced in Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30).\nFunctions declared in the function body cannot be referred inside default\nparameters and throw a [`ReferenceError`][1] (currently a [`TypeError`][2] in\nSpiderMonkey, see [bug\u00a01022967][3]). Default parameters are always executed\nfirst, function declarations inside the function body evaluate afterwards.\n\n    \n    \n    // Doesn't work! Throws ReferenceError.\n    function f(a = go()) {\n      function go(){return \":P\"}\n    }\n    \n\n### Parameters without defaults after default parameters\n\nPrior to Gecko 26 (Firefox 26 / Thunderbird 26 / SeaMonkey 2.23 / Firefox OS\n1.2), the follwing code resulted in a [`SyntaxError`][4]. This has been fixed\nin [bug\u00a0777060][5] and works as expected in later versions:\n\n    \n    \n    function f(x=1, y) { \n      return [x, y]; \n    }\n    \n    f(); // [1, undefined]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function Definitions' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[15.0][8] (15.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Original proposal at ecmascript.org][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=1022967\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=777060\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-definitions\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/Firefox/Releases/15\n\n[9]:\nhttp://wiki.ecmascript.org/doku.php?id=harmony:parameter_default_values\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "getter", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/get", "parsed_url": "/javascript/javascript_reference/functions/getter", "content": "## Summary\n\nThe **`get`** syntax binds an object property to a function that will be\ncalled when that property is looked up.\n\n## Syntax\n\n    \n    \n    {get _prop_() { ... } }\n    {get _[expression]_() { ... } }\n\n### Parameters\n\n`prop`\n\n     The name of the property to bind to the given function.\nexpression\n\n     Starting with ECMAScript 6, you can also use expressions for a computed property name to bind to the given function.\n\n## Description\n\nSometimes it is desirable to allow access to a property that returns a\ndynamically computed value, or you may want reflect the status of an internal\nvariable without requiring the use of explicit method calls. In JavaScript,\nthis can be accomplished with the use of a getter. It is not possible to\nsimultaneously have a getter bound to a property and have that property\nactually hold a value, although it is possible to use a getter and a setter in\nconjunction to create a type of pseudo-property.\n\nNote the following when working with the `get` syntax:\n\n  * It can have an identifier which is either a number or a string;\n  * It must have exactly zero parameters (see [Incompatible ES5 change: literal getter and setter functions must now have exactly zero or one arguments][1] for more information);\n  * It must not appear in an object literal with another `get` or with a data entry for the same property (`{ get x() { }, get x() { } }` and `{ x: ..., get x() { } }` are forbidden).\n\nA getter can be removed using the [`delete][2]` operator.\n\n## Examples\n\n### Defining a getter on new objects in object initializers\n\nThis will create a pseudo-property `latest` for object `obj`, which will\nreturn the last array item in `log`.\n\n    \n    \n    var log = ['test'];\n    var obj = {\n      get latest () {\n        if (log.length == 0) return undefined;\n        return log[log.length - 1]\n      }\n    }\n    console.log (obj.latest); // Will return \"test\".\n    \n\nNote that attempting to assign a value to `latest` will not change it.\n\n### Deleting a getter using the `delete` operator\n\nIf you want to remove the getter, you can just [`delete][2]` it:\n\n    \n    \n    delete obj.latest;\n    \n\n### Defining a getter on existing objects using `defineProperty`\n\nTo append a getter to an existing object later at any time, use\n[`Object.defineProperty()`][3].\n\n    \n    \n    var o = { a:0 }\n    \n    Object.defineProperty(o, \"b\", { get: function () { return this.a + 1; } });\n    \n    console.log(o.b) // Runs the getter, which yields a + 1 (which is 1)\n\n### Using a computed property name\n\n**Note:** Computed properties are experimental technology_,_ part of the ECMAScript 6 proposal, and are not widely supported by browsers yet. This will trigger a syntax error in non-supporting environments.\n    \n    \n    var expr = \"foo\";\n    \n    var obj = {\n      get [expr]() { return \"bar\"; }\n    };\n    \n    console.log(obj.foo); // \"bar\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object Initializer' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Method definitions' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nAdded computed property names.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nBased on [Robert Nyman's page][6]. No support (notably in IE6-8) means that\nthe script will trigger a syntax error.\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n[2.0][8] (1.8.1)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n9.5\n\n</td>  \n<td>\n\n3\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][9] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8.1)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [setter][10]\n  * [`delete`][2]\n  * [`Object.defineProperty()`][3]\n  * [`__defineGetter__`][11]\n  * [`__defineSetter__`][12]\n  * [Defining Getters and Setters][13] in JavaScript Guide\n\n[1]: http://whereswalden.com/2010/08/22/incompatible-es5-change-literal-getter-and-setter-functions-must-now-have-exactly-zero-or-one-arguments/\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-method-definitions\n\n[6]: http://robertnyman.com/javascript/javascript-getters-setters.html#regular-getters-and-setters\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/Firefox/Releases/2\n\n[9]: /en-US/Firefox/Releases/34\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Functions/set\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\n\n[13]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "Object.getOwnPropertyNames()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.getownpropertynames()", "content": "## Summary\n\nThe `**Object.getOwnPropertyNames()**` method returns an array of all\nproperties (enumerable or not) found directly upon a given object.\n\n## Syntax\n\n    \n    \n    Object.getOwnPropertyNames(obj)\n\n### Parameters\n\n`obj`\n\n     The object whose enumerable _and non-enumerable_ own properties are to be returned.\n\n## Description\n\n`Object.getOwnPropertyNames` returns an array whose elements are strings\ncorresponding to the enumerable _and non-enumerable_ properties found directly\nupon `obj`. The ordering of the enumerable properties in the array is\nconsistent with the ordering exposed by a [`for...in`][1] loop (or by\n[`Object.keys`][2]) over the properties of the object. The ordering of the\nnon-enumerable properties in the array, and among the enumerable properties,\nis not defined.\n\n## Examples\n\n### Example: Using `getOwnPropertyNames`\n\n    \n    \n    var arr = ['a', 'b', 'c'];\n    print(Object.getOwnPropertyNames(arr).sort()); // prints '0,1,2,length'\n    \n    // Array-like object\n    var obj = { 0: 'a', 1: 'b', 2: 'c' };\n    print(Object.getOwnPropertyNames(obj).sort()); // prints '0,1,2'\n    \n    // Printing property names and values using Array.forEach\n    Object.getOwnPropertyNames(obj).forEach(function(val, idx, array) {\n      print(val + ' -> ' + obj[val]);\n    });\n    // prints\n    // 0 -> a\n    // 1 -> b\n    // 2 -> c\n    \n    // non-enumerable property\n    var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; }, enumerable: false } });\n    my_obj.foo = 1;\n    \n    print(Object.getOwnPropertyNames(my_obj).sort()); // prints 'foo,getFoo'\n    \n\nIf you want only the enumerable properties, see [`Object.keys()`][2] or use a\n[`for...in`][1] loop (although note that this will return enumerable\nproperties not found directly upon that object but also along the prototype\nchain for the object unless the latter is filtered with\n[`hasOwnProperty()`][3]).\n\nItems on the prototype chain are not listed:\n\n    \n    \n    function ParentClass() {}\n    ParentClass.prototype.inheritedMethod = function() {};\n    \n    function ChildClass() {\n      this.prop = 5;\n      this.method = function() {};\n    }\n    ChildClass.prototype = new ParentClass;\n    ChildClass.prototype.prototypeMethod = function() {};\n    \n    alert(\n      Object.getOwnPropertyNames(\n        new ChildClass() // ['prop', 'method']\n      )\n    );\n    \n\n### Example: Get Non-Enumerable Only\n\nThis uses the [`Array.prototype.filter()`][4] function to remove the\nenumerable keys (obtained with [`Object.keys()`][2]) from a list of all keys\n(obtained with `Object.getOwnPropertyNames`) leaving only the non-enumerable\nkeys.\n\n    \n    \n    var target = myObject;\n    var enum_and_nonenum = Object.getOwnPropertyNames(target);\n    var enum_only = Object.keys(target);\n    var nonenum_only = enum_and_nonenum.filter(function(key) {\n      var indexInEnum = enum_only.indexOf(key);\n      if (indexInEnum == -1) {\n        // not found in enum_only keys mean the key is non-enumerable,\n        // so return true so we keep this in the filter\n        return true;\n      } else {\n        return false;\n      }\n    });\n    \n    console.log(nonenum_only);\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][5]. In ES6, a non-object argument will be coerced\nto an object.\n\n    \n    \n    > Object.getOwnPropertyNames(\"foo\")\n    TypeError: \"foo\" is not an object // ES5 code\n    \n    > Object.getOwnPropertyNames(\"foo\")\n    [\"length\", \"0\", \"1\", \"2\"]         // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.getOwnPropertyNames' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.getOwnPropertyNames' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[4.0][9] (2)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][10].\n\n### SpiderMonkey-specific notes\n\nPrior to SpiderMonkey 28 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 /\nFirefox OS 1.3), `Object.getOwnPropertyNames` did not see unresolved\nproperties of [`Error`][11] objects. This has been fixed in later versions\n([bug\u00a0724768][12]).\n\n## See also\n\n  * [Enumerability and ownership of properties][13]\n  * [`Object.prototype.hasOwnProperty()`][3]\n  * [`Object.prototype.propertyIsEnumerable()`][14]\n  * [`Object.create()`][15]\n  * [`Object.keys()`][2]\n  * [`Array.forEach()`][16]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.4\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.getownpropertynames\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/4\n\n[10]: http://kangax.github.com/es5-compat-table/\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=724768\n\n[13]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "empty", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/empty", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/empty", "content": "## Summary\n\nAn **empty statement** is used to provide no statement, although the\nJavaScript syntax would expect one.\n\n## Syntax\n\n    \n    \n    ;\n    \n\n## Description\n\nThe empty statement is a semicolon (;) indicating that no statement will be\nexecuted, even if JavaScript syntax requires one. The opposite behavior, where\nyou want multiple statements, but JavaScript only allows a single one, is\npossible using a[ block statement][1]; it combines several statements into a\nsingle one.\n\n## Examples\n\nThe empty statement is sometimes used with loop statements. See the following\nexample with an empty loop body:\n\n    \n    \n    var arr = [1, 2, 3];\n    \n    // Assign all array values to 0\n    for (i = 0; i < arr.length; arr[i++] = 0) /* empty statement */ ;\n    \n    console.log(arr)\n    // [0, 0, 0]\n    \n\n**Note:** It is a good idea to comment the intentional use of the empty statement, as it is not really obvious to distinguish between a normal semicolon. In the following example the usage is probably not intentional:\n    \n    \n    if (condition);       // Caution, this \"if\" does nothing!\n       killTheUniverse()  // So this gets always executed!!!\n    \n\nAnother Example: An [`if...else`][2] statement without curly braces (`{}`). If\n`three` is `true`, nothing will happen, `four` does not matter, and also the\n`launchRocket()` function in the `else` case will not be executed.\n\n    \n    \n    if (one)\n      doOne();\n    else if (two)\n      doTwo();\n    else if (three)\n      ; // nothing here\n    else if (four)\n      doFour();\n    else\n      launchRocket();\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Empty statement' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Empty statement' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Block statement`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.3\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-empty-statement\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "Object.prototype.hasOwnProperty()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.hasownproperty()", "content": "## Summary\n\nThe `**hasOwnProperty()**` method returns a boolean indicating whether the\nobject has the specified property.\n\n## Syntax\n\n    \n    \n    obj.hasOwnProperty(prop)\n\n### Parameters\n\n`prop`\n\n    The name of the property to test.\n\n## Description\n\nEvery object descended from [`Object`][1] inherits the `hasOwnProperty`\nmethod. This method can be used to determine whether an object has the\nspecified property as a direct property of that object; unlike the [`in`][2]\noperator, this method does not check down the object's prototype chain.\n\n## Examples\n\n### Example: Using `hasOwnProperty` to test for a property's existence\n\nThe following example determines whether the `o` object contains a property\nnamed `prop`:\n\n    \n    \n    o = new Object();\n    o.prop = 'exists';\n    \n    function changeO() {\n      o.newprop = o.prop;\n      delete o.prop;\n    }\n    \n    o.hasOwnProperty('prop');   // returns true\n    changeO();\n    o.hasOwnProperty('prop');   // returns false\n    \n\n### Example: Direct versus inherited properties\n\nThe following example differentiates between direct properties and properties\ninherited through the prototype chain:\n\n    \n    \n    o = new Object();\n    o.prop = 'exists';\n    o.hasOwnProperty('prop');             // returns true\n    o.hasOwnProperty('toString');         // returns false\n    o.hasOwnProperty('hasOwnProperty');   // returns false\n    \n\n### Example: Iterating over the properties of an object\n\nThe following example shows how to iterate over the properties of an object\nwithout executing on inherit properties. Note that the [`for...in`][3] loop is\nalready only iterating enumerable items, so one should not assume based on the\nlack of non-enumerable properties shown in the loop that `hasOwnProperty`\nitself is confined strictly to enumerable items (as with\n[`Object.getOwnPropertyNames()`][4]).\n\n    \n    \n    var buz = {\n      fog: 'stack'\n    };\n    \n    for (var name in buz) {\n      if (buz.hasOwnProperty(name)) {\n        alert('this is fog (' + name + ') for sure. Value: ' + buz[name]);\n      }\n      else {\n        alert(name); // toString or something else\n      }\n    }\n    \n\n### Example: `hasOwnProperty` as a property\n\nJavaScript does not protect the property name `hasOwnProperty`; thus, if the\npossibility exists that an object might have a property with this name, it is\nnecessary to use an _external_ `hasOwnProperty` to get correct results:\n\n    \n    \n    var foo = {\n      hasOwnProperty: function() {\n        return false;\n      },\n      bar: 'Here be dragons'\n    };\n    \n    foo.hasOwnProperty('bar'); // always returns false\n    \n    // Use another Object's hasOwnProperty and call it with 'this' set to foo\n    ({}).hasOwnProperty.call(foo, 'bar'); // true\n    \n    // It's also possible to use the hasOwnProperty property from the Object prototype for this purpose\n    Object.prototype.hasOwnProperty.call(foo, 'bar'); // true\n    \n\nNote that in the last case there are no newly created objects.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.hasOwnProperty' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.hasOwnProperty' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Enumerability and ownership of properties][8]\n  * [`Object.getOwnPropertyNames()`][4]\n  * [`for...in`][3]\n  * [`in`][2]\n  * [JavaScript Guide: Inheritance revisited][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.5\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.hasownproperty\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n[9]: /en-US/docs/Web/JavaScript/Guide/Inheritance_Revisited\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing object.\n\n## Syntax\n\n    \n    \n    obj.toString()\n\n## Description\n\nEvery object has a `toString()` method that is automatically called when the\nobject is to be represented as a text value or when an object is referred to\nin a manner in which a string is expected. By default, the `toString()` method\nis inherited by every object descended from `Object`. If this method is not\noverridden in a custom object, `toString()` returns \"[object _type_]\", where\n`_type_` is the object type. The following code illustrates this:\n\n    \n    \n    var o = new Object();\n    o.toString();           // returns [object Object]\n    \n\n**Note:** Starting in JavaScript 1.8.5 `toString()` called on [`null`][1] returns [`object _Null_]`, and [`undefined`][2] returns [`object _Undefined_]`, as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type.\n\n## Examples\n\n### Example: Overriding the default `toString` method\n\nYou can create a function to be called in place of the default `toString()`\nmethod. The `toString()` method takes no arguments and should return a string.\nThe `toString()` method you create can be any value you want, but it will be\nmost useful if it carries information about the object.\n\nThe following code defines the `Dog` object type and creates `theDog`, an\nobject of type `Dog`:\n\n    \n    \n    function Dog(name, breed, color, sex) {\n      this.name = name;\n      this.breed = breed;\n      this.color = color;\n      this.sex = sex;\n    }\n    \n    theDog = new Dog('Gabby', 'Lab', 'chocolate', 'female');\n    \n\nIf you call the `toString()` method on this custom object, it returns the\ndefault value inherited from [`Object`][3]:\n\n    \n    \n    theDog.toString(); // returns [object Object]\n    \n\nThe following code creates and assigns `dogToString()` to override the default\n`toString()` method. This function generates a string containing the name,\nbreed, color, and sex of the object, in the form \"`property = value;`\".\n\n    \n    \n    Dog.prototype.toString = function dogToString() {\n      var ret = 'Dog ' + this.name + ' is a ' + this.sex + ' ' + this.color + ' ' + this.breed;\n      return ret;\n    }\n    \n\nWith the preceding code in place, any time `theDog` is used in a string\ncontext, JavaScript automatically calls the `dogToString()` function, which\nreturns the following string:\n\n    \n    \n    Dog Gabby is a female chocolate Lab\n    \n\n### Example: Using `toString()` to detect object class\n\n`toString()` can be used with every object and allows you to get its class. To\nuse the `Object.prototype.toString()` with every object, you need to call\n[`Function.prototype.call()`][4] or [`Function.prototype.apply()`][5] on it,\npassing the object you want to inspect as the first parameter called\n`thisArg`.\n\n    \n    \n    var toString = Object.prototype.toString;\n    \n    toString.call(new Date);    // [object Date]\n    toString.call(new String);  // [object String]\n    toString.call(Math);        // [object Math]\n    \n    // Since JavaScript 1.8.5\n    toString.call(undefined);   // [object Undefined]\n    toString.call(null);        // [object Null]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.toString' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nCall on [`null`][1] returns [`object _Null_]`, and [`undefined`][2] returns\n[`object _Undefined_]`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.toString' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][9]\n  * [`Object.prototype.valueOf()`][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Array.prototype.forEach()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.foreach()", "content": "## Summary\n\nThe `**forEach()**` method executes a provided function once per array\nelement.\n\n## Syntax\n\n    \n    \n    arr.forEach(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n    Function to execute for each element.\n`thisArg`\n\n    Value to use as `this` when executing `callback`.\n\n## Description\n\n`forEach` executes the provided `callback`\u00a0once for each element present in\nthe array in ascending order.\u00a0It is not invoked for indexes that have been\ndeleted or elided. However, it is executed for elements that are present and\nhave the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n  * the **element value**\n  * the **element index**\n  * the **array being traversed**\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\nThe range of elements processed by `forEach` is set before the first\ninvocation of `callback`. Elements that are appended to the array after the\ncall to `forEach` begins will not be visited by `callback`. If the values of\nexisting elements of the array are changed, the value passed to `callback`\nwill be the value at the time `forEach` visits them; elements that are deleted\nbefore being visited are not visited.\n\n**Note:** There is no way to stop or break a forEach loop. The solution is to use [`Array.every`][2] or [`Array.some`][3]. See example below.\n\n`forEach` executes the `callback `function once for each array element; unlike\n`every `and some\u00a0``it, always returns the value `undefined`.\n\n## Examples\n\n### Example: Printing the contents of an array\n\nThe following code logs a line for each element in an array:\n\n    \n    \n    function logArrayElements(element, index, array) {\n      console.log('a[' + index + '] = ' + element);\n    }\n    \n    // Note ellision, there is no member at 2 so it isn't visited\n    [2, 5, , 9].forEach(logArrayElements);\n    // logs:\n    // a[0] = 2\n    // a[1] = 5\n    // a[3] = 9\n    \n\n### Example: Breaking a loop\n\nThe following code uses [`Array.prototype.every`][2] to log the content of an\narray and stop when it reaches a value higher than the given `THRESHOLD`.\n\n    \n    \n    var THRESHOLD = 12;\n    var v = [5, 2, 16, 4, 3, 18, 20];\n    var res;\n    \n    res = v.every(function(element, index, array) {\n      console.log('element:', element);\n      if (element >= THRESHOLD) {\n        return false;\n      }\n    \n      return true;\n    });\n    console.log('res:', res);\n    // logs:\n    // element: 5\n    // element: 2\n    // element: 16\n    // res: false\n    \n    res = v.some(function(element, index, array) {\n      console.log('element:', element);\n      if (element >= THRESHOLD) {\n        return true;\n      }\n    \n      return false;\n    });\n    console.log('res:', res);\n    // logs:\n    // element: 5\n    // element: 2\n    // element: 16\n    // res: true\n    \n\n### Example: An object copy function\n\nThe following code creates a copy of a given object. There are different ways\nto create a copy of an object, the following is just one way and is presented\nto explain how `Array.prototype.forEach` works by using ECMAScript 5 `Object.*\n`meta property functions.\n\n    \n    \n    function copy(o) {\n      var copy = Object.create(Object.getPrototypeOf(o));\n      var propNames = Object.getOwnPropertyNames(o);\n    \n      propNames.forEach(function(name) {\n        var desc = Object.getOwnPropertyDescriptor(o, name);\n        Object.defineProperty(copy, name, desc);\n      });\n    \n      return copy;\n    }\n    \n    var o1 = { a: 1, b: 2 };\n    var o2 = copy(o1); // o2 looks like o1 now\n    \n\n## Polyfill\n\n`forEach` was added to the ECMA-262 standard in the 5th edition; as such it\nmay not be present in other implementations of the standard. You can work\naround this by inserting the following code at the beginning of your scripts,\nallowing use of `forEach` in implementations that don't natively support it.\nThis algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\n[`Object`][4] and [`TypeError`][5] have their original values and that\n`callback.call` evaluates to the original value of\n[`Function.prototype.call`][6].\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.18\n    // Reference: http://es5.github.io/#x15.4.4.18\n    if (!Array.prototype.forEach) {\n    \n      Array.prototype.forEach = function(callback, thisArg) {\n    \n        var T, k;\n    \n        if (this == null) {\n          throw new TypeError(' this is null or not defined');\n        }\n    \n        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n        var O = Object(this);\n    \n        // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n    \n        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n          throw new TypeError(callback + ' is not a function');\n        }\n    \n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n          T = thisArg;\n        }\n    \n        // 6. Let k be 0\n        k = 0;\n    \n        // 7. Repeat, while k < len\n        while (k < len) {\n    \n          var kValue;\n    \n          // a. Let Pk be ToString(k).\n          //   This is implicit for LHS operands of the in operator\n          // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n          //   This step can be combined with c\n          // c. If kPresent is true, then\n          if (k in O) {\n    \n            // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n            kValue = O[k];\n    \n            // ii. Call the Call internal method of callback with T as the this value and\n            // argument list containing kValue, k, and O.\n            callback.call(T, kValue, k, O);\n          }\n          // d. Increase k by 1.\n          k++;\n        }\n        // 8. return undefined\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.forEach' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.forEach' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][10] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.map()`][11]\n  * [`Array.prototype.every()`][2]\n  * [`Array.prototype.some()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.foreach\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[10]: /en-US/Firefox/Releases/1.5\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "String.prototype.indexOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.indexof()", "content": "## Summary\n\nThe `**indexOf()**` method returns the index within the calling `String`\nobject of the first occurrence of the specified value, starting the search at\n`fromIndex`.\u00a0Returns -1 if the value is not found.\n\n## Syntax\n\n    \n    \n    _str_.indexOf(_searchValue_[, _fromIndex_])\n\n### Parameters\n\n`searchValue`\n\n     A string representing the value to search for.\n`fromIndex`\n\n     The location within the calling string to start the search from. It can be any integer. The default value is 0. If `fromIndex\u00a0<\u00a00`\u00a0the entire string is searched (same as passing 0). If\u00a0`fromIndex\u00a0>= str.length`, the method will return -1 unless searchValue is an empty string in which case str.length is returned.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first\ncharacter is 0, and the index of the last character of a string called\n`stringName` is `stringName.length - 1`.\n\n    \n    \n    \"Blue Whale\".indexOf(\"Blue\");     // returns  0\n    \"Blue Whale\".indexOf(\"Blute\");    // returns -1\n    \"Blue Whale\".indexOf(\"Whale\", 0); // returns  5\n    \"Blue Whale\".indexOf(\"Whale\", 5); // returns  5\n    \"Blue Whale\".indexOf(\"\", 9);      // returns  9\n    \"Blue Whale\".indexOf(\"\", 10);     // returns 10\n    \"Blue Whale\".indexOf(\"\", 11);     // returns 10\n\n### Case-sensitivity\n\nThe `indexOf` method is case sensitive. For example, the following expression\nreturns -1:\n\n    \n    \n    \"Blue Whale\".indexOf(\"blue\") // returns -1\n    \n\n### Checking occurrences\n\nNote that '0' doesn't evaluate to `true` and '-1' doesn't evaluate to `false`.\nTherefore, when checking if a specific string exists within another string the\ncorrect way to check would be:\n\n    \n    \n    \"Blue Whale\".indexOf(\"Blue\") != -1; // true\n    \"Blue Whale\".indexOf(\"Bloe\") != -1; // false\n\n## Examples\n\n### Example: Using `indexOf` and `lastIndexOf`\n\nThe following example uses `indexOf` and `lastIndexOf` to locate values in the\nstring \"`Brave new world`\".\n\n    \n    \n    var anyString = \"Brave new world\";\n    \n    console.log(\"The index of the first w from the beginning is \" + anyString.indexOf(\"w\"));\n    // Displays 8\n    console.log(\"The index of the first w from the end is \" + anyString.lastIndexOf(\"w\")); \n    // Displays 10\n    \n    console.log(\"The index of 'new' from the beginning is \" + anyString.indexOf(\"new\"));   \n    // Displays 6\n    console.log(\"The index of 'new' from the end is \" + anyString.lastIndexOf(\"new\"));\n    // Displays 6\n    \n\n### Example: `indexOf` and case-sensitivity\n\nThe following example defines two string variables. The variables contain the\nsame string except that the second string contains uppercase letters. The\nfirst `log` method displays 19. But because the `indexOf` method is case\nsensitive, the string \"`cheddar`\" is not found in `myCapString`, so the second\n`log` method displays -1.\n\n    \n    \n    var myString    = \"brie, pepper jack, cheddar\";\n    var myCapString = \"Brie, Pepper Jack, Cheddar\";\n    \n    console.log('myString.indexOf(\"cheddar\") is ' + myString.indexOf(\"cheddar\"));    \n    // Displays 19\n    console.log('myCapString.indexOf(\"cheddar\") is ' + myCapString.indexOf(\"cheddar\")); \n    // Displays -1\n\n### Example: Using `indexOf` to count occurrences of a letter in a string\n\nThe following example sets `count` to the number of occurrences of the letter\n`x` in the string `str`:\n\n    \n    \n    count = 0;\n    pos = str.indexOf(\"x\");\n    \n    while ( pos != -1 ) {\n       count++;\n       pos = str.indexOf( \"x\",pos + 1 );\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.indexOf' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.indexOf' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.charAt()`][3]\n  * [`String.prototype.lastIndexOf()`][4]\n  * [`String.prototype.split()`][5]\n  * [`Array.prototype.indexOf()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.7\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.indexof\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Arrow functions", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions", "parsed_url": "/javascript/javascript_reference/functions/arrow_functions", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nAn **arrow function expression** has a shorter syntax compared to function\nexpressions and lexically binds the `this` value. Arrow functions are always\nanonymous.\n\n## Syntax\n\n    \n    \n    ([param] [, param]) => {\n       statements\n    }\n    \n    param => expression\n\nDetailed syntax examples can be seen [here][1].\n\n### Parameters\n\n`param`\n\n     The name of an argument. Zero arguments need to be indicated with `()`. For only one argument the parentheses are not required. (like `foo => 1`)\n`statements or expression`\n\n     Multiple statements need to be enclosed in braces, {}. A single expression, however, requires no braces. The expression is also the implicit return value of that function.\n\n## Description\n\nTwo factors influenced the introduction of arrow functions: shorter functions\nand lexical this.\n\n### Shorter functions\n\nIn some functional patterns, shorter functions are welcome. Compare:\n\n    \n    \n    var a = [\n      \"Hydrogen\",\n      \"Helium\",\n      \"Lithium\",\n      \"Beryl\u00adlium\"\n    ];\n    \n    var a2 = a.map(function(s){ return s.length });\n    \n    var a3 = a.map( s => s.length );\n\n### Lexical `this`\n\nUntil arrow functions, every new function defined its own [this][2] value (a\nnew object in case of a constructor, undefined in strict mode function calls,\nthe context object if the function is called as an \"object method\", etc.).\nThis proved to be annoying with an object-oriented style of programming.\n\n    \n    \n    function Person() {\n      // The Person() constructor defines `this` as itself.\n    \u00a0 this.age = 0;\n    \n      setInterval(function growUp() {\n        // In nonstrict mode, the growUp() function defines `this` \n        // as the global object, which is different from the `this`\n        // defined by the Person() constructor.\n      \u00a0 this.age++;\n      }, 1000);\n    }\n    \n    var p = new Person();\n\nIn ECMAScript 3/5, this issue was fixed by assigning the value in `this` to a\nvariable that could be closed over.\n\n    \n    \n    function Person() {\n      var self = this; // Some choose `that` instead of `self`. \n                       // Choose one and be consistent.\n      self.age = 0;\n    \n      setInterval(function growUp() {\n        // The callback refers to the `self` variable of which\n        // the value is the expected object.\n        self.age++;\n      }, 1000);\n    }\n\nAlternatively, a [bound function][3] could be created so that the proper\n`this` value would be passed to the `growUp` function.\n\nArrow functions capture the `this` value of the enclosing context, so the\nfollowing code works as expected.\n\n    \n    \n    function Person(){\n      this.age = 0;\n    \n      setInterval(() => {\n        this.age++; // |this| properly refers to the person object\n      }, 1000);\n    }\n    \n    var p = new Person();\n\n#### Relation with strict mode\n\nGiven that `this` is lexical, [strict mode][4] rules with regard to `this` are\njust ignored.\n\n    \n    \n    var f = () => {'use strict'; return this};\n    f() === window; // or the global object\n\nThe rest of strict mode rules apply normally.\n\n## Examples\n\n    \n    \n    // An empty arrow function returns undefined\n    let empty = () => {};\n    \n    (() => \"foobar\")() // returns \"foobar\" \n    \n    var simple = a => a > 15 ? 15 : a; \n    simple(16); // 15\n    simple(10); // 10\n    \n    var complex = (a, b) => {\n        if (a > b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Arrow Function Definitions' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[22.0][7] (22.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n22.0 (22.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### Firefox-specific notes\n\n  * The initial implementation of arrow functions in Firefox made them automatically strict. This has been changed as of [Firefox 24][8]. The use of `\"use strict\";` is now required.\n  * Arrow functions are semantically different from the non-standard Expression Closures added in [Firefox 3][9] (details: [Javascript 1.8][10]), for Expression Closures do not bind `this` lexically.\n\n[1]: http://wiki.ecmascript.org/doku.php?id=harmony:arrow_function_syntax\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arrow-function-definitions\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/22\n\n[8]: /en-US/docs/Mozilla/Firefox/Releases/24\n\n[9]: /en-US/Firefox/Releases/3\n\n[10]: /en-US/docs/Web/JavaScript/New_in_JavaScript/1.8\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "Logical Operators", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/logical_operators", "content": "## Summary\n\nLogical operators are typically used with [`Boolean][1]` (logical) values.\nWhen they are, they return a Boolean value. However, the `&&` and `||`\noperators actually return the value of one of the specified operands, so if\nthese operators are used with non-Boolean values, they may return a non-\nBoolean value.\n\n## Description\n\nThe logical operators are described in the following table:  \n  \n<table>  \n<tr>  \n<th>\n\nOperator\n\n</th>  \n<th>\n\nUsage\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\nLogical AND (`&&`)\n\n</td>  \n<td>\n\n`_expr1_ && _expr2_`\n\n</td>  \n<td>\n\nReturns `expr1` if it can be converted to false; otherwise, returns `expr2`.\nThus, when used with Boolean values, `&&` returns true if both operands are\ntrue; otherwise, returns false.\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical OR (`||`)\n\n</td>  \n<td>\n\n`_expr1_ || _expr2_`\n\n</td>  \n<td>\n\nReturns `expr1` if it can be converted to true; otherwise, returns `expr2`.\nThus, when used with Boolean values, `||` returns true if either operand is\ntrue; if both are false, returns false.\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical NOT (`!`)\n\n</td>  \n<td>\n\n`!_expr_`\n\n</td>  \n<td>\n\nReturns false if its single operand can be converted to true; otherwise,\nreturns true.\n\n</td> </tr> </table>\n\nExamples of expressions that can be converted to false are those that evaluate\nto null, 0, the empty string (\"\"), or undefined.\n\nEven though the `&&` and `||` operators can be used with operands that are not\nBoolean values, they can still be considered Boolean operators since their\nreturn values can always be converted to Boolean values.\n\n### Short-Circuit Evaluation\n\nAs logical expressions are evaluated left to right, they are tested for\npossible \"short-circuit\" evaluation using the following rules:\n\n  * `false && (_anything)_` is short-circuit evaluated to false.\n  * `true || (_anything)_` is short-circuit evaluated to true.\n\nThe rules of logic guarantee that these evaluations are always correct. Note\nthat the anything part of the above expressions is not evaluated, so any side\neffects of doing so do not take effect. Also note that the anything part of\nthe above expression is any single logical expression (as indicated by the\nparentheses).\n\nFor example, the following two functions are equivalent.\n\n    \n    \n    function shortCircuitEvaluation() {\n    \u00a0\u00a0doSomething() || doSomethingElse()\n    }\n    \n    function equivalentEvaluation() {\n    \u00a0 var flag = doSomething();\n    \u00a0 if (!flag) {\n    \u00a0 \u00a0 doSomethingElse();\n    \u00a0 }\n    }\n    \n\nHowever, the following expressions are not\u00a0equivalent due to [operator\nprecedence][2], and stresses the importance of requiring the right hand\noperator to be a single expression (grouped if needed by\u00a0parentheses).\n\n    \n    \n     false && true || true       // returns true\n     false && (true || true)     // returns false\n\n### Logical AND (`&&`)\n\nThe following code shows examples of the `&&` (logical AND) operator.\n\n    \n    \n    a1 = true && true       // t && t returns true\n    a2 = true && false      // t && f returns false\n    a3 = false && true      // f && t returns false\n    a4 = false && (3 == 4)  // f && f returns false\n    a5 = \"Cat\" && \"Dog\"     // t && t returns Dog\n    a6 = false && \"Cat\"     // f && t returns false\n    a7 = \"Cat\" && false     // t && f returns false\n    \n\n### Logical OR (`||`)\n\nThe following code shows examples of the `||` (logical OR) operator.\n\n    \n    \n    o1 = true || true       // t || t returns true\n    o2 = false || true      // f || t returns true\n    o3 = true || false      // t || f returns true\n    o4 = false || (3 == 4)  // f || f returns false\n    o5 = \"Cat\" || \"Dog\"     // t || t returns Cat\n    o6 = false || \"Cat\"     // f || t returns Cat\n    o7 = \"Cat\" || false     // t || f returns Cat\n    \n\n### Logical NOT (`!`)\n\nThe following code shows examples of the `!` (logical NOT) operator.\n\n    \n    \n    n1 = !true              //\u00a0!t returns false\n    n2 = !false             //\u00a0!f returns true\n    n3 = !\"Cat\"             //\u00a0!t returns false\n    \n\n### Conversion rules\n\n#### Converting AND to OR\n\nthe following operation involving Booleans:\n\n    \n    \n    bCondition1 && bCondition2\n\nis always equal to:\n\n    \n    \n    !(!bCondition1 || !bCondition2)\n\n#### Converting OR to AND\n\nthe following operation involving Booleans:\n\n    \n    \n    bCondition1 || bCondition2\n\nis always equal to:\n\n    \n    \n    !(!bCondition1 && !bCondition2)\n\n### Removing nested parentheses\n\nAs logical expressions are evaluated left to right, it is always possible to\nremove parentheses from a complex expression following some rules.\n\n#### Removing nested AND\n\nThe following composite operation involving Booleans:\n\n    \n    \n    bCondition1 || (bCondition2 && bCondition3)\n\nis always equal to:\n\n    \n    \n    bCondition1 || bCondition2 && bCondition3\n\n#### Removing nested OR\n\nThe following composite operation involving Booleans:\n\n    \n    \n    bCondition1 && (bCondition2 || bCondition3)\n\nis always equal to:\n\n    \n    \n    !(!bCondition1 || !bCondition2 && !bCondition3)\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Logical NOT Operator' in that specification.][3]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Binary Logical Operators' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Logical NOT operator' in that specification.][5]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Binary Logical Operators' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nLogical AND (`&&`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical OR (`||`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical NOT (`!`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nLogical AND (`&&`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical OR (`||`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLogical NOT (`!`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Backward compatibility: Behavior in JavaScript 1.0 and 1.1\n\nThe && and `||` operators behave as follows:  \n  \n<table>  \n<tr>  \n<th>\n\nOperator\n\n</th>  \n<th>\n\nUsage\n\n</th>  \n<th>\n\nBehavior\n\n</th> </tr>  \n<tr>  \n<td>\n\n`&&`\n\n</td>  \n<td>\n\n`_expr1_ && _expr2_`\n\n</td>  \n<td>\n\nIf the first operand (`expr1`) can be converted to false, the `&&` operator\nreturns false rather than the value of `expr1`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`||`\n\n</td>  \n<td>\n\n`_expr1_ || _expr2_`\n\n</td>  \n<td>\n\nIf the first operand (`expr1`) can be converted to true, the `||` operator\nreturns true rather than the value of `expr1`.\n\n</td> </tr> </table>\n\n## See also\n\n  * [Bitwise operators][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.9\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.11\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-logical-not-operator\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-binary-logical-operators\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Operator precedence", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/operator_precedence", "content": "## Summary\n\nOperator precedence determines the order in which operators are evaluated.\nOperators with higher precedence are evaluated first.\n\nA common example:\n\n    \n    \n    3 + 4 * 5 // returns 23\t \n    \n\nThe multiplication operator (\"`*`\") has higher precedence than the addition\noperator (\"`+`\") and thus will be evaluated first.\n\n## Associativity\n\nAssociativity determines the order in which operators of the same precedence\nare processed. For example, consider an expression:\n\n    \n    \n    a OP b OP c\n    \n\nLeft-associativity (left-to-right) means that it is processed as `(a OP b) OP\nc`, while right-associativity (right-to-left) means it is interpreted as `a OP\n(b OP c)`. Assignment operators are right-associative, so you can write:\n\n    \n    \n    a = b = 5;\n    \n\nwith the expected result that `a` and `b` get the value 5. This is because the\nassignment operator returns the value that it assigned. First, `b` is set to\n5. Then the `a` is set to the value of `b`.\n\n## Table\n\nThe following table is ordered from highest (0) to lowest (19) precedence.  \n  \n<table>  \n<tr>  \n<th>\n\nPrecedence\n\n</th>  \n<th>\n\nOperator type\n\n</th>  \n<th>\n\nAssociativity\n\n</th>  \n<th>\n\nIndividual operators\n\n</th> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n[Grouping][1]\n\n</td>  \n<td>\n\nn/a\n\n</td>  \n<td>\n\n`( \u2026 )`\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n[Member Access][2]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 . \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Computed Member Access][2]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 [ \u2026 ]`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[new][3] (with argument list)\n\n</td>  \n<td>\n\nn/a\n\n</td>  \n<td>\n\n`new \u2026 ( \u2026 )`\n\n</td> </tr>  \n<tr>  \n<td>\n\n2\n\n</td>  \n<td>\n\n[Function Call][4]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 (\u00a0\u2026\u00a0)`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[new][5]\u00a0(without argument list)\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`new \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n3\n\n</td>  \n<td>\n\n[Postfix Increment][6]\n\n</td>  \n<td>\n\nn/a\n\n</td>  \n<td>\n\n`\u2026 ++`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Postfix Decrement][7]\n\n</td>  \n<td>\n\nn/a\n\n</td>  \n<td>\n\n`\u2026 --`\n\n</td> </tr>  \n<tr>  \n<td>\n\n4\n\n</td>  \n<td>\n\n[Logical NOT][8]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`! \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Bitwise NOT][9]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`~ \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Unary Plus][10]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`\\+ \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Unary Negation][11]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`\\- \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Prefix Increment][6]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`++ \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Prefix Decrement][7]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`\\-- \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[typeof][12]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`typeof \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[void][13]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`void \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[delete][14]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`delete \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[Multiplication][15]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 *\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Division][16]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 /\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Remainder][17]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 %\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[Addition][18]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 +\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Subtraction][19]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 -\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n7\n\n</td>  \n<td>\n\n[Bitwise Left Shift][20]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 <<\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Bitwise Right Shift][20]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 >>\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Bitwise Unsigned Right Shift][20]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 >>>\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n8\n\n</td>  \n<td>\n\n[Less Than][21]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 <\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Less Than Or Equal][22]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 <=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Greater Than][23]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 >\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Greater Than Or Equal][24]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 >=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[in][25]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 in\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[instanceof][26]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 instanceof\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n9\n\n</td>  \n<td>\n\n[Equality][27]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 ==\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Inequality][28]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 !=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Strict Equality][29]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 ===\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[Strict Inequality][30]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 !==\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n10\n\n</td>  \n<td>\n\n[Bitwise AND][31]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 &\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n11\n\n</td>  \n<td>\n\n[Bitwise XOR][32]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 ^\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n12\n\n</td>  \n<td>\n\n[Bitwise OR][33]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 |\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n13\n\n</td>  \n<td>\n\n[Logical AND][34]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 &&\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n14\n\n</td>  \n<td>\n\n[Logical OR][35]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 ||\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n15\n\n</td>  \n<td>\n\n[Conditional][36]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`\u2026 ? \u2026 : \u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n16\n\n</td>  \n<td>\n\n[Assignment][37]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\n`\u2026 =\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 +=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 -=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 *=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 /=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 %=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 <<=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 >>=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 >>>=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 &=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 ^=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\u2026 |=\u00a0\u2026`\n\n</td> </tr>  \n<tr>  \n<td>\n\n17\n\n</td>  \n<td>\n\n[yield][38]\n\n</td>  \n<td>\n\nright-to-left\n\n</td>  \n<td>\n\nyield\u00a0\u2026\n\n</td> </tr>  \n<tr>  \n<td>\n\n18\n\n</td>  \n<td>\n\n[Spread][39]\n\n</td>  \n<td>\n\nn/a\n\n</td>  \n<td>\n\n`...`\u00a0\u2026\n\n</td> </tr>  \n<tr>  \n<td>\n\n19\n\n</td>  \n<td>\n\n[Comma / Sequence][40]\n\n</td>  \n<td>\n\nleft-to-right\n\n</td>  \n<td>\n\n`\u2026 ,\u00a0\u2026`\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Grouping\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation\n\n[3]: /en-US/docs/JavaScript/Reference/Operators/Special/new\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Functions\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_operator\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than__or_equal_operator\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_operator\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_AND\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Operators/yield\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Functions", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Functions", "parsed_url": "/javascript/javascript_reference/functions", "content": "## Summary\n\nGenerally speaking, a function is a \"subprogram\" that can be _called_ by code\nexternal (or internal in the case of recursion) to the function. Like the\nprogram itself, a function is composed of a sequence of statements called the\n_function body_. Values can be _passed_ to a function, and the function can\n_return_ a value.\n\nIn JavaScript, functions are first-class objects, i.e. they are objects and\ncan be manipulated and passed around just like any other object. Specifically,\nthey are [`Function][1]` objects.\n\nFor more examples and explanations, see also the [JavaScript guide about\nfunctions][2].\n\n## Description\n\nEvery function in JavaScript is a `Function` object. See [`Function`][3] for\ninformation on properties and methods of `Function` objects.\n\nFunctions are not the same as procedures. A function always returns a value,\nbut a procedure may or may not return any value.\n\nTo return a specific\u00a0value other than the default,\u00a0a function must have a\n[`return][4]` statement that specifies the value to return. A function without\na return statement will return a default value. In the case of\u00a0a\n[constructor][5] called with the [`new][6]` keyword, the default value is the\nvalue of its\u00a0`this` parameter. For all other functions, the default return\nvalue is `undefined`.\n\nThe parameters of a function call are the function's _arguments_. Arguments\nare passed to functions _by value_. If the function changes the value of an\nargument, this change is not reflected globally or in the calling function.\nHowever, object references are values, too, and they are special: if the\nfunction changes the referred object's properties, that change is visible\noutside the function, as shown in the following example:\n\n    \n    \n    /* Declare the function 'myFunc' */\n    function myFunc(theObject) {\n       theObject.brand = \"Toyota\";\n     }\n     \n     /*\n      * Declare variable 'mycar';\n      * create and initialize a new Object;\n      * assign reference to it to 'mycar'\n      */\n     var mycar = {\n       brand: \"Honda\",\n       model: \"Accord\",\n       year: 1998\n     };\n    \n     /* Logs 'Honda' */\n     console.log(mycar.brand);\n    \n     /* Pass object reference to the function */\n     myFunc(mycar);\n    \n     /*\n      * Logs 'Toyota' as the value of the 'brand' property\n      * of the object, as changed to by the function.\n      */\n     console.log(mycar.brand);\n    \n\nThe [`this` keyword][7] does not refer to the currently executing function, so\nyou must refer to `Function` objects by name, even within the function body.\n\n## Defining functions\n\nThere are several ways to define functions:\n\n### The function declaration (`function` statement)\n\nThere is a special syntax for declaring functions (see [function statement][8]\nfor details):\n\n    \n    \n    function _name_([_param_[, _param_[, ... _param_]]]) {\n       _statements_\n    }\n    \n\n`name`\n\n     The function name.\n\n`param`\n\n     The name of an argument to be passed to the function. A function can have up to 255 arguments.\n\n`statements`\n\n     The statements comprising the body of the function.\n\n### The function expression (`function` operator)\n\nA function expression is similar to and has the same syntax as a function\ndeclaration (see [function operator][9] for details):\n\n    \n    \n    function [_name_]([_param_] [, _param_] [..., _param_]) {\n       _statements_\n    }\n    \n\n`name`\n\n     The function name. Can be omitted, in which case the function becomes known as an anonymous function.\n\n`param`\n\n     The name of an argument to be passed to the function. A function can have up to 255 arguments.\n`statements`\n\n     The statements which comprise the body of the function.\n\n### The arrow function expression (=>)\n\n**Note:** Arrow function expressions are an _experimental technology,_ part of the ECMAScript 6 proposal, and are not widely supported by browsers yet.\n\nAn arrow function expression has a shorter syntax and lexically binds its this\nvalue (see [arrow functions][10] for details):\n\n    \n    \n    ([param] [, param]) => {\n       statements\n    }\n    \n    param => expression\n    \n\n`param`\n\n     The name of an argument. Zero arguments need to be indicated with `()`.\u00a0 For only one argument the parentheses are not required. (like `foo => 1`)\n`statements or expression`\n\n     Multiple statements need to be enclosed in brackets. A single expression requires no brackets. The expression is also the implicit return value of that function.\n\n### The `Function` constructor\n\n**Note:** Using the `Function` constructor to create functions is not recommended since it needs the function body as a string which may prevent some JS engine optimizations and can also cause other problems.\n\nAs all other objects, [`Function`][3] objects can be created using the `new`\noperator:\n\n    \n    \n    new Function (_arg1_, _arg2_, ... _argN_, _functionBody_)\n    \n\n`arg1, arg2, ... arg_N_`\n\n     Zero or more names to be used by the function as formal argument names. Each must be a string that conforms to the rules for a valid JavaScript identifier or a list of such strings separated with a comma; for example \"`x`\", \"`theValue`\", or \"`a,b`\".\n\n`functionBody`\n\n     A string containing the JavaScript statements comprising the function definition.\n\nInvoking the `Function` constructor as a function (without using the `new`\noperator) has the same effect as invoking it as a constructor.\n\n## Function parameters\n\n**Note:** Default and rest parameters are _experimental technology,_ part of the ECMAScript 6 proposal, and are not widely supported by browsers yet.\n\n### Default parameters\n\nDefault function parameters allow formal parameters to be initialized with\ndefault values if no value or `undefined` is passed. For more details, see[\ndefault parameters][11].\n\n### Rest parameters\n\nThe rest parameter syntax allows to represent an indefinite number of\narguments as an array. For more details, see [rest parameters][12].\n\n## The `arguments` object\n\nYou can refer to a function's arguments within the function by using the\n`arguments` object. See [arguments][13].\n\n  * [`arguments][14]`: An array-like object containing the arguments passed to the currently executing function.\n  * [`arguments.callee][15]` _ _: The currently executing function.\n  * [`arguments.caller][16]` _ _ : The function that invoked the currently executing function.\n  * [`arguments.length][17]`: The number of arguments passed to the function.\n\n## Defining method functions\n\n### Getter and setter functions\n\nYou can define getters (accessor methods) and setters (mutator methods) on any\nstandard built-in object or user-defined object that supports the addition of\nnew properties. The syntax for defining getters and setters uses the object\nliteral syntax.\n\n[get][18]\n\n    \n\nBinds an object property to a function that will be called when that property\nis looked up.\n\n[set][19]\n\n     Binds an object property to a function to be called when there is an attempt to set that property.\n\n### Method definition syntax\n\n**Note:** _Method definitions are experimental technology,_ part of the ECMAScript 6 proposal, and are not widely supported by browsers yet.\n\nStarting with ECMAScript 6, you are able to define own methods in a shorter\nsyntax, similar to the getters and setters. See [method definitions][20] for\nmore information.\n\n    \n    \n    var obj = {\n      foo() {},\n    \u00a0 bar() {}\n    };\n\n## `Function` constructor vs. function declaration vs. function expression\n\nCompare the following:\n\nA function defined with the `Function` constructor assigned to the variable\n`multiply`\n\n    \n    \n    function multiply(x, y) {\n       return x * y;\n    }\n    \n\nA _function expression_ of an anonymous function assigned to the variable\n`multiply`\n\n    \n    \n    var multiply = function(x, y) {\n       return x * y;\n    };\n    \n\nA _function expression_ of a function named `func_name` assigned to the\nvariable `multiply`\n\n    \n    \n    var multiply = function func_name(x, y) {\n       return x * y;\n    };\n    \n\n### Differences\n\nAll do approximately the same thing, with a few subtle differences:\n\nThere is a distinction between the function name and the variable the function\nis assigned to. The function name cannot be changed, while the variable the\nfunction is assigned to can be reassigned. The function name can be used only\nwithin the function's body. Attempting to use it outside the function's body\nresults in an error (or `undefined` if the function name was previously\ndeclared via a `var` statement). For example:\n\n    \n    \n    var y = function x() {};\n    alert(x); // throws an error\n    \n\nThe function name also appears when the function is serialized via\n[`Function`'s toString method][21].\n\nOn the other hand, the variable the function is assigned to is limited only by\nits scope, which is guaranteed to include the scope where the function is\ndeclared in.\n\nAs the 4th example shows, the function name can be different from the variable\nthe function is assigned to. They have no relation to each other.A function\ndeclaration also creates a variable with the same name as the function name.\nThus, unlike those defined by function expressions, functions defined by\nfunction declarations can be accessed by their name in the scope they were\ndefined in:\n\nA function defined by '`new Function'` does not have a function name. However,\nin the [SpiderMonkey][22] JavaScript engine, the serialized form of the\nfunction shows as if it has the name \"anonymous\". For example, `alert(new\nFunction())` outputs:\n\n    \n    \n    function anonymous() {\n    }\n    \n\nSince the function actually does not have a name, `anonymous` is not a\nvariable that can be accessed within the function. For example, the following\nwould result in an error:\n\n    \n    \n    var foo = new Function(\"alert(anonymous);\");\n    foo();\n    \n\nUnlike functions defined by function expressions or by the `Function`\nconstructor, a function defined by a function declaration can be used before\nthe function declaration itself. For example:\n\n    \n    \n    foo(); // alerts FOO!\n    function foo() {\n       alert('FOO!');\n    }\n    \n\nA function defined by a function expression inherits the current scope. That\nis, the function forms a closure. On the other hand, a function defined by a\n`Function` constructor does not inherit any scope other than the global scope\n(which all functions inherit).\n\nFunctions defined by function expressions and function declarations are parsed\nonly once, while those defined by the `Function` constructor are not. That is,\nthe function body string passed to the `Function` constructor must be parsed\neach and every time the constructor is called. Although a function expression\ncreates a closure every time, the function body is not reparsed, so function\nexpressions are still faster than \"`new Function(...)`\". Therefore the\n`Function` constructor should generally be avoided whenever possible.\n\nIt should be noted, however, that function expressions and function\ndeclarations nested within the function generated by parsing a `Function\nconstructor` 's string aren't parsed repeatedly. For example:\n\n    \n    \n    var foo = (new Function(\"var bar = \\'FOO!\\';\\nreturn(function() {\\n\\talert(bar);\\n});\"))();\n    foo(); // The segment \"function() {\\n\\talert(bar);\\n}\" of the function body string is not re-parsed.\n\nA function declaration is very easily (and often unintentionally) turned into\na function expression. A function declaration ceases to be one when it either:\n\n  * becomes part of an expression\n  * is no longer a \"source element\" of a function or the script itself. A \"source element\" is a non-nested statement in the script or a function body:\n    \n    \n    var x = 0;               // source element\n    if (x == 0) {            // source element\n       x = 10;               // not a source element\n       function boo() {}     // not a source element\n    }\n    function foo() {         // source element\n       var y = 20;           // source element\n       function bar() {}     // source element\n       while (y == 10) {     // source element\n          function blah() {} // not a source element\n          y++;               // not a source element\n       }\n    }\n    \n\n### Examples\n\n    \n    \n    // function declaration\n    function foo() {}\n    \n    // function expression\n    (function bar() {})\n    \n    // function expression\n    x = function hello() {}\n    \n    \n    if (x) {\n       // function expression\n       function world() {}\n    }\n    \n    \n    // function declaration\n    function a() {\n       // function declaration\n       function b() {}\n       if (0) {\n          // function expression\n          function c() {}\n       }\n    }\n    \n\n## Conditionally defining a function\n\nFunctions can be conditionally defined using either //function statements//\n(an allowed extension to the [ECMA-262 Edition 3][23] standard) or the\n`Function` constructor. Please note that such [function statements are no\nlonger allowed in ES5 strict][24]. Additionally, this feature does not work\nconsistently cross-browser, so you should not rely on it.\n\nIn the following script, the `zero` function is never defined and cannot be\ninvoked, because '`if (0)`' evaluates its condition to false:\n\n    \n    \n    if (0) {\n       function zero() {\n          document.writeln(\"This is zero.\");\n       }\n    }\n    \n\nIf the script is changed so that the condition becomes '`if (1)`', function\n`zero` is defined.\n\nNote: Although this kind of function looks like a function declaration, it is\nactually an expression (or statement), since it is nested within another\nstatement. See differences between function declarations and function\nexpressions.\n\nNote: Some JavaScript engines, not including [SpiderMonkey][25], incorrectly\ntreat any function expression with a name as a function definition. This would\nlead to `zero` being defined, even with the always-false `if` condition. A\nsafer way to define functions conditionally is to define the function\nanonymously and assign it to a variable:\n\n    \n    \n    if (0) {\n       var zero = function() {\n          document.writeln(\"This is zero.\");\n       }\n    }\n    \n\n## Examples\n\n### Example: Returning a formatted number\n\nThe following function returns a string containing the formatted\nrepresentation of a number padded with leading zeros.\n\n    \n    \n    // This function returns a string padded with leading zeros\n    function padZeros(num, totalLen) {\n       var numStr = num.toString();             // Initialize return value as string\n       var numZeros = totalLen - numStr.length; // Calculate no. of zeros\n       for (var i = 1; i <= numZeros; i++) {\n          numStr = \"0\" + numStr;\n       }\n       return numStr;\n    }\n    \n\nThe following statements call the padZeros function.\n\n    \n    \n    var result;\n    result = padZeros(42,4); // returns \"0042\"\n    result = padZeros(42,2); // returns \"42\"\n    result = padZeros(5,4);  // returns \"0005\" \n    \n\n### Example: Determining whether a function exists\n\nYou can determine whether a function exists by using the `typeof` operator. In\nthe following example, a test is peformed to determine if the `window` object\nhas a property called `noFunc` that is a function. If so, it is used;\notherwise some other action is taken.\n\n    \n    \n     if ('function' == typeof window.noFunc) {\n       // use noFunc()\n     } else {\n       // do something else\n     }\n    \n\nNote that in the `if` test, a reference to `noFunc` is used\u2014there are no\nbrackets \"()\" after the function name so the actual function is not called.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function Definition' in that specification.][26]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function definitions' in that specification.][27]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew: Arrow functions, Generator functions, default parameters, rest parameters\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][28].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][1]\n  * [`function` statement][29]\n  * [`function` operator][30]\n\n[1]: /en-US/docs/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Functions\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[14]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[15]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/callee\n\n[16]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/caller\n\n[17]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/length\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Functions/get\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Functions/set\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\n\n[22]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[23]: http://www.ecma-international.org/publications/standards/Ecma-262.htm\n\n[24]: https://bugzilla.mozilla.org/show_bug.cgi?id=609832\n\n[25]: /en-US/docs/SpiderMonkey\n\n[26]: http://www.ecma-international.org/ecma-262/5.1/#sec-13\n\n[27]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-definitions\n\n[28]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[29]: /en-US/docs/JavaScript/Reference/Statements/function\n\n[30]: /en-US/docs/JavaScript/Reference/Operators/function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "yield", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/yield", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/yield", "content": "## Summary\n\n  \n\nThe `yield` keyword is used to pause and resume a [generator][1] function.\n\n## Syntax\n\n    \n    \n     yield [[expression]];\n\n`expression`\n\n     The expression to return. If omitted, `undefined` is returned instead.\n\n## Description\n\nThe `yield` keyword causes generator function execution to pause and return\nthe current value of the expression following the `yield` keyword. It can be\nthought of as a generator-based version of the `return` keyword.\n\nThe `yield` keyword actually returns an object with two parameters, `value`\nand `done.`\u00a0`value` is the result of evaluating the `yield` expression, and\n`done` is a bool indicating whether or not the generator function has fully\ncompleted.\n\nOnce paused on a `yield` statement, code execution for the generator cannot\nresume unless invoked externally by calling the generator's next() method.\nThis allows for direct control of the generator's execution and incremental\nreturn values.\n\n## Examples\n\nThe following code is the declaration of an example generator function, along\nwith a helper function.\n\n    \n    \n    function* foo(){\n      var index = 0;\n      while(index <= 2) // when index reaches 2, yield's done will be true and its value will be undefined;\n        yield index++;\n    }\n\nOnce a generator function is defined, it can be used by contructing an\niterator as shown.\n\n    \n    \n    var iterator = foo();\n    console.log(iterator.next()); // { value:0, done:false }\n    console.log(iterator.next()); // { value:1, done:false }\n    console.log(iterator.next()); // { value:2, done:false }\n    console.log(iterator.next()); // { value:undefined, done:true }\n\nExamples needed here.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td>  \n<td>\n\n(?)\n\n</td> </tr> </table>\n\n\n\n## See also\n\n  * [Iterators][3]\n  * [Generators][4]\n  * [New in JavaScript 1.7][5]\n  * [The Basics Of ES6 Generators][6]\n\n[1]: /en-US/docs/JavaScript/Guide/Iterators_and_Generators#Generators.3A_a_better_way_to_build_Iterators\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html\n\n[3]: /en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[5]: /en-US/docs/Web/JavaScript/New_in_JavaScript/1.7\n\n[6]: http://davidwalsh.name/es6-generators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Property Accessors", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/property_accessors", "content": "## Summary\n\nProperty accessors provide access to an object's properties by using the dot\nnotation or the bracket notation.\n\n## Syntax\n\n    \n    \n    object.property\n    object[\"property\"]\n    \n\n## Description\n\nOne can think of an object as an _associative array_ (a.k.a. _map_,\n_dictionary_, _hash_, _lookup table_). The _keys_ in this array are the names\nof the object's properties. It's typical when speaking of an object's\nproperties to make a distinction between properties and methods. However, the\nproperty/method distinction is little more than a convention. A method is\nsimply a property that can be called, for example if it has a reference to a\n[Function][1] instance as its value.\n\nThere are two ways to access properties: dot notation and bracket notation.\n\n### Dot notation\n\n    \n    \n    get = object.property;\n    object.property = set;\n    \n\n`property` must be a valid JavaScript identifier, i.e. a sequence of\nalphanumerical characters, also including the underscore (\"`_`\") and dollar\nsign (\"`$`\"), that cannot start with a number. For example, `object.$1` is\nvalid, while `object.1` is not.\n\n#### Example:\n\n    \n    \n    document.createElement('pre');\n    \n\nHere, the method named \"createElement\" is retrieved from `document` and is\ncalled.\n\n### Bracket notation\n\n    \n    \n    get = object[property_name];\n    object[property_name] = set;\n    \n\n`property_name` is a string. The string does not have to be a valid\nidentifier; it can have any value, e.g. \"1foo\", \"!bar!\", or even \" \" (a\nspace).\n\n#### Example:\n\n    \n    \n    document['createElement']('pre');\n    \n\nThis does the exact same thing as the previous example.\n\n### Property names\n\nProperty names must be strings. This means that non-string objects cannot be\nused as keys in the object. Any non-string object, including a number, is\ntypecasted into a string via the [toString][2] method.\n\n#### Examples:\n\n    \n    \n    var object = {};\n    object['1'] = 'value';\n    alert(object[1]);\n    \n\nThis outputs \"value\", since 1 is typecasted into '1'.\n\n    \n    \n    var foo = {unique_prop: 1}, bar = {unique_prop: 2}, object = {};\n    object[foo] = 'value';\n    alert(object[bar]);\n    \n\nThis also outputs \"value\", since both foo and bar are converted to the same\nstring. In the [SpiderMonkey][3] JavaScript engine, this string would be\n\"['object Object']\".\n\n### Method binding\n\nA method is not bound to the object that it is a method of. Specifically,\n`this` is not fixed in a method, i.e., `this` does not necessarily refer to an\nobject containing the method. `this` is instead \"passed\" by the function call.\nSee [method binding][4].\n\n### Note on `eval`\n\nJavaScript novices often make the mistake of using [eval][5] where the bracket\nnotation can be used instead. For example, the following syntax is often seen\nin many scripts.\n\n    \n    \n    x = eval('document.forms.form_name.elements.' + strFormControl + '.value');\n    \n\n`eval` is slow and should be avoided whenever possible. Also, `strFormControl`\nwould have to hold an identifier, which is not required for names and IDs of\nform controls. It is better to use bracket notation instead:\n\n    \n    \n    x = document.forms[\"form_name\"].elements[strFormControl].value;\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/this#Method_binding\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-property-accessors\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Assignment operators", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/assignment_operators", "content": "## Summary\n\nAn **assignment operator** assigns a value to its left operand based on the\nvalue of its right operand.\n\n## Description\n\nThe basic assignment operator is equal (`=`), which assigns the value of its\nright operand to its left operand. That is, `x = y` assigns the value of `y`\nto `x`. The other assignment operators are usually shorthand for standard\noperations, as shown in the following definitions and examples.  \n  \n<table>  \n<tr>  \n<th>\n\nName\n\n</th>  \n<th>\n\nShorthand operator\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\nAssignment\n\n</td>  \n<td>\n\n`x = y`\n\n</td>  \n<td>\n\n`x = y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nAddition assignment\n\n</td>  \n<td>\n\n`x += y`\n\n</td>  \n<td>\n\n`x = x + y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nSubtraction assignment\n\n</td>  \n<td>\n\n`x -= y`\n\n</td>  \n<td>\n\n`x = x - y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nMultiplication assigment\n\n</td>  \n<td>\n\n`x *= y`\n\n</td>  \n<td>\n\n`x = x * y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nDivision assignment\n\n</td>  \n<td>\n\n`x /= y`\n\n</td>  \n<td>\n\n`x = x / y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nRemainder assignment\n\n</td>  \n<td>\n\n`x\u00a0%= y`\n\n</td>  \n<td>\n\n`x = x\u00a0% y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nLeft shift assignment\n\n</td>  \n<td>\n\n`x <<= y`\n\n</td>  \n<td>\n\n`x = x << y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nRight shift assignment\n\n</td>  \n<td>\n\n`x >>= y`\n\n</td>  \n<td>\n\n`x = x >> y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnsigned right shift assignment\n\n</td>  \n<td>\n\n`x >>>= y`\n\n</td>  \n<td>\n\n`x = x >>> y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise AND assignment\n\n</td>  \n<td>\n\n`x &= y`\n\n</td>  \n<td>\n\n`x = x & y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise XOR assignment\n\n</td>  \n<td>\n\n`x ^= y`\n\n</td>  \n<td>\n\n`x = x ^ y`\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise OR assignment\n\n</td>  \n<td>\n\n`x |= y`\n\n</td>  \n<td>\n\n`x = x | y`\n\n</td> </tr> </table>\n\n### Assignment\n\nSimple assignment operator which assigns a value to a variable. Chaining the\nassignment operator is possible in order to assign a single value to multiple\nvariables. See the example.\n\n#### Syntax\n\n    \n    \n    **Operator:** x = y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variables\n    //  x = 5\n    //  y = 10\n    //  z = 25\n    \n    x = y     // x is 10\n    x = y = z // x, y and z are all 25\n    \n\n### Addition assignment\n\nThe addition assignment operator **adds** the value of the right operand to a\nvariable and assigns the result to the variable. The types of the two operands\ndetermine the behaviour of the addition assignment operator. Addition or\nconcatenation is possible. See the [addition operator][1] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x += y \n    **Meaning:**  x  = x + y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variables\n    //  foo = \"foo\"\n    //  bar = 5\n    //  baz = true\n    \n    \n    // Number + Number -> addition\n    bar += 2 // 7\n    \n    // Boolean + Number -> addition\n    baz += 1 // 2\n    \n    // Boolean + Boolean -> addition\n    baz += false // 0\n    \n    // Number + String -> concatenation\n    bar += \"foo\" // \"5foo\"\n    \n    // String + Boolean -> concatenation\n    foo += false // \"foofalse\"\n    \n    // String + String -> concatenation\n    foo += \"bar\" // \"foobar\"\n    \n\n### Subtraction assignment\n\nThe subtraction assignment operator **subtracts** the value of the right\noperand from a variable and assigns the result to the variable. See the\n[subtraction operator][2] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x -= y \n    **Meaning:**  x  = x - y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variable\n    //  bar = 5\n    \n    bar -= 2     // 3\n    bar -= \"foo\" // NaN\n    \n\n### Multiplication assignment\n\nThe multiplication assignment operator **multiplies** a variable by the value\nof the right operand and assigns the result to the variable. See the\n[multiplication operator][3] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x *= y \n    **Meaning:**  x  = x * y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variable\n    //  bar = 5\n    \n    bar *= 2     // 10\n    bar *= \"foo\" // NaN\n    \n\n### Division assignment\n\nThe division assignment operator **divides** a variable by the value of the\nright operand and assigns the result to the variable. See the [division\noperator][4] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x /= y \n    **Meaning:**  x  = x / y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variable\n    //  bar = 5\n    \n    bar /= 2     // 2.5\n    bar /= \"foo\" // NaN\n    bar /= 0     // Infinity\n    \n\n### Remainder assignment\n\nThe remainder assignment operator **divides** a variable by the value of the\nright operand and assigns the **remainder** to the variable. See the\n[remainder operator][5] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x %= y \n    **Meaning:**  x  = x % y\n    \n\n#### Examples\n\n    \n    \n    // Assuming the following variable\n    //  bar = 5\n    \n    bar %= 2     // 1\n    bar %= \"foo\" // NaN\n    bar %= 0     // NaN\n    \n\n### Left shift assignment\n\nThe left shift assignment operator moves the specified amount of bits to the\nleft and assigns the result to the variable. See the [left shift operator][6]\nfor more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x <<= y \n    **Meaning:**  x   = x << y\n    \n\n#### Examples\n\n    \n    \n    var bar = 5; //  (00000000000000000000000000000101)\n    bar <<= 2; // 20 (00000000000000000000000000010100)\n    \n\n### Right shift assignment\n\nThe right shift assignment operator moves the specified amount of bits to the\nright and assigns the result to the variable. See the [right shift\noperator][7] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x >>= y \n    **Meaning:**  x   = x >> y\n    \n\n#### Examples\n\n    \n    \n    var bar = 5; //   (00000000000000000000000000000101)\n    bar >>= 2;   // 1 (00000000000000000000000000000001)\n    \n    var bar -5; //    (-00000000000000000000000000000101)\n    bar >>= 2;  // -2 (-00000000000000000000000000000010)\n    \n\n### Unsigned right shift assignment\n\nThe unsigned right shift assignment operator moves the specified amount of\nbits to the right and assigns the result to the variable. See the [ unsigned\nright shift operator][8] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x >>>= y \n    **Meaning:**  x    = x >>> y\n    \n\n#### Examples\n\n    \n    \n    var bar = 5; //   (00000000000000000000000000000101)\n    bar >>>= 2;  // 1 (00000000000000000000000000000001)\n    \n    var bar = -5; // (-00000000000000000000000000000101)\n    bar >>>= 2; // 1073741822 (00111111111111111111111111111110)\n\n### Bitwise AND assignment\n\nThe bitwise AND assignment operator uses the binary representation of both\noperands, does a bitwise AND operation on them and assigns the result to the\nvariable. See the [bitwise AND operator][9] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x &= y \n    **Meaning:**  x  = x & y\n    \n\n#### Example\n\n    \n    \n    var bar = 5;\n    // 5:     00000000000000000000000000000101\n    // 2:     00000000000000000000000000000010\n    bar &= 2; // 0\n    \n\n### Bitwise XOR assignment\n\nThe bitwise XOR assignment operator uses the binary representation of both\noperands, does a bitwise XOR operation on them and assigns the result to the\nvariable. See the [bitwise XOR operator][10] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x ^= y \n    **Meaning:**  x  = x ^ y\n    \n\n#### Example\n\n    \n    \n    var bar = 5;\n    bar ^= 2; // 7\n    // 5: 00000000000000000000000000000101\n    // 2: 00000000000000000000000000000010\n    // -----------------------------------\n    // 7: 00000000000000000000000000000111\n    \n\n### Bitwise OR assignment\n\nThe bitwise OR assignment operator uses the binary representation of both\noperands, does a bitwise OR operation on them and assigns the result to the\nvariable. See the [bitwise OR operator][11] for more details.\n\n#### Syntax\n\n    \n    \n    **Operator:** x |= y \n    **Meaning:**  x  = x | y\n    \n\n#### Example\n\n    \n    \n    var bar = 5;\n    bar |= 2; // 7\n    // 5: 00000000000000000000000000000101\n    // 2: 00000000000000000000000000000010\n    // -----------------------------------\n    // 7: 00000000000000000000000000000111\n    \n\n## Examples\n\n### Left operand with another assignment operator\n\nIn unusual situations, the assignment operator (e.g.` x += y`) is not\nidentical to the meaning expression (here `x = x + y`). When the left operand\nof an assignment operator itself contains an assignment operator, the left\noperand is evaluated only once. For example:\n\n    \n    \n    a[i++] += 5         // i is evaluated only once\n    a[i++] = a[i++] + 5 // i is evaluated twice\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Assignment operators' in that specification.][12]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Assignment operators' in that specification.][13]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Arithmetic operators][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Left_shift\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Right_shift\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Unsigned_right_shift\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_AND\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[12]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.13\n\n[13]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-assignment-operators\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Comparison operators", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/comparison_operators", "content": "## Summary\n\nJavaScript has both strict and type\u2013converting comparisons. A strict\ncomparison (e.g., `===`) is only true if the operands are of the same type.\nThe more commonly used abstract comparison (e.g. `==`) converts the operands\nto the same Type before making the comparison. For relational abstract\ncomparisons (e.g., `<=`), the operands are first converted to primitives, then\nto the same type, before comparison.\n\nStrings are compared based on standard lexicographical ordering, using Unicode\nvalues.\n\nFeatures of comparisons:\n\n  * Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.\n  * Two numbers are strictly equal when they are numerically equal (have the same number value). [NaN][1] is not equal to anything, including NaN. Positive and negative zeros are equal to one another.\n  * Two Boolean operands are strictly equal if both are `true` or both are `false`.\n  * Two distinct objects are never equal for either strictly or abstract comparisons.\n  * An expression comparing Objects is only true if the operands reference the same Object.\n  * Null and Undefined Types are `==` (but not `===`).\n\n## Equality operators\n\n### Equality (==)\n\nThe equality operator converts the operands if they are **not of the same\ntype**, then applies strict comparison. If either operand is **a number or a\nboolean**, the operands are converted to numbers if possible; else if either\noperand is** a string**, the string operand is converted to a number if\npossible. If **both operands are objects**, then JavaScript compares internal\nreferences which are equal when operands refer to the same object in memory.\n\n#### Syntax\n\n    \n    \n    x == y\n    \n\n#### Examples\n\n    \n    \n    3   == 3   // true\n    \"3\" == 3   // true\n    3   == '3' // true\n\n### Inequality (!=)\n\nThe inequality operator returns true if the operands are not equal. If the two\noperands are **not of the same type**, JavaScript attempts to convert the\noperands to an appropriate type for the comparison.\u00a0If **both operands are\nobjects**, then JavaScript compares internal references which are not equal\nwhen operands refer to different objects in memory.\n\n#### Syntax\n\n    \n    \n    x != y\n\n#### Examples\n\n    \n    \n    3 != 4   // true\n    3 != \"5\" // true\n    \n\n### Identity / strict equality (===)\n\nThe identity operator returns true if the operands are strictly equal (see\nabove) **with no type conversion**.\n\n#### Syntax\n\n    \n    \n    x === y\n\n#### Examples\n\n    \n    \n    3 === 3   // true\n    \n\n### Non-identity / strict not equal (!==)\n\nThe non-identity operator returns true if the operands **are not equal and/or\nnot of the same type**.\n\n#### Syntax\n\n    \n    \n    x !== y\n\n#### Examples\n\n    \n    \n    3 !== '3' // true\n    4 !== 3   // true\n    \n\n## Relational operators\n\n### Greater than operator (>)\n\nThe greater than operator returns true if the left operand is greater than the\nright operand.\n\n#### Syntax\n\n    \n    \n    x > y\n\n#### Examples\n\n    \n    \n    4 > 3 // true\n    \n\n### Greater than or equal operator (>=)\n\nThe greater than or equal operator returns true if the left operand is greater\nthan or equal to the right operand.\n\n#### Syntax\n\n    \n    \n     x >= y\n\n#### Examples\n\n    \n    \n    4 >= 3 // true\n    3 >= 3 // true\n    \n\n### Less than operator (<)\n\nThe less than operator returns true if the left operand is less than the right\noperand.\n\n#### Syntax\n\n    \n    \n     x < y\n\n#### Examples\n\n    \n    \n    3 < 4 // true\n    \n\n### Less than or equal operator (<=)\n\nThe less than or equal operator returns true if the left operand is less than\nor equal to the right operand.\n\n#### Syntax\n\n    \n    \n     x <= y\n\n#### Examples\n\n    \n    \n    3 <= 4 // true\n    \n\n## Using the Equality Operators\n\nThe standard equality operators (`==` and `!=`) use the [Abstract Equality\nComparison Algorithm][2] to compare two operands. If the operands are of\ndifferent Types, it will attempt to convert them to the same Type before\nmaking the comparison, e.g., in the expression `5 == '5'`, the string on the\nright is converted to Number before the comparison is made.\n\nThe strict equality operators (`===` and `!==`) use the Strict Equality\nComparison Algorithm and are intended for performing equality comparisons on\noperands of the same Type. If the operands are of different Types, the result\nis always `false` so `5 !== '5'`.\n\nUse strict equality operators if the operands must be of a specific Type as\nwell as value or if the exact Type of the operands is important. Otherwise,\nuse the standard equality operators, which allow you to compare the identity\nof two operands even if they are not of the same Type.\n\nWhen Type conversion is involved in the comparison (i.e., non\u2013strict\ncomparison), JavaScript converts Type String, Number, Boolean, or Object\noperands as follows:\n\n  * When comparing a number and a string, the string is converted to a number value. JavaScript attempts to convert the string numeric literal to a `Number` type value. First, a mathematical value is derived from the string numeric literal. Next, this value is rounded to nearest `Number` type value.\n  * If one of the operands is `Boolean`, the Boolean operand is converted to 1 if it is `true` and +0 if it is `false`.\n  * If an object is compared with a number or string, JavaScript attempts to return the default value for the object. Operators attempt to convert the object to a primitive value, a `String` or `Number` value, using the `valueOf` and `toString` methods of the objects. If this attempt to convert the object fails, a runtime error is generated.\n  * Note that an object is converted into a primitive if, and only if, its comparand is a primitive. If both operands are objects, they're compared as objects, and the equality test is true only if both refer the same object.\n\n**Note:** String Objects are Type Object, not String! String objects are rarely used, so the following results might be surprising:\n    \n    \n    // true as both operands are Type String (i.e. string primitives):\n    'foo' === 'foo'\n    \n    var a = new String('foo');\n    var b = new String('foo');\n    \n    // false as a and b are Type Object and reference different objects\n    a == b \n    \n    // false as a and b are Type Object and reference different objects\n    a === b \n    \n    // true as a and 'foo' are of different type and, the Object (a) \n    // is converted to String 'foo' before comparison\n    a == 'foo' \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nAdds `===` and `!==` operators. Implemented in JavaScript 1.3\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Relational Operators' in that specification.][3]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Equality Operators' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Relational Operators' in that specification.][5]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Equality Operators' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.is()`][7]\n  * [Sameness in JavaScript][8]\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.8\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.9\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-relational-operators\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-equality-operators\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n[8]: /en-US/docs/Web/JavaScript/Guide/Sameness\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Arithmetic operators", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/arithmetic_operators", "content": "## Summary\n\n**Arithmetic operators** take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).\n\n## Addition (+)\n\nThe addition operator produces the sum of numeric operands or string\nconcatenation.\n\n### Syntax\n\n    \n    \n    **Operator:** x + y\n    \n\n### Examples\n\n    \n    \n    // Number + Number -> addition\n    1 + 2 // 3\n    \n    // Boolean + Number -> addition\n    true + 1 // 2\n    \n    // Boolean + Boolean -> addition\n    false + false // 0\n    \n    // Number + String -> concatenation\n    5 + \"foo\" // \"5foo\"\n    \n    // String + Boolean -> concatenation\n    \"foo\" + false // \"foofalse\"\n    \n    // String + String -> concatenation\n    \"foo\" + \"bar\" // \"foobar\"\n    \n\n## Subtraction (-)\n\nThe subtraction operator subtracts the two operands, producing their\ndifference.\n\n### Syntax\n\n    \n    \n    **Operator:** x - y\n    \n\n### Examples\n\n    \n    \n    5 - 3 // 2\n    3 - 5 // -2\n    \"foo\" - 3 // NaN\n\n## Division (/)\n\nThe division operator produces the quotient of its operands where the left\noperand is the dividend and the right operand is the divisor.\n\n### Syntax\n\n    \n    \n    **Operator:** x / y\n    \n\n### Examples\n\n    \n    \n    1 / 2      // returns 0.5 in JavaScript\n    1 / 2      // returns 0 in Java \n    // (neither number is explicitly a floating point number)\n    \n    1.0 / 2.0  // returns 0.5 in both JavaScript and Java\n    \n    2.0 / 0    // returns Infinity in JavaScript\n    2.0 / 0.0  // returns Infinity too\n    2.0 / -0.0 // returns -Infinity in JavaScript\n\n## Multiplication (*)\n\nThe multiplication operator produces the product of the operands.\n\n### Syntax\n\n    \n    \n    **Operator:** x * y\n    \n\n### Examples\n\n    \n    \n    2 * 2 // 4\n    -2 * 2 // -4\n    Infinity * 0 // NaN\n    Infinity * Infinity // Infinity\n    \"foo\" * 2 // NaN\n    \n\n## Remainder (%)\n\nThe remainder operator returns the first operand modulo the second operand,\nthat is, `var1` modulo `var2`, in the preceding statement, where `var1` and\n`var2` are variables. The modulo function is the integer remainder of dividing\n`var1` by `var2`.\u00a0[There is a proposal to get an actual modulo operator in a\nfuture version of ECMAScript.][1]\n\n### Syntax\n\n    \n    \n    **Operator:** var1 % var2\n    \n\n### Examples\n\n    \n    \n    12\u00a0% 5 // 2\n    -1\u00a0% 2 // -1\n    NaN % 2 // NaN\n    \n\n## Increment (++)\n\nThe increment operator increments (adds one to) its operand and returns a\nvalue.\n\n  * If used postfix, with operator after operand (for example, x++), then it returns the value before incrementing.\n  * If used prefix with operator before operand (for example, ++x), then it returns the value after incrementing.\n\n### Syntax\n\n    \n    \n    **Operator:** x++ or ++x\n    \n\n### Examples\n\n    \n    \n    // Postfix \n    var x = 3;\n    y = x++; // y = 3, x = 4\n    \n    // Prefix\n    var a = 2;\n    b = ++a; // a = 3, b = 3\n    \n\n## Decrement (--)\n\nThe decrement operator decrements (subtracts one from) its operand and returns\na value.\n\n  * If used postfix (for example, x--), then it returns the value before decrementing.\n  * If used prefix (for example, --x), then it returns the value after decrementing.\n\n### Syntax\n\n    \n    \n    **Operator:** x-- or --x\n    \n\n### Examples\n\n    \n    \n    // Postfix \n    var x = 3;\n    y = x--; // y = 3, x = 2\n    \n    // Prefix\n    var a = 2;\n    b = --a; // a = 1, b = 1\n    \n\n## Unary negation (-)\n\nThe unary negation operator precedes its operand and negates it.\n\n### Syntax\n\n    \n    \n    **Operator:** -x\n    \n\n### Examples\n\n    \n    \n    var x = 3;\n    y = -x; // y = -3, x = 3\n    \n\n## Unary plus (+)\n\nThe unary plus operator precedes its operand and evaluates to its operand but\nattempts to converts it into a number, if it isn't already. Although unary\nnegation (-) also can convert non-numbers, unary plus is the fastest and\npreferred way of converting something into a number, because it does not\nperform any other operations on the number. It can convert string\nrepresentations of integers and floats, as well as the non-string values\n`true`, `false`, and `null`. Integers in both decimal and hexadecimal\n(\"0x\"-prefixed) formats are supported. Negative numbers are supported (though\nnot for hex). If it cannot parse a particular value, it will evaluate to\n[NaN][2].\n\n### Syntax\n\n    \n    \n    **Operator:** +x\n    \n\n### Examples\n\n    \n    \n    +3     // 3\n    +\"3\"   // 3\n    +true  // 1\n    +false // 0\n    +null  // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Additive operators' in that specification.][3]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Multiplicative operators' in that specification.][4]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Postfix expressions' in that specification.][5]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Unary operators' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Additive operators' in that specification.][7]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Multiplicative operators' in that specification.][8]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Postfix expressions' in that specification.][9]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Unary operators' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Assignment operators][11]\n\n[1]: http://wiki.ecmascript.org/doku.php?id=strawman:modulo_operator\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.6\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.5\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.3\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-additive-operators\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-multiplicative-operators\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-postfix-expressions\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-unary-operators\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Object.is()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.is()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Object.is()**` method determines whether two values are [the same\nvalue][1].\n\n## Syntax\n\n    \n    \n    var isSame = Object.is(value1, value2);\n\n### Parameters\n\n`value1`\n\n     The first value to compare.\n`value2`\n\n     The second value to compare.\n\n## Description\n\n`Object.is()` determines whether two values are [the same value][1]. Two\nvalues are the same if one of the following holds:\n\n  * both [`undefined`][2]\n  * both [`null`][3]\n  * both `true` or both `false`\n  * both strings of the same length with the same characters\n  * both the same object\n  * both numbers and \n    * both `+0`\n    * both `-0`\n    * both [`NaN`][4]\n    * or both non-zero and both not [`NaN`][4] and both have the same value\n\nThis is _not_ the same as being equal according to the [`==`][5] operator. The\n[`==`][5] operator applies various coercions to both sides (if they are not\nthe same Type) before testing for equality (resulting in such behavior as `\"\"\n== false` being `true`), but `Object.is` doesn't coerce either value.\n\nThis is also _not_ the same as being equal according to the [`===`][6]\noperator. The [`===`][6] operator (and the [`==`][5] operator as well) treats\nthe number values `-0` and `+0` as equal and treats [`Number.NaN`][7] as not\nequal to [`NaN`][4].\n\n## Examples\n\n    \n    \n    Object.is('foo', 'foo');     // true\n    Object.is(window, window);   // true\n    \n    Object.is('foo', 'bar');     // false\n    Object.is([], []);           // false\n    \n    var test = { a: 1 };\n    Object.is(test, test);       // true\n    \n    Object.is(null, null);       // true\n    \n    // Special Cases\n    Object.is(0, -0);            // false\n    Object.is(-0, -0);           // true\n    Object.is(NaN, 0/0);         // true\n    \n\n## Polyfill\n\n`Object.is` is a proposed addition to the ECMA-262 standard; as such it may\nnot be present in all browsers. You can work around this by using the\nfollowing code at the beginning of your scripts. This will allow you to use\n`Object.is` when there is no built\u2013in support.\n\n    \n    \n    if (!Object.is) {\n      Object.is = function(v1, v2) {\n        if (v1 === 0 && v2 === 0) {\n          return 1 / v1 === 1 / v2;\n        }\n        if (v1 !== v1) {\n          return v2 !== v2;\n        }\n        return v1 === v2;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.is' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n30.0.1599.114\n\n</td>  \n<td>\n\n[22][10] (22)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n22.0 (22)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript Guide: Sameness][1]\u00a0\u2014 a comparison of all three built-in sameness facilities\n\n[1]: /en-US/docs/Web/JavaScript/Guide/Sameness\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.is\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[10]: /en-US/Firefox/Releases/22\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.getPrototypeOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.getprototypeof()", "content": "## Summary\n\nThe `**Object.getPrototypeOf()**` method returns the prototype (i.e. the value\nof the internal [`[Prototype]]` property) of the specified object.\n\n## Syntax\n\n    \n    \n    Object.getPrototypeOf(obj)\n\n### Parameters\n\n`obj`\n\n     The object whose prototype is to be returned.\n\n## Examples\n\n    \n    \n    var proto = {};\n    var obj= Object.create(proto);\n    Object.getPrototypeOf(obj) === proto; // true\n    \n\n## Notes\n\nIn ES5, it will throw a [`TypeError`][1] exception if the `obj` parameter\nisn't an object. In ES6, the parameter will be coerced to an [`Object`][2].\n\n    \n    \n    > Object.getPrototypeOf('foo')\n    TypeError: \"foo\" is not an object  // ES5 code\n    > Object.getPrototypeOf('foo')\n    String.prototype                   // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.getPrototypeOf' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.getProtoypeOf' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[3.5][6] (1.9.1)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12.10 (maybe earlier)\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][7].\n\n### Opera-specific notes\n\nEven though older Opera versions don't support `Object.getPrototypeOf()` yet,\nOpera supports the non-standard [`__proto__`][8] property since Opera 10.50.\n\n## See also\n\n  * [`Object.prototype.isPrototypeOf()`][9]\n  * [`Object.setPrototypeOf()`][10] _ _\n  * John Resig's post on [getPrototypeOf][11]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.2\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.getprototypeof\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/3.5\n\n[7]: http://kangax.github.com/es5-compat-table/\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\n\n[11]: http://ejohn.org/blog/objectgetprototypeof/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Function.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    function.toSource();\n    Function.toSource();\n    \n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `Function` object, `toSource` returns the following string indicating that the source code is not available: \n    \n        function Function() {\n        [native code]\n    }\n    \n\n  * For custom functions, `toSource` returns the JavaScript source that defines the object as a string.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode. You can call `toSource` while debugging to examine the contents of an\nobject.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][1].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][2]\n\n[1]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Function.prototype.isGenerator()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.isgenerator()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**isGenerator()**` method determines whether or not a function is a\n[generator][1].\n\n## Syntax\n\n    \n    \n    fun.isGenerator()\n\n## Description\n\nThe `isGenerator()` method determines whether or not the function _`fun`_ is a\n[generator][1]. It was part of an early Harmony proposal, but has not been\nincluded in the ECMAScript 6 specification.\n\n## Examples\n\n    \n    \n    function f() {}\n    \n    function g() {\n      yield 42;\n    }\n    \n    console.log('f.isGenerator() = ' + f.isGenerator()); // f.isGenerator() = false\n    console.log('g.isGenerator() = ' + g.isGenerator()); // g.isGenerator() = true \n    \n\n## Specifications\n\nNot part of any specification. Implemented in JavaScript 1.8.6.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[5.0][3] (5.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n5.0 (5.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Iterators and generators][4]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Generators.3A_a_better_way_to_build_Iterators\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/Firefox/Releases/5\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Function.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the source code of\nthe function.\n\n## Syntax\n\n    \n    \n    function.toString(indentation)\n\n### Parameters\n\n`indentation` _ _ Obsolete since Gecko 17\n\n    The amount of spaces to indent the string representation of the source code. If `indentation` is less than or equal to `-1`, most unnecessary spaces are removed.\n\n## Description\n\nThe [`Function`][1] object overrides the [`toString`][2] method inherited from\n[`Object`][3]; it does not inherit [`Object.prototype.toString`][2]. For\n[`Function`][1] objects, the `toString` method returns a string representation\nof the object in the form of a function declaration. That is, `toString`\ndecompiles the function, and the string returned includes the `function`\nkeyword, the argument list, curly braces, and the source of the function body.\n\nJavaScript calls the `toString` method automatically when a [`Function`][1] is\nto be represented as a text value, e.g. when a function is concatenated with a\nstring.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\nSince Gecko 17.0 (Firefox 17 / Thunderbird 17 / SeaMonkey 2.14),\n`Function.prototype.toString()` has been implemented by saving the function's\nsource. The decompiler was removed, so that the `indentation` parameter is not\nneeded any more. See [bug\u00a0761723][7] for more details.\n\n## See also\n\n  * [`Object.prototype.toString()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.tostring\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=761723\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Array.prototype.filter()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.filter()", "content": "## Summary\n\nThe `**filter()**` method creates a new array with all elements that pass the\ntest implemented by the provided function.\n\n## Syntax\n\n    \n    \n    arr.filter(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function to test each element of the array. Return `true` to keep the element, `false` otherwise.\n`thisArg`\n\n     Optional. Value to use as `this` when executing `callback`.\n\n## Description\n\n`filter` calls a provided `callback` function once for each element in an\narray, and constructs a new array of all the values for which `callback`\nreturns a true value. `callback` is invoked only for indexes of the array\nwhich have assigned values; it is not invoked for indexes which have been\ndeleted or which have never been assigned values. Array elements which do not\npass the `callback` test are simply skipped, and are not included in the new\narray.\n\n`callback` is invoked with three arguments:\n\n  1. the value of the element\n  2. the index of the element\n  3. the Array object being traversed\n\nIf a `thisArg` parameter is provided to `filter`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\n`filter` does not mutate the array on which it is called.\n\nThe range of elements processed by `filter` is set before the first invocation\nof `callback`. Elements which are appended to the array after the call to\n`filter` begins will not be visited by `callback`. If existing elements of the\narray are changed, or deleted, their value as passed to `callback` will be the\nvalue at the time `filter` visits them; elements that are deleted are not\nvisited.\n\n## Examples\n\n### Example: Filtering out all small values\n\nThe following example uses `filter` to create a filtered array that has all\nelements with values less than 10 removed.\n\n    \n    \n    function isBigEnough(element) {\n      return element >= 10;\n    }\n    var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);\n    // filtered is [12, 130, 44]\n    \n\n## Polyfill\n\n`filter` was added to the ECMA-262 standard in the 5th edition; as such it may\nnot be present in all implementations of the standard. You can work around\nthis by inserting the following code at the beginning of your scripts,\nallowing use of `filter` in ECMA-262 implementations which do not natively\nsupport it. This algorithm is exactly the one specified in ECMA-262, 5th\nedition, assuming that `fn.call` evaluates to the original value of\n[`Function.prototype.call`][2], and that [`Array.prototype.push`][3] has its\noriginal value.\n\n    \n    \n    if (!Array.prototype.filter) {\n      Array.prototype.filter = function(fun/*, thisArg*/) {\n        'use strict';\n    \n        if (this === void 0 || this === null) {\n          throw new TypeError();\n        }\n    \n        var t = Object(this);\n        var len = t.length >>> 0;\n        if (typeof fun !== 'function') {\n          throw new TypeError();\n        }\n    \n        var res = [];\n        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n        for (var i = 0; i < len; i++) {\n          if (i in t) {\n            var val = t[i];\n    \n            // NOTE: Technically this should Object.defineProperty at\n            //       the next index, as push can be affected by\n            //       properties on Object.prototype and Array.prototype.\n            //       But that method's new, and collisions should be\n            //       rare, so use the more-compatible alternative.\n            if (fun.call(thisArg, val, i, t)) {\n              res.push(val);\n            }\n          }\n        }\n    \n        return res;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.filter' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.filter' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][6] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][7]\n  * [`Array.prototype.every()`][8]\n  * [`Array.prototype.some()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.20\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.filter\n\n[6]: /en-US/Firefox/Releases/1.5\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Bitwise operators", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/bitwise_operators", "content": "## Summary\n\n**Bitwise operators** treat their operands as a sequence of 32 bits (zeros and ones), rather than as decimal, hexadecimal, or octal [`numbers][1]`. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.\n\nThe following table summarizes JavaScript's bitwise operators:  \n  \n<table>  \n<tr>  \n<th>\n\nOperator\n\n</th>  \n<th>\n\nUsage\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\nBitwise AND\n\n</td>  \n<td>\n\n`a & b`\n\n</td>  \n<td>\n\nReturns a one in each bit position for which the corresponding bits of both\noperands are ones.\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise OR\n\n</td>  \n<td>\n\n`a | b`\n\n</td>  \n<td>\n\nReturns a one in each bit position for which the corresponding bits of either\nor both operands are ones.\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise XOR\n\n</td>  \n<td>\n\n`a ^ b`\n\n</td>  \n<td>\n\nReturns a one in each bit position for which the corresponding bits of either\nbut not both operands are ones.\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise NOT\n\n</td>  \n<td>\n\n`~ a`\n\n</td>  \n<td>\n\nInverts the bits of its operand.\n\n</td> </tr>  \n<tr>  \n<td>\n\nLeft shift\n\n</td>  \n<td>\n\n`a << b`\n\n</td>  \n<td>\n\nShifts `a` in binary representation `b` (< 32) bits to the left, shifting in\nzeros from the right.\n\n</td> </tr>  \n<tr>  \n<td>\n\nSign-propagating right shift\n\n</td>  \n<td>\n\n`a >> b`\n\n</td>  \n<td>\n\nShifts `a` in binary representation `b` (< 32) bits to the right, discarding\nbits shifted off.\n\n</td> </tr>  \n<tr>  \n<td>\n\nZero-fill right shift\n\n</td>  \n<td>\n\n`a >>> b`\n\n</td>  \n<td>\n\nShifts `a` in binary representation `b` (< 32) bits to the right, discarding\nbits shifted off, and shifting in zeros from the left.\n\n</td> </tr> </table>\n\n## Signed 32-bit integers\n\nThe operands of all bitwise operators are converted to signed 32-bit integers\nin two's complement format. Two's complement format means that a number's\nnegative counterpart (e.g. 5 vs. -5) is all the number's bits inverted\n(bitwise NOT of the number, a.k.a. ones' complement of the number) plus one.\nFor example, the following encodes the integer 314:\n\n    \n    \n    00000000000000000000000100111010\n    \n\nThe following encodes `~314`, i.e. the ones' complement of `314`:\n\n    \n    \n    11111111111111111111111011000101\n    \n\nFinally, the following encodes `-314,` i.e. the two's complement of `314`:\n\n    \n    \n    11111111111111111111111011000110\n    \n\nThe two's complement guarantees that the left-most bit is 0 when the number is\npositive and 1 when the number is negative. Thus, it is called the _sign bit_.\n\nThe number `0` is the integer that is composed completely of 0 bits.\n\n    \n    \n    0 (base 10) = 00000000000000000000000000000000 (base 2)\n    \n\nThe number `-1` is the integer that is composed completely of 1 bits.\n\n    \n    \n    -1 (base 10) = 11111111111111111111111111111111 (base 2)\n    \n\nThe number `-2147483648` (hexadecimal representation: `-0x80000000`) is the\ninteger that is composed completely of 0 bits except the first (left-most)\none.\n\n    \n    \n    -2147483648 (base 10) = 10000000000000000000000000000000 (base 2)\n    \n\nThe number `2147483647` (hexadecimal representation: `0x7fffffff`) is the\ninteger that is composed completely of 1 bits except the first (left-most)\none.\n\n    \n    \n    2147483647 (base 10) = 01111111111111111111111111111111 (base 2)\n    \n\nThe numbers `-2147483648` and `2147483647` are the minimum and the maximum\nintegers representable throught a 32bit signed number.\n\n## Bitwise logical operators\n\nConceptually, the bitwise logical operators work as follows:\n\n  * The operands are converted to 32-bit integers and expressed by a series of bits (zeros and ones).\n  * Each bit in the first operand is paired with the corresponding bit in the second operand: first bit to first bit, second bit to second bit, and so on.\n  * The operator is applied to each pair of bits, and the result is constructed bitwise.\n\n### & (Bitwise AND)\n\nPerforms the AND operation on each pair of bits. `a` AND `b` yields 1 only if\nboth `a` and `b` are 1. The truth table for the AND operation is:  \n  \n<table>  \n<tr>  \n<td>\n\na\n\n</td>  \n<td>\n\nb\n\n</td>  \n<td>\n\na AND b\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr> </table>\n\n    \n    \n         9 (base 10) = 00000000000000000000000000001001 (base 2)\n        14 (base 10) = 00000000000000000000000000001110 (base 2)\n                       --------------------------------\n    14 & 9 (base 10) = 00000000000000000000000000001000 (base 2) = 8 (base 10)\n    \n\nBitwise ANDing any number x with 0 yields 0. Bitwise ANDing any number x with\n-1 yields x.\n\n### | (Bitwise OR)\n\nPerforms the OR operation on each pair of bits. `a` OR `b` yields 1 if either\n`a` or `b` is 1. The truth table for the OR operation is:  \n  \n<table>  \n<tr>  \n<td>\n\na\n\n</td>  \n<td>\n\nb\n\n</td>  \n<td>\n\na OR b\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr> </table>\n\n    \n    \n         9 (base 10) = 00000000000000000000000000001001 (base 2)\n        14 (base 10) = 00000000000000000000000000001110 (base 2)\n                       --------------------------------\n    14 | 9 (base 10) = 00000000000000000000000000001111 (base 2) = 15 (base 10)\n    \n\nBitwise ORing any number x with 0 yields x. Bitwise ORing any number x with -1\nyields -1.\n\n### ^ (Bitwise XOR)\n\nPerforms the XOR operation on each pair of bits. `a` XOR `b` yields 1 if `a`\nand `b` are different. The truth table for the XOR operation is:  \n  \n<table>  \n<tr>  \n<td>\n\na\n\n</td>  \n<td>\n\nb\n\n</td>  \n<td>\n\na XOR b\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n0\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td> </tr> </table>\n\n    \n    \n         9 (base 10) = 00000000000000000000000000001001 (base 2)\n        14 (base 10) = 00000000000000000000000000001110 (base 2)\n                       --------------------------------\n    14 ^ 9 (base 10) = 00000000000000000000000000000111 (base 2) = 7 (base 10)\n    \n\nBitwise XORing any number x with 0 yields x. Bitwise XORing any number x with\n-1 yields ~x.\n\n### ~ (Bitwise NOT)\n\nPerforms the NOT operator on each bit. NOT `a` yields the inverted value\n(a.k.a. one's complement) of `a`. The truth table for the NOT operation is:  \n  \n<table>  \n<tr>  \n<td>\n\na\n\n</td>  \n<td>\n\nNOT a\n\n</td> </tr>  \n<tr>  \n<td>\n\n0\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n1\n\n</td>  \n<td>\n\n0\n\n</td> </tr> </table>\n\n    \n    \n     9 (base 10) = 00000000000000000000000000001001 (base 2)\n                   --------------------------------\n    ~9 (base 10) = 11111111111111111111111111110110 (base 2) = -10 (base 10)\n    \n\nBitwise NOTing any number x yields -(x + 1). For example, ~5 yields -6.\n\nExample with indexOf:\n\n    \n    \n    var str = 'rawr';\n    var searchFor = 'a';\n    \n    // this is alternative way of typing if (-1*str.indexOf('a') <= -1)\n    if (~str.indexOf(searchFor)) {\n      // searchFor is in the string\n    } else {\n      // searchFor is not in the string\n    }\n    \n    // here are the values returend by (~str.indexOf(searchFor))\n    // r == -1\n    // a == -2\n    // w == -3\n    \n\n## Bitwise shift operators\n\nThe bitwise shift operators take two operands: the first is a quantity to be\nshifted, and the second specifies the number of bit positions by which the\nfirst operand is to be shifted. The direction of the shift operation is\ncontrolled by the operator used.\n\nShift operators convert their operands to 32-bit integers in big-endian order\nand return a result of the same type as the left operand. The right operand\nshould be less than 32, but if not only the low five bits will be used.\n\n### << (Left shift)\n\nThis operator shifts the first operand the specified number of bits to the\nleft. Excess bits shifted off to the left are discarded. Zero bits are shifted\nin from the right.\n\nFor example, `9 << 2` yields 36:\n\n    \n    \n         9 (base 10): 00000000000000000000000000001001 (base 2)\n                      --------------------------------\n    9 << 2 (base 10): 00000000000000000000000000100100 (base 2) = 36 (base 10)\n    \n\nBitwise shifting any number **x** to the left by **y** bits yields **x *\n2^y**.\n\n### >> (Sign-propagating right shift)\n\nThis operator shifts the first operand the specified number of bits to the\nright. Excess bits shifted off to the right are discarded. Copies of the\nleftmost bit are shifted in from the left. Since the new leftmost bit has the\nsame value as the previous leftmost bit, the sign bit (the leftmost bit) does\nnot change. Hence the name \"sign-propagating\".\n\nFor example, `9 >> 2` yields 2:\n\n    \n    \n         9 (base 10): 00000000000000000000000000001001 (base 2)\n                      --------------------------------\n    9 >> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n    \n\nLikewise, `-9 >> 2` yields -3, because the sign is preserved:\n\n    \n    \n         -9 (base 10): 11111111111111111111111111110111 (base 2)\n                       --------------------------------\n    -9 >> 2 (base 10): 11111111111111111111111111111101 (base 2) = -3 (base 10)\n    \n\n### >>> (Zero-fill right shift)\n\nThis operator shifts the first operand the specified number of bits to the\nright. Excess bits shifted off to the right are discarded. Zero bits are\nshifted in from the left. The sign bit becomes 0, so the result is always non-\nnegative.\n\nFor non-negative numbers, zero-fill right shift and sign-propagating right\nshift yield the same result. For example, `9 >>> 2` yields 2, the same as `9\n>> 2`:\n\n    \n    \n          9 (base 10): 00000000000000000000000000001001 (base 2)\n                       --------------------------------\n    9 >>> 2 (base 10): 00000000000000000000000000000010 (base 2) = 2 (base 10)\n    \n\nHowever, this is not the case for negative numbers. For example, `-9 >>> 2`\nyields 1073741821, which is different than `-9 >> 2` (which yields -3):\n\n    \n    \n          -9 (base 10): 11111111111111111111111111110111 (base 2)\n                        --------------------------------\n    -9 >>> 2 (base 10): 00111111111111111111111111111101 (base 2) = 1073741821 (base 10)\n    \n\n## Examples\n\n### Example: Flags and bitmasks\n\nThe bitwise logical operators are often used to create, manipulate, and read\nsequences of _flags_, which are like binary variables. Variables could be used\ninstead of these sequences, but binary flags take much less memory (by a\nfactor of 32).\n\nSuppose there are 4 flags:\n\n  * flag A: we have an ant problem\n  * flag B: we own a bat\n  * flag C: we own a cat\n  * flag D: we own a duck\n\nThese flags are represented by a sequence of bits: DCBA. When a flag is _set_,\nit has a value of 1. When a flag is _cleared_, it has a value of 0. Suppose a\nvariable `flags` has the binary value 0101:\n\n    \n    \n    var flags = 5;   // binary 0101\n    \n\nThis value indicates:\n\n  * flag A is true (we have an ant problem);\n  * flag B is false (we don't own a bat);\n  * flag C is true (we own a cat);\n  * flag D is false (we don't own a duck);\n\nSince bitwise operators are 32-bit, 0101 is actually\n00000000000000000000000000000101, but the preceding zeroes can be neglected\nsince they contain no meaningful information.\n\nA _bitmask_ is a sequence of bits that can manipulate and/or read flags.\nTypically, a \"primitive\" bitmask for each flag is defined:\n\n    \n    \n    var FLAG_A = 1; // 0001\n    var FLAG_B = 2; // 0010\n    var FLAG_C = 4; // 0100\n    var FLAG_D = 8; // 1000\n    \n\nNew bitmasks can be created by using the bitwise logical operators on these\nprimitive bitmasks. For example, the bitmask 1011 can be created by ORing\nFLAG_A, FLAG_B, and FLAG_D:\n\n    \n    \n    var mask = FLAG_A | FLAG_B | FLAG_D; // 0001 | 0010 | 1000 => 1011\n    \n\nIndividual flag values can be extracted by ANDing them with a bitmask, where\neach bit with the value of one will \"extract\" the corresponding flag. The\nbitmask _masks_ out the non-relevant flags by ANDing with zeros (hence the\nterm \"bitmask\"). For example, the bitmask 0100 can be used to see if flag C is\nset:\n\n    \n    \n    // if we own a cat\n    if (flags & FLAG_C) { // 0101 & 0100 => 0100 => true\n       // do stuff\n    }\n    \n\nA bitmask with multiple set flags acts like an \"either/or\". For example, the\nfollowing two are equivalent:\n\n    \n    \n    // if we own a bat or we own a cat\n    // (0101 & 0010) || (0101 & 0100) => 0000 || 0100 => true\n    if ((flags & FLAG_B) || (flags & FLAG_C)) {\n       // do stuff\n    }\n    \n    \n    \n    // if we own a bat or cat\n    var mask = FLAG_B | FLAG_C; // 0010 | 0100 => 0110\n    if (flags & mask) { // 0101 & 0110 => 0100 => true\n       // do stuff\n    }\n    \n\nFlags can be set by ORing them with a bitmask, where each bit with the value\none will set the corresponding flag, if that flag isn't already set. For\nexample, the bitmask 1100 can be used to set flags C and D:\n\n    \n    \n    // yes, we own a cat and a duck\n    var mask = FLAG_C | FLAG_D; // 0100 | 1000 => 1100\n    flags |= mask;   // 0101 | 1100 => 1101\n    \n\nFlags can be cleared by ANDing them with a bitmask, where each bit with the\nvalue zero will clear the corresponding flag, if it isn't already cleared.\nThis bitmask can be created by NOTing primitive bitmasks. For example, the\nbitmask 1010 can be used to clear flags A and C:\n\n    \n    \n    // no, we don't have an ant problem or own a cat\n    var mask = ~(FLAG_A | FLAG_C); // ~0101 => 1010\n    flags &= mask;   // 1101 & 1010 => 1000\n    \n\nThe mask could also have been created with `~FLAG_A & ~FLAG_C` (De Morgan's\nlaw):\n\n    \n    \n    // no, we don't have an ant problem, and we don't own a cat\n    var mask = ~FLAG_A & ~FLAG_C;\n    flags &= mask;   // 1101 & 1010 => 1000\n    \n\nFlags can be toggled by XORing them with a bitmask, where each bit with the\nvalue one will toggle the corresponding flag. For example, the bitmask 0110\ncan be used to toggle flags B and C:\n\n    \n    \n    // if we didn't have a bat, we have one now, \n    // and if we did have one, bye-bye bat\n    // same thing for cats\n    var mask = FLAG_B | FLAG_C;\n    flags = flags ^ mask;   // 1100 ^ 0110 => 1010\n    \n\nFinally, the flags can all be flipped with the NOT operator:\n\n    \n    \n    // entering parallel universe...\n    flags = ~flags;    // ~1010 => 0101\n    \n\n### Conversion snippets\n\nConvert a binary [`String][2]` to a decimal [`Number][1]`:\n\n    \n    \n    var sBinString = \"1011\";\n    var nMyNumber = parseInt(sBinString, 2);\n    alert(nMyNumber); // prints 11, i.e. 1011\n    \n\nConvert a decimal [`Number][1]` to a binary [`String][2]`:\n\n    \n    \n    var nMyNumber = 11;\n    var sBinString = nMyNumber.toString(2);\n    alert(sBinString); // prints 1011, i.e. 11\n    \n\n### Automatize the creation of a mask\n\nIf you have to create many masks from some [`Boolean][3]` values, you can\nautomatize the process:\n\n    \n    \n    function createMask () {\n      var nMask = 0, nFlag = 0, nLen = arguments.length > 32 ? 32 : arguments.length;\n      for (nFlag; nFlag < nLen; nMask |= arguments[nFlag] << nFlag++);\n      return nMask;\n    }\n    var mask1 = createMask(true, true, false, true); // 11, i.e.: 1011\n    var mask2 = createMask(false, false, true); // 4, i.e.: 0100\n    var mask3 = createMask(true); // 1, i.e.: 0001\n    // etc.\n    \n    alert(mask1); // prints 11, i.e.: 1011\n    \n\n### Reverse algorithm: an array of booleans from a mask\n\nIf you want to create an [`Array][4]` of [`Booleans][3]` from a mask you can\nuse this code:\n\n    \n    \n    function arrayFromMask (nMask) {\n      // nMask must be between -2147483648 and 2147483647\n      if (nMask > 0x7fffffff || nMask < -0x80000000) { \n        throw new TypeError(\"arrayFromMask - out of range\"); \n      }\n      for (var nShifted = nMask, aFromMask = []; nShifted; \n           aFromMask.push(Boolean(nShifted & 1)), nShifted >>>= 1);\n      return aFromMask;\n    }\n    \n    var array1 = arrayFromMask(11);\n    var array2 = arrayFromMask(4);\n    var array3 = arrayFromMask(1);\n    \n    alert(\"[\" + array1.join(\", \") + \"]\");\n    // prints \"[true, true, false, true]\", i.e.: 11, i.e.: 1011\n    \n\nYou can test both algorithms at the same time\u2026\n\n    \n    \n    var nTest = 19; // our custom mask\n    var nResult = createMask.apply(this, arrayFromMask(nTest));\n    \n    alert(nResult); // 19\n    \n\nFor didactic purpose only (since there is the [`Number.toString(2)][5]`\nmethod), we show how it is possible to modify the `arrayFromMask` algorithm in\norder to create a [`String][2]` containing the binary representation of a\n[`Number][1]`, rather than an [`Array][4]` of [`Booleans][3]`:\n\n    \n    \n    function createBinaryString (nMask) {\n      // nMask must be between -2147483648 and 2147483647\n      for (var nFlag = 0, nShifted = nMask, sMask = \"\"; nFlag < 32;\n           nFlag++, sMask += String(nShifted >>> 31), nShifted <<= 1);\n      return sMask;\n    }\n    \n    var string1 = createBinaryString(11);\n    var string2 = createBinaryString(4);\n    var string3 = createBinaryString(1);\n    \n    alert(string1);\n    // prints 00000000000000000000000000001011, i.e. 11\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Bitwise NOT operator' in that specification.][6]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Bitwise shift operators' in that specification.][7]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Binary bitwise operators' in that specification.][8]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Bitwise NOT operator' in that specification.][9]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Bitwise shift operators' in that specification.][10]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Binary bitwise operators' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBitwise NOT (`~`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise AND (`&`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise OR (`|`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise XOR (`^`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLeft shift (`<<`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nRight shift (`>>`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnsigned right shift (`>>>`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBitwise NOT (`~`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise AND (`&`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise OR (`|`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBitwise XOR (`^`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nLeft shift (`<<`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nRight shift (`>>`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnsigned right shift (`>>>`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Logical operators][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.8\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.7\n\n[8]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.10\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-bitwise-not-operator\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-bitwise-shift-operators\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-binary-bitwise-operators\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Function.prototype.call()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.call()", "content": "## Summary\n\nThe `**call()**` method calls a function with a given `this` value and\narguments provided individually.\n\n**Note:** While the syntax of this function is almost identical to that of [`apply()`][1], the fundamental difference is that `call()` accepts an **argument list**, while `apply()` accepts a **single array of arguments**.\n\n## Syntax\n\n    \n    \n    fun.call(thisArg[, arg1[, arg2[, ...]]])\n\n### Parameters\n\n`thisArg`\n\n    The value of `this` provided for the call to _`fun`_. Note that `this` may not be the actual value seen by the method: if the method is a function in [non-strict mode][2] code, [`null`][3] and [`undefined`][4] will be replaced with the global object, and primitive values will be boxed.\n`arg1, arg2, ...`\n\n    Arguments for the object.\n\n## Description\n\nYou can assign a different `this` object when calling an existing function.\n`this` refers to the current object, the calling object. With `call`, you can\nwrite a method once and then inherit it in another object, without having to\nrewrite the method for the new object.\n\n## Examples\n\n### Example: Using `call` to chain constructors for an object\n\nYou can use `call` to chain constructors for an object, similar to Java. In\nthe following example, the constructor for the `Product` object is defined\nwith two parameters, `name` and `price`. Two other functions `Food` and `Toy`\ninvoke `Product` passing `this` and `name` and `price`. Product initializes\nthe properties `name` and `price`, both specialized functions define the\n`category`.\n\n    \n    \n    function Product(name, price) {\n      this.name = name;\n      this.price = price;\n    \n      if (price < 0) {\n        throw RangeError('Cannot create product ' +\n                          this.name + ' with a negative price');\n      }\n    \n      return this;\n    }\n    \n    function Food(name, price) {\n      Product.call(this, name, price);\n      this.category = 'food';\n    }\n    \n    Food.prototype = Object.create(Product.prototype);\n    \n    function Toy(name, price) {\n      Product.call(this, name, price);\n      this.category = 'toy';\n    }\n    \n    Toy.prototype = Object.create(Product.prototype);\n    \n    var cheese = new Food('feta', 5);\n    var fun = new Toy('robot', 40);\n    \n\n### Example: Using `call` to invoke an anonymous function\n\nIn this purely constructed example, we create anonymous function and use\n`call` to invoke it on every object in an array. The main purpose of the\nanonymous function here is to add a print function to every object, which is\nable to print the right index of the object in the array. Passing the object\nas `this` value was not strictly necessary, but is done for explanatory\npurpose.\n\n    \n    \n    var animals = [\n      { species: 'Lion', name: 'King' },\n      { species: 'Whale', name: 'Fail' }\n    ];\n    \n    for (var i = 0; i < animals.length; i++) {\n      (function(i) {\n        this.print = function() {\n          console.log('#' + i + ' ' + this.species\n                      + ': ' + this.name);\n        }\n        this.print();\n      }).call(animals[i], i);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.3.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype.call' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype.call' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function.prototype.bind()`][8]\n  * [`Function.prototype.apply()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.4\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.call\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Function.prototype.bind()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.bind()", "content": "## Summary\n\nThe `**bind()**` method creates a new function that, when called, has its\n`this` keyword set to the provided value, with a given sequence of arguments\npreceding any provided when the new function is called.\n\n## Syntax\n\n    \n    \n    fun.bind(thisArg[, arg1[, arg2[, ...]]])\n\n### Parameters\n\n`thisArg`\n\n     The value to be passed as the `this` parameter to the target function when the bound function is called. The value is ignored if the bound function is constructed using the [`new`][1] operator.\n`arg1, arg2, ...`\n\n     Arguments to prepend to arguments provided to the bound function when invoking the target function.\n\n## Description\n\nThe `bind()` function creates a new function (a **bound function**) with the\nsame function body (internal [`call`][2] property in ECMAScript 5 terms) as\nthe function it is being called on (the bound function's **target function**)\nwith the `this` value bound to the first argument of `bind()`, which cannot be\noverridden. `bind()` also accepts leading default arguments to provide to the\ntarget function when the bound function is called. A bound function may also\nbe constructed using the [`new`][1] operator: doing so acts as though the\ntarget function had instead been constructed. The provided `this` value is\nignored, while prepended arguments are provided to the emulated function.\n\n## Examples\n\n### Example: Creating a bound function\n\nThe simplest use of `bind()` is to make a function that, no matter how it is\ncalled, is called with a particular `this` value. A common mistake for new\nJavaScript programmers is to extract a method from an object, then to later\ncall that function and expect it to use the original object as its `this`\n(e.g. by using that method in callback-based code). Without special care,\nhowever, the original object is usually lost. Creating a bound function from\nthe function, using the original object, neatly solves this problem:\n\n    \n    \n    this.x = 9; \n    var module = {\n    \u00a0 x: 81,\n    \u00a0 getX: function() { return this.x; }\n    };\n    \n    module.getX(); // 81\n    \n    var getX = module.getX;\n    getX(); // 9, because in this case, \"this\" refers to the global object\n    \n    // Create a new function with 'this' bound to module\n    var boundGetX = getX.bind(module);\n    boundGetX(); // 81\n    \n\n### Example: Partial Functions\n\nThe next simplest use of `bind()` is to make a function with pre-specified\ninitial arguments. These arguments (if any) follow the provided `this` value\nand are then inserted at the start of the arguments passed to the target\nfunction, followed by the arguments passed to the bound function, whenever the\nbound function is called.\n\n    \n    \n    function list() {\n      return Array.prototype.slice.call(arguments);\n    }\n    \n    var list1 = list(1, 2, 3); // [1, 2, 3]\n    \n    // Create a function with a preset leading argument\n    var leadingThirtysevenList = list.bind(undefined, 37);\n    \n    var list2 = leadingThirtysevenList(); // [37]\n    var list3 = leadingThirtysevenList(1, 2, 3); // [37, 1, 2, 3]\n    \n\n### Example: With setTimeout\n\nBy default within [`window.setTimeout()`][3], the `this` keyword will be set\nto the [`window`][4] (or `global`) object. When working with class methods\nthat require `this` to refer to class instances, you may explicitly bind\n`this` to the callback function, in order to maintain the instance.\n\n    \n    \n    function LateBloomer() {\n      this.petalCount = Math.ceil(Math.random() * 12) + 1;\n    }\n    \n    // Declare bloom after a delay of 1 second\n    LateBloomer.prototype.bloom = function() {\n      window.setTimeout(this.declare.bind(this), 1000);\n    };\n    \n    LateBloomer.prototype.declare = function() {\n      console.log('I am a beautiful flower with ' +\n        this.petalCount + ' petals!');\n    };\n    \n\n### Example: Bound functions used as constructors\n\n**Warning:** This section demonstrates JavaScript capabilities and documents some edge cases of the `bind()` method. The methods shown below are not the best way to do things and probably should not be used in any production environment.\n\nBound functions are automatically suitable for use with the [`new`][1]\noperator to construct new instances created by the target function. When a\nbound function is used to construct a value, the provided `this` is ignored.\nHowever, provided arguments are still prepended to the constructor call:\n\n    \n    \n    function Point(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    \n    Point.prototype.toString = function() { \n      return this.x + ',' + this.y; \n    };\n    \n    var p = new Point(1, 2);\n    p.toString(); // '1,2'\n    \n    \n    var emptyObj = {};\n    var YAxisPoint = Point.bind(emptyObj, 0/*x*/);\n    // not supported in the polyfill below,\n    // works fine with native bind:\n    var YAxisPoint = Point.bind(null, 0/*x*/);\n    \n    var axisPoint = new YAxisPoint(5);\n    axisPoint.toString(); // '0,5'\n    \n    axisPoint instanceof Point; // true\n    axisPoint instanceof YAxisPoint; // true\n    new Point(17, 42) instanceof YAxisPoint; // true\n    \n\nNote that you need do nothing special to create a bound function for use with\n[`new`][1]. The corollary is that you need do nothing special to create a\nbound function to be called plainly, even if you would rather require the\nbound function to only be called using [`new`][1].\n\n    \n    \n    // Example can be run directly in your JavaScript console\n    // ...continuing from above\n    \n    // Can still be called as a normal function \n    // (although usually this is undesired)\n    YAxisPoint(13);\n    \n    emptyObj.x + ',' + emptyObj.y;\n    // >  '0,13'\n    \n\nIf you wish to support use of a bound function only using\u00a0[`new`][1], or only\nby calling it, the target function must enforce that restriction.\n\n### Example: Creating shortcuts\n\n`bind()` is also helpful in cases where you want to create a shortcut to a\nfunction which requires a specific `this` value.\n\nTake [`Array.prototype.slice`][5], for example, which you want to use for\nconverting an array-like object to a real array. You could create a shortcut\nlike this:\n\n    \n    \n    var slice = Array.prototype.slice;\n    \n    // ...\n    \n    slice.call(arguments);\n    \n\nWith `bind()`, this can be simplified. In the following piece of code, `slice`\nis a bound function to the [`call()`][2] function of\n[`Function.prototype`][6], with the `this` value set to the [`slice()`][5]\nfunction of [`Array.prototype`][7]. This means that additional `call()` calls\ncan be eliminated:\n\n    \n    \n    // same as \"slice\" in the previous example\n    var unboundSlice = Array.prototype.slice;\n    var slice = Function.prototype.call.bind(unboundSlice);\n    \n    // ...\n    \n    slice(arguments);\n    \n\n## Polyfill\n\nThe `bind` function is a recent addition to ECMA-262, 5th edition; as such it\nmay not be present in all browsers. You can partially work around this by\ninserting the following code at the beginning of your scripts, allowing use of\nmuch of the functionality of `bind()` in implementations that do not natively\nsupport it.\n\n    \n    \n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function(oThis) {\n        if (typeof this !== 'function') {\n          // closest thing possible to the ECMAScript 5\n          // internal IsCallable function\n          throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n        }\n    \n        var aArgs   = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP    = function() {},\n            fBound  = function() {\n              return fToBind.apply(this instanceof fNOP && oThis\n                     ? this\n                     : oThis,\n                     aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n    \n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n    \n        return fBound;\n      };\n    }\n    \n\nSome of the many differences (there may well be others, as this list does not\nseriously attempt to be exhaustive) between this algorithm and the specified\nalgorithm are:\n\n  * The partial implementation relies [`Array.prototype.slice()`][5], [`Array.prototype.concat()`][8], [`Function.prototype.call()`][2] and [`Function.prototype.apply()`][9], built-in methods to have their original values.\n  * The partial implementation creates functions that do not have immutable \"poison pill\" [`caller`][10] and `arguments` properties that throw a [`TypeError`][11] upon get, set, or deletion. (This could be added if the implementation supports [`Object.defineProperty`][12], or partially implemented [without throw-on-delete behavior] if the implementation supports the [`__defineGetter__`][13] and [`__defineSetter__`][14] extensions.)\n  * The partial implementation creates functions that have a `prototype` property. (Proper bound functions have none.)\n  * The partial implementation creates bound functions whose [`length`][15] property does not agree with that mandated by ECMA-262: it creates functions with length 0, while a full implementation, depending on the length of the target function and the number of pre-specified arguments, may return a non-zero length.\n\nIf you choose to use this partial implementation, **you must not rely on those\ncases where behavior deviates from ECMA-262, 5th edition!** With some care,\nhowever (and perhaps with additional modification to suit specific needs),\nthis partial implementation may be a reasonable bridge to the time when\n`bind()` is widely implemented according to the specification.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype.bind' in that specification.][16]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype.bind' in that specification.][17]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][18].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7\n\n</td>  \n<td>\n\n[4.0][19] (2)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n11.60\n\n</td>  \n<td>\n\n5.1.4\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n0.16\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n11.50\n\n</td>  \n<td>\n\n6.0\n\n</td> </tr> </table>\n\nBased on [Kangax's compat tables][20].\n\n## See also\n\n  * [`Function.prototype.apply()`][9]\n  * [`Function.prototype.call()`][2]\n  * [Functions and function scope][21]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[3]: /en-US/docs/Web/API/window.setTimeout\n\n[4]: /en-US/docs/Web/API/window\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\n\n[16]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.5\n\n[17]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.bind\n\n[18]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[19]: /en-US/Firefox/Releases/4\n\n[20]: http://kangax.github.com/es5-compat-table/\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Function.prototype.apply()", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype.apply()", "content": "## Summary\n\nThe `**apply()**` method calls a function with a given `this` value and\n`arguments` provided as an array (or an [array-like object][1]).\n\n**Note:** While the syntax of this function is almost identical to that of [`call()`][2], the fundamental difference is that `call()` accepts an argument list, while `apply()` accepts a single array of arguments.\n\n## Syntax\n\n    \n    \n    fun.apply(thisArg[, argsArray])\n\n### Parameters\n\n`thisArg`\n\n    The value of `this` provided for the call to _`fun`_. Note that `this` may not be the actual value seen by the method: if the method is a function in [non-strict mode][3] code, [`null`][4] and [`undefined`][5] will be replaced with the global object, and primitive values will be boxed.\n`argsArray`\n\n    An array-like object, specifying the arguments with which _`fun`_ should be called, or [`null`][4] or [`undefined`][5] if no arguments should be provided to the function. Starting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for browser compatibility information.\n\n## Description\n\nYou can assign a different `this` object when calling an existing function.\n`this` refers to the current object, the calling object. With `apply`, you can\nwrite a method once and then inherit it in another object, without having to\nrewrite the method for the new object.\n\n`apply` is very similar to [`call()`][2], except for the type of arguments it\nsupports. You can use an arguments array instead of a named set of parameters.\nWith `apply`, you can use an array literal, for example, `_fun_.apply(this,\n['eat', 'bananas'])`, or an [`Array`][6] object, for example,\n`_fun_.apply(this, new Array('eat', 'bananas'))`.\n\nYou can also use [`arguments`][7] for the `argsArray` parameter. `arguments`\nis a local variable of a function. It can be used for all unspecified\narguments of the called object. Thus, you do not have to know the arguments of\nthe called object when you use the `apply` method. You can use `arguments` to\npass all the arguments to the called object. The called object is then\nresponsible for handling the arguments.\n\nSince ECMAScript 5th Edition you can also use any kind of object which is\narray-like, so in practice this means it's going to have a property `length`\nand integer properties in the range [`0...length)`. As an example you can now\nuse a [`NodeList`][8] or a own custom object like `{ 'length': 2, '0': 'eat',\n'1': 'bananas' }`.\n\n**Note:**\u00a0Most browsers, including Chrome 14 and Internet Explorer 9, still do not accept array-like objects and will throw an exception.\n\n## Examples\n\n### Example: Using `apply` to chain constructors\n\nYou can use `apply` to chain [constructors][9] for an object, similar to Java.\nIn the following example we will create a global [`Function`][10] method\ncalled `construct`, which will make you able to use an array-like object with\na constructor instead of an arguments list.\n\n    \n    \n    Function.prototype.construct = function(aArgs) {\n      var fConstructor = this, fNewConstr = function() { fConstructor.apply(this, aArgs); };\n      fNewConstr.prototype = fConstructor.prototype;\n      return new fNewConstr();\n    };\n    \n\nExample usage:\n\n    \n    \n    function MyConstructor() {\n      for (var nProp = 0; nProp < arguments.length; nProp++) {\n        this['property' + nProp] = arguments[nProp];\n      }\n    }\n    \n    var myArray = [4, 'Hello world!', false];\n    var myInstance = MyConstructor.construct(myArray);\n    \n    alert(myInstance.property1);                // alerts 'Hello world!'\n    alert(myInstance instanceof MyConstructor); // alerts 'true'\n    alert(myInstance.constructor);              // alerts 'MyConstructor'\n    \n\n**Note:** This non-native `Function.construct` method will not work with some native constructors (like [`Date`][11], for example). In these cases you have to use the [`Function.prototype.bind`][12] method (for example, imagine to have an array like the following, to be used with [`Date`][11] constructor: [`2012, 11, 4]`; in this case you have to write something like: `new (Function.prototype.bind.apply(Date, [null].concat([2012, 11, 4])))()`\u00a0\u2014 anyhow this is not the best way to do things and probably should not be used in any production environment).\n\n### Example: Using `apply` and built-in functions\n\nClever usage of `apply` allows you to use built-ins functions for some tasks\nthat otherwise probably would have been written by looping over the array\nvalues. As an example here we are going to use `Math.max`/`Math.min` to find\nout the maximum/minimum value in an array.\n\n    \n    \n    /* min/max number in an array */\n    var numbers = [5, 6, 2, 3, 7];\n    \n    /* using Math.min/Math.max apply */\n    var max = Math.max.apply(null, numbers); /* This about equal to Math.max(numbers[0], ...)\n                                                or Math.max(5, 6, ...) */\n    var min = Math.min.apply(null, numbers);\n    \n    /* vs. simple loop based algorithm */\n    max = -Infinity, min = +Infinity;\n    \n    for (var i = 0; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n      if (numbers[i] < min) {\n        min = numbers[i];\n      }\n    }\n    \n\nBut beware: in using `apply` this way, you run the risk of exceeding the\nJavaScript engine's argument length limit. The consequences of applying a\nfunction with too many arguments (think more than tens of thousands of\narguments) vary across engines (JavaScriptCore has hard-coded [argument limit\nof 65536][13]), because the limit (indeed even the nature of any excessively-\nlarge-stack behavior) is unspecified. Some engines will throw an exception.\nMore perniciously, others will arbitrarily limit the number of arguments\nactually passed to the applied function. (To illustrate this latter case: if\nsuch an engine had a limit of four arguments [actual limits are of course\nsignificantly higher], it would be as if the arguments `5, 6, 2, 3` had been\npassed to `apply` in the examples above, rather than the full array.) If your\nvalue array might grow into the tens of thousands, use a hybrid strategy:\napply your function to chunks of the array at a time:\n\n    \n    \n    function minOfArray(arr) {\n      var min = Infinity;\n      var QUANTUM = 32768;\n    \n      for (var i = 0, len = arr.length; i < len; i += QUANTUM) {\n        var submin = Math.min.apply(null, arr.slice(i, Math.min(i + QUANTUM, len)));\n        min = Math.min(submin, min);\n      }\n    \n      return min;\n    }\n    \n    var min = minOfArray([5, 6, 2, 3, 7]);\n    \n\n### Example: Using apply in \"monkey-patching\"\n\nApply can be the best way to monkey-patch a builtin function of Firefox, or JS\nlibraries. Given `someobject.foo` function, you can modify the function in a\nsomewhat hacky way, like so:\n\n    \n    \n    var originalfoo = someobject.foo;\n    someobject.foo = function() {\n      // Do stuff before calling function\n      console.log(arguments);\n      // Call the function as it would have been called normally:\n      originalfoo.apply(this, arguments);\n      // Run stuff after, here.\n    }\n    \n\nThis method is especially handy where you want to debug events, or interface\nwith something that has no API like the various `.on([event]...` events, such\nas those usable on the [Devtools Inspector][14]).\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.3.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype.apply' in that specification.][15]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype.apply' in that specification.][16]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][17].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nES 5.1 generic array-like object as [`arguments`][7]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n[4.0][18] (2.0)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nES 5.1 generic array-like object as [`arguments`][7]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n4.0 (2.0)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`arguments`][7] object\n  * [`Function.prototype.bind()`][12]\n  * [`Function.prototype.call()`][2]\n  * [Functions and function scope][19]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/Predefined_Core_Objects#Working_with_Array-like_objects\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[8]: /en-US/docs/Web/API/NodeList\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[13]: https://bugs.webkit.org/show_bug.cgi?id=80797\n\n[14]: /en-US/docs/Tools/Page_Inspector#Developer_API\n\n[15]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.3\n\n[16]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype.apply\n\n[17]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[18]: /en-US/Firefox/Releases/4\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "method"},
{"name": "Function.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.prototype", "content": "## Summary\n\nThe `**Function.prototype**` property represents the [`Function`][1] prototype\nobject.\n\n## Description\n\n[`Function`][1] objects inherit from `Function.prototype`.\n`Function.prototype` cannot be modified.\n\n## Properties\n\n[`Function.arguments`][2] _ _\n\n     An array corresponding to the arguments passed to a function. This is deprecated as property of [`Function`][1], use the [`arguments`][3] object available within the function instead.\n<s>[`Function.arity`][4] _ _</s>\n\n     <s>Used to specifiy the number of arguments expected by the function, but has been removed. Use the [`length`][5] property instead.</s>\n[`Function.caller`][6] _ _\n\n     Specifies the function that invoked the currently executing function.\n[`Function.length`][5]\n\n     Specifies the number of arguments expected by the function.\n[`Function.name`][7] _ _\n\n     The name of the function.\n[`Function.displayName`][8] _ _\n\n     The display name of the function.\n`Function.prototype.constructor`\n\n     Specifies the function that creates an object's prototype. See [`Object.prototype.constructor`][9] for more details.\n\nProperties inherited from [`Object`][10]:\n\n[`__parent__`][11], [`__proto__`][12]\n\n## Methods\n\n[`Function.prototype.apply()`][13]\n\n     Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an [`Array`][14] object.\n[`Function.prototype.bind()`][15]\n\n     Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.\n[`Function.prototype.call()`][16]\n\n     Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are.\n[`Function.prototype.isGenerator()`][17] _ _\n\n     Returns `true` if the function is a [generator][18]; otherwise returns `false`.\n[`Function.prototype.toSource()`][19] _ _\n\n     Returns a string representing the source code of the function. Overrides the [`Object.prototype.toSource`][20] method.\n[`Function.prototype.toString()`][21]\n\n     Returns a string representing the source code of the function. Overrides the [`Object.prototype.toString`][22] method.\n\nMethods inherited from [`Object`][10]:\n\n[`__defineGetter__`][23], [`__defineSetter__`][24], [`hasOwnProperty`][25],\n[`isPrototypeOf`][26], [`__lookupGetter__`][27], [`__lookupSetter__`][28],\n[`__noSuchMethod__`][29], [`propertyIsEnumerable`][30],\n[`toLocaleString`][31], [`unwatch`][32], [`valueOf`][33], [`watch`][34]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype' in that specification.][35]  \nFor [`Function`][1] instances:  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.prototype' in that specification.][36]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype' in that specification.][37]  \nFor [`Function`][1] instances:  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.prototype' in that specification.][38]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][39].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator\n\n[18]: /en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[25]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[26]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[27]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[35]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.3.1\n\n[36]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5.2\n\n[37]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.prototype\n\n[38]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-instances-prototype\n\n[39]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "String.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.valueof()", "content": "## Summary\n\nThe `**valueOf()**` method returns the primitive value of a String object.\n\n## Syntax\n\n    \n    \n    _str_.valueOf()\n\n## Description\n\nThe `valueOf` method of `String` returns the primitive value of a String\nobject as a string data type. This value is equivalent to\n[`String.prototype.toString()`][1].\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    x = new String(\"Hello world\");\n    alert(x.valueOf())          // Displays \"Hello world\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.valueOf' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.valueOf' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.toString()`][1]\n  * [`Object.prototype.valueOf()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.3\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.valueof\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trimLeft()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trimleft()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**trimLeft()**` removes whitespace from the left end of the string.\n\n## Syntax\n\n    \n    \n    str.trimLeft()\n\n## Description\n\nThe `trimLeft` method returns the string stripped of whitespace from its left\nend. `trimLeft` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trimLeft`\n\nThe following example displays the lowercase string \"foo\u00a0\u00a0\":\n\n    \n    \n    var str = \"   foo  \";\n    \n    console.log(str.length); // 8\n    \n    str = str.trimLeft();\n    console.log(str.length); // 5\n    console.log(str);        // \"foo  \"\n    \n\n## Specifications\n\nNone. Not part of any standard. Implemented in JavaScript 1.8.1.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][1] (1.9.1)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.trim()`][2]\n  * _ _ [`String.prototype.trimRight()`][3]\n\n[1]: /en-US/Firefox/Releases/3.5\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trim()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trim()", "content": "## Summary\n\nThe `**trim()**` method removes whitespace from both ends of the string.\n\n## Syntax\n\n    \n    \n    _str_.trim()\n\n## Description\n\nThe `trim` method returns the string stripped of whitespace from both ends.\n`trim` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trim`\n\nThe following example displays the lowercase string \"foo\":\n\n    \n    \n    var orig = \"\u00a0\u00a0\u00a0foo\u00a0\u00a0\";\n    \n    console.log( orig.trim() ); // \"foo\"\n\n## Polyfill\n\nRunning the following code before any other code will create `String.trim` if\nit's not natively available.\n\n    \n    \n    if (!String.prototype.trim) {\n    \u00a0 (function(){ \u00a0\n    \u00a0\u00a0\u00a0 // Make sure we trim BOM and NBSP\n    \u00a0\u00a0\u00a0 var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    \u00a0\u00a0\u00a0 String.prototype.trim = function () {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return this.replace(rtrim, \"\");\n    \u00a0\u00a0\u00a0 }\n    \u00a0 })();\n    }\n    \n\n\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.trim' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.8.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.trim' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][4] (1.9.1)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * _ _ [`String.prototype.trimLeft()`][5]\n  * _ _ [`String.prototype.trimRight()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.20\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.trim\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/Firefox/Releases/3.5\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toUpperCase()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.touppercase()", "content": "## Summary\n\nThe `**toUpperCase()**` method returns the calling string value converted to\nuppercase.\n\n## Syntax\n\n    \n    \n    _str_.toUpperCase()\n\n## Description\n\nThe `toUpperCase` method returns the value of the string converted to\nuppercase. `toUpperCase` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `toUpperCase`\n\n    \n    \n    console.log( \"alphabet\".toUpperCase() ); // \"ALPHABET\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.toLocaleUpperCase()`][3]\n  * [`String.prototype.toLowerCase()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.18\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.touppercase\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    _String.toSource()\n    str_.toSource()\n    \n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `String` object, `toSource` returns the following string indicating that the source code is not available:\n    \n    \n    function String() { [native code] }\n    \n\n  * For instances of `String` or string literals, `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toLocaleLowerCase()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.tolocalelowercase()", "content": "## Summary\n\nThe `**toLocaleLowerCase()**` method returns the calling string value\nconverted to lower case, according to any locale-specific case mappings.\n\n## Syntax\n\n    \n    \n    str.toLocaleLowerCase()\n\n## Description\n\nThe `toLocaleLowerCase` method returns the value of the string converted to\nlower case according to any locale-specific case mappings. `toLocaleLowerCase`\ndoes not affect the value of the string itself. In most cases, this will\nproduce the same result as [`toLowerCase()`][1], but for some locales, such as\nTurkish, whose case mappings do not follow the default case mappings in\nUnicode, there may be a different result.\n\n## Examples\n\n### Example: Using `toLocaleLowerCase`\n\n    \n    \n    console.log( \"ALPHABET\".toLocaleLowerCase() ); // \"alphabet\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.toLowerCase()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.17\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.tolocalelowercase\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toLocaleUpperCase()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.tolocaleuppercase()", "content": "## Summary\n\nThe `**toLocaleUpperCase()**` method returns the calling string value\nconverted to upper case, according to any locale-specific case mappings.\n\n## Syntax\n\n    \n    \n    str.toLocaleUpperCase() \n\n## Description\n\nThe `toLocaleUpperCase` method returns the value of the string converted to\nupper case according to any locale-specific case mappings. `toLocaleUpperCase`\ndoes not affect the value of the string itself. In most cases, this will\nproduce the same result as [`toUpperCase()`][1], but for some locales, such as\nTurkish, whose case mappings do not follow the default case mappings in\nUnicode, there may be a different result.\n\n## Examples\n\n### Example: Using `toLocaleUpperCase`\n\n    \n    \n    console.log( \"alphabet\".toLocaleUpperCase() ); // \"ALPHABET\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.toUpperCase()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.19\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.tolocaleuppercase\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.sup()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.sup()", "content": "## Summary\n\nThe `**sup()**` method creates a `<[sup>`][1] HTML element that causes a\nstring to be displayed as superscript.\n\n## Syntax\n\n    \n    \n    _str_.sup()\n\n## Description\n\nThe `sup` method embeds a string in a `<sup>` tag:  \n`\"<sup>str</sup>`\"\n\n## Examples\n\n### Example: Using `sub` and `sup` methods\n\nThe following example uses the `sub` and `sup` methods to format a string:\n\n    \n    \n    var superText = \"superscript\";\n    var subText = \"subscript\";\n    \n    console.log(\"This is what a \" + superText.sup() + \" looks like.\");\n    console.log(\"This is what a \" + subText.sub() + \" looks like.\");\n    \n\nThis example produces the same output as the following HTML:\n\n    \n    \n    This is what a <sup>superscript</sup> looks like.\n    This is what a <sub>subscript</sub> looks like.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.sup' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.sub()`][3]\n\n[1]: /en-US/docs/Web/HTML/Element/sup\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.sup\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.substring()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.substring()", "content": "## Summary\n\nThe `**substring()**` method returns a subset of a `string` between one index\nand another, or through the end of the string.\n\n## Syntax\n\n    \n    \n    str.substring(indexA[, indexB])\n\n### Parameters\n\n`indexA`\n\n     An integer between 0 and the length of the string.\n`indexB`\n\n     (optional) An integer between 0 and the length of the string.\n\n## Description\n\n`substring` extracts characters from `indexA` up to but not including\n`indexB`. In particular:\n\n  * If `indexA` equals `indexB`, `substring` returns an empty string.\n  * If `indexB` is omitted, `substring` extracts characters to the end of the string.\n  * If either argument is less than 0 or is `NaN`, it is treated as if it were 0.\n  * If either argument is greater than `stringName.length`, it is treated as if it were `stringName.length`.\n\nIf `indexA` is larger than `indexB`, then the effect of `substring` is as if\nthe two arguments were swapped; for example, `_str_.substring(1, 0) ==\n_str_.substring(0, 1)`.\n\n## Examples\n\n### Example: Using `substring`\n\nThe following example uses `substring` to display characters from the string\n\"`Mozilla`\":\n\n    \n    \n    // assumes a print function is defined\n    var anyString = \"Mozilla\";\n    \n    // Displays \"Moz\"\n    console.log(anyString.substring(0,3));\n    console.log(anyString.substring(3,0));\n    \n    // Displays \"lla\"\n    console.log(anyString.substring(4,7));\n    console.log(anyString.substring(7,4));\n    \n    // Displays \"Mozill\"\n    console.log(anyString.substring(0,6));\n    \n    // Displays \"Mozilla\"\n    console.log(anyString.substring(0,7));\n    console.log(anyString.substring(0,10));\n    \n\n### Example: Replacing a substring within a string\n\nThe following example replaces a substring within a string. It will replace\nboth individual characters and substrings. The function call at the end of the\nexample changes the string \"`Brave New World`\" into \"`Brave New Web`\".\n\n    \n    \n    function replaceString(oldS, newS, fullS) {\n    // Replaces oldS with newS in the string fullS\n      for (var i = 0; i < fullS.length; i++) {\n        if (fullS.substring(i, i + oldS.length) == oldS) {\n         fullS = fullS.substring(0, i) + newS + fullS.substring(i + oldS.length, fullS.length);\n        }\n      }\n      return fullS;\n    }\n    \n    replaceString(\"World\", \"Web\", \"Brave New World\");\n\nNote that this can result in an infinite loop if `oldS` is itself a substring\nof `newS` \\-- for example, if you attempted to replace \"World\" with\n\"OtherWorld\" here. A better method for replacing strings is as follows:\n\n    \n    \n    function replaceString(oldS, newS,fullS){\n      return fullS.split(oldS).join(newS);\n    }\n\nThe code\u00a0above\u00a0serves as an example for substring operations. If you need to\nreplace substrings, most of the time you will want to use\n[`String.prototype.replace()`][1].\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.substring' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.substring' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.substr()`][5]\n  * [`String.prototype.slice()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.15\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.substring\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trimRight()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trimright()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**trimRight()**` method removes whitespace from the right end of the\nstring.\n\n## Syntax\n\n    \n    \n    str.trimRight()\n\n## Description\n\nThe `trimRight` method returns the string stripped of whitespace from its\nright end. `trimRight` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trimRight`\n\nThe following example displays the lowercase string \" \u00a0 foo\":\n\n    \n    \n    var str = \"   foo  \";\n    \n    console.log(str.length); // 8\n    \n    str = str.trimRight();\n    console.log(str.length); // 5\n    console.log(str);        // \"   foo\"\n    \n\n## Specifications\n\nNone. Not part of any standard. Implemented in JavaScript 1.8.1.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][1] (1.9.1)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.trim()`][2]\n  * _ _ [`String.prototype.trimLeft()`][3]\n\n[1]: /en-US/Firefox/Releases/3.5\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.substr()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.substr()", "content": "## Summary\n\nThe `**substr()**` method returns the characters in a string beginning at the\nspecified location through the specified number of characters.\n\n## Syntax\n\n    \n    \n    _str_.substr(_start_[, _length_])\n\n### Parameters\n\n`start`\n\n     Location at which to begin extracting characters. If a negative number is given, it is treated as\u00a0`strLength+``start\u00a0`where\u00a0`strLength`\u00a0= to the length of the string (for example, if `start` is `-3` it is treated as `strLength-3.)`\n\n`length`\n\n     The number of characters to extract.\n\n## Description\n\n`start` is a character index. The index of the first character is 0, and the\nindex of the last character is 1 less than the length of the string. `substr`\nbegins extracting characters at `start` and collects `length` characters\n(unless it reaches the end of the string first, in which case it will return\nfewer).\n\nIf `start` is positive and is greater than or equal to the length of the\nstring, `substr` returns an empty string.\n\nIf `start` is negative, `substr` uses it as a character index from the end of\nthe string. If `start` is negative and `abs(start)` is larger than the length\nof the string, `substr` uses 0 as the start index. Note: the described\nhandling of negative values of the `start` argument is not supported by\nMicrosoft JScript .\n\nIf `length` is 0 or negative, `substr` returns an empty string. If `length` is\nomitted, `substr` extracts characters to the end of the string.\n\n## Examples\n\n### Example: Using `substr`\n\n    \n    \n    var str = \"abcdefghij\";\n    \n    console.log(\"(1,2): \"    + str.substr(1,2));   // (1,2): bc\n    console.log(\"(-3,2): \"   + str.substr(-3,2));  // (-3,2): hi\n    console.log(\"(-3): \"     + str.substr(-3));    // (-3): hij\n    console.log(\"(1): \"      + str.substr(1));     // (1): bcdefghij\n    console.log(\"(-20, 2): \" + str.substr(-20,2)); // (-20, 2): ab\n    console.log(\"(20, 2): \"  + str.substr(20,2));  // (20, 2):\n    \n\n## Polyfill\n\nMicrosoft's JScript does not support negative values for the start index. If\nyou wish to make use of this feature, you can use the following compatibilty\ncode to work around this bug:\n\n    \n    \n    // only run when the substr function is broken\n    if ('ab'.substr(-1) != 'b')\n    {\n    \u00a0\u00a0/**\n    \u00a0\u00a0 *\u00a0\u00a0Get the substring of a string\n    \u00a0\u00a0 *\u00a0\u00a0@param\u00a0\u00a0{integer}\u00a0\u00a0start\u00a0\u00a0 where to start the substring\n    \u00a0\u00a0 *\u00a0\u00a0@param\u00a0\u00a0{integer}\u00a0\u00a0length\u00a0 how many characters to return\n    \u00a0\u00a0 *\u00a0\u00a0@return\u00a0{string}\n    \u00a0\u00a0 */\n    \u00a0\u00a0String.prototype.substr = function(substr) {\n    \u00a0\u00a0\u00a0\u00a0return function(start, length) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// did we get a negative start, calculate how much it is\n          // from the beginning of the string\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (start < 0) start = this.length + start;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// call the original function\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return substr.call(this, start, length);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}(String.prototype.substr);\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) Compatibility Annex B.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.substr' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) Compatibility Annex B\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.substr' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n**Note**: Up to version 3.6, Firefox had a bug which caused `substr` to return empty result when an explicit `undefined` value was passed in as the `length`.\n\n## See also\n\n  * [`String.prototype.slice()`][3]\n  * [`String.prototype.substring()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.3\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.substr\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the specified\nobject.\n\n## Syntax\n\n    \n    \n    _str_.toString()\n\n## Description\n\nThe `String` object overrides the `toString` method of the [`Object`][1]\nobject; it does not inherit [`Object.toString()`][2]. For `String` objects,\nthe `toString` method returns a string representation of the object and is the\nsame as the [`String.prototype.valueOf()`][3] method.\n\n## Examples\n\n### Example: Using `toString`\n\nThe following example displays the string value of a String object:\n\n    \n    \n    var x = new String(\"Hello world\");\n    \n    alert(x.toString())      // Displays \"Hello world\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][6]\n  * [`String.prototype.valueOf()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.tostring\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.startsWith()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.startswith()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**startsWith()**` method determines whether a string begins with the\ncharacters of another string, returning `true` or `false` as appropriate.\n\n## Syntax\n\n    \n    \n    _str_.startsWith(_searchString_ [, _position_]);\n\n### Parameters\n\n`searchString`\n\n     The characters to be searched for at the start of this string.\n`position`\n\n     The position in this string at which to begin searching for `searchString`; defaults to 0.\n\n## Description\n\nThis method lets you determine whether or not a string begins with another\nstring.\n\n## Examples\n\n    \n    \n    var str = \"To be, or not to be, that is the question.\";\n    \n    alert(str.startsWith(\"To be\"));         // true\n    alert(str.startsWith(\"not to be\"));     // false\n    alert(str.startsWith(\"not to be\", 10)); // true\n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can polyfill`\nString.prototype.startsWith` with the following snippet:\n\n    \n    \n    if (!String.prototype.startsWith) {\n    \u00a0 Object.defineProperty(String.prototype, 'startsWith', {\n    \u00a0\u00a0\u00a0 enumerable: false,\n    \u00a0\u00a0\u00a0 configurable: false,\n    \u00a0\u00a0\u00a0 writable: false,\n    \u00a0\u00a0\u00a0 value: function (searchString, position) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 position = position || 0;\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return this.lastIndexOf(searchString, position) === position;\n    \u00a0\u00a0\u00a0 }\n    \u00a0 });\n    }\n    \n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[17][1] (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n17.0 (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.endsWith()`][2] _ _\n  * [`String.prototype.contains()`][3] _ _\n  * [`String.prototype.indexOf()`][4]\n\n[1]: /en-US/Firefox/Releases/17\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.toLowerCase()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.tolowercase()", "content": "## Summary\n\nThe `**toLowerCase()**` method returns the calling string value converted to\nlowercase.\n\n## Syntax\n\n    \n    \n    _str_.toLowerCase()\n\n## Description\n\nThe `toLowerCase` method returns the value of the string converted to\nlowercase. `toLowerCase` does not affect the value of the string `str` itself.\n\n## Examples\n\n### Example: Using `toLowerCase`\n\n    \n    \n    console.log( \"ALPHABET\".toLowerCase() ); // \"alphabet\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.toLocaleLowerCase()`][3]\n  * [`String.prototype.toUpperCase()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.16\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.tolowercase\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trimLeft()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trimleft()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**trimLeft()**` removes whitespace from the left end of the string.\n\n## Syntax\n\n    \n    \n    str.trimLeft()\n\n## Description\n\nThe `trimLeft` method returns the string stripped of whitespace from its left\nend. `trimLeft` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trimLeft`\n\nThe following example displays the lowercase string \"foo\u00a0\u00a0\":\n\n    \n    \n    var str = \"   foo  \";\n    \n    console.log(str.length); // 8\n    \n    str = str.trimLeft();\n    console.log(str.length); // 5\n    console.log(str);        // \"foo  \"\n    \n\n## Specifications\n\nNone. Not part of any standard. Implemented in JavaScript 1.8.1.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][1] (1.9.1)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.trim()`][2]\n  * _ _ [`String.prototype.trimRight()`][3]\n\n[1]: /en-US/Firefox/Releases/3.5\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trimRight()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trimright()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**trimRight()**` method removes whitespace from the right end of the\nstring.\n\n## Syntax\n\n    \n    \n    str.trimRight()\n\n## Description\n\nThe `trimRight` method returns the string stripped of whitespace from its\nright end. `trimRight` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trimRight`\n\nThe following example displays the lowercase string \" \u00a0 foo\":\n\n    \n    \n    var str = \"   foo  \";\n    \n    console.log(str.length); // 8\n    \n    str = str.trimRight();\n    console.log(str.length); // 5\n    console.log(str);        // \"   foo\"\n    \n\n## Specifications\n\nNone. Not part of any standard. Implemented in JavaScript 1.8.1.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][1] (1.9.1)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.trim()`][2]\n  * _ _ [`String.prototype.trimLeft()`][3]\n\n[1]: /en-US/Firefox/Releases/3.5\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Number.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.tostring()", "content": "## Summary\n\nThe **`toString()`** method returns a string representing the specified\n[`Number`][1] object.\n\n## Syntax\n\n    \n    \n    numObj.toString([radix])\n\n### Parameters\n\n`radix`\n\n    Optional. An integer between 2 and 36 specifying the base to use for representing numeric values.\n\n### Throws\n\n[`RangeError`][2]\n\n    If `toString()` is given a radix not between 2 and 36, a [`RangeError`][2] is thrown.\n\n## Description\n\nThe [`Number`][1] object overrides the `toString()` method of the\n[`Object`][3] object; it does not inherit [`Object.prototype.toString()`][4].\nFor [`Number`][1] objects, the `toString()` method returns a string\nrepresentation of the object in the specified radix.\n\nThe `toString()` method parses its first argument, and attempts to return a\nstring representation in the specified radix (base). For radixes above 10, the\nletters of the alphabet indicate numerals greater than 9. For example, for\nhexadecimal numbers (base 16), `a` through `f` are used.\n\nIf the `radix` is not specified, the preferred radix is assumed to be 10.\n\nIf the `numObj` is negative, the sign is preserved. This is the case even if\nthe radix is 2; the string returned is the positive binary representation of\nthe `numObj` preceded by a `-` sign, **not** the two's complement of the\n`numObj`.\n\n## Examples\n\n### Example: Using `toString`\n\n    \n    \n    var count = 10;\n    \n    console.log(count.toString());    // displays '10'\n    console.log((17).toString());     // displays '17'\n    \n    var x = 6;\n    \n    console.log(x.toString(2));       // displays '110'\n    console.log((254).toString(16));  // displays 'fe'\n    \n    console.log((-10).toString(2)); \u00a0 // displays '-1010'\n    console.log((-0xff).toString(2)); // displays '-11111111'\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.tostring' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.tostring' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toFixed()`][7]\n  * [`Number.prototype.toExponential()`][8]\n  * [`Number.prototype.toPrecision()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.2\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.tostring\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "String.prototype.small()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.small()", "content": "## Summary\n\nThe `**small()**` method creates a `<[small>`][1] HTML element that causes a\nstring to be displayed in a small font.\n\n## Syntax\n\n    \n    \n    _str_.small()\n\n## Description\n\nThe `small` method embeds a string in a `<small>` tag:  \n`\"<small>str</small>`\"\n\n## Examples\n\n### Example: Using `small`\n\nThe following example uses `string` methods to change the size of a string:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.small()     ); // <small>Hello, world</small>\n    console.log( worldString.big()       ); // <big>Hello, world</big>\n    console.log( worldString.fontsize(7) ); // <font size=\"7\">Hello, world</fontsize>\n\nWith the [element.style][2] object you can get the element's `style` attribute\nand manipulate it more generically, for example:\n\n    \n    \n    document.getElementById('yourElemId').style.fontSize = '0.7em'\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.small' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.fontsize()`][4]\n  * [`String.prototype.big()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/small\n\n[2]: /en-US/docs/Web/API/HTMLElement.style\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.small\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.trim()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.trim()", "content": "## Summary\n\nThe `**trim()**` method removes whitespace from both ends of the string.\n\n## Syntax\n\n    \n    \n    _str_.trim()\n\n## Description\n\nThe `trim` method returns the string stripped of whitespace from both ends.\n`trim` does not affect the value of the string itself.\n\n## Examples\n\n### Example: Using `trim`\n\nThe following example displays the lowercase string \"foo\":\n\n    \n    \n    var orig = \"\u00a0\u00a0\u00a0foo\u00a0\u00a0\";\n    \n    console.log( orig.trim() ); // \"foo\"\n\n## Polyfill\n\nRunning the following code before any other code will create `String.trim` if\nit's not natively available.\n\n    \n    \n    if (!String.prototype.trim) {\n    \u00a0 (function(){ \u00a0\n    \u00a0\u00a0\u00a0 // Make sure we trim BOM and NBSP\n    \u00a0\u00a0\u00a0 var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    \u00a0\u00a0\u00a0 String.prototype.trim = function () {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return this.replace(rtrim, \"\");\n    \u00a0\u00a0\u00a0 }\n    \u00a0 })();\n    }\n    \n\n\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.trim' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.8.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.trim' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][4] (1.9.1)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * _ _ [`String.prototype.trimLeft()`][5]\n  * _ _ [`String.prototype.trimRight()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.20\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.trim\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/Firefox/Releases/3.5\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.slice()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.slice()", "content": "## Summary\n\nThe `**slice()**` method extracts a section of a string and returns a new\nstring.\n\n## Syntax\n\n    \n    \n    _str_.slice(_beginSlice_[, _endSlice_])\n\n### Parameters\n\n`beginSlice`\n\n     The zero-based index at which to begin extraction. If negative, it is treated as (`sourceLength+``beginSlice`) where `sourceLength` is the length of the string (for example, if beginSlice is -3 it is treated as sourceLength-3).\n`endSlice`\n\n     The zero-based index at which to end extraction. If omitted, `slice` extracts to the end of the string. If negative, it is treated as (`sourceLength+endSlice`) where `sourceLength` is the length of the string.\n\n## Description\n\n`slice` extracts the text from one string and returns a new string. Changes to\nthe text in one string do not affect the other string.\n\n`slice` extracts up to but not including `endSlice`. For example,\n`str.slice(1,4)` extracts the second character through the fourth character\n(characters indexed 1, 2, and 3).\n\nAs an example, `str.slice(2,-1)` extracts the third character through the\nsecond to last character in the string.\n\n## Examples\n\n### Example: Using `slice` to create a new string\n\nThe following example uses `slice` to create a new string.\n\n    \n    \n    // assumes a print function is defined\n    var str1 = \"The morning is upon us.\";\n    var str2 = str1.slice(4, -2);\n    \n    alert(str2); // OUTPUT: morning is upon u\n    \n\n### Example: Using `slice` with negative indexes\n\nThe following example uses `slice` with negative indexes.\n\n    \n    \n    var str = \"The morning is upon us.\";\n    str.slice(-3);     // returns \"us.\"\n    str.slice(-3, -1); // returns \"us\"\n    str.slice(0, -1);  // returns \"The morning is upon us\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.slice' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.slice' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.substr()`][3]\n  * [`String.prototype.substring()`][4]\n  * [`Array.prototype.slice()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.13\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.slice\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.raw()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.raw()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe static **String.raw()** method is a tag function of [template strings][1],\nlike the `r` prefix in Python or the `@` prefix in C# for string literals,\nthis function is used to get the raw string form of template strings.\n\n## Syntax\n\n    \n    \n    String.raw(callSite, _...substitutions_)\n    \n    String.raw`templateString`\n    \n\n### Parameters\n\n`callSite`\n\n     Well-formed template call site object, like `{raw: \"string\"}`.\n...substitutions\n\n     Contains substitution values.\ntemplateString\n\n     A [template string][1], optionally with substitutions (`${...}`).\n\n### Throws\n\n`[`TypeError`][2]`\n\n     A `TypeError` is thrown if the first argument is not a well formed object.\n\n## Description\n\nIn most cases `String.raw` is used with template strings. The first syntax\nmentioned above is only rarely used because the JavaScript engine will call\nthis with proper arguments for you, just like with other [tag functions][3].\n\nThe `String.raw()` is the only built-in tag function of template strings, it\nworks just like the default template function and performs concatenation, you\ncan even re-implement it with normal JavaScript code.\n\n## Examples\n\n    \n    \n    String.raw`Hi\\n${2+3}!`; \n    // \"Hi\\\\n5!\", the character after \"Hi\" is not a newline character,\n    // \"\\\" and \"n\" are two characters. \n    \n    String.raw`Hi\\u000A!`;             \n    // \"Hi\\\\u000A!\", same here, this time we will get the\n    //  \\, u, 0, 0, 0, A, 6 characters.\n    // All kinds of escape characters will be ineffective and  \n    // backslashes will be present in the output string.\n    // You can confirm this by checking the .length property of the string.\n    \n    let name = \"Bob\";\n    String.raw`Hi\\n${name}!`;             \n    // \"Hi\\\\nBob!\", substitutions are processed.\n    \n    // Normally you would not call String.raw as a function, but you can do so:\n    String.raw({raw: \"test\"}, 0, 1, 2);\n    // \"t0e1s2t\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.raw' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][5] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Template strings][1]\n  * [`String`][6]\n  * [Lexical grammar][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/template_strings\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/template_strings#Tagged_template_strings\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.raw\n\n[5]: /en-US/Firefox/Releases/34\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.replace()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.replace()", "content": "## Summary\n\nThe `**replace()**` method returns a new string with some or all matches of a\n`pattern` replaced by a `replacement`.\u00a0 The `pattern` can be a string or a\nRegExp, and the `replacement` can be a string or a function to be called for\neach match.\n\n## Syntax\n\n    \n    \n    _str_.replace(_regexp|substr_, _newSubStr|function[_, _ _ _flags]_);\n\n### Returns\n\nA new string with some or all matches of a pattern replaced by a replacement.\n\n### Parameters\n\n`regexp`\n\n     A [`RegExp`][1] object. The match is replaced by the return value of parameter #2.\n\n`substr`\n\n     A [`String`][2] that is to be replaced by `newSubStr`.\n\n`newSubStr`\n\n     The [`String`][2] that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the \"Specifying a string as a parameter\" section below.\n\n`function`\n\n     A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). The arguments supplied to this function are described in the \"Specifying a function as a parameter\" section below.\n\n`flags` _ _\n\n     **Note: The `flags` argument is a non-standard Mozilla extension.\u00a0**A string specifying a combination of [regular expression flags][3]. The use of the flags parameter in the String.replace method is non-standard. Instead of using this parameter, use a RegExp object with the corresponding flags. The value of this parameter if it is used should be a string consisting of one or more of the following characters to affect the operation as described:\n    \n\n`g`\n\n     global match\n`i`\n\n     ignore case\n`m`\n\n     match over multiple lines\n`y`\u00a0_ _\n\n     sticky\n\n## Description\n\nThis method does not change the `String` object it is called on. It simply\nreturns a new string.\n\nTo perform a global search and replace, either include the `g` switch in the\nregular expression or if the first parameter is a string, include `g` in the\n`flags` parameter.\n\n### Specifying a string as a parameter\n\nThe replacement string can include the following special replacement patterns:  \n  \n<table>  \n<tr>  \n<td>\n\nPattern\n\n</td>  \n<td>\n\nInserts\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$$`\n\n</td>  \n<td>\n\nInserts a \"$\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$&`\n\n</td>  \n<td>\n\nInserts the matched substring.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$``\n\n</td>  \n<td>\n\nInserts the portion of the string that precedes the matched substring.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$'`\n\n</td>  \n<td>\n\nInserts the portion of the string that follows the matched substring.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$_n_` or `$_nn_`\n\n</td>  \n<td>\n\nWhere `_n_` or `_nn_` are decimal digits, inserts the _n_th parenthesized\nsubmatch string, provided the first argument was a `RegExp` object.\n\n</td> </tr> </table>\n\n### Specifying a function as a parameter\n\nYou can specify a function as the second parameter. In this case, the function\nwill be invoked after the match has been performed. The function's result\n(return value) will be used as the replacement string. (Note: the above-\nmentioned special replacement patterns do _not_ apply in this case.) Note that\nthe function will be invoked multiple times for each full match to be replaced\nif the regular expression in the first parameter is global.\n\nThe arguments to the function are as follows:  \n  \n<table>  \n<tr>  \n<td>\n\nPossible name\n\n</td>  \n<td>\n\nSupplied value\n\n</td> </tr>  \n<tr>  \n<td>\n\n`match`\n\n</td>  \n<td>\n\nThe matched substring. (Corresponds to $& above.)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`p1, p2, ...`\n\n</td>  \n<td>\n\nThe _n_th parenthesized submatch string, provided the first argument to\n`replace` was a `RegExp` object. (Corresponds to $1, $2, etc. above.) For\nexample, if\u00a0`/(\\a+)(\\b+)/`, was given, `p1` is the match for` \\a+`, and\u00a0`p2`\nfor `\\b+`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`offset`\n\n</td>  \n<td>\n\nThe offset of the matched substring within the total string being examined.\n(For example, if the total string was `\"abcd\"`, and the matched substring was\n`\"bc\"`, then this argument will be `1`.)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`string`\n\n</td>  \n<td>\n\nThe total string being examined.\n\n</td> </tr> </table>\n\n(The exact number of arguments will depend on whether the first argument was a\n`RegExp `object and, if so, how many parenthesized submatches it specifies.)\n\nThe following example will set `newString `to\u00a0`\"abc - 12345 - #$*%\"`:\n\n    \n    \n    function replacer(match, p1, p2, p3, offset, string){\n      // p1 is nondigits, p2 digits, and p3 non-alphanumerics\n    \u00a0 return [p1, p2, p3].join(' - ');\n    }\n    newString = \"abc12345#$*%\".replace(/([^\\d]*)(\\d*)([^\\w]*)/, replacer);\n    \n\n## Examples\n\n### Example: Using `global` and `ignore` with `replace`\n\nIn the following example, the regular expression includes the global and\nignore case flags which permits `replace` to replace each occurrence of\n'apples' in the string with 'oranges'.\n\n    \n    \n    var re = /apples/gi;\n    var str = \"Apples are round, and apples are juicy.\";\n    var newstr = str.replace(re, \"oranges\");\n    print(newstr);\n    \n\nIn this version, a string is used as the first parameter and the global and\nignore case flags are specified in the `flags` parameter.\n\n    \n    \n    var str = \"Apples are round, and apples are juicy.\";\n    var newstr = str.replace(\"apples\", \"oranges\", \"gi\");\n    print(newstr);\n    \n\nBoth of these examples print \"oranges are round, and oranges are juicy.\"\n\n### Example: Defining the regular expression in `replace`\n\nIn the following example, the regular expression is defined in `replace` and\nincludes the ignore case flag.\n\n    \n    \n    var str = \"Twas the night before Xmas...\";\n    var newstr = str.replace(/xmas/i, \"Christmas\");\n    print(newstr);\n    \n\nThis prints \"Twas the night before Christmas...\"\n\n### Example: Switching words in a string\n\nThe following script switches the words in the string. For the replacement\ntext, the script uses the `$1` and `$2` replacement patterns.\n\n    \n    \n    var re = /(\\w+)\\s(\\w+)/;\n    var str = \"John Smith\";\n    var newstr = str.replace(re, \"$2, $1\");\n    print(newstr);\n    \n\nThis prints \"Smith, John\".\n\n### Example: Using an inline function that modifies the matched characters\n\nIn this example, all occurrences of capital letters in the string are\nconverted to lower case, and a hyphen is inserted just before the match\nlocation. The important thing here is that additional operations are needed on\nthe matched item before it is given back as a replacement.\n\nThe replacement function accepts the matched snippet as its parameter, and\nuses it to transform the case and concatenate the hyphen before returning.\n\n    \n    \n    function styleHyphenFormat(propertyName)\n    {\n      function upperToHyphenLower(match)\n      {\n        return '-' + match.toLowerCase();\n      }\n      return propertyName.replace(/[A-Z]/g, upperToHyphenLower);\n    }\n    \n\nGiven `styleHyphenFormat('borderTop')`, this returns 'border-top'.\n\nBecause we want to further transform the _result_ of the match before the\nfinal substitution is made, we must use a function. This forces the evaluation\nof the match prior to the `toLowerCase()` method. If we had tried to do this\nusing the match without a function, the toLowerCase() would have no effect.\n\n    \n    \n    var newString = propertyName.replace(/[A-Z]/g, '-' + '$&'.toLowerCase());  // won't work\n    \n\nThis is because `'$&'.toLowerCase()` would be evaluated first as a string\nliteral (resulting in the same `'$&'`) before using the characters as a\npattern.\n\n### Example: Replacing a Fahrenheit degree with its Celsius equivalent\n\nThe following example replaces a Fahrenheit degree with its equivalent Celsius\ndegree. The Fahrenheit degree should be a number ending with F. The function\nreturns the Celsius number ending with C. For example, if the input number is\n212F, the function returns 100C. If the number is 0F, the function returns\n-17.77777777777778C.\n\nThe regular expression `test` checks for any number that ends with F. The\nnumber of Fahrenheit degree is accessible to the function through its second\nparameter, `p1`. The function sets the Celsius number based on the Fahrenheit\ndegree passed in a string to the `f2c` function. `f2c` then returns the\nCelsius number. This function approximates Perl's s///e flag.\n\n    \n    \n    function f2c(x)\n    {\n      function convert(str, p1, offset, s)\n      {\n        return ((p1-32) * 5/9) + \"C\";\n      }\n      var s = String(x);\n      var test = /(\\d+(?:\\.\\d*)?)F\\b/g;\n      return s.replace(test, convert);\n    }\n    \n\n### Example: Use an inline function with a regular expression to avoid for\nloops\n\nThe following example takes a string pattern and converts it into an array of\nobjects\n\n**Input:**  \nA string made out of the characters x, - and _\n\n    \n    \n    x-x_\n    x---x---x---x---\n    x-xxx-xx-x-\n    x_x_x___x___x___\n\n**Output:**\n\nAn array of objects. An 'x' denotes an 'on' state, a '-' (hyphen) denotes an\n'off' state and an '_' (underscore) denotes the length of an 'on' state.\n\n    \n    \n    [\n      { on: true, length: 1 },\n      { on: false, length: 1 },\n      { on: true, length: 2 }\n      ...\n    ]\n\n**Snippet:**\n    \n    \n    var str = 'x-x_';\n    var retArr = [];\n    str.replace(/(x_*)|(-)/g, function(match, p1, p2){\n      if(p1) retArr.push({ on: true, length: p1.length });\n      if(p2) retArr.push({ on: false, length: 1 });\n    });\n    \n    console.log(retArr);\n\nThis snippet generates an array of 3 objects in the desired format without\nusing a for loop.\n\n\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.replace' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.replace' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.match()`][6]\n  * [`RegExp.prototype.exec()`][7]\n  * [`RegExp.prototype.test()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[3]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_Searching_With_Flags\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.11\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.replace\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.search()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.search()", "content": "## Summary\n\nThe `**search()**` method executes a search for a match between a regular\nexpression and this `String` object.\n\n## Syntax\n\n    \n    \n    str.search(regexp)\n\n### Parameters\n\n`regexp`\n\n     A [regular expression][1] object. If a non-RegExp object `obj` is passed, it is implicitly converted to a RegExp by using `new RegExp(obj)`.\n\n## Description\n\nIf successful, `search` returns the index of the first match of the regular\nexpression inside the string. Otherwise, it returns -1.\n\nWhen you want to know whether a pattern is found in a string use `search`\n(similar to the regular expression [`test`][2] method); for more information\n(but slower execution) use [`match`][3] (similar to the regular expression\n[`exec`][4] method).\n\n## Examples\n\n### Example: Using `search`\n\nThe following example logs a message which depends on the success of the test.\n\n    \n    \n    function testinput(re, str){\n      var midstring;\n      if (str.search(re) != -1){\n        midstring = \" contains \";\n      } else {\n        midstring = \" does not contain \";\n      }\n      console.log (str + midstring + re);\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.search' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.search' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\n  * Prior to Gecko\u00a08.0, `search()` was implemented incorrectly; when it was called with no parameters or with `undefined`, it would match against the string \"undefined\", instead of matching against the empty string. This is fixed; now `\"a\".search()` and `\"a\".search(undefined)` correctly return 0.\n\n## See also\n\n  * [`String.prototype.match()`][3]\n  * [`RegExp.prototype.exec()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.12\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.search\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.repeat()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.repeat()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**repeat()**` method constructs and returns a new string which contains\nthe specified number of copies of the string on which it was called,\nconcatenated together.\n\n## Syntax\n\n    \n    \n    str.repeat(count)\n\n### Parameters\n\n`count`\n\n     An integer between 0 and +\u221e : [ 0, +\u221e), indicating the number of times to repeat the string in the newly-created string that is to be returned.\n\n### Throws\n\n[`RangeError`][1]\n\n     The repeat count must be positive and less than infinity.\n\n## Examples\n\n    \n    \n    \"abc\".repeat(-1)     // RangeError\n    \"abc\".repeat(0)      // \"\"\n    \"abc\".repeat(1)      // \"abc\"\n    \"abc\".repeat(2)      // \"abcabc\"\n    \"abc\".repeat(3.5)    // \"abcabcabc\" (count will be converted to integer)\n    \"abc\".repeat(1/0)    // RangeError\n    \n    ({toString : () => \"abc\", repeat : String.prototype.repeat}).repeat(2)    \n    // \"abcabc\" (repeat is a generic method)\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.repeat' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can polyfill`\nString.prototype.repeat` with the following snippet:\n\n    \n    \n    if (!String.prototype.repeat) {\n      String.prototype.repeat = function (count) {\n        \"use strict\";\n        if (this == null)\n          throw new TypeError(\"can't convert \" + this + \" to object\");\n        var str = \"\" + this;\n        count = +count;\n        if (count != count)\n          count = 0;\n        if (count < 0)\n          throw new RangeError(\"repeat count must be non-negative\");\n        if (count == Infinity)\n          throw new RangeError(\"repeat count must be less than infinity\");\n        count = Math.floor(count);\n        if (str.length == 0 || count == 0)\n          return \"\";\n        // Ensuring count is a 31-bit integer allows us to heavily optimize the\n        // main part. But anyway, most current (august 2014) browsers can't handle\n        // strings 1 << 28 chars or longer, so :\n        if (str.length * count >= 1 << 28)\n          throw new RangeError(\"repeat count must not overflow maximum string size\");\n        var rpt = \"\";\n        for (;;) {\n          if ((count & 1) == 1)\n            rpt += str;\n          count >>>= 1;\n          if (count == 0)\n            break;\n          str += str;\n        }\n        return rpt;\n      }\n    }\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[24][3] (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n24.0 (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.repeat\n\n[3]: /en-US/Firefox/Releases/24\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.quote()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.quote()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe non-standard `**quote()**` method returns a copy of the string, replacing\nvarious special characters in the string with their escape sequences and\nwrapping the result in double-quotes (`\"`).\n\n## Syntax\n\n    \n    \n    _str_.quote()\n\n## Examples\n\nIn the table below the `quote` method replaces any special characters and\nwraps the strings in double-quotes. Also note the third column where a wrapped\n`eval` evaluates the escape sequences again.  \n  \n<table>  \n<tr>  \n<th>\n\n`str`\n\n</th>  \n<th>\n\n`str.quote()`\n\n</th>  \n<th>\n\n[`eval][1](str.quote())`\n\n</th> </tr>  \n<tr>  \n<td>\n\n`Hello world!`\n\n</td>  \n<td>\n\n`\"Hello world!\"`\n\n</td>  \n<td>\n\n`Hello world!`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Hello  \n\u00a0 \u00a0 \u00a0 \u00a0 world!`\n\n</td>  \n<td>\n\n`\"Hello\\n\\tworld!\"`\n\n</td>  \n<td>\n\n`Hello  \n\u00a0 \u00a0 \u00a0 \u00a0 world!`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\" \\ \u2014 '`\n\n</td>  \n<td>\n\n`\"\\\" \\\\\\ \\u2014 '\"`\n\n</td>  \n<td>\n\n`\" \\ \u2014 '`\n\n</td> </tr> </table>\n\n## Specifications\n\nNone. Not part of any standard. Implemented in JavaScript 1.3.\n\n## Polyfill\n\n    \n    \n    if(!String.prototype.quote){\n      // oop version - no dependencies\n      String.prototype.quote = (function(){\n        // prepare fallback\n        // ----------------\n        // backslash escape double quotes and backslashes\n        var escp_regex = /[\\\\\"]/g,\n          escp_callback = '\\\\$&',\n          // escape control characters\n          ctrl_map = {\n            '\\b': '\\\\b', // backspace\n            '\\t': '\\\\t', // tab\n            '\\n': '\\\\n', // new line\n            '\\f': '\\\\f', // form feed\n            '\\r': '\\\\r'  // carriage return\n          },\n          // don't rely on `Object.keys(ctrl_map).join('')`\n          ctrl_regex = new RegExp('[\\b\\t\\n\\f\\r]', 'g'),\n          ctrl_callback = function(match){\n            return ctrl_map[match];\n          },\n          // hex-escape, spare out control characters and ASCII printables\n          // [0-7,11,14-31,127-255]\n          xhex_regex = /[\\x00-\\x07\\x0B\\x0E-\\x1F\\x7F-\\xFF]/g,\n          xhex_callback = function(match, char_code){\n            char_code = match.charCodeAt(0);\n            return '\\\\x' + (char_code < 16 ? '0' : '') + char_code;\n          },\n          // hex-escape all others\n          uhex_regex = /[\\u0100-\\uFFFF]/g,\n          uhex_callback = function(match, char_code){\n            char_code = match.charCodeAt(0);\n            return '\\\\u' + (char_code < 4096 ? '0' : '') + char_code;\n          },\n          // delegate to native `JSON.stringify` if available\n          stringify = typeof JSON !== 'undefined' && JSON.stringify;\n    \n        // return actual polyfill\n        // ----------------------\n        return function(){\n          var self = this; // promote compression\n          if(self == null) throw new TypeError('can\\'t convert ' + self + ' to object');\n          if(stringify) return stringify(self);\n          return '\"' + self\n            .replace(escp_regex, escp_callback)\n            .replace(ctrl_regex, ctrl_callback)\n            .replace(xhex_regex, xhex_callback)\n            .replace(uhex_regex, uhex_callback) + '\"';\n        }\n      }());\n    \n      // generic version - requires Function#bind\n      String.quote = Function.call.bind(''.quote);\n    }\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`JSON.stringify`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.normalize()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.normalize()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **normalize()** method returns the Unicode Normalization Form of a given\nstring (if the value isn't a string, it will be converted to one first).\n\n## Syntax\n\n    \n    \n    _str_.normalize([form]);\n\n### Parameters\n\n`form`\n\n     One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. If omitted or `undefined`, \"NFC\" is used. \n\n  * NFC - Normalization Form Canonical Composition.\n  * NFD - Normalization Form Canonical Decomposition.\n  * NFKC - Normalization Form Compatibility Composition.\n  * NFKD - Normalization Form Compatibility Decomposition.\n\n### Throws\n\n`[`RangeError`][1]`\n\n     A `RangeError` is thrown if `form` isn't one of the values specified above.\n\n## Description\n\nThe `normalize` method returns the specified Unicode Normalization Form of the\nstring. It does not affect the value of the string itself.\n\n## Examples\n\n### Examples: Using `normalize`\n\n    \n    \n    // Initial string\n    \n    // U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n    // U+0323: COMBINING DOT BELOW\n    var str = \"\\u1E9B\\u0323\";\n    \n    \n    // Canonically-composed form (NFC)\n    \n    // U+1E9B: LATIN SMALL LETTER LONG S WITH DOT ABOVE\n    // U+0323: COMBINING DOT BELOW\n    str.normalize(\"NFC\"); // \"\\u1E9B\\u0323\"\n    str.normalize(); // same as above\n    \n    \n    // Canonically-decomposed form (NFD)\n    \n    // U+017F: LATIN SMALL LETTER LONG S\n    // U+0323: COMBINING DOT BELOW\n    // U+0307: COMBINING DOT ABOVE\n    str.normalize(\"NFD\"); // \"\\u017F\\u0323\\u0307\"\n    \n    \n    // Compatibly-composed (NFKC)\n    \n    // U+1E69: LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE\n    str.normalize(\"NFKC\"); // \"\\u1E69\"\n    \n    \n    // Compatibly-decomposed (NFKD)\n    \n    // U+0073: LATIN SMALL LETTER S\n    // U+0323: COMBINING DOT BELOW\n    // U+0307: COMBINING DOT ABOVE\n    str.normalize(\"NFKD\"); // \"\\u0073\\u0323\\u0307\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.normalize' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n34\n\n</td>  \n<td>\n\n[31][4] (31)\n\n</td>  \n<td>\n\n11 on Windows 10 Preview\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Unicode Standard Annex #15, Unicode Normalizatoin Forms][6]\n  * [Unicode equivalence][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.normalize\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/Firefox/Releases/31\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: http://www.unicode.org/reports/tr15/\n\n[7]: http://en.wikipedia.org/wiki/Unicode_equivalence\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Number.NaN", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.nan", "content": "## Summary\n\nThe **`Number.NaN`** property represents Not-A-Number. Equivalent of\n[`NaN`][1].\n\nYou do not have to create a [`Number`][2] object to access this static\nproperty (use `Number.NaN`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.NaN`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.NaN' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.NaN' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The global [`NaN`][1] object.\n  * The [`Number`][2] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.4\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.nan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "String.prototype.match()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.match()", "content": "## Summary\n\nThe `**match()**` method retrieves the matches when matching a `_string_`\nagainst a _regular expression_.\n\n## Syntax\n\n    \n    \n    _str_.match(regexp);\n\n### Parameters\n\n`regexp`\n\n     A [regular expression][1] object. If a non-RegExp object `obj` is passed, it is implicitly converted to a RegExp by using `new RegExp(obj)`.\n\n### Return value\n\n`array`\n\n     An [`Array`][2] containing the matched results or `null` if there were no matches.\n\n## Description\n\nIf the regular expression does not include the `g` flag, returns the same\nresult as [`RegExp.exec(str)`][3]. The returned [`Array`][2] has an extra\n`input` property, which contains the original string that was parsed. In\naddition, it has an `index` property, which represents the zero-based index of\nthe match in the string.\n\nIf the regular expression includes the `g` flag, the method returns an\n[`Array`][2] containing all matches. If there were no matches, the method\nreturns `null`.\n\n### See also: `RegExp` methods\n\n  * If you need to know if a string matches a regular expression `RegExp`, use [`RegExp.test(str)`][4].\n  * If you only want the first match found, you might want to use [`RegExp.exec(str)`][3] instead.\n\n## Examples\n\n### Example: Using `match`\n\nIn the following example, `match` is used to find \"`Chapter`\" followed by 1 or\nmore numeric characters followed by a decimal point and numeric character 0 or\nmore times. The regular expression includes the `i` flag so that case will be\nignored.\n\n    \n    \n    var str = \"For more information, see Chapter 3.4.5.1\";\n    var re = /(chapter \\d+(\\.\\d)*)/i;\n    var found = str.match(re);\n    \n    console.log(found);\n    \n    // logs [\"Chapter 3.4.5.1\", \"Chapter 3.4.5.1\", \".1\"]\n    \n    // \"Chapter 3.4.5.1\" is the first match and the first value \n    //  remembered from (Chapter \\d+(\\.\\d)*).\n    \n    // \".1\" is the last value remembered from (\\.\\d).\n\n### Example: Using global and ignore case flags with `match`\n\nThe following example demonstrates the use of the global and ignore case flags\nwith `match`. All letters A through E and a through e are returned, each its\nown element in the array\n\n    \n    \n    var str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    var regexp = /[A-E]/gi;\n    var matches_array = str.match(regexp);\n    \n    console.log(matches_array); \n    // ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.match' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.match' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.exec()`][3]\n  * [`RegExp.prototype.test()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.10\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.match\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.localeCompare()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.localecompare()", "content": "## Summary\n\nThe `**localeCompare()**` method returns a number indicating whether a\nreference string comes before or after or is the same as the given string in\nsort order.\n\nThe new `locales` and `options` arguments let applications specify the\nlanguage whose sort order should be used and customize the behavior of the\nfunction. In older implementations, which ignore the `locales` and `options`\narguments, the locale and sort order used are entirely implementation\ndependent.\n\n## Syntax\n\n    \n    \n    _str_.localeCompare(compareString [, locales [, options]])\n\n### Parameters\n\nCheck the Browser compatibility section to see which browsers support the\n`locales` and `options` arguments, and the Example: Checking for support for\n`locales` and `options` arguments for feature detection.\n\n`compareString`\n\n     The string against which the referring string is comparing\n\n`locales`\n\n    \n\nA string with a BCP 47 language tag, or an array of such strings. For the\ngeneral form and interpretation of the `locales` argument, see the [Intl\npage][1]. The following Unicode extension keys are allowed:\n\nco\n\n     Variant collations for certain locales. Possible values include: \"big5han\", \"dict\", \"direct\", \"ducet\", \"gb2312\", \"phonebk\", \"phonetic\", \"pinyin\", \"reformed\", \"searchjl\", \"stroke\", \"trad\", \"unihan\". The \"standard\" and \"search\" values are ignored; they are replaced by the `options` property `usage` (see below).\nkn\n\n     Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are \"true\" and \"false\". This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence.\nkf\n\n     Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default). This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence.\n`options`\n\n    \n\nAn object with some or all of the following properties:\n\n`localeMatcher`\n\n     The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the [Intl page][2].\n`usage`\n\n     Whether the comparison is for sorting or for searching for matching strings. Possible values are \"sort\" and \"search\"; the default is \"sort\".\n`sensitivity`\n\n     Which differences in the strings should lead to non-zero result values. Possible values are: \n\n  * \"base\": Only strings that differ in base letters compare as unequal. Examples: a =\u0338 b, a = a\u0301, a = A.\n  * \"accent\": Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a =\u0338 b, a =\u0338 a\u0301, a = A.\n  * \"case\": Only strings that differ in base letters or case compare as unequal. Examples: a =\u0338 b, a = a\u0301, a =\u0338 A.\n  * \"variant\": Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a =\u0338 b, a =\u0338 a\u0301, a =\u0338 A.\n\nThe default is \"variant\" for usage \"sort\"; it's locale dependent for usage\n\"search\".\n\n`ignore\u00adPunctua\u00adtion`\n\n     Whether punctuation should be ignored. Possible values are `true` and `false`; the default is `false`.\n`numeric`\n\n     Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are `true` and `false`; the default is `false`. This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence. Implementations are not required to support this property.\n`caseFirst`\n\n     Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default); the default is \"false\". This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence. Implementations are not required to support this property.\n\n## Description\n\nReturns a number indicating whether a reference string comes before or after\nor is the same as the given string in sort order. Returns a negative number if\nthe string occurs earlier in a sort than `compareString`, returns a positive\nnumber if the string occurs afterwards in such a sort, and returns 0 if they\noccur at the same level.\n\n## Examples\n\n### Example: Using `localeCompare`\n\nThe following example demonstrates the different potential results for a\nstring occurring before, after, or at the same level as another:\n\n    \n    \n    alert('a'.localeCompare('c')); // -2, or -1, or some other negative value\n    alert('c'.localeCompare('a')); // 2, or 1, or some other positive value\n    alert('a'.localeCompare('a')); // 0\n    \n\nNote that the results shown in the code above can vary between browsers and\nbrowser versions. This is because the values are implementation-specific. That\nis, the specification requires only that the before and after values are\nnegative and positive.\n\n### Example: Checking for support for `locales` and `options` arguments\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\nTo check whether an implementation supports them already, you can use the\nrequirement that illegal language tags are rejected with a `RangeError`\nexception:\n\n    \n    \n    function localeCompareSupportsLocales() {\n        try {\n            \"a\".localeCompare\u200b(\"b\", \"i\");\n        } catch (e) {\n            return e\u200b.name === \"RangeError\";\n        }\n        return false;\n    }\n    \n\n### Example: Using `locales`\n\nThe results provided by `localeCompare` vary between languages. In order to\nget the sort order of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    alert('\u00e4'.localeCompare('z', 'de')); // a negative value: in German, \u00e4 sorts with a\n    alert('\u00e4'.localeCompare('z', 'sv')); // a positive value: in Swedish, \u00e4 sorts after z\n    \n\n### Example: Using `options`\n\nThe results provided by `localeCompare` can be customized using the `options`\nargument:\n\n    \n    \n    // in German, \u00e4 has a as the base letter\n    alert('\u00e4'.localeCompare('a', 'de', {sensitivity: \"base\"})); // 0\n    \n    // in Swedish, \u00e4 and a are separate base letters\n    alert('\u00e4'.localeCompare('a', 'sv', {sensitivity: \"base\"})); // a positive value\n    \n\n## Performance\n\nWhen comparing large numbers of strings, such as in sorting large arrays, it\nis better to create an [`Intl.Collator`][3] object and use the function\nprovided by its [`compare`][4] property.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.localeCompare' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.localeCompare' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API Specification, 1st Edition][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n`locale` and `option` parameter defintions\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][9] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n\n[bug\u00a0864843][10]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.Collator`][3]\n\n[1]: /en-US/docs/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.9\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.localecompare\n\n[7]: http://www.ecma-international.org/ecma-402/1.0/#sec-13.1.1\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/29\n\n[10]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.link()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.link()", "content": "## Summary\n\nThe `**link()**` method creates an `<[a>`][1] HTML element that causes a\nstring to be displayed as a hypertext link to another URL.\n\n## Syntax\n\n    \n    \n    _str_.link(url) \n\n### Parameters\n\n`url`\n\n     Any string that specifies the `href` attribute of the `a` tag; it should be a valid URL (relative or absolute), with any `&` characters escaped as `&amp;`, and any `\"` characters escaped as `&quot;`.\n\n## Description\n\nUse the `link` method to create an HTML snippet for a hypertext link. The\nreturned string can then be added to the document via [`document.write`][2] or\n[`element.innerHTML`][3].\n\nLinks created with the `link` method become elements in the `links` array of\nthe `document` object. See [`document.links`][4].\n\n## Examples\n\n### Example: Using `link`\n\nThe following example displays the word \"MDN\" as a hypertext link that returns\nthe user to the Mozilla Developer Network.\n\n    \n    \n    var hotText = \"MDN\";\n    var URL = \"https://developer.mozilla.org/\";\n    \n    console.log(\"Click to return to \" + hotText.link(URL));\n\nThis example produces the same output as the following HTML:\n\n    \n    \n    Click to return to <a href=\"https://developer.mozilla.org/\">MDN</a>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.link' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## Gecko-specific notes\n\n  * Starting Gecko 17.0 (Firefox 17 / Thunderbird 17 / SeaMonkey 2.14) the **\"** (quotation mark) is now automatically replaced by its HTML reference character `&quot;` in the `url` parameter.\n\n## See also\n\n  * [`String.prototype.anchor()`][6]\n\n[1]: /en-US/docs/Web/HTML/Element/a\n\n[2]: /en-US/docs/Web/API/document.write\n\n[3]: /en-US/docs/Web/API/element.innerHTML\n\n[4]: /en-US/docs/Web/API/document.links\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.link\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.italics()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.italics()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**italics()**` method creates an `<[i>`][1] HTML element that causes a\nstring to be italic.\n\n## Syntax\n\n    \n    \n    _str_.italics()\n\n## Description\n\nThe `italics` method embeds a string in an `<i>` tag:  \n`\"<i>str</i>`\"\n\n## Examples\n\n### Example: Using `italics`\n\nThe following example uses `string` methods to change the formatting of a\nstring:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.blink()   );\n    console.log( worldString.bold()    );\n    console.log( worldString.italics() );\n    console.log( worldString.strike()  );\n    \n\nThis example produces the same output as the following HTML:\n\n    \n    \n    <blink>Hello, world</blink>\n    <b>Hello, world</b>\n    <i>Hello, world</i>\n    <strike>Hello, world</strike>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.italics' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.blink()`][3]\n  * [`String.prototype.bold()`][4]\n  * [`String.prototype.strike()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/i\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.italics\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.sub()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.sub()", "content": "## Summary\n\nThe `**sub()**` method creates a `<[sub>`][1] HTML element that causes a\nstring to be displayed as subscript.\n\n## Syntax\n\n    \n    \n    _str_.sub()\n\n## Description\n\nThe `sub` method embeds a string in a `<sub>` tag:  \n`\"<sub>str</sub>`\"\n\n## Examples\n\n### Example: Using `sub` and `sup` methods\n\nThe following example uses the `sub` and `sup` methods to format a string:\n\n    \n    \n    var superText = \"superscript\";\n    var subText = \"subscript\";\n    \n    console.log(\"This is what a \" + superText.sup() + \" looks like.\");\n    console.log(\"This is what a \" + subText.sub() + \" looks like.\");\n    \n\nThis example produces the same output as the following HTML:\n\n    \n    \n    This is what a <sup>superscript</sup> looks like.\n    This is what a <sub>subscript</sub> looks like.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.sub' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.sup()`][3]\n\n[1]: /en-US/docs/Web/HTML/Element/sub\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.sub\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Number.toInteger()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.tointeger()", "content": "**Obsolete since Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30)**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe **`Number.toInteger()`** method used to evaluate the passed value and\nconvert it to an integer, but its implementation has been removed.\n\nIf the target value is [`NaN`][1], [`null`][2] or [`undefined`][3], 0 is\nreturned. If the target value is `false`, 0 is returned and if `true`, 1 is\nreturned.\n\n## Syntax\n\n    \n    \n    Number.toInteger(number)\n\n### Parameters\n\n`number`\n\n    The value to be converted to an integer.\n\n## Examples\n\n### Example: Using `toInteger`\n\nAlert of some test values:\n\n    \n    \n    Number.toInteger(0.1);     // 0\n    Number.toInteger(1);       // 1\n    Number.toInteger(Math.PI); // 3\n    Number.toInteger(null);    // 0\n    \n\n## Specifications\n\n  * `Number.toInteger()` was part of the draft ECMAScript 6 specification, but has been removed on August 23, 2013 in Draft Rev 17.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nFirefox 16 to 32\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nFirefox 16 to 32\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][4] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "String.prototype.strike()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.strike()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**strike()**` method creates a `<[strike>`][1] HTML element that causes a\nstring to be displayed as struck-out text.\n\n## Syntax\n\n    \n    \n    _str_.strike()\n\n## Description\n\nThe strike method embeds a string in a `<strike>` tag:  \n`\"<strike>str</strike>`\"\n\n## Examples\n\n### Example: Using `strike`\n\nThe following example uses `string` methods to change the formatting of a\nstring:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.blink()   );\n    console.log( worldString.bold()    );\n    console.log( worldString.italics() );\n    console.log( worldString.strike()  );\n\nThis example produces the same output as the following HTML:\n\n    \n    \n    <blink>Hello, world</blink>\n    <b>Hello, world</b>\n    <i>Hello, world</i>\n    <strike>Hello, world</strike>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.strike' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.blink()`][3]\n  * [`String.prototype.bold()`][4]\n  * [`String.prototype.italics()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/strike\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.strike\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.fontsize()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.fontsize()", "content": "## Summary\n\nThe `**fontsize()**` method creates a `<[font>`][1] HTML element that causes a\nstring to be displayed in the specified font size.\n\n**Usage note: **The <font> element has been removed in [HTML5][2] and shouldn't be used anymore. Instead web developers should use [CSS][3] properties.\n\n## Syntax\n\n    \n    \n    str.fontsize(_size_)\n\n### Parameters\n\n`size`\n\n     An integer between 1 and 7, a string representing a signed integer between 1 and 7.\n\n## Description\n\nWhen you specify size as an integer, you set the font size of `str` to one of\nthe 7 defined sizes. When you specify `size` as a string such as \"-2\", you\nadjust the font size of `str` relative to the size set in the\n`<[basefont>`][4] tag.\n\n## Examples\n\n### Example: Using `fontsize`\n\nThe following example uses `string` methods to change the size of a string:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.small()     ); // <small>Hello, world</small>\n    console.log( worldString.big()       ); // <big>Hello, world</big>\n    console.log( worldString.fontsize(7) ); // <font size=\"7\">Hello, world</fontsize>\n\nWith the [element.style][5] object you can get the element's `style` attribute\nand manipulate it more generically, for example:\n\n    \n    \n    document.getElementById('yourElemId').style.fontSize = '0.7em'\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.fontsize' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.big()`][7]\n  * [`String.prototype.small()`][8]\n\n[1]: /en-US/docs/Web/HTML/Element/font\n\n[2]: /en-US/docs/Web/Guide/HTML/HTML5\n\n[3]: /en-US/docs/Web/CSS\n\n[4]: /en-US/docs/Web/HTML/Element/basefont\n\n[5]: /en-US/docs/Web/API/HTMLElement.style\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.fontsize\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.fontcolor()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.fontcolor()", "content": "## Summary\n\nThe `**fontcolor(color)**` method creates a `<[font>`][1] HTML element that\ncauses a string to be displayed in the specified font color.\n\n**Usage note: **The <font> element has been removed in [HTML5][2] and shouldn't be used anymore. Instead web developers should use [CSS][3] properties.\n\n## Syntax\n\n    \n    \n    str.fontcolor(_color_)\n\n### Parameters\n\n`color`\n\n     A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the [CSS color reference][4].\n\n## Description\n\nIf you express color as a hexadecimal RGB triplet, you must use the format\n`rrggbb`. For example, the hexadecimal RGB values for salmon are red=FA,\ngreen=80, and blue=72, so the RGB triplet for salmon is \"`FA8072`\".\n\n## Examples\n\n### Example: Using `fontcolor`\n\nThe following example uses the `fontcolor` method to change the color of a\nstring by producing a string with the HTML `<font>` tag.\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log(worldString.fontcolor(\"red\") +  \" is red in this line\");\n    // '<font color=\"red\">Hello, world</font> is red in this line'\n    \n    console.log(worldString.fontcolor(\"FF00\") + \" is red in hexadecimal in this line\");\n    // '<font color=\"FF00\">Hello, world</font> is red in hexadecimal in this line'\n    \n\nWith the [element.style][5] object you can get the element's `style` attribute\nand manipulate it more generically, for example:\n\n    \n    \n    document.getElementById('yourElemId').style.color = 'red'\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.fontsize()`][7]\n\n[1]: /en-US/docs/Web/HTML/Element/font\n\n[2]: /en-US/docs/Web/Guide/HTML/HTML5\n\n[3]: /en-US/docs/Web/CSS\n\n[4]: /en-US/docs/Web/CSS/color_value\n\n[5]: /en-US/docs/Web/API/HTMLElement.style\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.fontcolor\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Number.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.valueof()", "content": "## Summary\n\nThe **`valueOf()`** method returns the primitive value of a [`Number`][1]\nobject.\n\n## Syntax\n\n    \n    \n    numObj.valueOf()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `valueOf()` method of [`Number`][1] returns the primitive value of a\n[`Number`][1] object as a number data type.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    var x = new Number();\n    \n    console.log(x.valueOf()); // logs 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.valueOf' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.valueOf' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toSource()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.4\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.valueof\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe **`toSource()`** method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    numObj.toSource()\n    Number.toSource()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource()` method returns the following values:\n\n  * For the built-in [`Number`][1] object, `toSource()` returns the following string indicating that the source code is not available: \n    \n        function Number() {\n        [native code]\n    }\n    \n\n  * For instances of [`Number`][1], `toSource()` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.prototype.toLocaleString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.tolocalestring()", "content": "## Summary\n\nThe **`toLocaleString()`** method returns a string with a language sensitive\nrepresentation of this number.\n\nThe new `locales` and `options` arguments let applications specify the\nlanguage whose formatting conventions should be used and customize the\nbehavior of the function. In older implementations, which ignore the `locales`\nand `options` arguments, the locale used and the form of the string returned\nare entirely implementation dependent.\n\n## Syntax\n\n    \n    \n    _numObj_.toLocaleString([locales [, options]])\n\n### Parameters\n\nCheck the Browser compatibility section to see which browsers support the\n`locales` and `options` arguments, and the Example: Checking for support for\n`locales` and `options` arguments for feature detection.\n\n**Note:** ECMAScript Internationalization API, implemented with Firefox\u00a029, added the `locales` argument to the `Number.toLocaleString()` method. If the argument is [`undefined`][1], this method returns localized digits specified by the OS, while the previous versions of Firefox returned English digits. This change has been reported as a regression affecting backward compatibility which might be fixed soon. ([bug\u00a0999003][2])\n\n`locales`\n\n    \n\nA string with a BCP 47 language tag, or an array of such strings. For the\ngeneral form and interpretation of the `locales` argument, see the [Intl\npage][3]. The following Unicode extension key is allowed:\n\n`nu`\n\n    The numbering system to be used. Possible values include: `\"arab\"`, `\"arabext\"`, `\"bali\"`, `\"beng\"`, `\"deva\"`, `\"fullwide\"`, `\"gujr\"`, `\"guru\"`, `\"hanidec\"`, `\"khmr\"`, `\"knda\"`, `\"laoo\"`, `\"latn\"`, `\"limb\"`, `\"mlym\"`, `\"mong\"`, `\"mymr\"`, `\"orya\"`, `\"tamldec\"`, `\"telu\"`, `\"thai\"`, `\"tibt\"`.\n`options`\n\n    \n\nAn object with some or all of the following properties:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][4].\n`style`\n\n    The formatting style to use. Possible values are `\"decimal\"` for plain number formatting, `\"currency\"` for currency formatting, and `\"percent\"` for percent formatting; the default is `\"decimal\"`.\n`currency`\n\n    The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as `\"USD\"` for the US dollar, `\"EUR\"` for the euro, or `\"CNY\"` for the Chinese RMB\u00a0\u2014 see the [Current currency & funds code list][5]. There is no default value; if the `style` is `\"currency\"`, the `currency` property must be provided.\n`currencyDisplay`\n\n    How to display the currency in currency formatting. Possible values are `\"symbol\"` to use a localized currency symbol such as \u20ac, `\"code\"` to use the ISO currency code, `\"name\"` to use a localized currency name such as `\"dollar\"`; the default is `\"symbol\"`.\n`useGrouping`\n\n    Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. Possible values are `true` and `false`; the default is `true`.\n\nThe following properties fall into two groups: `minimumIntegerDigits`,\n`minimumFractionDigits`, and `maximumFractionDigits` in one group,\n`minimumSignificantDigits` and `maximumSignificantDigits` in the other. If at\nleast one property from the second group is defined, then the first group is\nignored.\n\n`minimumIntegerDigits`\n\n    The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n`minimumFractionDigits`\n\n    The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list][5] (2 if the list doesn't provide that information).\n`maximumFractionDigits`\n\n    The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of `minimumFractionDigits` and 3; the default for currency formatting is the larger of `minimumFractionDigits` and the number of minor unit digits provided by the [ISO 4217 currency code list][5] (2 if the list doesn't provide that information); the default for percent formatting is the larger of `minimumFractionDigits` and 0.\n`minimumSignificantDigits`\n\n    The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n`maximumSignificantDigits`\n\n    The maximum number of significant digits to use. Possible values are from 1 to 21; the default is `minimumSignificantDigits`.\n\n## Examples\n\n### Example: Using `toLocaleString`\n\nIn basic use without specifying a locale, a formatted string in the default\nlocale and with default options is returned.\n\n    \n    \n    var number = 3500;\n    \n    console.log(number.toLocaleString()); // Displays \"3,500\" if in U.S. English locale\n    \n\n### Example: Checking for support for `locales` and `options` arguments\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\nTo check whether an implementation supports them already, you can use the\nrequirement that illegal language tags are rejected with a [`RangeError`][6]\nexception:\n\n    \n    \n    function toLocaleStringSupportsLocales() {\n      var number = 0;\n      try {\n        number.toLocaleString('i');\n      } catch (e) {\n        return e\u200b.name === 'RangeError';\n      }\n      return false;\n    }\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized number formats. In\norder to get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var number = 123456.789;\n    \n    // German uses comma as decimal separator and period for thousands\n    console.log(number.toLocaleString('de-DE'));\n    // \u2192 123.456,789\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    console.log(number.toLocaleString('ar-EG'));\n    // \u2192 \u0661\u0662\u0663\u0664\u0665\u0666\u066b\u0667\u0668\u0669\n    \n    // India uses thousands/lakh/crore separators\n    console.log(number.toLocaleString('en-IN'));\n    // \u2192 1,23,456.789\n    \n    // the nu extension key requests a numbering system, e.g. Chinese decimal\n    console.log(number.toLocaleString('zh-Hans-CN-u-nu-hanidec'));\n    // \u2192 \u4e00\u4e8c\u4e09,\u56db\u4e94\u516d.\u4e03\u516b\u4e5d\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    console.log(number.toLocaleString(['ban', 'id']));\n    // \u2192 123.456,789\n    \n\n### Example: Using `options`\n\nThe results provided by `toLocaleString` can be customized using the `options`\nargument:\n\n    \n    \n    var number = 123456.789;\n    \n    // request a currency format\n    console.log(number.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }));\n    // \u2192 123.456,79\u00a0\u20ac\n    \n    // the Japanese yen doesn't use a minor unit\n    console.log(number.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' }))\n    // \u2192 \uffe5123,457\n    \n    // limit to three significant digits\n    console.log(number.toLocaleString('en-IN', { maximumSignificantDigits: 3 }));\n    // \u2192 1,23,000\n    \n\n## Performance\n\nWhen formatting large numbers of numbers, it is better to create a\n[`NumberFormat`][7] object and use the function provided by its\n[`NumberFormat.format`][8] property.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.toLocaleString' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.toLocaleString' in that\nspecification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Number.prototype.toLocaleString' in that\nspecification.][11]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][12] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][13]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toString()`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: https://bugzilla.mozilla.org/show_bug.cgi?id=999003\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[5]: http://www.currency-iso.org/en/home/tables/table-a1.html\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.3\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.tolocalestring\n\n[11]: http://www.ecma-international.org/ecma-402/1.0/#sec-13.2.1\n\n[12]: /en-US/Firefox/Releases/29\n\n[13]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.parseInt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.parseint()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.parseInt()`** method parses a string argument and returns an\ninteger of the specified radix or base. This method behaves identical to the\nglobal function [`parseInt()`][1] and is part of ECMAScript 6 (its purpose is\nmodularization of globals).\n\n## Syntax\n\n    \n    \n    Number.parseInt(string[, radix])\n\n### Parameters\n\n`string`\n\n    The value to parse. If `string` is not a string, then it is converted to one. Leading whitespace in the string is ignored.\n`radix`\n\n    Optional. An integer that represents the radix of the above mentioned string. **Always specify this parameter** to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified.\n\n## Description\n\nPlease see [`parseInt()`][1] for more details and examples.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.parseInt' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[25][3] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[25][3] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The` [`Number`][4]` object it belongs to.\n  * The global [`parseInt()`][1] method.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.parseint\n\n[3]: /en-US/Firefox/Releases/25\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.parseFloat()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.parsefloat()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.parseFloat()`** method parses a string argument and returns a\nfloating point number. This method behaves identical to the global function\n[`parseFloat()`][1] and is part of ECMAScript 6 (its purpose is modularization\nof globals).\n\n## Syntax\n\n    \n    \n    Number.parseFloat(string)\n\n### Parameters\n\n`string`\n\n    A string that represents the value you want to parse.\n\n## Description\n\nPlease see [`parseFloat()`][1] for more details and examples.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.parseFloat' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[25][3] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][4] object it belongs to.\n  * The global [`parseFloat()`][1] method.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.parsefloat\n\n[3]: /en-US/Firefox/Releases/25\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Template strings", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/template_strings", "parsed_url": "/javascript/javascript_reference/template_strings", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nTemplate strings are string literals allowing embedded expressions. You can\nuse multi-line strings and string interpolation features with them.\n\n## Syntax\n\n    \n    \n    `string text`\n    \n    `string text line 1\n     string text line 2`\n    \n    `string text ${expression} string text`\n    \n    tag `string text ${expression} string text`\n    \n\n## Description\n\nTemplate strings are enclosed by the back-tick (` `) ([grave accent][1])\ncharacter instead of double or single quotes. Template strings can contain\nplace holders. These are indicated by the Dollar sign and curly braces\n(`${expression}`). The expressions in the place holders and the text between\nthem get passed to a function. The default function just concatenates the\nparts into a single string. If there is an expression preceding the template\nstring (`tag` here),\u00a0 the template string is called \"tagged template string\".\nIn that case, the tag expression (usually a function) gets called with the\nprocessed template string, which you can then manipulate before outputting.\n\n### Multi-line strings\n\nAny new line characters inserted in the source are part of the template\nstring. Using normal strings, you would have to use the following syntax in\norder to get multi-line strings:\n\n    \n    \n    console.log(\"string text line 1\\n\\\n    string text line 2\");\n    // \"string text line 1\"\n    // \"string text line 2\"\n\nTo get the same effect with multi-line strings, you can now write:\n\n    \n    \n    console.log(`string text line 1\n    string text line 2`);\n    // \"string text line 1\n    //  string text line 2\"\n\n### Expression interpolation\n\nIn order to embed expressions within strings, you had to use the following\nsyntax:\n\n    \n    \n    var a = 5;\n    var b = 10;\n    console.log(\"Fifteen is \" + (a + b) + \" and not \" + (2 * a + b) + \".\");\n    // \"Fifteen is 15 and not 20.\"\n\nNow, with template strings, you are able to make use of the syntactic sugar\nmaking substitutions like this more readable:\n\n    \n    \n    var a = 5;\n    var b = 10;\n    console.log(`Fifteen is ${a + b} and not ${2 * a + b}.`);\n    // \"Fifteen is 15 and not 20.\"\n\n### Tagged template strings\n\nA more advanced form of template strings are _tagged_ template strings. With\nthem you are able to modify the output of template strings using a function.\nThe first argument contains an array of string literals (\"Hello \" and \" world\"\nin this example). The second, and each argument after the first one, are the\nvalues of the processed (or sometimes called _cooked_) substitution\nexpressions (\"15\" and \"50\" here). In the end, your function returns your\nmanipulated string.\n\n    \n    \n    var a = 5;\n    var b = 10;\n    \n    function tag(strings, ...values) {\n      console.log(strings[0]); // \"Hello \"\n      console.log(strings[1]); // \" world\"\n      console.log(values[0]);  // 15\n      console.log(values[1]);  // 50\n    \n      return \"Bazinga!\";\n    }\n    \n    tag`Hello ${ a + b } world ${ a * b}`;\n    // \"Bazinga!\"\n    \n\n### Raw strings\n\nThe special `raw` property, available on the first function argument of tagged\ntemplate strings, allows you to access the raw strings as they were entered.\n\n    \n    \n    function tag(strings, ...values) {\n      return strings.raw[0];\n    }\n    \n    tag`string text line 1 \\n string text line 2`;\n    // \"string text line 1 \\\\n string text line 2\"\n    \n\nIn addition, the [`String.raw()`][2] method exists to create raw strings just\nlike the default template function and string concatenation would create.\n\n    \n    \n    String.raw`Hi\\n${2+3}!`; // \"Hi\\\\n5!\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Template Literals' in that specification.][3]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Tagged Templates' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][6] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String`][7]\n  * [`String.raw()`][2]\n  * [Lexical grammar][8]\n\n[1]: http://en.wikipedia.org/wiki/Grave_accent\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literals\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tagged-templates\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/34\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "Number.isSafeInteger()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.issafeinteger()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.isSafeInteger()`** method determines whether the provided value\nis a number that is a safe integer. A safe integer is an integer that\n\n  * can be exactly represented as an IEEE-754 double precision number, and\n  * whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.\n\nFor example, `253 \\- 1` is a safe integer: it can be exactly represented, and\nno other integer rounds to it under any IEEE-754 rounding mode. In contrast,\n`253` is _not_ a safe integer: it can be exactly represented in IEEE-754, but\nthe integer `253 \\+ 1` can't be directly represented in IEEE-754 but instead\nrounds to `253` under round-to-nearest and round-to-zero rounding.\n\nThe safe integers consist of all integers from `-(253 \\- 1)` inclusive to `253\n\\- 1` inclusive.\n\n## Syntax\n\n    \n    \n    Number.isSafeInteger(testValue)\n\n### Parameters\n\n`testValue`\n\n    The value to be tested for being a safe integer.\n\n## Examples\n\n    \n    \n    Number.isSafeInteger(3);                    // true\n    Number.isSafeInteger(Math.pow(2, 53));      // false\n    Number.isSafeInteger(Math.pow(2, 53) - 1);  // true\n    Number.isSafeInteger(NaN);                  // false\n    Number.isSafeInteger(Infinity);             // false\n    Number.isSafeInteger('3');                  // false\n    Number.isSafeInteger(3.1);                  // false\n    Number.isSafeInteger(3.0);                  // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.isSafeInteger' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[32][2] (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n32.0 (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][3] object it belongs to.\n  * [`Number.MIN_SAFE_INTEGER`][4]\n  * [`Number.MAX_SAFE_INTEGER`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.issafeinteger\n\n[2]: /en-US/Firefox/Releases/32\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "RegExp.prototype.exec()", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.exec()", "content": "## Summary\n\nThe `**exec()**` method executes a search for a match in a specified string.\nReturns a result array, or `null`.\n\nIf you are executing a match simply to find true or false, use the\n[`RegExp.test()`][1] method or the [`String.search()`][2] method.\n\n## Syntax\n\n    \n    \n    _regexObj_.exec(_str_)\n\n### Parameters\n\n`str`\n\n     The string against which to match the regular expression.\n\n### Return value\n\nIf the match succeeds, the `exec` method returns an array and updates\nproperties of the regular expression object. The returned array has the\nmatched text as the first item, and then one item for each capturing\nparenthesis that matched containing the text that was captured.\n\nIf the match fails, the `exec` method returns null.\n\n## Description\n\nConsider the following example:\n\n    \n    \n    // Match one d followed by one or more b's followed by one d\n    // Remember matched b's and the following d\n    // Ignore case\n    var re = /d(b+)(d)/ig;\n    var result = re.exec(\"cdbBdbsbz\");\n    \n\nThe following table shows the results for this script:  \n  \n<table>  \n<tr>  \n<td>\n\nObject\n\n</td>  \n<td>\n\nProperty/Index\n\n</td>  \n<td>\n\nDescription\n\n</td>  \n<td>\n\nExample\n\n</td> </tr>  \n<tr>  \n<td>\n\n`result`\n\n</td>  \n<td>\n\n[`0]`\n\n</td>  \n<td>\n\nThe last matched characters\n\n</td>  \n<td>\n\n`dbBd`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`1], ...[ _ n_ ]`\n\n</td>  \n<td>\n\nThe parenthesized substring matches, if any. The number of possible\nparenthesized substrings is unlimited.\n\n</td>  \n<td>\n\n[`1] = bB  \n[2] = d`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`index`\n\n</td>  \n<td>\n\nThe 0-based index of the match in the string.\n\n</td>  \n<td>\n\n`1`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`input`\n\n</td>  \n<td>\n\nThe original string.\n\n</td>  \n<td>\n\n`cdbBdbsbz`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`re`\n\n</td>  \n<td>\n\n`lastIndex`\n\n</td>  \n<td>\n\nThe index at which to start the next match.\n\n</td>  \n<td>\n\n`5`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`ignoreCase`\n\n</td>  \n<td>\n\nIndicates if the \"`i`\" flag was used to ignore case.\n\n</td>  \n<td>\n\n`true`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`global`\n\n</td>  \n<td>\n\nIndicates if the \"`g`\" flag was used for a global match.\n\n</td>  \n<td>\n\n`true`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`multiline`\n\n</td>  \n<td>\n\nIndicates if the \"`m`\" flag was used to search in strings across multiple\nline.\n\n</td>  \n<td>\n\n`false`\n\n</td> </tr>  \n<tr>  \n<td>\n\n`source`\n\n</td>  \n<td>\n\nThe text of the pattern.\n\n</td>  \n<td>\n\n`d(b+)(d)`\n\n</td> </tr> </table>\n\n## Examples\n\n### Example: Finding successive matches\n\nIf your regular expression uses the \"`g`\" flag, you can use the `exec` method\nmultiple times to find successive matches in the same string. When you do so,\nthe search starts at the substring of `str` specified by the regular\nexpression's `lastIndex` property ([`test()`][1] will also advance the\n`lastIndex` property). For example, assume you have this script:\n\n    \n    \n    var myRe = /ab*/g;\n    var str = \"abbcdefabh\";\n    var myArray;\n    while ((myArray = myRe.exec(str))\u00a0!== null)\n    {\n      var msg = \"Found \" + myArray[0] + \".  \";\n      msg += \"Next match starts at \" + myRe.lastIndex;\n      console.log(msg);\n    }\n    \n\nThis script displays the following text:\n\n    \n    \n    Found abb. Next match starts at 3\n    Found ab. Next match starts at 9\n    \n\nNote: Do not place the regular expression literal (or `RegExp` constructor)\nwithin the `while` condition or it will create an infinite loop if there is a\nmatch due to the `lastIndex` property being reset upon each iteration.\n\n### Example: Using exec() with RegExp literals\n\nYou can also use `exec()` without creating a RegExp object:\n\n    \n    \n    var matches = /(hello \\S+)/.exec('This is a hello world!');\n    alert(matches[1]);\n\nThis will display an alert containing 'hello world!';\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp.exec' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.exec' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Regular Expressions][6] chapter in the [JavaScript Guide][7]\n  * [`RegExp`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.6.21\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.exec\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n[7]: /en-US/docs/Web/JavaScript/Guide\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "method"},
{"name": "Number.isNaN()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.isnan()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.isNaN()`** method determines whether the passed value is\n[`NaN`][1]. More robust version of the original global [`isNaN()`][2].\n\n## Syntax\n\n    \n    \n    Number.isNaN(testValue)\n\n### Parameters\n\n`testValue`\n\n    The value to be tested for [`NaN`][1].\n\n## Description\n\nDue to both equality operators, [`==`][3] and [`===`][4], evaluating to\n`false` when checking if [`NaN`][1] _is_ [`NaN`][1], the function\n`Number.isNaN()` has become necessary. This situation is unlike all other\npossible value comparisons in JavaScript.\n\nIn comparison to the global [`isNaN()`][2] function, `Number.isNaN()` doesn't\nsuffer the problem of forcefully converting the parameter to a number. This\nmeans it is now safe to pass values that would normally convert to [`NaN`][1],\nbut aren't actually the same value as [`NaN`][1]. This also means that only\nvalues of the type number, that are also [`NaN`][1], return `true`.\n\n## Examples\n\n    \n    \n    Number.isNaN(NaN); // true\n    Number.isNaN(Number.NaN); // true\n    Number.isNaN(0 / 0) // true\n    \n    // everything else: false\n    Number.isNaN(undefined);\n    Number.isNaN({});\n    \n    Number.isNaN(true);\n    Number.isNaN(null);\n    Number.isNaN(37);\n    \n    Number.isNaN('37');\n    Number.isNaN('37.37');\n    Number.isNaN('');\n    Number.isNaN(' ');\n    Number.isNaN('NaN');\n    Number.isNaN('blabla'); // e.g. this would have been true with isNaN()\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.isnan' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n[15][6] (15)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][7] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isnan\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "RegExp.prototype.test()", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.test()", "content": "## Summary\n\nThe `**test()**` method executes a search for a match between a regular\nexpression and a specified string. Returns `true` or `false`.\n\n## Syntax\n\n    \n    \n    regexObj.test(str)\n\n### Parameters\n\n`str`\n\n     The string against which to match the regular expression.\n\n### Return value\n\nBoolean. `true` or `false`.\n\n## Description\n\nUse `test()` whenever you want to know whether a pattern is found in a string\n(similar to the [`String.search`][1] method); for more information (but slower\nexecution) use the [`exec`][2] method (similar to the [`String.match`][3]\nmethod). As with ``exec`` (or in combination with it), ``test`` called\nmultiple times on the same global regular expression instance will advance\npast the previous match.\n\n## Examples\n\n### Example: Using `test`\n\nThe following example prints a message which depends on the success of the\ntest:\n\n    \n    \n    function testinput(re, str){\n        var midstring;\n        if (re.test(str)) {\n            midstring = \" contains \";\n        } else {\n            midstring = \" does not contain \";\n        }\n        console.log(str + midstring + re.source);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp.test' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.test' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\nPrior to Gecko 8.0 (Firefox 8.0 / Thunderbird 8.0 / SeaMonkey 2.5), `test()`\nwas implemented incorrectly; when it was called with no parameters, it would\nmatch against the value of the previous input (RegExp.input property) instead\nof against the string \"undefined\". This is fixed; now `/undefined/.test()`\ncorrectly results in `true`, instead of an error.\n\n## See also\n\n  * [Regular Expressions][6] chapter in the [JavaScript Guide][7]\n  * [`RegExp`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.6.3\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.test\n\n[6]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n[7]: /en-US/docs/Web/JavaScript/Guide\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "method"},
{"name": "JSON.stringify()", "parent": "/javascript/javascript_reference/standard_built-in_objects/json", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/json/json.stringify()", "content": "## Summary\n\nThe `**JSON.stringify()**` method converts a value to JSON, optionally\nreplacing values if a replacer function is specified, or optionally including\nonly the specified properties if a replacer array is specified.\n\n## Syntax\n\n    \n    \n    JSON.stringify(_value_[, _replacer_ [, _space_]])\n\n### Parameters\n\n`value`\n\n     The value to convert to a JSON string.\n`replacer` Optional\n\n     If a function, transforms values and properties encountered while stringifying; if an array, specifies the set of properties included in objects in the final string.  \nA detailed description of the `replacer` function is provided in the\nJavaScript guide article [Using native JSON][1].\n\n`space` Optional\n\n     Causes the resulting string to be pretty-printed.\n\n## Description\n\n`JSON.stringify` converts a value to JSON notation representing it:\n\n  * Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.\n  * Boolean, Number, and String objects are converted to the corresponding primitive values during stringification, in accord with the traditional conversion semantics.\n  * If `undefined`, a function, or a symbol is encountered during conversion it is either omitted (when it is found in an object) or censored to null (when it is found in an array).\n  * All symbol-keyed properties will be completely ignored, even when using the `replacer` function.\n    \n    \n    JSON.stringify({});                        // '{}'\n    JSON.stringify(true);                      // 'true'\n    JSON.stringify(\"foo\");                     // '\"foo\"'\n    JSON.stringify([1, \"false\", false]);       // '[1,\"false\",false]'\n    JSON.stringify({ x: 5 });                  // '{\"x\":5}'\n    \n    Examples:\n    var JavascriptObject = {name: \"George\", lastname: \"Batalinski\"};\n    var ValidJSON = JSON.stringify({name: \"George\", lastname: \"Batalinski\"});\n    \n    JSON.stringify({x: 5, y: 6});              \n    // '{\"x\":5,\"y\":6}' or '{\"y\":6,\"x\":5}'\n    JSON.stringify([new Number(1), new String(\"false\"), new Boolean(false)]); \n    // '[1,\"false\",false]'\n    \n    // Symbols:\n    JSON.stringify({x: undefined, y: Object, z: Symbol(\"\")}); \n    // '{}'\n    JSON.stringify({[Symbol(\"foo\")]: \"foo\"});                 \n    // '{}'\n    JSON.stringify({[Symbol.for(\"foo\")]: \"foo\"}, [Symbol.for(\"foo\")]);\n    // '{}'\n    JSON.stringify({[Symbol.for(\"foo\")]: \"foo\"}, function (k, v) {\n      if (typeof k === \"symbol\"){\n        return \"a symbol\";\n      }\n    });\n    // '{}'\n    \n\n### `space` argument\n\nThe space argument may be used to control spacing in the final string. If it\nis a number, successive levels in the stringification will each be indented by\nthis many space characters (up to 10). If it is a string, successive levels\nwill indented by this string (or the first ten characters of it).\n\n    \n    \n    JSON.stringify({ a: 2 }, null, \" \");   // '{\\n \"a\": 2\\n}'\n\nUsing a tab character mimics standard pretty-print appearance:\n\n    \n    \n    JSON.stringify({ uno: 1, dos : 2 }, null, '\\t')\n    // returns the string:\n    // '{            \\\n    //\u00a0\u00a0\u00a0\u00a0\u00a0\"uno\": 1, \\\n    //\u00a0\u00a0\u00a0\u00a0\u00a0\"dos\": 2  \\\n    //\u00a0}' \n\n### toJSON behavior\n\nIf an object being stringified has a property named `toJSON` whose value is a\nfunction, then the `toJSON` method customizes JSON stringification behavior:\ninstead of the object being serialized, the value returned by the `toJSON`\nmethod when called will be serialized. For example:\n\n    \n    \n    var obj = {\n      foo: 'foo',\n      toJSON: function () {\n        return 'bar';\n      }\n    };\n    JSON.stringify(obj);      // '\"bar\"'\n    JSON.stringify({x: obj}); // '{\"x\":\"bar\"}'\n    \n\n### Example of using JSON.stringify with localStorage\n\nIn a case where you want to store an object created by your user and allowing\nit to be restored even after the browser has been closed, the following\nexample is a model for the applicability of `JSON.stringify`:\n\nFunctions are not a valid JSON data type so they will not work. Also some\nobjects like Date will be a string after JSON.parse()\n\n    \n    \n    // Creating an example of JSON\n    var session = {\n        'screens' : [],\n        'state' : true\n    };\n    session.screens.push({\"name\":\"screenA\", \"width\":450, \"height\":250});\n    session.screens.push({\"name\":\"screenB\", \"width\":650, \"height\":350});\n    session.screens.push({\"name\":\"screenC\", \"width\":750, \"height\":120});\n    session.screens.push({\"name\":\"screenD\", \"width\":250, \"height\":60});\n    session.screens.push({\"name\":\"screenE\", \"width\":390, \"height\":120});\n    session.screens.push({\"name\":\"screenF\", \"width\":1240, \"height\":650});\n    \n    // Converting the JSON string with JSON.stringify \n    // then saving with localStorage in the name of session\n    localStorage.setItem('session', JSON.stringify(session));\n    \n    // Example of how to transform the String generated through \n    // JSON.stringify and saved in localStorage in JSON object again\n    var restoredSession = JSON.parse(localStorage.getItem('session'));\n    \n    // Now restoredSession variable contains the object that was saved\n    // in localStorage\n    console.log(restoredSession);\n    \n\n### Example of using replacer parameter JSON.stringify(javascriptObject,\nmethod);\n\n    \n    \n    function replacer(key, value) {\n      if (typeof value === \"string\") {\n        return undefined;\n      }\n      return value;\n    }\n    \n    var foo = {foundation: \"Mozilla\", model: \"box\", week: 45, transport: \"car\", month: 7};\n    var jsonString = JSON.stringify(foo, replacer);\n    \n\n##\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'JSON.stringify' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.7.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'JSON.stringify' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][4] (1.9.1)\n\n</td>  \n<td>\n\n8.0\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][5].\n\n## See also\n\n  * [Using native JSON][6]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-json.stringify\n\n[4]: /en-US/Firefox/Releases/3.5\n\n[5]: http://kangax.github.com/es5-compat-table/\n\n[6]: /en-US/docs/Web/JavaScript/Guide/Using_native_JSON\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "JSON"], "type": "method"},
{"name": "Number.isInteger()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.isinteger()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.isInteger()`** method determines whether the passed value is an\ninteger.\n\nIf the target value is an integer, return `true`, otherwise return `false`. If\nthe value is [`NaN`][1] or infinite, return `false`.\n\n## Syntax\n\n    \n    \n    Number.isInteger(testValue)\n\n### Parameters\n\n`testValue`\n\n    The value to be tested for being an integer.\n\n## Examples\n\n    \n    \n    Number.isInteger(0.1);     // false\n    Number.isInteger(1);       // true\n    Number.isInteger(Math.PI); // false\n    \n\n## Polyfill\n\nThe following algorithm matches [the one specified in ECMA harmony][2]:\n\n    \n    \n    /*\\\n    |*|\n    |*|  :: Number.isInteger() polyfill ::\n    |*|\n    |*|  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n    |*|\n    \\*/\n    \n    if (!Number.isInteger) {\n      Number.isInteger = function isInteger(nVal) {\n        return typeof nVal === 'number'\n          && isFinite(nVal)\n          && nVal > -9007199254740992\n          && nVal < 9007199254740992\n          && Math.floor(nVal) === nVal;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.isInteger' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[16][4] (16)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n16.0 (16)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][5] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger\n\n[4]: /en-US/Firefox/Releases/16\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype", "content": "## Summary\n\nThe **`Number.prototype`** property represents the prototype for the\n[`Number`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`Number`][1] instances inherit from `Number.prototype`. The prototype\nobject of the [`Number`][1] constructor can be modified to affect all\n[`Number`][1] instances.\n\n## Properties\n\n`Number.prototype.constructor`\n\n     Returns the function that created this object's instance. By default this is the [`Number`][1] object.\n\nProperties inherited from [`Object`][2]:\n\n[`__parent__`][3], [`__proto__`][4]\n\n## Methods\n\n[`Number.prototype.toExponential()`][5]\n\n     Returns a string representing the number in exponential notation.\n[`Number.prototype.toFixed()`][6]\n\n     Returns a string representing the number in fixed-point notation.\n[`Number.prototype.toLocaleString()`][7]\n\n     Returns a string with a language sensitive representation of this number. Overrides the [`Object.prototype.toLocaleString()`][8] method.\n[`Number.prototype.toPrecision()`][9]\n\n     Returns a string representing the number to a specified precision in fixed-point or exponential notation.\n[`Number.prototype.toSource()`][10] _ _\n\n     Returns an object literal representing the specified [`Number`][1] object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][11] method.\n[`Number.prototype.toString()`][12]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][13] method.\n[`Number.prototype.valueOf()`][14]\n\n     Returns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf()`][15] method.\n\nMethods inherited from [`Object`][2]:\n\n[`__defineGetter__`][16], [`__defineSetter__`][17], [`hasOwnProperty`][18],\n[`isPrototypeOf`][19], [`__lookupGetter__`][20], [`__lookupSetter__`][21],\n[`__noSuchMethod__`][22], [`propertyIsEnumerable`][23], [`unwatch`][24],\n[`watch`][25]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number' in that specification.][26]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number' in that specification.][27]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[22]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[25]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[26]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4\n\n[27]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-number-prototype-object\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.isFinite()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.isfinite()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.isFinite()`** method determines whether the passed value is\nfinite.\n\nIn comparison to the global [`isFinite()`][1] function, this method doesn't\nforcibly convert the parameter to a number. This means only values of the type\nnumber, that are also finite, return `true`.\n\n## Syntax\n\n    \n    \n    Number.isFinite(testValue)\n\n### Parameters\n\n`testValue`\n\n    The value to be tested for finiteness.\n\n## Examples\n\n    \n    \n    Number.isFinite(Infinity);  // false\n    Number.isFinite(NaN);       // false\n    Number.isFinite(-Infinity); // false\n    \n    Number.isFinite(0);         // true\n    Number.isFinite(2e64);      // true\n    \n    Number.isFinite('0');       // false, would've been true with global isFinite('0')\n    \n\n## Polyfill\n\n    \n    \n    // Number.isFinite polyfill\n    // http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite\n    if (typeof Number.isFinite !== 'function') {\n      Number.isFinite = function isFinite(value) {\n        // 1. If Type(number) is not Number, return false.\n        if (typeof value !== 'number') {\n          return false;\n        }\n        // 2. If number is NaN, +\u221e, or \u2212\u221e, return false.\n        if (value !== value || value === Infinity || value === -Infinity) {\n          return false;\n        }\n        // 3. Otherwise, return true.\n        return true;\n      };\n    }\n    \n\n[Source gist on Github][2]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.isInteger' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n[16][4] (16)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n16.0 (16)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][5] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[2]: https://gist.github.com/marlun78/885eb0021e980c6ce0fb\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite\n\n[4]: /en-US/Firefox/Releases/16\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.POSITIVE_INFINITY", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.positive_infinity", "content": "## Summary\n\nThe **`Number.POSITIVE_INFINITY`** property represents the positive Infinity\nvalue.\n\nYou do not have to create a [`Number`][1] object to access this static\nproperty (use `Number.POSITIVE_INFINITY`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.POSITIVE_INFINITY`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `Number.POSITIVE_INFINITY` is the same as the value of the global\nobject's [`Infinity`][2] property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n  * Any positive value, including `POSITIVE_INFINITY`, multiplied by `POSITIVE_INFINITY` is `POSITIVE_INFINITY`.\n  * Any negative value, including [`NEGATIVE_INFINITY`][3], multiplied by `POSITIVE_INFINITY` is [`NEGATIVE_INFINITY`][3].\n  * Zero multiplied by `POSITIVE_INFINITY` is [`NaN`][4].\n  * [`NaN`][4] multiplied by `POSITIVE_INFINITY` is [`NaN`][4].\n  * `POSITIVE_INFINITY`, divided by any negative value except [`NEGATIVE_INFINITY`][3], is [`NEGATIVE_INFINITY`][3].\n  * `POSITIVE_INFINITY`, divided by any positive value except `POSITIVE_INFINITY`, is `POSITIVE_INFINITY`.\n  * `POSITIVE_INFINITY`, divided by either [`NEGATIVE_INFINITY`][3] or `POSITIVE_INFINITY`, is [`NaN`][4].\n  * Any number divided by `POSITIVE_INFINITY` is Zero.\n\nYou might use the `Number.POSITIVE_INFINITY` property to indicate an error\ncondition that returns a finite number in case of success. Note, however, that\n[`isFinite`][5] would be more appropriate in such a case.\n\n## Examples\n\n### Example: Using `POSITIVE_INFINITY`\n\nIn the following example, the variable `bigNumber` is assigned a value that is\nlarger than the maximum value. When the [`if`][6] statement executes,\n`bigNumber` has the value `Infinity`, so `bigNumber` is set to a more\nmanageable value before continuing.\n\n    \n    \n    var bigNumber = Number.MAX_VALUE * 2;\n    \n    if (bigNumber == Number.POSITIVE_INFINITY) {\n      bigNumber = returnFinite();\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.POSITIVE_INFINITY' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.POSITIVE_INFINITY' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.NEGATIVE_INFINITY`][3]\n  * [`Number.isFinite()`][9]\n  * [`Infinity`][2]\n  * [`isFinite()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.6\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.positive_infinity\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.NEGATIVE_INFINITY", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.negative_infinity", "content": "## Summary\n\nThe **`Number.NEGATIVE_INFINITY`** property represents the negative Infinity\nvalue.\n\nYou do not have to create a [`Number`][1] object to access this static\nproperty (use `Number.NEGATIVE_INFINITY`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.NEGATIVE_INFINITY`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `Number.NEGATIVE_INFINITY` is the same as the negative value of\nthe global object's [`Infinity`][2] property.\n\nThis value behaves slightly differently than mathematical infinity:\n\n  * Any positive value, including [`POSITIVE_INFINITY`][3], multiplied by `NEGATIVE_INFINITY` is `NEGATIVE_INFINITY`.\n  * Any negative value, including `NEGATIVE_INFINITY`, multiplied by `NEGATIVE_INFINITY` is [`POSITIVE_INFINITY`][3].\n  * Zero multiplied by `NEGATIVE_INFINITY` is [`NaN`][4].\n  * [`NaN`][4] multiplied by `NEGATIVE_INFINITY` is [`NaN`][4].\n  * `NEGATIVE_INFINITY`, divided by any negative value except `NEGATIVE_INFINITY`, is [`POSITIVE_INFINITY`][3].\n  * `NEGATIVE_INFINITY`, divided by any positive value except [`POSITIVE_INFINITY`][3], is `NEGATIVE_INFINITY`.\n  * `NEGATIVE_INFINITY`, divided by either `NEGATIVE_INFINITY` or [`POSITIVE_INFINITY`][3], is [`NaN`][4].\n  * Any number divided by `NEGATIVE_INFINITY` is zero.\n\nYou might use the `Number.NEGATIVE_INFINITY` property to indicate an error\ncondition that returns a finite number in case of success. Note, however, that\n[`isFinite`][5] would be more appropriate in such a case.\n\n## Examples\n\n### Example: Using `NEGATIVE_INFINITY`\n\nIn the following example, the variable `smallNumber` is assigned a value that\nis smaller than the minimum value. When the [`if`][6] statement executes,\n`smallNumber` has the value `-Infinity`, so `smallNumber` is set to a more\nmanageable value before continuing.\n\n    \n    \n    var smallNumber = (-Number.MAX_VALUE) * 2;\n    \n    if (smallNumber == Number.NEGATIVE_INFINITY) {\n      smallNumber = returnFinite();\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.NEGATIVE_INFINITY' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.NEGATIVE_INFINITY' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.POSITIVE_INFINITY`][3]\n  * [`Number.isFinite()`][9]\n  * [`Infinity`][2]\n  * [`isFinite()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.5\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.negative_infinity\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Intl.Collator.prototype.compare", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.collator", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.collator/intl.collator.prototype.compare", "content": "## Summary\n\nThe **`Intl.Collator.prototype.compare`** property returns a getter function\nthat compares two strings according to the sort order of this [`Collator`][1]\nobject.\n\n## Syntax\n\n    \n    \n    collator.compare(string1, string2)\n\n### Parameters\n\n`string1`\n\n`string2`\n\n     The strings to compare against each other.\n\n## Description\n\nThe function returned by the `compare` getter returns a number indicating how\n`string1` and `string2` compare to each other according to the sort order of\nthis [`Collator`][1] object: a negative value if `string1` comes before\n`string2`; a positive value if `string1` comes after `string2`; 0 if they are\nconsidered equal.\n\n## Examples\n\n### Example: Using `compare` for sort array\n\nUse the function returned by the `compare` getter for sorting arrays. Note\nthat the function is bound to the collator from which it was obtained, so it\ncan be passed directly to [`Array.prototype.sort()`][2].\n\n    \n    \n    var a = ['Offenbach', '\u00d6sterreich', 'Odenwald'];\n    var collator = new Intl.Collator('de-u-co-phonebk');\n    a.sort(collator.compare);\n    console.log(a.join(', '));\n    // \u2192 \"Odenwald, \u00d6sterreich, Offenbach\"\n    \n\n### Example: Using `compare` for search in array\n\nUse the function returned by the `compare` getter for finding matching strings\nin arrays:\n\n    \n    \n    var a = ['Congr\u00e8s', 'congres', 'Assembl\u00e9e', 'poisson'];\n    var collator = new Intl.Collator('fr', { usage: 'search', sensitivity: 'base' });\n    var s = 'congres';\n    var matches = a.filter(function(v) {\n      return collator.compare(v, s) === 0;\n    });\n    console.log(matches.join(', '));\n    // \u2192 \"Congr\u00e8s, congres\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.Collator.prototype.compare' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.Collator`][1]\n  * [`String.prototype.localeCompare()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-10.3.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.Collator"], "type": "property"},
{"name": "Number.MIN_VALUE", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.min_value", "content": "## Summary\n\nThe **`Number.MIN_VALUE`** property represents the smallest positive numeric\nvalue representable in JavaScript.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.MIN_VALUE`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe `MIN_VALUE` property is the number closest to 0, not the most negative\nnumber, that JavaScript can represent.\n\n`MIN_VALUE` has a value of approximately `5e-324`. Values smaller than\n`MIN_VALUE` (\"underflow values\") are converted to 0.\n\nBecause `MIN_VALUE` is a static property of [`Number`][1], you always use it\nas `Number.MIN_VALUE`, rather than as a property of a [`Number`][1] object you\ncreated.\n\n## Examples\n\n### Example: Using `MIN_VALUE`\n\nThe following code divides two numeric values. If the result is greater than\nor equal to `MIN_VALUE`, the `func1` function is called; otherwise, the\n`func2` function is called.\n\n    \n    \n    if (num1 / num2 >= Number.MIN_VALUE) {\n      func1();\n    } else {\n      func2();\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.MIN_VALUE' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.MIN_VALUE' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.MAX_VALUE`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.3\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.min_value\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.MIN_SAFE_INTEGER", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.min_safe_integer", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.MIN_SAFE_INTEGER`** constant represents the minimum safe integer\nin JavaScript (`-(253 \\- 1)`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.MIN_SAFE_INTEGER`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe `MIN_SAFE_INTEGER` constant has a value of `-9007199254740991`. The\nreasoning behind that number is that JavaScript uses [double-precision\nfloating-point format numbers][1] as specified in [IEEE 754][2] and can only\nsafely represent numbers between `-(253 \\- 1)` and `253 \\- 1`.\n\nBecause `MIN_SAFE_INTEGER` is a static property of [`Number`][3], you always\nuse it as `Number.MIN_SAFE_INTEGER`, rather than as a property of a\n[`Number`][3] object you created.\n\n## Examples\n\n    \n    \n    Number.MIN_SAFE_INTEGER // -9007199254740991\n    -(Math.pow(2, 53) - 1)  // -9007199254740991\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.MIN_SAFE_INTEGER' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n34\n\n</td>  \n<td>\n\n[31][5] (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n32.0 (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.MAX_SAFE_INTEGER`][6]\n  * [`Number.isSafeInteger()`][7]\n\n[1]: http://en.wikipedia.org/wiki/Double_precision_floating-point_format\n\n[2]: http://en.wikipedia.org/wiki/IEEE_floating_point\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.min_safe_integer\n\n[5]: /en-US/Firefox/Releases/31\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.MAX_VALUE", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.max_value", "content": "## Summary\n\nThe **`Number.MAX_VALUE`** property represents the maximum numeric value\nrepresentable in JavaScript.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.MAX_VALUE`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe `MAX_VALUE` property has a value of approximately `1.79E+308`. Values\nlarger than `MAX_VALUE` are represented as \"`Infinity`\".\n\nBecause `MAX_VALUE` is a static property of [`Number`][1], you always use it\nas `Number.MAX_VALUE`, rather than as a property of a [`Number`][1] object you\ncreated.\n\n## Examples\n\n### Example: Using `MAX_VALUE`\n\nThe following code multiplies two numeric values. If the result is less than\nor equal to `MAX_VALUE`, the `func1` function is called; otherwise, the\n`func2` function is called.\n\n    \n    \n    if (num1 * num2 <= Number.MAX_VALUE) {\n      func1();\n    } else {\n      func2();\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.MAX_VALUE' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.MAX_VALUE' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.MIN_VALUE`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.3.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_value\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.MAX_SAFE_INTEGER", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.max_safe_integer", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.MAX_SAFE_INTEGER`** constant represents the maximum safe integer\nin JavaScript (`253 \\- 1`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.MAX_SAFE_INTEGER`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe `MAX_SAFE_INTEGER` constant has a value of `9007199254740991`. The\nreasoning behind that number is that JavaScript uses [double-precision\nfloating-point format numbers][1] as specified in [IEEE 754][2] and can only\nsafely represent numbers between `-(253 \\- 1)` and `253 \\- 1`.\n\nBecause `MAX_SAFE_INTEGER` is a static property of [`Number`][3], you always\nuse it as `Number.MAX_SAFE_INTEGER`, rather than as a property of a\n[`Number`][3] object you created.\n\n## Examples\n\n    \n    \n    Number.MAX_SAFE_INTEGER // 9007199254740991\n    Math.pow(2, 53) - 1     // 9007199254740991\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.MAX_SAFE_INTEGER' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n34\n\n</td>  \n<td>\n\n[31][5] (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n32.0 (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.MIN_SAFE_INTEGER`][6]\n  * [`Number.isSafeInteger()`][7]\n\n[1]: http://en.wikipedia.org/wiki/Double_precision_floating-point_format\n\n[2]: http://en.wikipedia.org/wiki/IEEE_floating_point\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer\n\n[5]: /en-US/Firefox/Releases/31\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Number.prototype.toPrecision()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.toprecision()", "content": "## Summary\n\nThe **`toPrecision()`** method returns a string representing the [`Number`][1]\nobject to the specified precision.\n\n## Syntax\n\n    \n    \n    numObj.toPrecision([precision])\n\n### Parameters\n\n`precision`\n\n     Optional. An integer specifying the number of significant digits.\n\n### Returns\n\nA string representing a [`Number`][1] object in fixed-point or exponential\nnotation rounded to `precision` significant digits. See the discussion of\nrounding in the description of the [`Number.prototype.toFixed()`][2] method,\nwhich also applies to `toPrecision()`.\n\nIf the `precision` argument is omitted, behaves as\n[`Number.prototype.toString()`][3]. If it is a non-integer value, it is\nrounded to the nearest integer.\n\n### Throws\n\n[`RangeError`][4]\n\n     If `precison` is not between 1 and 100 (inclusive), a [`RangeError`][4] is thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits.\n\n## Examples\n\n### Example: Using `toPrecision`\n\n    \n    \n    var numObj = 5.123456;\n    \n    console.log(numObj.toPrecision());    // logs 5.123456\n    console.log(numObj.toPrecision(5));   // logs 5.1235\n    console.log(numObj.toPrecision(2));   // logs 5.1\n    console.log(numObj.toPrecision(1));   // logs 5\n    \n    // note that exponential notation might be returned in some circumstances\n    console.log((1234.5).toPrecision(2)); // logs 1.2e+3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.toPrecision' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.toPrecision' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toFixed()`][2]\n  * [`Number.prototype.toExponential()`][7]\n  * [`Number.prototype.toString()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.7\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.toprecision\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.prototype.toExponential()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.toexponential()", "content": "## Summary\n\nThe **`toExponential()`** method returns a string representing the Number\nobject in exponential notation\n\n## Syntax\n\n    \n    \n    numObj.toExponential([fractionDigits])\n\n### Parameters\n\n`fractionDigits`\n\n    Optional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.\n\n### Returns\n\nA string representing a [`Number`][1] object in exponential notation with one\ndigit before the decimal point, rounded to `fractionDigits` digits after the\ndecimal point. If the `fractionDigits` argument is omitted, the number of\ndigits after the decimal point defaults to the number of digits necessary to\nrepresent the value uniquely.\n\nIf you use the `toExponential()` method for a numeric literal and the numeric\nliteral has no exponent and no decimal point, leave a space before the dot\nthat precedes the method call to prevent the dot from being interpreted as a\ndecimal point.\n\nIf a number has more digits than requested by the `fractionDigits` parameter,\nthe number is rounded to the nearest number represented by `fractionDigits`\ndigits. See the discussion of rounding in the description of the\n[`toFixed()`][2] method, which also applies to `toExponential()`.\n\n### Throws\n\n[`RangeError`][3]\n\n    If `fractionDigits` is too small or too large. Values between 0 and 20, inclusive, will not cause a [`RangeError`][3]. Implementations are allowed to support larger and smaller values as well.\n[`TypeError`][4]\n\n    If this method is invoked on an object that is not a [`Number`][1].\n\n## Examples\n\n### Example: Using `toExponential`\n\n    \n    \n    var numObj = 77.1234;\n    \n    console.log(numObj.toExponential());  // logs 7.71234e+1\n    console.log(numObj.toExponential(4)); // logs 7.7123e+1\n    console.log(numObj.toExponential(2)); // logs 7.71e+1\n    console.log(77.1234.toExponential()); // logs 7.71234e+1\n    console.log(77 .toExponential());     // logs 7.7e+1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.toExponential' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.toExponential' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toFixed()`][2]\n  * [`Number.prototype.toPrecision()`][7]\n  * [`Number.prototype.toString()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.6\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.toexponential\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "Number.prototype.toFixed()", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.prototype.tofixed()", "content": "## Summary\n\nThe **`toFixed()`** method formats a number using fixed-point notation.\n\n## Syntax\n\n    \n    \n    numObj.toFixed([digits])\n\n### Parameters\n\n`digits`\n\n    Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.\n\n### Returns\n\nA string representation of `numObj` that does not use exponential notation and\nhas exactly `digits` digits after the decimal place. The number is rounded if\nnecessary, and the fractional part is padded with zeros if necessary so that\nit has the specified length. If `numObj` is greater than `1e+21`, this method\nsimply calls [`Number.prototype.toString()`][1] and returns a string in\nexponential notation.\n\n### Throws\n\n[`RangeError`][2]\n\n    If `digits` is too small or too large. Values between 0 and 20, inclusive, will not cause a [`RangeError`][2]. Implementations are allowed to support larger and smaller values as well.\n[`TypeError`][3]\n\n    If this method is invoked on an object that is not a [`Number`][4].\n\n## Examples\n\n### Example: Using `toFixed`\n\n    \n    \n    var numObj = 12345.6789;\n    \n    numObj.toFixed();       // Returns '12346': note rounding, no fractional part\n    numObj.toFixed(1);      // Returns '12345.7': note rounding\n    numObj.toFixed(6);      // Returns '12345.678900': note added zeros\n    (1.23e+20).toFixed(2);  // Returns '123000000000000000000.00'\n    (1.23e-10).toFixed(2);  // Returns '0.00'\n    2.34.toFixed(1);        // Returns '2.3'\n    -2.34.toFixed(1);       // Returns -2.3 (due to operator precedence, negative number literals don't return a string...)\n    (-2.34).toFixed(1);     // Returns '-2.3' (...unless you use parentheses)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number.prototype.toFixed' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.prototype.toFixed' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.prototype.toExponential()`][7]\n  * [`Number.prototype.toPrecision()`][8]\n  * [`Number.prototype.toString()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.5\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.prototype.tofixed\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "method"},
{"name": "String.prototype.fixed()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.fixed()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**fixed()**` method creates a `<[tt>`][1] HTML element that causes a\nstring to be displayed in fixed-pitch font.\n\n## Syntax\n\n    \n    \n    _str_.fixed() \n\n## Description\n\nThe `fixed` method embeds a string in a `<tt>` tag:  \n`\"<tt>str</tt>`\"\n\n## Examples\n\n### Example: Using `fixed`\n\nThe following example uses the `fixed` method to change the formatting of a\nstring:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.fixed() );\n\nThis example produces the same output as the following HTML:\n\n    \n    \n    <tt>Hello, world</tt>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.fixed' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.bold()`][3]\n  * [`String.prototype.italics()`][4]\n  * [`String.prototype.strike()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/tt\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.fixed\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Number.EPSILON", "parent": "/javascript/javascript_reference/standard_built-in_objects/number", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number/number.epsilon", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Number.EPSILON`** property represents the difference between one and\nthe smallest value greater than one that can be represented as a\n[`Number`][1].\n\nYou do not have to create a [`Number`][1] object to access this static\nproperty (use `Number.EPSILON`).  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Number.EPSILON`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe `EPSILON` property has a value of approximately\n`2.2204460492503130808472633361816E-16`.\n\n## Examples\n\n### Example: Testing equality\n\n    \n    \n    x = 0.2;\n    y = 0.3;\n    equal = (Math.abs(x - y) < Number.EPSILON);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number.EPSILON' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[25.0][3] (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][1] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.7.3.7\n\n[3]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Number"], "type": "property"},
{"name": "Intl.NumberFormat.prototype.format", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat/intl.numberformat.prototype.format", "content": "## Summary\n\nThe **`Intl.NumberFormat.prototype.format`** property returns a getter\nfunction that formats a number according to the locale and formatting options\nof this [`NumberFormat`][1] object.\n\n## Syntax\n\n    \n    \n    numberFormat.format(number)\n\n### Parameters\n\n`number`\n\n    The number to format.\n\n## Description\n\nThe function returned by the `format` getter formats a number into a string\naccording to the locale and formatting options of this [`NumberFormat`][1]\nobject.\n\n## Examples\n\n### Example: Using `format`\n\nUse the function returned by the `format` getter for formatting a single\ncurrency value, here for Russia:\n\n    \n    \n    var options = { style: 'currency', currency: 'RUB' };\n    var numberFormat = new Intl.NumberFormat('ru-RU', options);\n    console.log(numberFormat.format(654321.987));\n    // \u2192 \"654\u00a0321,99\u00a0\u0440\u0443\u0431.\"\n    \n\n### Example: Using `format` with `map`\n\nUse the function returned by the `format` getter for formatting all numbers in\nan array. Note that the function is bound to the [`NumberFormat`][1] from\nwhich it was obtained, so it can be passed directly to\n[`Array.prototype.map`][2].\n\n    \n    \n    var a = [123456.789, 987654.321, 456789.123];\n    var numberFormat = new Intl.NumberFormat('es-ES');\n    var formatted = a.map(numberFormat.format);\n    console.log(formatted.join('; '));\n    // \u2192 \"123.456,789; 987.654,321; 456.789,123\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.NumberFormat.prototype.format' in that\nspecification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.NumberFormat`][1]\n  * [`Number.prototype.toLocaleString()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-11.3.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.NumberFormat"], "type": "property"},
{"name": "String.prototype.endsWith()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.endswith()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**endsWith()**` method determines whether a string ends with the\ncharacters of another string, returning `true` or `false` as appropriate.\n\n## Syntax\n\n    \n    \n    _str_.endsWith(_searchString_ [, _position_]);\n\n### Parameters\n\n`searchString`\n\n     The characters to be searched for at the end of this string.\n`position`\n\n     Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.\n\n## Description\n\nThis method lets you determine whether or not a string ends with another\nstring.\n\n## Examples\n\n    \n    \n    var str = \"To be, or not to be, that is the question.\";\n    \n    alert( str.endsWith(\"question.\") );  // true\n    alert( str.endsWith(\"to be\") );      // false\n    alert( str.endsWith(\"to be\", 19) );  // true\n    \n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can polyfill\n`String.prototype.endsWith` with the following snippet:\n\n    \n    \n    if (!String.prototype.endsWith) {\n    \u00a0 Object.defineProperty(String.prototype, 'endsWith', {\n    \u00a0\u00a0\u00a0 value: function (searchString, position) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 var subjectString = this.toString();\n    \u00a0\u00a0\u00a0\u00a0\u00a0 if (position === undefined || position > subjectString.length) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0   position = subjectString.length;\n          }\n          position -= searchString.length;\n          var lastIndex = subjectString.indexOf(searchString, position);\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return lastIndex !== -1 && lastIndex === position;\n    \u00a0\u00a0\u00a0 }\n    \u00a0 });\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.endsWith' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[17][2] (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n17.0 (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.startsWith()`][3] _ _\n  * [`String.prototype.contains()`][4] _ _\n  * [`String.prototype.indexOf()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.endswith\n\n[2]: /en-US/Firefox/Releases/17\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.concat()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.concat()", "content": "## Summary\n\nThe `**concat()**` method combines the text of two or more strings and returns\na new string.\n\n## Syntax\n\n    \n    \n    _str_.concat(_string2_, _string3_[, ..., _stringN_])\n\n### Parameters\n\n`string2...string_N_`\n\n     Strings to concatenate to this string.\n\n## Description\n\nThe `concat` function combines the text from one or more strings and returns a\nnew string. Changes to the text in one string do not affect the other string.\n\n## Examples\n\n### Example: Using `concat`\n\nThe following example combines strings into a new string.\n\n    \n    \n    var hello = \"Hello, \";\n    console.log(hello.concat(\"Kevin\", \" have a nice day.\")); \n    \n    /* Hello, Kevin have a nice day. */\n    \n\n## Performance\n\nIt is strongly recommended that [assignment operators][1] (+, +=) are used\ninstead of the `concat` method. See this [perfomance test][2].\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.concat()`][5]\n  * [`Assignment operators`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n[2]: http://jsperf.com/concat-vs-plus-vs-join\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.6\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.concat\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "RegExp.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the regular\nexpression.\n\n## Syntax\n\n    \n    \n    regexObj.toString()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe [`RegExp`][1] object overrides the `toString` method of the [`Object`][2]\nobject; it does not inherit [`Object.prototype.toString()`][3]. For `RegExp`\nobjects, the `toString` method returns a string representation of the regular\nexpression.\n\n## Examples\n\n### Example: Using `toString`\n\nThe following example displays the string value of a `RegExp` object:\n\n    \n    \n    var myExp = new RegExp(\"a+b+c\");\n    console.log(myExp.toString());    // logs \"/a+b+c/\"\n    \n    var foo = new RegExp(\"bar\", \"g\");\n    console.log(foo.toString());      // logs \"/bar/g\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype.tostring\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "method"},
{"name": "RegExp.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    _regexObj_.toSource()\n    RegExp.toSource()\n    \n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `RegExp` object, `toSource` returns the following string indicating that the source code is not available:\n    \n    \n    function RegExp() { [native code] }\n\n  * For instances of `RegExp`, `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "method"},
{"name": "JSON.parse()", "parent": "/javascript/javascript_reference/standard_built-in_objects/json", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/json/json.parse()", "content": "## Summary\n\nThe `**JSON.parse()**` method parses a string as JSON, optionally transforming\nthe value produced by parsing.\n\n## Syntax\n\n    \n    \n    JSON.parse(_text_[, _reviver_])\n\n### Parameters\n\n`text`\n\n     The string to parse as JSON. See the [`JSON`][1] object for a description of JSON syntax.\n`reviver` Optional\n\n     If a function, prescribes how the value originally produced by parsing is transformed, before being returned.\n\n### Returns\n\nReturns the Object corresponding to the given JSON `text`.\n\n### Exceptions\n\nThrows a [`SyntaxError`][2] exception if the string to parse is not valid\nJSON.\n\n## Examples\n\n### Example: Using `JSON.parse()`\n\n    \n    \n    JSON.parse('{}');              // {}\n    JSON.parse('true');            // true\n    JSON.parse('\"foo\"');           // \"foo\"\n    JSON.parse('[1, 5, \"false\"]'); // [1, 5, \"false\"]\n    JSON.parse('null');            // null\n    JSON.parse('{\"1\": 1, \"2\": 2}') //Object {1: 1, 2: 2}\n    \n\n### Example: Using the `reviver` parameter\n\nIf a `reviver` is specified, the value computed by parsing is _transformed_\nbefore being returned. Specifically, the computed value, and all its\nproperties (beginning with the most nested properties and proceeding to the\noriginal value itself), are individually run through the `reviver`, which is\ncalled with the object containing the property being processed as `this` and\nwith the property name as a string and the property value as arguments. If the\n`reviver` function returns `undefined` (or returns no value, e.g. if execution\nfalls off the end of the function), the property is deleted from the object.\nOtherwise the property is redefined to be the return value.\n\nThe `reviver` is ultimately called with the empty string and the topmost value\nto permit transformation of the topmost value. Be certain to handle this case\nproperly, usually by returning the provided value, or `JSON.parse` will return\n`undefined`.\n\n    \n    \n    JSON.parse('{\"p\": 5}', function (k, v) {\n        if(k === \"\") return v;     // if topmost value, return it,\n        return v * 2;              // else return v * 2.\n    });                            // { p: 10 }\n    \n    JSON.parse('{\"1\": 1, \"2\": 2,\"3\": {\"4\": 4, \"5\": {\"6\": 6}}}', function (k, v) {\n        console.log(k);            // log the current property name, the last is \"\".\n        return v;                  // return the unchanged property value.\n    });\n    \n    // 1\n    // 2\n    // 4\n    // 6\n    // 5\n    // 3 \n    // \"\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'JSON.parse' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.7.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'JSON.parse' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][5] (1.9.1)\n\n</td>  \n<td>\n\n8.0\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][6].\n\n### Gecko-specifc notes\n\nStarting Gecko 29 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26), a malformed\nJSON string yields a more detailed error message containing the line and\ncolumn number that caused the parsing error. This is useful when debugging\nlarge JSON data.\n\n    \n    \n    JSON.parse('[1, 2, 3,]')\n    // SyntaxError: JSON.parse: unexpected character at \n    // line 1 column 10 of the JSON data\n    \n\n## See also\n\n  * [Using native JSON][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.2\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-json.parse\n\n[5]: /en-US/Firefox/Releases/3.5\n\n[6]: http://kangax.github.com/es5-compat-table/\n\n[7]: /en-US/docs/Web/JavaScript/Guide/Using_native_JSON\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "JSON"], "type": "method"},
{"name": "RegExp.prototype.multiline", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.multiline", "content": "## Summary\n\nThe `**multiline**` property indicates whether or not the \"`m`\" flag is used\nwith the regular expression. `multiline` is a read-only property of an\nindividual regular expression instance.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype.multiline`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `multiline` is a Boolean and is true if the \"`m`\" flag was used;\notherwise, false. The \"`m`\" flag indicates that a multiline input string\nshould be treated as multiple lines. For example, if \"`m`\" is used, \"`^`\" and\n\"`$`\" change from matching at only the start or end of the entire string to\nthe start or end of any line within the string.\n\nYou cannot change this property directly.\n\n## Examples\n\n### Example: Using `multiline`\n\n    \n    \n    var regex = new RegExp(\"foo\", \"m\")\n    \n    console.log(regex.multiline) // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nJavaScript 1.5: `multiline` is a property of a `RegExp` instance, not the\n`RegExp` object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp.prototype.multiline' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.prototype.multiline' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n`multiline` is now a prototype accessor property rather than an instance's own\ndata property.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.global`][3]\n  * [`RegExp.prototype.lastIndex`][4]\n  * [`RegExp.prototype.ignoreCase`][5]\n  * [`RegExp.prototype.source`][6]\n  * [`RegExp.prototype.sticky`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.7.4\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.multiline\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "RegExp.prototype.source", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.source", "content": "## Summary\n\nThe `**source**` property returns a String containing the text of the pattern,\nexcluding the forward slashes. It is a read-only property of an individual\nregular expression instance. `source` does not contain any flags (like \"g\",\n\"i\" or \"m\") of the regular expression.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype.source`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Examples\n\n### Example: Using `source`\n\n    \n    \n    var regex = new RegExp(\"fooBar\", \"g\")\n    \n    console.log(regex.source) // \"fooBar\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nJavaScript 1.5: `source` is a property of a `RegExp` instance, not the\n`RegExp` object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n`source` is now a prototype accessor property rather than an instance's own\ndata property.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.global`][3]\n  * [`RegExp.prototype.lastIndex`][4]\n  * [`RegExp.prototype.ignoreCase`][5]\n  * [`RegExp.prototype.multiline`][6]\n  * [`RegExp.prototype.sticky`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.7.1\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.source\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "RegExp.prototype.sticky", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.sticky", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**sticky**` property reflects whether or not the search is sticky\n(searches in strings only from the index indicated by the `lastIndex` property\nof this regular expression). `sticky` is a read-only property of an individual\nregular expression object.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype.sticky`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `sticky` is a Boolean and true if the \"`y`\" flag was used;\notherwise, false. The \"`y`\" flag indicates that it matches only from the index\nindicated by the `lastIndex` property of this regular expression in the target\nstring (and does not attempt to match from any later indexes). This allows the\nmatch-only-at-start capabilities of the character \"`^`\" to effectively be used\nat any location in a string by changing the value of the `lastIndex` property.\n\nYou cannot change this property directly.\n\n## Examples\n\n### Example: Using a regular expression with the \"sticky\" flag\n\nThis example demonstrates how one could use the sticky flag on regular\nexpressions to match individual lines of multiline input.\n\n    \n    \n    var text = \"First line\\nsecond line\";\n    var regex = /(\\S+) line\\n?/y;\n    \n    var match = regex.exec(text);\n    print(match[1]);  // prints \"First\"\n    print(regex.lastIndex); // prints 11\n    \n    var match2 = regex.exec(text);\n    print(match2[1]); // prints \"Second\"\n    print(regex.lastIndex); // prints \"22\"\n    \n    var match3 = regex.exec(text);\n    print(match3 === null); // prints \"true\"\n    \n\n## Compatibility test\n\nOne can test at runtime whether the sticky flag is supported, using `try\u00a0{\u00a0\u2026\u00a0}\ncatch\u00a0{\u00a0\u2026\u00a0}`. For this, either an `eval(\u2026)` expression or the `RegExp(regex-\nstring,\u00a0flags-string)` syntax must be used (since the `/regex/flags` notation\nis processed at compile-time, so it throws an exception before the `catch`\nblock is encountered). For example:\n\n    \n    \n    var supports_sticky;\n    try { RegExp('','y'); supports_sticky = true; }\n    catch(e) { supports_sticky = false; }\n    alert(supports_sticky); // alerts \"false\" in Firefox 2, \"true\" in Firefox 3+\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.prototype.sticky' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[3.0][2] (1.9)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.9)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.global`][3]\n  * [`RegExp.prototype.ignoreCase`][4]\n  * [`RegExp.prototype.lastIndex`][5]\n  * [`RegExp.prototype.multiline`][6]\n  * [`RegExp.prototype.source`][7]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.sticky\n\n[2]: /en-US/Firefox/Releases/3\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "RegExp.prototype.ignoreCase", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.ignorecase", "content": "## Summary\n\nThe `**ignoreCase**` property indicates whether or not the \"`i`\" flag is used\nwith the regular expression. `ignoreCase` is a read-only property of an\nindividual regular expression instance.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype.ignoreCase`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `ignoreCase` is a Boolean and `true` if the \"`i`\" flag was used;\notherwise, `false`. The \"`i`\" flag indicates that case should be ignored while\nattempting a match in a string.\n\nYou cannot change this property directly.\n\n## Examples\n\n### Example: Using `ignoreCase`\n\n    \n    \n    var regex = new RegExp(\"foo\", \"i\")\n    \n    console.log(regex.ignoreCase) // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nJavaScript 1.5: `ignoreCase` is a property of a `RegExp` instance, not the\n`RegExp` object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n`ignoreCase` is now a prototype accessor property rather than an instance's\nown data property.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.global`][3]\n  * [`RegExp.prototype.lastIndex`][4]\n  * [`RegExp.prototype.multiline`][5]\n  * [`RegExp.prototype.source`][6]\n  * [`RegExp.prototype.sticky`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.7.3\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.ignorecase\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "Intl.Collator.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.collator", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.collator/intl.collator.prototype", "content": "## Summary\n\nThe **`Intl.Collator.prototype`** property represents the prototype object for\nthe [`Intl.Collator`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Intl.Collator.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nSee [`Collator`][1] for a description of `Intl.Collator` instances.\n\n[`Intl.Collator`][1] instances inherit from `Intl.Collator.prototype`.\nModifications to the prototype object are inherited by all\n[`Intl.Collator`][1] instances.\n\n## Properties\n\n[`Intl.Collator.prototype.compare`][2]\n\n    Getter; returns a function that compares two strings according to the sort order of this [`Collator`][1] object.\n`Intl.Collator.prototype.constructor`\n\n    A reference to [`Intl.Collator`][1].\n\n## Methods\n\n[`Intl.Collator.prototype.resolvedOptions()`][3]\n\n    Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.Collator.prototype' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][5] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][6]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.Collator`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/resolvedOptions\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#sec-10.2.1\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.Collator"], "type": "property"},
{"name": "Intl.Collator.supportedLocalesOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.collator", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/supportedLocalesOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.collator/intl.collator.supportedlocalesof()", "content": "## Summary\n\nThe **`Intl.Collator.supportedLocalesOf()`** method returns an array\ncontaining those of the provided locales that are supported in collation\nwithout having to fall back to the runtime's default locale.\n\n## Syntax\n\n    \n    \n    Intl.Collator.supportedLocalesOf(locales[, options])\n\n### Parameters\n\n`locales`\n\n    A string with a BCP 47 language tag, or an array of such strings. For the general form of the `locales` argument, see the [Intl page][1].\n`options`\n\n    \n\nOptional. An object that may have the following property:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n\n## Description\n\nReturns an array with a subset of the language tags provided in `locales`. The\nlanguage tags returned are those for which the runtime supports a locale in\ncollation that the locale matching algorithm used considers a match, so that\nit wouldn't have to fall back to the default locale.\n\n## Examples\n\n### Example: Using `supportedLocalesOf`\n\nAssuming a runtime that supports Indonesian and German but not Balinese in\ncollation, `supportedLocalesOf` returns the Indonesian and German language\ntags unchanged, even though pinyin collation is not used with Indonesian and a\nspecialized German for Indonesia is unlikely to be supported. Note the\nspecification of the `\"lookup\"` algorithm here\u00a0\u2014 a `\"best fit\"` matcher might\ndecide that Indonesian is an adequate match for Balinese since most Balinese\nspeakers also understand Indonesian, and therefore return the Balinese\nlanguage tag as well.\n\n    \n    \n    var locales = ['ban', 'id-u-co-pinyin', 'de-ID'];\n    var options = { localeMatcher: 'lookup' };\n    console.log(Intl.Collator.supportedLocalesOf(locales, options).join(', '));\n    // \u2192 \"id-u-co-pinyin, de-ID\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.Collator.supportedLocalesOf' in that\nspecification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.Collator`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-10.2.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.Collator"], "type": "method"},
{"name": "Intl.Collator.prototype.resolvedOptions()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.collator", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/resolvedOptions", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.collator/intl.collator.prototype.resolvedoptions()", "content": "## Summary\n\nThe **`Intl.Collator.prototype.resolvedOptions()`** method returns a new\nobject with properties reflecting the locale and collation options computed\nduring initialization of this [`Collator`][1] object.\n\n## Syntax\n\n    \n    \n    collator.resolvedOptions()\n\n## Description\n\nReturns a new object with properties reflecting the locale and collation\noptions computed during initialization of this [`Collator`][1] object. The\nobject has the following properties:\n\n`locale`\n\n    The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n`usage`\n\n`sensitivity`\n\n`ignorePunctuation`\n\n    The values provided for these properties in the `options` argument or filled in as defaults.\n`collation`\n\n    The value requested using the Unicode extension key `\"co\"`, if it is supported for `locale`, or `\"default\"`.\n`numeric`\n\n`caseFirst`\n\n    The values requested for these properties in the `options` argument or using the Unicode extension keys `\"kn\"` and `\"kf\"` or filled in as defaults. If the implementation does not support these properties, they are omitted.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.Collator.prototype.resolvedOptions' in that\nspecification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][3] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][4]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.Collator`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[2]: http://www.ecma-international.org/ecma-402/1.0/#sec-10.3.3\n\n[3]: /en-US/Firefox/Releases/29\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.Collator"], "type": "method"},
{"name": "RegExp.lastIndex", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.lastindex", "content": "## Summary\n\nThe `**lastIndex**` is a read/write integer property of regular expressions\nthat specifies the index at which to start the next match.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.lastIndex`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nYes\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    lastIndex = regExpObj.lastIndex;\n    \n\n## Description\n\nThis property is set only if the regular expression used the \"`g`\" flag to\nindicate a global search. The following rules apply:\n\n  * If `lastIndex` is greater than the length of the string, `regexp.test` and `regexp.exec` fail, then\u00a0`lastIndex` is set to 0.\n  * If `lastIndex` is equal to the length of the string and if the regular expression matches the empty string, then the regular expression matches input starting at `lastIndex`.\n  * If `lastIndex` is equal to the length of the string and if the regular expression does not match the empty string, then the regular expression mismatches input, and `lastIndex` is reset to 0.\n  * Otherwise, `lastIndex` is set to the next position following the most recent match.\n\n## Examples\n\nConsider the following sequence of statements:\n\n    \n    \n    var re = /(hi)?/g;\n    \n\nMatches the empty string.\n\n    \n    \n    console.log(re.exec(\"hi\"));\n    console.log(re.lastIndex);\n\nReturns `\\\"hi\\\"` with `lastIndex` equal to 2.\n\n    \n    \n    console.log(re.exec(\"hi\"));\n    console.log(re.lastIndex);\n    \n\nReturns [`\\\"\\\"]`, an empty array whose zeroth element is the match string. In\nthis case, the empty string because `lastIndex` was 2 (and still is 2) and\n\"`hi`\" has length 2.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nJavaScript 1.5: `lastIndex` is a property of a `RegExp` instance, not the\n`RegExp` object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.ignoreCase`][3]\n  * [`RegExp.prototype.global`][4]\n  * [`RegExp.prototype.multiline`][5]\n  * [`RegExp.prototype.source`][6]\n  * [`RegExp.prototype.sticky`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.7.5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-regexp-instances\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "RegExp.prototype.global", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.global", "content": "## Summary\n\nThe `**global**` property indicates whether or not the \"`g`\" flag is used with\nthe regular expression. `global` is a read-only property of an individual\nregular expression instance.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype.global`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nThe value of `global` is a Boolean and true if the \"`g`\" flag was used;\notherwise, `false`. The \"`g`\" flag indicates that the regular expression\nshould be tested against all possible matches in a string.\n\nYou cannot change this property directly.\n\n## Examples\n\n### Example: Using `global`\n\n    \n    \n    var regex = new RegExp(\"foo\", \"g\")\n    \n    console.log(regex.global) // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.2.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nJavaScript 1.5: `global` is a property of a `RegExp` instance, not the\n`RegExp` object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n`global` is now a prototype accessor property rather than an instance's own\ndata property.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`RegExp.prototype.ignoreCase`][3]\n  * [`RegExp.prototype.lastIndex`][4]\n  * [`RegExp.prototype.multiline`][5]\n  * [`RegExp.prototype.source`][6]\n  * [`RegExp.prototype.sticky`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.7.2\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-regexp.prototype.global\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "String.prototype.codePointAt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.codepointat()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**codePointAt()**` method returns a non-negative integer that is the\nUTF-16 encoded code point value.\n\n## Syntax\n\n    \n    \n    _str_.codePointAt(_pos_)\n\n### Parameters\n\n`pos`\n\n     Position of an element in the String to return the code point value from.\n\n## Description\n\nIf there is no element at the specified position, `undefined` is returned. If\nno UTF-16 surrogate pair begins at `pos`, the code unit at `pos` is returned.\n\n## Examples\n\n### Example: Using `codepointAt`\n\n    \n    \n    'ABC'.codePointAt(1);          // 66\n    '\\uD800\\uDC00'.codePointAt(0); // 65536\n    \n    'XYZ'.codePointAt(42); // undefined\n    \n\n## Polyfill\n\nThe following extends Strings to include the `codePointAt()` function as\nspecified in ECMAScript 6 for browsers not supporting it natively.\n\n    \n    \n    /*! http://mths.be/codepointat v0.1.0 by @mathias */\n    if (!String.prototype.codePointAt) {\n    \t(function() {\n    \t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n    \t\tvar codePointAt = function(position) {\n    \t\t\tif (this == null) {\n    \t\t\t\tthrow TypeError();\n    \t\t\t}\n    \t\t\tvar string = String(this);\n    \t\t\tvar size = string.length;\n    \t\t\t// `ToInteger`\n    \t\t\tvar index = position ? Number(position) : 0;\n    \t\t\tif (index != index) { // better `isNaN`\n    \t\t\t\tindex = 0;\n    \t\t\t}\n    \t\t\t// Account for out-of-bounds indices:\n    \t\t\tif (index < 0 || index >= size) {\n    \t\t\t\treturn undefined;\n    \t\t\t}\n    \t\t\t// Get the first code unit\n    \t\t\tvar first = string.charCodeAt(index);\n    \t\t\tvar second;\n    \t\t\tif ( // check if it\u2019s the start of a surrogate pair\n    \t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n    \t\t\t\tsize > index + 1 // there is a next code unit\n    \t\t\t) {\n    \t\t\t\tsecond = string.charCodeAt(index + 1);\n    \t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n    \t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n    \t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\treturn first;\n    \t\t};\n    \t\tif (Object.defineProperty) {\n    \t\t\tObject.defineProperty(String.prototype, 'codePointAt', {\n    \t\t\t\t'value': codePointAt,\n    \t\t\t\t'configurable': true,\n    \t\t\t\t'writable': true\n    \t\t\t});\n    \t\t} else {\n    \t\t\tString.prototype.codePointAt = codePointAt;\n    \t\t}\n    \t}());\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.codePointAt' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[29][3] (29)\n\n</td>  \n<td>\n\n11 on Windows 10 Preview\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n29.0 (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.fromCodePoint()`][4]\n  * [`String.fromCharCode()`][5]\n  * [`String.prototype.charCodeAt()`][6]\n  * [`String.prototype.charAt()`][7]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.codepointat\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/Firefox/Releases/29\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.bold()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.bold()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**bold()**` method creates a `<[b>`][1] HTML element that causes a string\nto be displayed as bold.\n\n## Syntax\n\n    \n    \n    str.bold()\n\n## Description\n\nThe `bold` method embeds a string in a `<b>` tag:  \n`\"<b>str</b>`\"\n\n## Examples\n\n### Example: Using `bold`\n\nThe following example uses `string` methods to change the formatting of a\nstring:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.blink()   );\n    console.log( worldString.bold()    );\n    console.log( worldString.italics() );\n    console.log( worldString.strike()  );\n\nThis example produces the same output as the following HTML:\n\n    \n    \n    <blink>Hello, world</blink>\n    <b>Hello, world</b>\n    <i>Hello, world</i>\n    <strike>Hello, world</strike>\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.bold' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.blink()`][3]\n  * [`String.prototype.italics()`][4]\n  * [`String.prototype.strike()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/b\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.bold\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.blink()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.blink()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**blink()**` method creates a `<[blink>`][1] HTML element that causes a\nstring to blink.\n\n**Warning:** Blinking text is frowned upon by several accessibility standards. The `<blink>` element itself is non-standard and deprecated!\n\n## Syntax\n\n    \n    \n    _str_.blink()\n\n## Description\n\nThe `blink` method embeds a string in a `<blink>` tag:  \n`\"<blink>str</blink>`\"\n\n## Examples\n\n### Example: Using `blink`\n\nThe following example uses `string` methods to change the formatting of a\nstring:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.blink()   );\n    console.log( worldString.bold()    );\n    console.log( worldString.italics() );\n    console.log( worldString.strike()  );\n\nThis example produces the same output as the following HTML:\n\n    \n    \n    <blink>Hello, world</blink>\n    <b>Hello, world</b>\n    <i>Hello, world</i>\n    <strike>Hello, world</strike>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.blink' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.bold()`][3]\n  * [`String.prototype.italics()`][4]\n  * [`String.prototype.strike()`][5]\n\n[1]: /en-US/docs/Web/HTML/Element/blink\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.blink\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "RegExp.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype", "content": "## Summary\n\nThe `**Regex.prototype**` property represents the prototype object for the\n[`RegExp`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RegExp.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nSee [`RegExp`][1] for a description of `RegExp` instances.` RegExp` instances\ninherit from `RegExp.prototype`. Modifications to the prototype object are\npropagated to all `RegExp` instances.\n\n## Properties\n\nSee also [Deprecated RegExp Properties][2]\n\nNote that several of the `RegExp` properties have both long and short (Perl-\nlike) names. Both names always refer to the same value. Perl is the\nprogramming language from which JavaScript modeled its regular expressions.\n\n`RegExp.prototype.``constructor`\n\n     Specifies the function that creates an object's prototype.\n[`RegExp.prototype.global`][3]\n\n     Whether to test the regular expression against all possible matches in a string, or only against the first.\n[`RegExp.prototype.ignoreCase`][4]\n\n     Whether to ignore case while attempting a match in a string.\n[`RegExp.prototype.lastIndex`][5]\n\n     The index at which to start the next match.\n[`RegExp.prototype.multiline`][6]\n\n     Whether or not to search in strings across multiple lines.\n[`RegExp.prototype.source`][7]\n\n     The text of the pattern.\n[`RegExp.prototype.sticky`][8] _ _\n\n     Whether or not the search is sticky.\n\nProperties inherited from [`Object`][9]:\n\n[`__parent__`][10], [`__proto__`][11]\n\n## Methods\n\nSee also [Deprecated RegExp Methods][12]\n\n[`RegExp.prototype.exec()`][13]\n\n     Executes a search for a match in its string parameter.\n[`RegExp.prototype.test()`][14]\n\n     Tests for a match in its string parameter.\n[`RegExp.prototype.toSource()`][15] _ _\n\n     Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.\n[`RegExp.prototype.toString()`][16]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][17] method.\n\nMethods inherited from [`Object`][9]:\n\n[`__defineGetter__`][18], [`__defineSetter__`][19], [`hasOwnProperty`][20],\n[`isPrototypeOf`][21], [`__lookupGetter__`][22], [`__lookupSetter__`][23],\n[`__noSuchMethod__`][24], [`propertyIsEnumerable`][25],\n[`toLocaleString`][26], [`unwatch`][27], [`valueOf`][28], [`watch`][29]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp' in that specification.][30]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp.prototype' in that specification.][31]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Regular Expressions][32] chapter in the [JavaScript Guide][33]\n  * [`RegExp`][1]\n  * [`Function.prototype`][34]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Methods\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[22]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[25]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[26]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[27]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[30]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10.5.1\n\n[31]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp.prototype\n\n[32]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n[33]: /en-US/docs/Web/JavaScript/Guide\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "property"},
{"name": "Intl.NumberFormat.supportedLocalesOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/supportedLocalesOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat/intl.numberformat.supportedlocalesof()", "content": "## Summary\n\nThe **`Intl.NumberFormat.supportedLocalesOf()`** method returns an array\ncontaining those of the provided locales that are supported in number\nformatting without having to fall back to the runtime's default locale.\n\n## Syntax\n\n    \n    \n    Intl.NumberFormat.supportedLocalesOf(locales[, options])\n\n### Parameters\n\n`locales`\n\n    A string with a BCP 47 language tag, or an array of such strings. For the general form of the `locales` argument, see the [Intl page][1].\n`options`\n\n    \n\nOptional. An object that may have the following property:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n\n## Description\n\nReturns an array with a subset of the language tags provided in `locales`. The\nlanguage tags returned are those for which the runtime supports a locale in\nnumber formatting that the locale matching algorithm used considers a match,\nso that it wouldn't have to fall back to the default locale.\n\n## Examples\n\n### Example: Using `supportedLocalesOf`\n\nAssuming a runtime that supports Indonesian and German but not Balinese in\nnumber formatting, `supportedLocalesOf` returns the Indonesian and German\nlanguage tags unchanged, even though `pinyin` collation is neither relevant to\nnumber formatting nor used with Indonesian, and a specialized German for\nIndonesia is unlikely to be supported. Note the specification of the\n`\"lookup\"` algorithm here\u00a0\u2014 a `\"best fit\"` matcher might decide that\nIndonesian is an adequate match for Balinese since most Balinese speakers also\nunderstand Indonesian, and therefore return the Balinese language tag as well.\n\n    \n    \n    var locales = ['ban', 'id-u-co-pinyin', 'de-ID'];\n    var options = { localeMatcher: 'lookup' };\n    console.log(Intl.NumberFormat.supportedLocalesOf(locales, options).join(', '));\n    // \u2192 \"id-u-co-pinyin, de-ID\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.NumberFormat.supportedLocalesOf' in that\nspecification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.NumberFormat`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-11.2.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.NumberFormat"], "type": "method"},
{"name": "Intl.NumberFormat.prototype.resolvedOptions()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/resolvedOptions", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat/intl.numberformat.prototype.resolvedoptions()", "content": "## Summary\n\nThe **`Intl.NumberFormat.prototype.resolvedOptions()`** method returns a new\nobject with properties reflecting the locale and number formatting options\ncomputed during initialization of this [`NumberFormat`][1] object.\n\n## Syntax\n\n    \n    \n    numberFormat.resolvedOptions()\n\n## Description\n\nReturns a new object with properties reflecting the locale and number\nformatting options computed during initialization of this [`NumberFormat`][1]\nobject. The object has the following properties:\n\n`locale`\n\n     The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n`numberingSystem`\n\n     The value requested using the Unicode extension key `\"nu\"` or filled in as a default.\n`style`\n\n`useGrouping`\n\n     The values provided for these properties in the `options` argument or filled in as defaults.\n`currency`\n\n`currencyDisplay`\n\n     The values provided for these properties in the `options` argument or filled in as defaults. These properties are only present if `style` is `\"currency\"`.\n\nOnly one of the following two groups of properties is included:\n\n`minimumIntegerDigits`\n\n`minimumFractionDigits`\n\n`maximumFractionDigits`\n\n     The values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if neither `minimumSignificantDigits` nor `maximumSignificantDigits` was provided in the `options` argument.\n`minimumSignificantDigits`\n\n`maximumSignificantDigits`\n\n     The values provided for these properties in the `options` argument or filled in as defaults. These properties are present only if at least one of them was provided in the `options` argument.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.NumberFormat.prototype.resolvedOptions' in that\nspecification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][3] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][4]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.NumberFormat`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[2]: http://www.ecma-international.org/ecma-402/1.0/#sec-11.3.3\n\n[3]: /en-US/Firefox/Releases/29\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.NumberFormat"], "type": "method"},
{"name": "Intl.NumberFormat.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat/intl.numberformat.prototype", "content": "## Summary\n\nThe **`Intl.NumberFormat.prototype`** property represents the prototype object\nfor the [`Intl.NumberFormat`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Intl.NumberFormat.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nSee [`NumberFormat`][1] for a description of `Intl.NumberFormat` instances.\n\n[`Intl.NumberFormat`][1] instances inherit from `Intl.NumberFormat.prototype`.\nModifications to the prototype object are inherited by all\n[`Intl.NumberFormat`][1] instances.\n\n## Properties\n\n`Intl.NumberFormat.prototype.constructor`\n\n     A reference to `Intl.NumberFormat`.\n[`Intl.NumberFormat.prototype.format`][2]\n\n     Getter; returns a function that formats a number according to the locale and formatting options of this [`NumberFormat`][1] object.\n\n## Methods\n\n[`Intl.NumberFormat.prototype.resolvedOptions()`][3]\n\n     Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.NumberFormat.prototype' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][5] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][6]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.NumberFormat`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/resolvedOptions\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#sec-11.2.1\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.NumberFormat"], "type": "property"},
{"name": "String.prototype.contains()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.contains()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\nThe **contains()** method determines whether one string may be found within\nanother string, returning `true` or `false` as appropriate.\n\n**Note:** Web sites using MooTools 1.2 should consider upgrading to a more recent version. See MooTools compatibility issues for details.\n\n## Syntax\n\n    \n    \n    _str_.contains(_searchString_ [, _position_]);\n\n### Parameters\n\n`searchString`\n\n     A string to be searched for within this string.\n`position`\n\n     The position in this string at which to begin searching for `searchString`; defaults to 0.\n\n## Description\n\nThis method lets you determine whether or not a string contains another\nstring.\n\n## Examples\n\n    \n    \n    var str = \"To be, or not to be, that is the question.\";\n    \n    console.log(str.contains(\"To be\"));       // true\n    console.log(str.contains(\"question\"));    // true\n    console.log(str.contains(\"nonexistent\")); // false\n    console.log(str.contains(\"To be\", 1));    // false\n    console.log(str.contains(\"TO BE\"));       // false\n    \n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can easily\npolyfill this method:\n\n    \n    \n    if ( !String.prototype.contains ) {\n    \u00a0\u00a0 \u00a0String.prototype.contains = function() {\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return String.prototype.indexOf.apply( this, arguments ) !== -1;\n    \u00a0\u00a0 \u00a0};\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.contains' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[18][2] (18)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n18.0 (18)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### MooTools compatibility issues\n\nIt's been [reported][3] that some Web sites using MooTools 1.2 broke on\nFirefox 17. This version of MooTools checks whether\n`String.prototype.contains()` exists and, if it doesn't, adds its own. With\nthe introduction of this function in Firefox 17, the behavior of that check\nchanged in a way that causes code based on MooTools'\n`String.prototype.contains()` implementation to break. As a result, this\nchange was [disabled][4] in Firefox 17. `String.prototype.contains` is\navailable one version later, Firefox 18.\n\nMooTools 1.3 forces its own version of `String.prototype.contains()`, so Web\nsites relying on it should not break. However, you should note that [MooTools\n1.3 signature][5] and ECMAScript 6 signatures for this method differ (on the\nsecond argument). [MooTools 1.5+ changed the signature to match the ES6\nstandard.][6]\n\n## See also\n\n  * [`String.prototype.indexOf()`][7]\n  * [`String.prototype.startsWith()`][8] _ _\n  * [`String.prototype.endsWith()`][9] _ _\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.contains\n\n[2]: /en-US/Firefox/Releases/18\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=789036\n\n[4]: https://hg.mozilla.org/releases/mozilla-aurora/rev/086db97198a8\n\n[5]: http://mootools.net/docs/core/Types/String#String:contains\n\n[6]: https://github.com/mootools/mootools-core/blob/master/Docs/Types/String.md#note\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.charCodeAt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.charcodeat()", "content": "## Summary\n\nThe `**charCodeAt()**` method returns the numeric Unicode value of the\ncharacter at the given index (except for unicode codepoints > 0x10000).\n\n## Syntax\n\n    \n    \n    _str_.charCodeAt(_index_)\n\n### Parameters\n\n`index`\n\n     An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.\n\n## Description\n\nUnicode code points range from 0 to 1,114,111. The first 128 Unicode code\npoints are a direct match of the ASCII character encoding. For information on\nUnicode, see the [JavaScript Guide][1].\n\nNote that `charCodeAt` will always return a value that is less than 65,536.\nThis is because the higher code points are represented by a pair of (lower\nvalued) \"surrogate\" pseudo-characters which are used to comprise the real\ncharacter. Because of this, in order to examine or reproduce the full\ncharacter for individual characters of value 65,536 and above, for such\ncharacters, it is necessary to retrieve not only `charCodeAt(i)`, but also\n`charCodeAt(i+1)` (as if examining/reproducing a string with two letters). See\nexample 2 and 3 below.\n\n`charCodeAt` returns [`NaN`][2] if the given index is not greater than 0 or is\ngreater than the length of the string.\n\nBackward compatibilty: In historic versions (like JavaScript 1.2) the\n`charCodeAt` method returns a number indicating the ISO-Latin-1 codeset value\nof the character at the given index. The ISO-Latin-1 codeset ranges from 0 to\n255. The first 0 to 127 are a direct match of the ASCII character set.\n\n## Examples\n\n### Example: Using `charCodeAt`\n\nThe following example returns 65, the Unicode value for A.\n\n    \n    \n    \"ABC\".charCodeAt(0) // returns 65\n    \n\n### Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane\ncharacters if their presence earlier in the string is unknown\n\nThis version might be used in for loops and the like when it is unknown\nwhether non-BMP characters exist before the specified index position.\n\n    \n    \n    function fixedCharCodeAt (str, idx) {\n        // ex. fixedCharCodeAt ('\\uD800\\uDC00', 0); // 65536\n        // ex. fixedCharCodeAt ('\\uD800\\uDC00', 1); // false\n        idx = idx || 0;\n        var code = str.charCodeAt(idx);\n        var hi, low;\n        \n        // High surrogate (could change last hex to 0xDB7F to treat high\n        // private surrogates as single characters)\n        if (0xD800 <= code && code <= 0xDBFF) {\n            hi = code;\n            low = str.charCodeAt(idx+1);\n            if (isNaN(low)) {\n                throw 'High surrogate not followed by low surrogate in fixedCharCodeAt()';\n            }\n            return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n        }\n        if (0xDC00 <= code && code <= 0xDFFF) { // Low surrogate\n            // We return false to allow loops to skip this iteration since should have\n            // already handled high surrogate above in the previous iteration\n            return false;\n            /*hi = str.charCodeAt(idx-1);\n            low = code;\n            return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;*/\n        }\n        return code;\n    } \n    \n\n### Example: Fixing charCodeAt to handle non-Basic-Multilingual-Plane\ncharacters if their presence earlier in the string is known\n\n    \n    \n    function knownCharCodeAt (str, idx) {\n        str += '';\n        var code,\n            end = str.length;\n    \n        var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n        while ((surrogatePairs.exec(str)) != null) {\n            var li = surrogatePairs.lastIndex;\n            if (li - 2 < idx) {\n                idx++;\n            }\n            else {\n                break;\n            }\n        }\n    \n        if (idx >= end || idx < 0) {\n            return NaN;\n        }\n    \n        code = str.charCodeAt(idx);\n    \n        var hi, low;\n        if (0xD800 <= code && code <= 0xDBFF) {\n            hi = code;\n            low = str.charCodeAt(idx+1);\n            // Go one further, since one of the \"characters\" is part of a surrogate pair\n            return ((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\n        }\n        return code;\n    }\n    \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.charCodeAt' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.charCodeAt' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.fromCharCode()`][5]\n  * [`String.prototype.charAt()`][6]\n  * [`String.fromCodePoint()`][7]\n  * [`String.prototype.codePointAt()`][8]\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.5\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.charcodeat\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.big()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.big()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**big()**` method creates a `<[big>`][1] HTML element that causes a\nstring to be displayed in a big font.\n\n**Usage note: **The <big> element has been removed in [HTML5][2] and shouldn't be used anymore. Instead web developers should use [CSS][3] properties.\n\n## Syntax\n\n    \n    \n    str.big()\n\n## Description\n\nThe `big` method embeds a string in a `<big>` tag:  \n`\"<big>str</big>`\"\n\n## Examples\n\n### Example: Using `big`\n\nThe following example uses `string` methods to change the size of a string:\n\n    \n    \n    var worldString = \"Hello, world\";\n    \n    console.log( worldString.small()     ); // <small>Hello, world</small>\n    console.log( worldString.big()       ); // <big>Hello, world</big>\n    console.log( worldString.fontsize(7) ); // <fontsize=7>Hello, world</fontsize>\n\nWith the [element.style][4] object you can get the element's `style` attribute\nand manipulate it more generically, for example:\n\n    \n    \n    document.getElementById('yourElemId').style.fontSize = '2em'\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.big' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.fontsize()`][6]\n  * [`String.prototype.small()`][7]\n\n[1]: /en-US/docs/Web/HTML/Element/big\n\n[2]: /en-US/docs/Web/Guide/HTML/HTML5\n\n[3]: /en-US/docs/Web/CSS\n\n[4]: /en-US/docs/Web/API/HTMLElement.style\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.big\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype.anchor()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.anchor()", "content": "## Summary\n\nThe `**anchor()**` method creates an `<[a>`][1] HTML anchor element that is\nused as a hypertext target.\n\n## Syntax\n\n    \n    \n    _str_.anchor(_name_) \n\n### Parameters\n\n`name`\n\n     A string representing the `name` attribute of the a tag to be created.\n\n## Description\n\nUse the `anchor` method to programmatically create and display an anchor in a\ndocument.\n\nIn the syntax, the text string represents the literal text that you want the\nuser to see. The `name` parameter string represents the `name` attribute of\nthe `<[a>`][1] element.\n\nAnchors created with the `anchor` method become elements in the\n[`document.anchors`][2] array.\n\n## Examples\n\n### Example: Using `anchor`\n\n    \n    \n    var myString = \"Table of Contents\";\n    \n    document.body.innerHTML = myString.anchor(\"contents_anchor\");\n\nwill output the following HTML:\n\n    \n    \n    <a name=\"contents_anchor\">Table of Contents</a>\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.anchor' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.  \nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\nStarting with Gecko\u00a017 the **\"** (quotation mark) is replaced by its HTML\nreference character `&quot;` in strings supplied for the `name` parameter.\n\n## See also\n\n  * [`String.prototype.link()`][4]\n\n[1]: /en-US/docs/Web/HTML/Element/a\n\n[2]: /en-US/docs/Web/API/document.anchors\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.anchor\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.fromCodePoint()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.fromcodepoint()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe static **String.fromCodePoint()** method returns a string created by using\nthe specified sequence of code points.\n\n## Syntax\n\n    \n    \n    String.fromCodePoint(_num1_, _..._, _numN_) \n\n### Parameters\n\n`num1, ..., num_N_`\n\n     A sequence of code points.\n\n### Throws\n\n`[`RangeError`][1]`\n\n     A `RangeError` is thrown if an invalid Unicode code point is given (e.g. \"RangeError: NaN is not a valid code point\").\n\n## Description\n\nBecause `fromCodePoint` is a static method of `String`, you always use it as\n`String.fromCodePoint()`, rather than as a method of a `String` object you\ncreated.\n\n## Examples\n\n### Example: Using `fromCodePoint`\n\n    \n    \n    String.fromCodePoint(42)        // \"*\"\n    String.fromCodePoint(65, 90)    // \"AZ\"\n    String.fromCodePoint(0x404)     // \"\\u0404\"\n    String.fromCodePoint(0x2F804)  // \"\\uD87E\\uDC04\"\n    String.fromCodePoint(194564)   // \"\\uD87E\\uDC04\"\n    String.fromCodePoint(0x1D306, 0x61, 0x1D307) // \"\\uD834\\uDF06a\\uD834\\uDF07\"\n    \n    String.fromCodePoint('_')\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // RangeError\n    String.fromCodePoint(Infinity); // RangeError\n    String.fromCodePoint(-1);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // RangeError\n    String.fromCodePoint(3.14);\u00a0\u00a0\u00a0\u00a0 // RangeError\n    String.fromCodePoint(3e-2);\u00a0\u00a0\u00a0\u00a0 // RangeError\n    String.fromCodePoint(NaN);\u00a0\u00a0\u00a0\u00a0\u00a0 // RangeError\n    \n    \n    \n    // String.fromCharCode() alone cannot get the character at such a high code point\n    // The following, on the other hand, can return a 4-byte character as well as the \n    //   usual 2-byte ones (i.e., it can return a single character which actually has \n    //   a string length of 2 instead of 1!)\n    alert(String.fromCodePoint(0x2F804)); // or 194564 in decimal\n\n## Polyfill\n\nThe `String.fromCodePoint`\u00a0method has been added to the ECMAScript standard in\nversion 6 and may not be supported in all web browsers or environments yet.\nUse the code below for a polyfill:\n\n    \n    \n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n    if (!String.fromCodePoint) {\n    \t(function() {\n    \t\tvar defineProperty = (function() {\n    \t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n    \t\t\ttry {\n    \t\t\t\tvar object = {};\n    \t\t\t\tvar $defineProperty = Object.defineProperty;\n    \t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n    \t\t\t} catch(error) {}\n    \t\t\treturn result;\n    \t\t}());\n    \t\tvar stringFromCharCode = String.fromCharCode;\n    \t\tvar floor = Math.floor;\n    \t\tvar fromCodePoint = function(codePoints) {\n    \t\t\tvar MAX_SIZE = 0x4000;\n    \t\t\tvar codeUnits = [];\n    \t\t\tvar highSurrogate;\n    \t\t\tvar lowSurrogate;\n    \t\t\tvar index = -1;\n    \t\t\tvar length = arguments.length;\n    \t\t\tif (!length) {\n    \t\t\t\treturn '';\n    \t\t\t}\n    \t\t\tvar result = '';\n    \t\t\twhile (++index < length) {\n    \t\t\t\tvar codePoint = Number(arguments[index]);\n    \t\t\t\tif (\n    \t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n    \t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n    \t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n    \t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n    \t\t\t\t) {\n    \t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n    \t\t\t\t}\n    \t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n    \t\t\t\t\tcodeUnits.push(codePoint);\n    \t\t\t\t} else { // Astral code point; split in surrogate halves\n    \t\t\t\t\t// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n    \t\t\t\t\tcodePoint -= 0x10000;\n    \t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n    \t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n    \t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n    \t\t\t\t}\n    \t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n    \t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n    \t\t\t\t\tcodeUnits.length = 0;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\treturn result;\n    \t\t};\n    \t\tif (defineProperty) {\n    \t\t\tdefineProperty(String, 'fromCodePoint', {\n    \t\t\t\t'value': fromCodePoint,\n    \t\t\t\t'configurable': true,\n    \t\t\t\t'writable': true\n    \t\t\t});\n    \t\t} else {\n    \t\t\tString.fromCodePoint = fromCodePoint;\n    \t\t}\n    \t}());\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.fromCodePoint' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[29][3] (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n29.0 (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.codePointAt()`][4]\n  * [`String.fromCharCode()`][5]\n  * [`String.prototype.charCodeAt()`][6]\n  * [`String.prototype.charAt()`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.fromcodepoint\n\n[3]: /en-US/Firefox/Releases/29\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.fromCharCode()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.fromcharcode()", "content": "## Summary\n\nThe static **String.fromCharCode()** method returns a string created by using\nthe specified sequence of Unicode values.\n\n## Syntax\n\n    \n    \n    String.fromCharCode(_num1_, _..._, _numN_) \n\n### Parameters\n\n`num1, ..., num_N_`\n\n     A sequence of numbers that are Unicode values.\n\n## Description\n\nThis method returns a string and not a `String` object.\n\nBecause `fromCharCode` is a static method of `String`, you always use it as\n`String.fromCharCode()`, rather than as a method of a `String` object you\ncreated.\n\n## Examples\n\n### Example: Using `fromCharCode`\n\nThe following example returns the string \"ABC\".\n\n    \n    \n    String.fromCharCode(65,66,67)\n    \n\n## Getting it to work with higher values\n\nAlthough most common Unicode values can be represented with one 16-bit number\n(as expected early on during JavaScript standardization) and `fromCharCode()`\ncan be used to return a single character for the most common values (i.e.,\nUCS-2 values which are the subset of UTF-16 with the most common characters),\nin order to deal with ALL legal Unicode values (up to 21 bits),\n`fromCharCode()` alone is inadequate. Since the higher code point characters\nuse two (lower value) \"surrogate\" numbers to form a single character,\n[`String.fromCodePoint()`][1] (part of the ES6 draft) can be used to return\nsuch a pair and thus adequately represent these higher valued characters.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.charCodeAt()`][4]\n  * [`String.prototype.charAt()`][5]\n  * [`String.fromCodePoint()`][1]\n  * [`String.prototype.codePointAt()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.3.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.fromcharcodes\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "String.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype", "content": "## Summary\n\nThe `**String.prototype**` property represents the [`String`][1] prototype\nobject.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `String.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nAll `String` instances inherit from `String.prototype`. Changes to the\n`String` prototype object are propagated to all `String` instances.\n\n## Properties\n\n`String.prototype.constructor`\n\n     Specifies the function that creates an object's prototype.\n[`String.prototype.length`][2]\n\n     Reflects the length of the string.\n_N_\n\n     Used to access the character in the _N_th position where _N_ is a positive integer between 0 and one less than the value of [`length`][2]. These properties are read-only.\n\nProperties inherited from [`Object`][3]:\n\n[`__parent__`][4], [`__proto__`][5]\n\n## Methods\n\n### Methods unrelated to HTML\n\n[`String.prototype.charAt()`][6]\n\n     Returns the character at the specified index.\n[`String.prototype.charCodeAt()`][7]\n\n     Returns a number indicating the Unicode value of the character at the given index.\n[`String.prototype.codePointAt()`][8] _ _\n\n     Returns a non-negative integer that is the UTF-16 encoded code point value at the given position.\n[`String.prototype.concat()`][9]\n\n     Combines the text of two strings and returns a new string.\n[`String.prototype.contains()`][10] _ _\n\n     Determines whether one string may be found within another string.\n[`String.prototype.endsWith()`][11] _ _\n\n     Determines whether a string ends with the characters of another string.\n[`String.prototype.indexOf()`][12]\n\n     Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.\n[`String.prototype.lastIndexOf()`][13]\n\n     Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.\n[`String.prototype.localeCompare()`][14]\n\n     Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\n[`String.prototype.match()`][15]\n\n     Used to match a regular expression against a string.\n[`String.prototype.normalize()`][16] _ _\n\n     Returns the Unicode Normalization Form of the calling string value.\n[`String.prototype.quote()`][17] _ _\n\n     Wraps the string in double quotes (\"`\"`\").\n[`String.prototype.repeat()`][18] _ _\n\n     Returns a string consisting of the elements of the object repeated the given times.\n[`String.prototype.replace()`][19]\n\n     Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.\n[`String.prototype.search()`][20]\n\n     Executes the search for a match between a regular expression and a specified string.\n[`String.prototype.slice()`][21]\n\n     Extracts a section of a string and returns a new string.\n[`String.prototype.split()`][22]\n\n     Splits a String object into an array of strings by separating the string into substrings.\n[`String.prototype.startsWith()`][23] _ _\n\n     Determines whether a string begins with the characters of another string.\n[`String.prototype.substr()`][24]\n\n     Returns the characters in a string beginning at the specified location through the specified number of characters.\n[`String.prototype.substring()`][25]\n\n     Returns the characters in a string between two indexes into the string.\n[`String.prototype.toLocaleLowerCase()`][26]\n\n     The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as [`toLowerCase`][27].\n[`String.prototype.toLocaleUpperCase()`][28]\n\n     The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as [`toUpperCase`][29].\n[`String.prototype.toLowerCase()`][27]\n\n     Returns the calling string value converted to lower case.\n[`String.prototype.toSource()`][30] _ _\n\n     Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource`][31] method.\n[`String.prototype.toString()`][32]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString`][33] method.\n[`String.prototype.toUpperCase()`][29]\n\n     Returns the calling string value converted to uppercase.\n[`String.prototype.trim()`][34]\n\n     Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.\n[`String.prototype.trimLeft()`][35] _ _\n\n     Trims whitespace from the left side of the string.\n[`String.prototype.trimRight()`][36] _ _\n\n     Trims whitespace from the right side of the string.\n[`String.prototype.valueOf()`][37]\n\n     Returns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf`][38] method.\n\n### HTML wrapper methods\n\nThese methods are of limited use, as they provide only a subset of the\navailable HTML tags and attributes.\n\n[`String.prototype.anchor()`][39]\n\n     `<[a name=\"name\">][40]` (hypertext target)\n[`String.prototype.big()`][41]\n\n     `<[big>`][42]\n[`String.prototype.blink()`][43]\n\n     `<[blink>`][44]\n[`String.prototype.bold()`][45]\n\n     `<[b>`][46]\n[`String.prototype.fixed()`][47]\n\n     `<[tt>`][48]\n[`String.prototype.fontcolor()`][49]\n\n     `<[font color=\"_color_\">`][50]\n[`String.prototype.fontsize()`][51]\n\n     `<[font size=\"_size_\">`][52]\n[`String.prototype.italics()`][53]\n\n     `<[i>`][54]\n[`String.prototype.link()`][55]\n\n     `<[a href=\"_url_\">`][56] (link to URL)\n[`String.prototype.small()`][57]\n\n     `<[small>`][58]\n[`String.prototype.strike()`][59]\n\n     `<[strike>`][60]\n[`String.prototype.sub()`][61]\n\n     `<[sub>`][62]\n[`String.prototype.sup()`][63]\n\n     `<[sup>`][64]\n\nMethods inherited from [`Object`][3]:\n\n[`__defineGetter__`][65], [`__defineSetter__`][66], [`hasOwnProperty`][67],\n[`isPrototypeOf`][68], [`__lookupGetter__`][69], [`__lookupSetter__`][70],\n[`__noSuchMethod__`][71], [`propertyIsEnumerable`][72],\n[`toLocaleString`][73], [`unwatch`][74], [`watch`][75]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][76]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][77]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String`][1]\n  * [`Function.prototype`][78]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\n\n[40]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-name\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\n\n[42]: /en-US/docs/Web/HTML/Element/big\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\n\n[44]: /en-US/docs/Web/HTML/Element/blink\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[46]: /en-US/docs/Web/HTML/Element/b\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\n\n[48]: /en-US/docs/Web/HTML/Element/tt\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\n\n[50]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-color\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n[52]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-size\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n[54]: /en-US/docs/Web/HTML/Element/i\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\n\n[56]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\n\n[58]: /en-US/docs/Web/HTML/Element/small\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n[60]: /en-US/docs/Web/HTML/Element/strike\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\n\n[62]: /en-US/docs/Web/HTML/Element/sub\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\n\n[64]: /en-US/docs/Web/HTML/Element/sup\n\n[65]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[66]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[67]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[68]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[69]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[70]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[71]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[72]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[73]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[74]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[75]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[76]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.3.1\n\n[77]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype\n\n[78]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "property"},
{"name": "String.length", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.length", "content": "## Summary\n\nThe **length** property represents the length of a string.\n\n## Syntax\n\n    \n    \n    str.length\n\n## Description\n\nThis property returns the number of code units in the string. [UTF-16][1], the\nstring format used by JavaScript, uses a single 16-bit code unit to represent\nthe most common characters, but needs to use two code units for less commonly-\nused characters, so it's possible for the value returned by `length` to not\nmatch the actual number of characters in the string.\n\nFor an empty string, `length` is 0.\n\nThe static property **String.length** returns the value 1.\n\n## Examples\n\n    \n    \n    var x = \"Mozilla\";\n    var empty = \"\";\n    \n    console.log(\"Mozilla is \" + x.length + \" code units long\");\n    /* \"Mozilla is 7 code units long\" */\n    \n    console.log(\"The empty string is has a length of \" + empty.length);\n    /* \"The empty string is has a length of 0\" */\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.length' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.length' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript String.length and Internationalizing Web Applications][4]\n\n[1]: http://en.wikipedia.org/wiki/UTF-16\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.5.1\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-string-instances-length\n\n[4]: http://developer.teradata.com/blog/jasonstrimpel/2011/11/javascript-string-length-and-internationalizing-web-applications\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "property"},
{"name": "String.prototype.charAt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.charat()", "content": "## Summary\n\nThe **charAt()** method returns the specified character from a string.\n\n## Syntax\n\n    \n    \n    _str_.charAt(_index_)\n\n### Parameters\n\n`index`\n\n     An integer between 0 and 1-less-than the length of the string.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first\ncharacter is 0, and the index of the last character in a string called\n`stringName` is `stringName.length - 1`. If the `index` you supply is out of\nrange, JavaScript returns an empty string.\n\n## Examples\n\n### Example: Displaying characters at different locations in a string\n\nThe following example displays characters at different locations in the string\n\"`Brave new world`\":\n\n    \n    \n    var anyString = \"Brave new world\";\n    \n    console.log(\"The character at index 0   is '\" + anyString.charAt(0)   + \"'\");\n    console.log(\"The character at index 1   is '\" + anyString.charAt(1)   + \"'\");\n    console.log(\"The character at index 2   is '\" + anyString.charAt(2)   + \"'\");\n    console.log(\"The character at index 3   is '\" + anyString.charAt(3)   + \"'\");\n    console.log(\"The character at index 4   is '\" + anyString.charAt(4)   + \"'\");\n    console.log(\"The character at index 999 is '\" + anyString.charAt(999) + \"'\");\n    \n\nThese lines display the following:\n\n    \n    \n    The character at index 0 is 'B'\n    The character at index 1 is 'r'\n    The character at index 2 is 'a'\n    The character at index 3 is 'v'\n    The character at index 4 is 'e'\n    The character at index 999 is ''\n    \n\n### Example: Getting whole characters\n\nThe following provides a means of ensuring that going through a string loop\nalways provides a whole character, even if the string contains characters that\nare not in the Basic Multi-lingual Plane.\n\n    \n    \n    var str = 'A \\uD87E\\uDC04 Z'; // We could also use a non-BMP character directly\n    for (var i=0, chr; i < str.length; i++) {\n      if ((chr = getWholeChar(str, i)) === false) {\n        continue;\n      } // Adapt this line at the top of each loop, passing in the whole string and\n        // the current iteration and returning a variable to represent the \n        // individual character\n    \n      alert(chr);\n    }\n    \n    function getWholeChar (str, i) {\n      var code = str.charCodeAt(i);     \n     \n      if (isNaN(code)) {\n        return ''; // Position not found\n      }\n      if (code < 0xD800 || code > 0xDFFF) {\n        return str.charAt(i);\n      }\n    \n      // High surrogate (could change last hex to 0xDB7F to treat high private\n      // surrogates as single characters)\n      if (0xD800 <= code && code <= 0xDBFF) { \n        if (str.length <= (i+1))  {\n          throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n          if (0xDC00 > next || next > 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n          }\n          return str.charAt(i)+str.charAt(i+1);\n      }\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n      if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n      }\n      var prev = str.charCodeAt(i-1);\n      \n      // (could change last hex to 0xDB7F to treat high private\n      // surrogates as single characters)\n      if (0xD800 > prev || prev > 0xDBFF) { \n        throw 'Low surrogate without preceding high surrogate';\n      }\n      // We can pass over low surrogates now as the second component\n      // in a pair which we have already processed\n      return false; \n    }\n    \n    \n\nIn an exclusive JavaScript 1.7+ environment (such as Firefox) which allows\ndestructured assignment, the following is a more succinct and somewhat more\nflexible alternative in that it does incrementing for an incrementing variable\nautomatically (if the character warrants it in being a surrogate pair).\n\n    \n    \n    var str = 'A\\uD87E\\uDC04Z'; // We could also use a non-BMP character directly\n    for (var i=0, chr; i < str.length; i++) {\n      [chr, i] = getWholeCharAndI(str, i);\n      // Adapt this line at the top of each loop, passing in the whole string and\n      // the current iteration and returning an array with the individual character\n      // and 'i' value (only changed if a surrogate pair)\n    \n      alert(chr);\n    }\n    \n    function getWholeCharAndI (str, i) {\n      var code = str.charCodeAt(i);\n    \n      if (isNaN(code)) {\n        return ''; // Position not found\n      }\n      if (code < 0xD800 || code > 0xDFFF) {\n        return [str.charAt(i), i]; // Normal character, keeping 'i' the same\n      }\n    \n      // High surrogate (could change last hex to 0xDB7F to treat high private \n      // surrogates as single characters)\n      if (0xD800 <= code && code <= 0xDBFF) { \n        if (str.length <= (i+1))  {\n          throw 'High surrogate without following low surrogate';\n        }\n        var next = str.charCodeAt(i+1);\n          if (0xDC00 > next || next > 0xDFFF) {\n            throw 'High surrogate without following low surrogate';\n          }\n          return [str.charAt(i)+str.charAt(i+1), i+1];\n      }\n      // Low surrogate (0xDC00 <= code && code <= 0xDFFF)\n      if (i === 0) {\n        throw 'Low surrogate without preceding high surrogate';\n      }\n      var prev = str.charCodeAt(i-1);\n    \n      // (could change last hex to 0xDB7F to treat high private surrogates\n      // as single characters)\n      if (0xD800 > prev || prev > 0xDBFF) { \n        throw 'Low surrogate without preceding high surrogate';\n      }\n      // Return the next character instead (and increment)\n      return [str.charAt(i+1), i+1]; \n    }\n\n### Example: Fixing charAt to support non-Basic-Multilingual-Plane (BMP)\ncharacters\n\nWhile the example above may be more frequently useful for those wishing to\nsupport non-BMP characters (since it does not require the caller to know where\nany non-BMP character might appear), in the event that one _does_ wish, in\nchoosing a character by index, to treat the surrogate pairs within a string as\nthe single characters they represent, one can use the following:\n\n    \n    \n    function fixedCharAt (str, idx) {\n      var ret = '';\n      str += '';\n      var end = str.length;\n    \n      var surrogatePairs = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n      while ((surrogatePairs.exec(str)) != null) {\n        var li = surrogatePairs.lastIndex;\n        if (li - 2 < idx) {\n          idx++;\n        } else {\n          break;\n        }\n      }\n    \n      if (idx >= end || idx < 0) {\n        return '';\n      }\n    \n      ret += str.charAt(idx);\n    \n      if (/[\\uD800-\\uDBFF]/.test(ret) && /[\\uDC00-\\uDFFF]/.test(str.charAt(idx+1))) {\n        // Go one further, since one of the \"characters\" is part of a surrogate pair\n        ret += str.charAt(idx+1); \n      }\n      return ret;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.indexOf()`][3], [`String.prototype.lastIndexOf()`][4]\n  * [`String.prototype.split()`][5]\n  * [`String.prototype.charCodeAt()`][6]\n  * [`String.fromCodePoint()`][7]\n  * [`String.prototype.codePointAt()`][8]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.4\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.charat\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Array.prototype.unshift()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.unshift()", "content": "## Summary\n\nThe `**unshift()**` method adds one or more elements to the beginning of an\narray and returns the new length of the array.\n\n## Syntax\n\n    \n    \n    arr.unshift([element1[, ...[, elementN]]])\n\n### Parameters\n\n`element_N_`\n\n    The elements to add to the front of the array.\n\n### Returns\n\nThe new [`length`][1] property of the object upon which the method was called.\n\n## Description\n\nThe `unshift` method inserts the given values to the beginning of an array-\nlike object.\n\n`unshift` is intentionally generic; this method can be [called][2] or\n[applied][3] to objects resembling arrays. Objects which do not contain a\n`length` property reflecting the last in a series of consecutive, zero-based\nnumerical properties may not behave in any meaningful manner.\n\n## Examples\n\n    \n    \n    var arr = [1, 2];\n    \n    arr.unshift(0); // result of call is 3, the new array length\n    // arr is [0, 1, 2]\n    \n    arr.unshift(-2, -1); // = 5\n    // arr is [-2, -1, 0, 1, 2]\n    \n    arr.unshift([-3]);\n    // arr is [[-3], -2, -1, 0, 1, 2]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.unshift' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.unshift' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.push()`][7]\n  * [`Array.prototype.pop()`][8]\n  * [`Array.prototype.shift()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.13\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.unshift\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "String.prototype.split()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.split()", "content": "## Summary\n\nThe `**split()**` method splits a `String` object into an array of strings by\nseparating the string into substrings.\n\n## Syntax\n\n    \n    \n    _str_.split([_separator_][, _limit_])\n\n### Parameters\n\n`separator`\n\n     Specifies the character(s) to use for separating the string. The `separator` is treated as a string or a [regular expression][1]. If `separator` is omitted, the array returned contains one element consisting of the entire string. If `separator` is an empty string, `_str_` is converted to an array of characters.\n`limit`\n\n     Integer specifying a limit on the number of splits to be found. The `split` method still splits on every match of `separator`, but it truncates the returned array to at most `limit` elements.\n\n## Description\n\nThe `split` method returns the new array.\n\nWhen found, `separator` is removed from the string and the substrings are\nreturned in an array. If `separator` is omitted, the array contains one\nelement consisting of the entire string. If `separator` is an empty string,\n`_str_` is converted to an array of characters.\n\nIf `separator` is a regular expression that contains capturing parentheses,\nthen each time `separator` is matched, the results (including any undefined\nresults) of the capturing parentheses are spliced into the output array.\nHowever, not all browsers support this capability.\n\n**Note:**\u00a0When the string is empty, `split` returns an array containing one empty string, rather than an empty array.\n\n## Examples\n\n### Example: Using `split`\n\nThe following example defines a function that splits a string into an array of\nstrings using the specified separator. After splitting the string, the\nfunction displays messages indicating the original string (before the split),\nthe separator used, the number of elements in the array, and the individual\narray elements.\n\n    \n    \n    function splitString(stringToSplit, separator) {\n      var arrayOfStrings = stringToSplit.split(separator);\n    \n      print('The original string is: \"' + stringToSplit + '\"');\n      print('The separator is: \"' + separator + '\"');\n      print(\"The array has \" + arrayOfStrings.length + \" elements: \");\n    \n      for (var i=0; i < arrayOfStrings.length; i++)\n        print(arrayOfStrings[i] + \" / \");\n    }\n    \n    var tempestString = \"Oh brave new world that has such people in it.\";\n    var monthString = \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\";\n    \n    var space = \" \";\n    var comma = \",\";\n    \n    splitString(tempestString, space);\n    splitString(tempestString);\n    splitString(monthString, comma);\n    \n\nThis example produces the following output:\n\n    \n    \n    The original string is: \"Oh brave new world that has such people in it.\"\n    The separator is: \" \"\n    The array has 10 elements: Oh / brave / new / world / that / has / such / people / in / it. /\n    \n    The original string is: \"Oh brave new world that has such people in it.\"\n    The separator is: \"undefined\"\n    The array has 1 elements: Oh brave new world that has such people in it. /\n    \n    The original string is: \"Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec\"\n    The separator is: \",\"\n    The array has 12 elements: Jan / Feb / Mar / Apr / May / Jun / Jul / Aug / Sep / Oct / Nov / Dec /\n    \n\n### Example: Removing spaces from a string\n\nIn the following example, `split` looks for 0 or more spaces followed by a\nsemicolon followed by 0 or more spaces and, when found, removes the spaces\nfrom the string. `nameList` is the array returned as a result of `split`.\n\n    \n    \n    var names = \"Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand \";\n    \n    print(names);\n    \n    var re = /\\s*;\\s*/;\n    var nameList = names.split(re);\n    \n    print(nameList);\n    \n\nThis prints two lines; the first line prints the original string, and the\nsecond line prints the resulting array.\n\n    \n    \n    Harry Trump ;Fred Barney; Helen Rigby ; Bill Abel ;Chris Hand\n    Harry Trump,Fred Barney,Helen Rigby,Bill Abel,Chris Hand\n    \n\n### Example: Returning a limited number of splits\n\nIn the following example, `split` looks for 0 or more spaces in a string and\nreturns the first 3 splits that it finds.\n\n    \n    \n    var myString = \"Hello World. How are you doing?\";\n    var splits = myString.split(\" \", 3);\n    \n    print(splits);\n    \n\nThis script displays the following:\n\n    \n    \n    Hello,World.,How\n    \n\n### Example: Capturing parentheses\n\nIf `separator` contains capturing parentheses, matched results are returned in\nthe array.\n\n    \n    \n    var myString = \"Hello 1 word. Sentence number 2.\";\n    var splits = myString.split(/(\\d)/);\n    \n    print(splits);\n    \n\nThis script displays the following:\n\n    \n    \n    Hello ,1, word. Sentence number ,2,.\n    \n\n### Example: Reversing a String using `split`\n\n    \n    \n    var str = \"asdfghjkl\";\n    var strReverse = str.split(\"\").reverse().join(\"\"); //split() returns an array on which\n                                                       //reverse() and join() can be applied\n\n**Bonus:** use `===` operator to test if the original string was palindrome\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.split' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.split' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.charAt()`][5]\n  * [`String.prototype.indexOf()`][6]\n  * [`String.prototype.lastIndexOf()`][7]\n  * [`Array.prototype.join()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.14\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.split\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Array.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe array.\n\n## Syntax\n\n    \n    \n    arr.toSource()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in [`Array`][1] object, `toSource` returns the following string indicating that the source code is not available: \n    \n        function Array() {\n        [native code]\n    }\n    \n\n  * For instances of [`Array`][1], `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode. You can call `toSource` while debugging to examine the contents of an\narray.\n\n## Examples\n\n### Example: Examining the source code of an array\n\nTo examine the source code of an array:\n\n    \n    \n    var alpha = new Array('a', 'b', 'c');\n    \n    alpha.toSource();   //returns ['a', 'b', 'c']\n    \n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][3]\n  * [`Array.prototype.toString()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.splice()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.splice()", "content": "## Summary\n\nThe `**splice()**` method changes the content of an array, adding new elements\nwhile removing old elements.\n\n## Syntax\n\n    \n    \n    array.splice(index, howMany[, element1[, ...[, elementN]]])\n    array.splice(index) // SpiderMonkey/Firefox extension, in this case howMany=array.length-index\n    \n\n### Parameters\n\n`index`\n\n     Index at which to start changing the array. If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end.\n`howMany`\n\n     An integer indicating the number of old array elements to remove. If `howMany` is 0, no elements are removed. In this case, you should specify at least one new element. If `howMany` is greater than the number of elements left in the array starting at `index`, then all of the elements through the end of the array will be deleted. If no `howMany` parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after `index` are removed.\n`element_N_`\n\n     The elements to add to the array. If you don't specify any elements, `splice` simply removes elements from the array.\n\n### Returns\n\nAn array containing the removed elements. If only one element is removed, an\narray of one element is returned. If no elements are removed, an empty array\nis returned.\n\n## Description\n\nIf you specify a different number of elements to insert than the number you're\nremoving, the array will have a different length at the end of the call.\n\n## Examples\n\n### Example: Using `splice`\n\nThe following script illustrate the use of splice:\n\n    \n    \n    var myFish = ['angel', 'clown', 'mandarin', 'surgeon'];\n    \n    // removes 0 elements from index 2, and inserts 'drum'\n    var removed = myFish.splice(2, 0, 'drum');\n    // myFish is ['angel', 'clown', 'drum', 'mandarin', 'surgeon']\n    // removed is [], no elements removed\n    \n    // removes 1 element from index 3\n    removed = myFish.splice(3, 1);\n    // myFish is ['angel', 'clown', 'drum', 'surgeon']\n    // removed is ['mandarin']\n    \n    // removes 1 element from index 2, and inserts 'trumpet'\n    removed = myFish.splice(2, 1, 'trumpet');\n    // myFish is ['angel', 'clown', 'trumpet', 'surgeon']\n    // removed is ['drum']\n    \n    // removes 2 elements from index 0, and inserts 'parrot', 'anemone' and 'blue'\n    removed = myFish.splice(0, 2, 'parrot', 'anemone', 'blue');\n    // myFish is ['parrot', 'anemone', 'blue', 'trumpet', 'surgeon']\n    // removed is ['angel', 'clown']\n    \n    // removes 2 elements from index 3\n    removed = myFish.splice(3, Number.MAX_VALUE);\n    // myFish is ['parrot', 'anemone', 'blue']\n    // removed is ['trumpet', 'surgeon']\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.splice' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.splice' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Backward compatibility\n\nIn JavaScript 1.2 the `splice` method returns the element removed, if only one\nelement is removed (`howMany` parameter is 1); otherwise, the method returns\nan array containing the removed elements. Note that the last browser to use\nJavaScript 1.2 was Netscape Navigator 4, so you can depend on `splice` always\nreturning an array.\n\n## See also\n\n  * [`push`][3] / [`pop`][4]\u00a0\u2014 add/remove elements from the end of the array\n  * [`unshift`][5] / [`shift`][6]\u00a0\u2014 add/remove elements from the beginning of the array\n  * [`concat`][7]\u00a0\u2014 returns a new array comprised of this array joined with other array(s) and/or value(s)\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.12\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.splice\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "String.prototype.lastIndexOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/string", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string/string.prototype.lastindexof()", "content": "## Summary\n\nThe `**lastIndexOf()**` method returns the index within the calling `String`\nobject of the last occurrence of the specified value, or -1 if not found. The\ncalling string is searched backward, starting at `fromIndex`.\n\n## Syntax\n\n    \n    \n    _str_.lastIndexOf(_searchValue_[, _fromIndex_])\n\n### Parameters\n\n`searchValue`\n\n     A string representing the value to search for.\n`fromIndex`\n\n     The location within the calling string to start the search at, indexed from left to right. It can be any integer. The default value is `str.length`. If it is negative, it is treated as `0`. If `fromIndex > str.length`, `fromIndex` is treated as `str.length`.\n\n## Description\n\nCharacters in a string are indexed from left to right. The index of the first\ncharacter is 0, and the index of the last character is `stringName.length -\n1`.\n\n    \n    \n    \"canal\".lastIndexOf(\"a\")   // returns 3\n    \"canal\".lastIndexOf(\"a\",2) // returns 1\n    \"canal\".lastIndexOf(\"a\",0) // returns -1\n    \"canal\".lastIndexOf(\"x\")   // returns -1\n    \n\n### Case-sensitivity\n\nThe `lastIndexOf` method is case sensitive. For example, the following\nexpression returns -1:\n\n    \n    \n    \"Blue Whale, Killer Whale\".lastIndexOf(\"blue\"); // returns -1\n\n## Examples\n\n### Example: Using `indexOf` and `lastIndexOf`\n\nThe following example uses `indexOf` and `lastIndexOf` to locate values in the\nstring \"`Brave new world`\".\n\n    \n    \n    var anyString = \"Brave new world\";\n    \n    console.log(\"The index of the first w from the beginning is \" + anyString.indexOf(\"w\"));\n    // Displays 8\n    console.log(\"The index of the first w from the end is \" + anyString.lastIndexOf(\"w\")); \n    // Displays 10\n    \n    console.log(\"The index of 'new' from the beginning is \" + anyString.indexOf(\"new\"));   \n    // Displays 6\n    console.log(\"The index of 'new' from the end is \" + anyString.lastIndexOf(\"new\"));\n    // Displays 6\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String.prototype.lastIndexOf' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String.prototype.lastIndexOf' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.charAt()`][3]\n  * [`String.prototype.indexOf()`][4]\n  * [`String.prototype.split()`][5]\n  * [`Array.prototype.indexOf()`][6]\n  * [`Array.prototype.lastIndexOf()`][7]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5.4.8\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.lastindexof\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "String"], "type": "method"},
{"name": "Array.prototype.toLocaleString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.tolocalestring()", "content": "## Summary\n\nThe `**toLocaleString()**` method returns a string representing the elements\nof the array. The elements are converted to Strings using their\n`toLocaleString` methods and these Strings are separated by a locale-specific\nString (such as a comma \u201c,\u201d).\n\n## Syntax\n\n    \n    \n    arr.toLocaleString();\n\n## Description\n\nThe elements of the array are converted to strings using their toLocaleString\nmethods:\n\n  * `Object`: [`Object.prototype.toLocaleString()`][1]\n  * `Number`: [`Number.prototype.toLocaleString()`][2]\n  * `Date`: [`Date.prototype.toLocaleString()`][3]\n\n## Examples\n\n### Example: Using `toLocaleString`\n\n    \n    \n    var number = 1337;\n    var date = new Date();\n    var myArr = [number, date, 'foo'];\n    \n    var str = myArr.toLocaleString(); \n    \n    console.log(str); \n    // prints '1.337,6.12.2013 19:37:35,foo'\n    // if run in a German (de-DE) locale with timezone Europe/Berlin\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.toLocaleString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.toLocaleString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.toString()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.3\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.tolocalestring\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.sort()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.sort()", "content": "## Summary\n\nThe `**sort()**` method sorts the elements of an array _in place_ and returns\nthe array. The sort is not necessarily [stable][1]. The default sort order is\naccording to string Unicode code points.\n\n## Syntax\n\n    \n    \n    arr.sort([compareFunction])\n\n### Parameters\n\n`compareFunction`\n\n     Optional. Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's [Unicode][2] code point value, according to the string conversion of each element.\n\n## Description\n\nIf `compareFunction` is not supplied, elements are sorted by converting them\nto strings and comparing strings in Unicode code point order. For example,\n\"Cherry\" comes before \"banana\". In a numeric sort, 9 comes before 80, but\nbecause numbers are converted to strings, \"80\" comes before \"9\" in Unicode\norder.\n\n    \n    \n    var fruit = ['apples', 'bananas', 'Cherries'];\n    fruit.sort(); // ['Cherries', 'apples', 'bananas'];\n    \n    var scores = [1, 2, 10, 21]; \n    scores.sort(); // [1, 10, 2, 21]\n    \n    var things = ['word', 'Word', '1 Word', '2 Words'];\n    things.sort(); // ['1 Word', '2 Words', 'Word', 'word']\n    // In Unicode, numbers come before upper case letters, which come before lower case letters.\n    \n\nIf `compareFunction` is supplied, the array elements are sorted according to\nthe return value of the compare function. If `a` and `b` are two elements\nbeing compared, then:\n\n  * If `compareFunction(a, b)` is less than 0, sort `a` to a lower index than `b`, i.e. `a` comes first.\n  * If `compareFunction(a, b)` returns 0, leave `a` and `b` unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behaviour, and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\n  * If `compareFunction(a, b)` is greater than 0, sort `b` to a lower index than `a`.\n  * `compareFunction(a, b)` must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned then the sort order is undefined\n\nSo, the compare function has the following form:\n\n    \n    \n    function compare(a, b) {\n      if (a is less than b by some ordering criterion) {\n        return -1;\n      }\n      if (a is greater than b by the ordering criterion) {\n        return 1;\n      }\n      // a must be equal to b\n      return 0;\n    }\n    \n\nTo compare numbers instead of strings, the compare function can simply\nsubtract `b` from `a`. The following function will sort the array ascending:\n\n    \n    \n    function compareNumbers(a, b) {\n      return a - b;\n    }\n    \n\nThe `sort` method can be conveniently used with [function expressions][3] (and\n[closures][4]):\n\n    \n    \n    var numbers = [4, 2, 5, 1, 3];\n    numbers.sort(function(a, b) {\n      return a - b;\n    });\n    print(numbers);\n    \n\nObjects can be sorted given the value of one of their properties.\n\n    \n    \n    var items = [\n      { name: 'Edward', value: 21 },\n      { name: 'Sharpe', value: 37 },\n      { name: 'And', value: 45 },\n      { name: 'The', value: -12 },\n      { name: 'Magnetic' },\n      { name: 'Zeros', value: 37 }\n    ];\n    items.sort(function (a, b) {\n      if (a.name > b.name) {\n        return 1;\n      }\n      if (a.name < b.name) {\n        return -1;\n      }\n      // a must be equal to b\n      return 0;\n    });\n    \n\n## Examples\n\n### Example: Creating, displaying, and sorting an array\n\nThe following example creates four arrays and displays the original array,\nthen the sorted arrays. The numeric arrays are sorted without, then with, a\ncompare function.\n\n    \n    \n    var stringArray = ['Blue', 'Humpback', 'Beluga'];\n    var numericStringArray = ['80', '9', '700'];\n    var numberArray = [40, 1, 5, 200];\n    var mixedNumericArray = ['80', '9', '700', 40, 1, 5, 200];\n    \n    function compareNumbers(a, b) {\n      return a - b;\n    }\n    \n    // again, assumes a print function is defined\n    console.log('stringArray:', stringArray.join());\n    console.log('Sorted:', stringArray.sort());\n    \n    console.log('numberArray:', numberArray.join());\n    console.log('Sorted without a compare function:', numberArray.sort());\n    console.log('Sorted with compareNumbers:', numberArray.sort(compareNumbers));\n    \n    console.log('numericStringArray:', numericStringArray.join());\n    console.log('Sorted without a compare function:', numericStringArray.sort());\n    console.log('Sorted with compareNumbers:', numericStringArray.sort(compareNumbers));\n    \n    console.log('mixedNumericArray:', mixedNumericArray.join());\n    console.log('Sorted without a compare function:', mixedNumericArray.sort());\n    console.log('Sorted with compareNumbers:', mixedNumericArray.sort(compareNumbers));\n    \n\nThis example produces the following output. As the output shows, when a\ncompare function is used, numbers sort correctly whether they are numbers or\nnumeric strings.\n\n    \n    \n    stringArray: Blue,Humpback,Beluga\n    Sorted: Beluga,Blue,Humpback\n    \n    numberArray: 40,1,5,200\n    Sorted without a compare function: 1,200,40,5\n    Sorted with compareNumbers: 1,5,40,200\n    \n    numericStringArray: 80,9,700\n    Sorted without a compare function: 700,80,9\n    Sorted with compareNumbers: 9,80,700\n    \n    mixedNumericArray: 80,9,700,40,1,5,200\n    Sorted without a compare function: 1,200,40,5,700,80,9\n    Sorted with compareNumbers: 1,5,9,40,80,200,700\n    \n\n### Example: Sorting non-ASCII characters\n\nFor sorting strings with non-ASCII characters, i.e. strings with accented\ncharacters (e, \u00e9, \u00e8, a, \u00e4, etc.), strings from languages other than English:\nuse [`String.localeCompare`][5]. This function can compare those characters so\nthey appear in the right order.\n\n    \n    \n    var items = ['r\u00e9serv\u00e9', 'premier', 'clich\u00e9', 'communiqu\u00e9', 'caf\u00e9', 'adieu'];\n    items.sort(function (a, b) {\n      return a.localeCompare(b);\n    });\n    \n    // items is ['adieu', 'caf\u00e9', 'clich\u00e9', 'communiqu\u00e9', 'premier', 'r\u00e9serv\u00e9']\n    \n\n### Example: Sorting maps\n\nThe `compareFunction` can be invoked multiple times per element within the\narray. Depending on the `compareFunction`'s nature, this may yield a high\noverhead. The more work a `compareFunction` does and the more elements there\nare to sort, the wiser it may be to consider using a map for sorting. The idea\nis to walk the array once to extract the actual values used for sorting into a\ntemporary array, sort the temporary array and then walk the temporary array to\nbring the original array into the right order.\n\n    \n    \n    // the array to be sorted\n    var list = ['Delta', 'alpha', 'CHARLIE', 'bravo'];\n    \n    // temporary holder of position and sort-value\n    var map = list.map(function(e, i) {\n      return { index: i, value: e.toLowerCase() };\n    })\n    \n    // sorting the map containing the reduced values\n    map.sort(function(a, b) {\n      return +(a.value > b.value) || +(a.value === b.value) - 1;\n    });\n    \n    // container for the resulting order\n    var result = map.map(function(e){\n      return list[e.index];\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.sort' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.sort' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.reverse()`][9]\n  * [`String.prototype.localeCompare()`][5]\n\n[1]: https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Unicode\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Closures\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.11\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.sort\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.slice()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.slice()", "content": "## Summary\n\nThe `**slice()**` method returns a shallow copy of a portion of an array into\na new array object.\n\n## Syntax\n\n    \n    \n    arr.slice([begin[, end]])\n\n## Parameters\n\n`begin`\n\n     Zero-based index at which to begin extraction.\n     As a negative index, `begin` indicates an offset from the end of the sequence. `slice(-2)` extracts the last two elements in the sequence.\n     If `begin` is omitted, `slice` begins from index `0`.\n`end`\n\n     Zero-based index at which to end extraction. `slice` extracts up to but not including `end`.\n     `slice(1,4)` extracts the second element up to the fourth element (elements indexed 1, 2, and 3).\n     As a negative index, `end` indicates an offset from the end of the sequence. `slice(2,-1)` extracts the third element through the second-to-last element in the sequence.\n     If `end` is omitted, `slice` extracts to the end of the sequence (`arr.length`)`.`\n\n## Description\n\n`slice` does not alter the original array, but returns a new \"one level deep\"\ncopy that contains copies of the elements sliced from the original array.\nElements of the original array are copied into the new array as follows:\n\n  * For object references (and not the actual object), `slice` copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.\n  * For strings and numbers (not [`String`][1] and [`Number`][2] objects), `slice` copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array.\n\nIf a new element is added to either array, the other array is not affected.\n\n## Examples\n\n### Example: Return a portion of an existing array\n\n    \n    \n    // Our good friend the citrus from fruits example\n    var fruits = ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'];\n    var citrus = fruits.slice(1, 3);\n    \n    // citrus contains ['Orange','Lemon']\n    \n\n### Example: Using `slice`\n\nIn the following example, `slice` creates a new array, `newCar`, from `myCar`.\nBoth include a reference to the object `myHonda`. When the color of `myHonda`\nis changed to purple, both arrays reflect the change.\n\n    \n    \n    // Using slice, create newCar from myCar.\n    var myHonda = { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } };\n    var myCar = [myHonda, 2, 'cherry condition', 'purchased 1997'];\n    var newCar = myCar.slice(0, 2);\n    \n    // Display the values of myCar, newCar, and the color of myHonda\n    //  referenced from both arrays.\n    console.log('myCar = ' + myCar.toSource());\n    console.log('newCar = ' + newCar.toSource());\n    console.log('myCar[0].color = ' + myCar[0].color);\n    console.log('newCar[0].color = ' + newCar[0].color);\n    \n    // Change the color of myHonda.\n    myHonda.color = 'purple';\n    console.log('The new color of my Honda is ' + myHonda.color);\n    \n    // Display the color of myHonda referenced from both arrays.\n    console.log('myCar[0].color = ' + myCar[0].color);\n    console.log('newCar[0].color = ' + newCar[0].color);\n    \n\nThis script writes:\n\n    \n    \n    myCar = [{color:'red', wheels:4, engine:{cylinders:4, size:2.2}}, 2,\n             'cherry condition', 'purchased 1997']\n    newCar = [{color:'red', wheels:4, engine:{cylinders:4, size:2.2}}, 2]\n    myCar[0].color = red \n    newCar[0].color = red\n    The new color of my Honda is purple\n    myCar[0].color = purple\n    newCar[0].color = purple\n    \n\n## Array-like objects\n\n`slice` method can also be called to convert Array-like objects / collections\nto a new Array. You just bind the method to the object. The [`arguments`][3]\ninside a function is an example of an 'array-like object'.\n\n    \n    \n    function list() {\n      return Array.prototype.slice.call(arguments, 0);\n    }\n    \n    var list1 = list(1, 2, 3); // [1, 2, 3]\n    \n\nBinding can be done with the .`call` function of [`Function.prototype`][4] and\nit can also be reduced using [`].slice.call(arguments)` instead of\n`Array.prototype.slice.call`. Anyway, it can be simplified using [`bind`][5].\n\n    \n    \n    var unboundSlice = Array.prototype.slice;\n    var slice = Function.prototype.call.bind(unboundSlice);\n    \n    function list() {\n      return slice(arguments, 0);\n    }\n    \n    var list1 = list(1, 2, 3); // [1, 2, 3]\n    \n\n## Streamlining cross-browser behavior\n\nAlthough host objects (such as DOM objects) are not required by spec to follow\nthe Mozilla behavior when converted by `Array.prototype.slice` and IE < 9 does\nnot do so, versions of IE starting with version 9 do allow this, \u201cshimming\u201d it\ncan allow reliable cross-browser behavior. As long as other modern browsers\ncontinue to support this ability, as currently do IE, Mozilla, Chrome, Safari,\nand Opera, developers reading (DOM-supporting) slice code relying on this shim\nwill not be misled by the semantics; they can safely rely on the semantics to\nprovide the now apparently _de facto_ standard behavior. (The shim also fixes\nIE to work with the second argument of `slice()` being an explicit\n[`null`][6]/[`undefined`][7] value as earlier versions of IE also did not\nallow but all modern browsers, including IE >= 9, now do.)\n\n    \n    \n    /**\n     * Shim for \"fixing\" IE's lack of support (IE < 9) for applying slice\n     * on host objects like NamedNodeMap, NodeList, and HTMLCollection\n     * (technically, since host objects have been implementation-dependent,\n     * at least before ES6, IE hasn't needed to work this way).\n     * Also works on strings, fixes IE < 9 to allow an explicit undefined\n     * for the 2nd argument (as in Firefox), and prevents errors when\n     * called on other DOM objects.\n     */\n    (function () {\n      'use strict';\n      var _slice = Array.prototype.slice;\n    \n      try {\n        // Can't be used with DOM elements in IE < 9\n        _slice.call(document.documentElement);\n      } catch (e) { // Fails in IE < 9\n        // This will work for genuine arrays, array-like objects, \n        // NamedNodeMap (attributes, entities, notations),\n        // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),\n        // and will not fail on other DOM objects (as do DOM elements in IE < 9)\n        Array.prototype.slice = function(begin, end) {\n          // IE < 9 gets unhappy with an undefined end argument\n          end = (typeof end !== 'undefined') ? end : this.length;\n    \n          // For native Array objects, we use the native slice function\n          if (Object.prototype.toString.call(this) === '[object Array]'){\n            return _slice.call(this, begin, end); \n          }\n    \n          // For array like object we handle it ourselves.\n          var i, cloned = [],\n            size, len = this.length;\n    \n          // Handle negative value for \"begin\"\n          var start = begin || 0;\n          start = (start >= 0) ? start: len + start;\n    \n          // Handle negative value for \"end\"\n          var upTo = (end) ? end : len;\n          if (end < 0) {\n            upTo = len + end;\n          }\n    \n          // Actual expected size of the slice\n          size = upTo - start;\n    \n          if (size > 0) {\n            cloned = new Array(size);\n            if (this.charAt) {\n              for (i = 0; i < size; i++) {\n                cloned[i] = this.charAt(start + i);\n              }\n            } else {\n              for (i = 0; i < size; i++) {\n                cloned[i] = this[start + i];\n              }\n            }\n          }\n    \n          return cloned;\n        };\n      }\n    }());\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.slice' in that specification.][8]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.slice' in that specification.][9]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][10].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function.prototype.call()`][11]\n  * [`Function.prototype.bind()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[8]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.10\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.slice\n\n[10]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the specified array\nand its elements.\n\n## Syntax\n\n    \n    \n    arr.toString()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe [`Array`][1] object overrides the `toString` method of [`Object`][2]. For\nArray objects, the `toString` method joins the array and returns one string\ncontaining each array element separated by commas. For example, the following\ncode creates an array and uses `toString` to convert the array to a string.\n\n    \n    \n    var monthNames = ['Jan', 'Feb', 'Mar', 'Apr'];\n    var myVar = monthNames.toString(); // assigns 'Jan,Feb,Mar,Apr' to myVar.\n    \n\nJavaScript calls the `toString` method automatically when an array is to be\nrepresented as a text value or when an array is referred to in a string\nconcatenation.\n\n### ECMAScript 5 semantics\n\nStarting in JavaScript 1.8.5 (Firefox 4), and consistent with ECMAScript 5th\nedition semantics, the `toString()` method is generic and can be used with any\nobject. If the object has a `join()` method, it will be called and that value\nwill be returned. Otherwise [`Object.prototype.toString()`][3] will be called,\nand the resulting value will be returned.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See Also\n\n  * [`Object.prototype.toSource()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.tostring\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.shift()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.shift()", "content": "## Summary\n\nThe `**shift()**` method removes the **first** element from an array and\nreturns that element. This method changes the length of the array.\n\n## Syntax\n\n    \n    \n    arr.shift()\n\n## Description\n\nThe `shift` method removes the element at the zeroeth index and shifts the\nvalues at consecutive indexes down, then returns the removed value. If the\n[`length`][1] property is 0, [`undefined`][2] is returned.\n\n`shift` is intentionally generic; this method can be [called][3] or\n[applied][4] to objects resembling arrays. Objects which do not contain a\n`length` property reflecting the last in a series of consecutive, zero-based\nnumerical properties may not behave in any meaningful manner.\n\n## Examples\n\n### Example: Removing an element from an array\n\nThe following code displays the `myFish` array before and after removing its\nfirst element. It also displays the removed element:\n\n    \n    \n    var myFish = ['angel', 'clown', 'mandarin', 'surgeon'];\n    \n    console.log('myFish before: ' + myFish);\n    \n    var shifted = myFish.shift();\n    \n    console.log('myFish after: ' + myFish);\n    console.log('Removed this element: ' + shifted);\n    \n\nThis example displays the following:\n\n    \n    \n    myFish before: angel,clown,mandarin,surgeon\n    myFish after: clown,mandarin,surgeon\n    Removed this element: angel\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.shift' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.shift' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.push()`][8]\n  * [`Array.prototype.pop()`][9]\n  * [`Array.prototype.unshift()`][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.9\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.shift\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.reduceRight()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.reduceright()", "content": "## Summary\n\nThe `**reduceRight()**` method applies a function against an accumulator and\neach value of the array (from right-to-left) has to reduce it to a single\nvalue.\n\n## Syntax\n\n    \n    \n    arr.reduceRight(callback[, initialValue])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking four arguments: \n\n`previousValue`\n\n     The value previously returned in the last invocation of the callback, or `initialValue`, if supplied. (See below.)\n`currentValue`\n\n     The current element being processed in the array.\n`index`\n\n     The index of the current element being processed in the array.\n`array`\n\n     The array `reduce` was called upon.\n`initialValue`\n\n     Optional. Object to use as the first argument to the first call of the `callback`.\n\n## Description\n\n`reduceRight` executes the callback function once for each element present in\nthe array, excluding holes in the array, receiving four arguments: the initial\nvalue (or value from the previous callback call), the value of the current\nelement, the current index, and the array over which iteration is occurring.\n\nThe call to the reduceRight `callback` would look something like this:\n\n    \n    \n    array.reduceRight(function(previousValue, currentValue, index, array) {\n      // ...\n    });\n    \n\nThe first time the function is called, the `previousValue` and `currentValue`\ncan be one of two values. If an `initialValue` was provided in the call to\n`reduceRight`, then `previousValue` will be equal to `initialValue` and\n`currentValue` will be equal to the last value in the array. If no\n`initialValue` was provided, then `previousValue` will be equal to the last\nvalue in the array and `currentValue` will be equal to the second-to-last\nvalue.\n\nIf the array is empty and no `initialValue `was provided, [`TypeError`][1]\nwould be thrown. If the array has only one element (regardless of position)\nand no `initialValue `was provided, or if `initialValue` is provided but the\narray is empty, the solo value would be returned without calling `callback`.\n\nSome example run-throughs of the function would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    });\n    \n\nThe callback would be invoked four times, with the arguments and return values\nin each call being as follows:  \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`7`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`7`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`9`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`9`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr> </table>\n\nThe value returned by `reduceRight` would be that of the last callback\ninvocation (`10`).\n\nAnd if you were to provide an `initialValue`, the result would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    }, 10);\n      \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`14`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`14`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`17`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`17`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`19`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`19`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfifth call\n\n</th>  \n<td>\n\n`20`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr> </table>\n\nThe value returned by `reduceRight` this time would be, of course, `20`.\n\n## Examples\n\n### Example: Sum up all values within an array\n\n    \n    \n    var total = [0, 1, 2, 3].reduceRight(function(a, b) {\n      return a + b;\n    });\n    // total == 6\n    \n\n### Example: Flatten an array of arrays\n\n    \n    \n    var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {\n        return a.concat(b);\n    }, []);\n    // flattened is [4, 5, 2, 3, 0, 1]\n    \n\n## Polyfill\n\n`reduceRight` was added to the ECMA-262 standard in the 5th edition; as such\nit may not be present in all implementations of the standard. You can work\naround this by inserting the following code at the beginning of your scripts,\nallowing use of `reduceRight` in implementations which do not natively support\nit.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.22\n    // Reference: http://es5.github.io/#x15.4.4.22\n    if ('function' !== typeof Array.prototype.reduceRight) {\n      Array.prototype.reduceRight = function(callback /*, initialValue*/) {\n        'use strict';\n        if (null === this || 'undefined' === typeof this) {\n          throw new TypeError('Array.prototype.reduce called on null or undefined' );\n        }\n        if ('function' !== typeof callback) {\n          throw new TypeError(callback + ' is not a function');\n        }\n        var t = Object(this), len = t.length >>> 0, k = len - 1, value;\n        if (arguments.length >= 2) {\n          value = arguments[1];\n        } else {\n          while (k >= 0 && !k in t) {\n            k--;\n          }\n          if (k < 0) {\n            throw new TypeError('Reduce of empty array with no initial value');\n          }\n          value = t[k--];\n        }\n        for (; k >= 0; k--) {\n          if (k in t) {\n            value = callback(value, t[k], k, t);\n          }\n        }\n        return value;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.reduceRight' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.reduceRight' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.0][5] (1.9)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.reduce()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.22\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reduceright\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/3\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.keys()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.keys()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**keys()**` method returns a new `**Array Iterator**` that contains the\nkeys for each index in the array.\n\n## Syntax\n\n    \n    \n    arr.keys()\n\n## Examples\n\n    \n    \n    var arr = ['a', 'b', 'c'];\n    var eArr = arr.keys();\n    \n    console.log(eArr.next().value); // 0\n    console.log(eArr.next().value); // 1\n    console.log(eArr.next().value); // 2\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.keys' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[28][2] (28)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n28.0 (28)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.entries()`][3]\n  * [`Array.prototype.every()`][4]\n  * [`Array.prototype.some()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.keys\n\n[2]: /en-US/Firefox/Releases/28\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.join()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.join()", "content": "## Summary\n\nThe `**join()**` method joins all elements of an array into a string.\n\n## Syntax\n\n    \n    \n    str = arr.join([separator = ','])\n\n### Parameters\n\n`separator`\n\n    Optional. Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma.\n\n## Description\n\nThe string conversions of all array elements are joined into one string.\n\n## Examples\n\n### Example: Joining an array three different ways\n\nThe following example creates an array, `a`, with three elements, then joins\nthe array three times: using the default separator, then a comma and a space,\nand then a plus.\n\n    \n    \n    var a = new Array('Wind', 'Rain', 'Fire');\n    var myVar1 = a.join();      // assigns 'Wind,Rain,Fire' to myVar1\n    var myVar2 = a.join(', ');  // assigns 'Wind, Rain, Fire' to myVar2\n    var myVar3 = a.join(' + '); // assigns 'Wind + Rain + Fire' to myVar3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.join' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.join' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`String.prototype.split()`][4]\n  * [`Array.prototype.toString()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.join\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.reverse()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.reverse()", "content": "## Summary\n\nThe `**reverse()**` method reverses an array in place. The first array element\nbecomes the last and the last becomes the first.\n\n## Syntax\n\n    \n    \n    arr.reverse()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `reverse` method transposes the elements of the calling array object in\nplace, mutating the array, and returning a reference to the array.\n\n## Examples\n\n### Example: Reversing the elements in an array\n\nThe following example creates an array `myArray`, containing three elements,\nthen reverses the array.\n\n    \n    \n    var myArray = ['one', 'two', 'three'];\n    myArray.reverse(); \n    \n    console.log(myArray) // ['three', 'two', 'one']\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.reverse' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.reverse' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.join()`][3]\n  * [`Array.prototype.sort()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.8\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reverse\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.reduce()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.reduce()", "content": "## Summary\n\nThe `**reduce()**` method applies a function against an accumulator and each\nvalue of the array (from left-to-right) has to reduce it to a single value.\n\n## Syntax\n\n    \n    \n    arr.reduce(callback[, initialValue])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking four arguments: \n\n`previousValue`\n\n     The value previously returned in the last invocation of the callback, or `initialValue`, if supplied. (See below.)\n`currentValue`\n\n     The current element being processed in the array.\n`index`\n\n     The index of the current element being processed in the array.\n`array`\n\n     The array `reduce` was called upon.\n`initialValue`\n\n     Optional. Object to use as the first argument to the first call of the `callback`.\n\n## Description\n\n`reduce` executes the `callback` function once for each element present in the\narray, excluding holes in the array, receiving four arguments: the initial\nvalue (or value from the previous `callback` call), the value of the current\nelement, the current index, and the array over which iteration is occurring.\n\nThe first time the callback is called, `previousValue` and `currentValue` can\nbe one of two values. If `initialValue` is provided in the call to `reduce`,\nthen `previousValue` will be equal to `initialValue` and `currentValue` will\nbe equal to the first value in the array. If no `initialValue` was provided,\nthen `previousValue` will be equal to the first value in the array and\n`currentValue` will be equal to the second.\n\nIf the array is empty and no `initialValue` was provided, [`TypeError`][1]\nwould be thrown. If the array has only one element (regardless of position)\nand no `initialValue` was provided, or if `initialValue` is provided but the\narray is empty, the solo value would be returned without calling `callback`.\n\nSuppose the following use of `reduce` occurred:\n\n    \n    \n    [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    });\n    \n\nThe callback would be invoked four times, with the arguments and return values\nin each call being as follows:  \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`1`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`3`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`6`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`6`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr> </table>\n\nThe value returned by `reduce` would be that of the last callback invocation\n(`10`).\n\nIf you were to provide an initial value as the second argument to `reduce`,\nthe result would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    }, 10);\n      \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`11`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`11`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`13`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`13`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`16`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfifth call\n\n</th>  \n<td>\n\n`16`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr> </table>\n\nThe value returned by `reduce` this time would be, of course, `20`.\n\n## Examples\n\n### Example: Sum up all values within an array\n\n    \n    \n    var total = [0, 1, 2, 3].reduce(function(a, b) {\n      return a + b;\n    });\n    // total == 6\n    \n\n### Example: Flatten an array of arrays\n\n    \n    \n    var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n      return a.concat(b);\n    });\n    // flattened is [0, 1, 2, 3, 4, 5]\n    \n\n## Polyfill\n\n`Array.prototype.reduce` was added to the ECMA-262 standard in the 5th\nedition; as such it may not be present in all implementations of the standard.\nYou can work around this by inserting the following code at the beginning of\nyour scripts, allowing use of `reduce` in implementations which do not\nnatively support it.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.21\n    // Reference: http://es5.github.io/#x15.4.4.21\n    if (!Array.prototype.reduce) {\n      Array.prototype.reduce = function(callback /*, initialValue*/) {\n        'use strict';\n        if (this == null) {\n          throw new TypeError('Array.prototype.reduce called on null or undefined');\n        }\n        if (typeof callback !== 'function') {\n          throw new TypeError(callback + ' is not a function');\n        }\n        var t = Object(this), len = t.length >>> 0, k = 0, value;\n        if (arguments.length == 2) {\n          value = arguments[1];\n        } else {\n          while (k < len && ! k in t) {\n            k++; \n          }\n          if (k >= len) {\n            throw new TypeError('Reduce of empty array with no initial value');\n          }\n          value = t[k++];\n        }\n        for (; k < len; k++) {\n          if (k in t) {\n            value = callback(value, t[k], k, t);\n          }\n        }\n        return value;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.reduce' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.reduce' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.0][5] (1.9)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.reduceRight()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reduce\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/3\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.push()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.push()", "content": "## Summary\n\nThe `**push()**` method adds one or more elements to the end of an array and\nreturns the new length of the array.\n\n## Syntax\n\n    \n    \n    arr.push(element1, ..., elementN)\n\n### Parameters\n\n`element_N_`\n\n    The elements to add to the end of the array.\n\n### Returns\n\nThe new [`length`][1] property of the object upon which the method was called.\n\n## Description\n\nThe `push` method appends values to an array.\n\n`push` is intentionally generic. This method can be used with [`call()`][2] or\n[`apply()`][3] on objects resembling arrays. The `push` method relies on a\n`length` property to determine where to start inserting the given values. If\nthe `length` property cannot be converted into a number, the index used is 0.\nThis includes the possibility of `length` being nonexistent, in which case\n`length` will also be created.\n\nThe only native, array-like objects are [strings][4], although they are not\nsuitable in applications of this method, as strings are immutable.\n\n## Examples\n\n### Example: Adding elements to an array\n\nThe following code creates the `sports` array containing two elements, then\nappends two elements to it. The `total` variable contains the new length of\nthe array.\n\n    \n    \n    var sports = ['soccer', 'baseball'];\n    var total = sports.push('football', 'swimming');\n    \n    console.log(sports); // ['soccer', 'baseball', 'football', 'swimming']\n    console.log(total);  // 4\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.push' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.push' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.pop()`][7]\n  * [`Array.prototype.shift()`][8]\n  * [`Array.prototype.unshift()`][9]\n  * [`Array.prototype.concat()`][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.7\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.push\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.pop()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.pop()", "content": "## Summary\n\nThe `**pop()**` method removes the **last** element from an array and returns\nthat element.\n\n## Syntax\n\n    \n    \n    arr.pop()\n\n## Description\n\nThe `pop` method removes the last element from an array and returns that value\nto the caller.\n\n`pop` is intentionally generic; this method can be [called][1] or [applied][2]\nto objects resembling arrays. Objects which do not contain a `length` property\nreflecting the last in a series of consecutive, zero-based numerical\nproperties may not behave in any meaningful manner.\n\nIf you call `pop()` on an empty array, it returns an [`undefined`][3] value.\n\n## Examples\n\n### Example: Removing the last element of an array\n\nThe following code creates the `myFish` array containing four elements, then\nremoves its last element.\n\n    \n    \n    var myFish = ['angel', 'clown', 'mandarin', 'sturgeon'];\n    \n    console.log(myFish); // ['angel', 'clown', 'mandarin', 'sturgeon']\n    \n    var popped = myFish.pop();\n    \n    console.log(myFish); // ['angel', 'clown', 'mandarin' ] \n    \n    console.log(popped); // 'sturgeon'\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.pop' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.pop' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.push()`][7]\n  * [`Array.prototype.shift()`][8]\n  * [`Array.prototype.unshift()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.6\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.pop\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.lastIndexOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.lastindexof()", "content": "## Summary\n\nThe `**lastIndexOf()**` method returns the last index at which a given element\ncan be found in the array, or -1 if it is not present. The array is searched\nbackwards, starting at `fromIndex`.\n\n## Syntax\n\n    \n    \n    arr.lastIndexOf(searchElement[, fromIndex = arr.length])\n\n## Parameters\n\n`searchElement`\n\n    Element to locate in the array.\n`fromIndex`\n\n    Optional. The index at which to start searching backwards. Defaults to the array's length, i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched.\n\n## Description\n\n`lastIndexOf` compares `searchElement` to elements of the Array using [strict\nequality][1] (the same method used by the ===, or triple-equals, operator).\n\n## Examples\n\n### Example: Using `lastIndexOf`\n\nThe following example uses `lastIndexOf` to locate values in an array.\n\n    \n    \n    var array = [2, 5, 9, 2];\n    var index = array.lastIndexOf(2);\n    // index is 3\n    index = array.lastIndexOf(7);\n    // index is -1\n    index = array.lastIndexOf(2, 3);\n    // index is 3\n    index = array.lastIndexOf(2, 2);\n    // index is 0\n    index = array.lastIndexOf(2, -2);\n    // index is 0\n    index = array.lastIndexOf(2, -1);\n    // index is 3\n    \n\n### Example: Finding all the occurrences of an element\n\nThe following example uses `lastIndexOf` to find all the indices of an element\nin a given array, using [`push`][2] to add them to another array as they are\nfound.\n\n    \n    \n    var indices = [];\n    var array = ['a', 'b', 'a', 'c', 'a', 'd'];\n    var element = 'a';\n    var idx = array.lastIndexOf(element);\n    while (idx\u00a0!= -1) {\n      indices.push(idx);\n      idx = (idx > 0\u00a0? array.lastIndexOf(element, idx - 1)\u00a0: -1);\n    }\n    \n    console.log(indices);\n    // [4, 2, 0]\n    \n\nNote that we have to handle the case `idx == 0` separately here because the\nelement will always be found regardless of the `fromIndex` parameter if it is\nthe first element of the array. This is different from the [`indexOf`][3]\nmethod.\n\n## Polyfill\n\n`lastIndexOf` was added to the ECMA-262 standard in the 5th edition; as such\nit may not be present in other implementations of the standard. You can work\naround this by inserting the following code at the beginning of your scripts,\nallowing use of `lastIndexOf` in implementations which do not natively support\nit. This algorithm is exactly the one specified in ECMA-262, 5th edition,\nassuming\u00a0[`Object`][4], [`TypeError`][5], [`Number`][6], [`Math.floor`][7],\n[`Math.abs`][8], and [`Math.min`][9] have their original values.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.15\n    // Reference: http://es5.github.io/#x15.4.4.15\n    if (!Array.prototype.lastIndexOf) {\n      Array.prototype.lastIndexOf = function(searchElement /*, fromIndex*/) {\n        'use strict';\n    \n        if (this === void 0 || this === null) {\n          throw new TypeError();\n        }\n    \n        var n, k,\n          t = Object(this),\n          len = t.length >>> 0;\n        if (len === 0) {\n          return -1;\n        }\n    \n        n = len - 1;\n        if (arguments.length > 1) {\n          n = Number(arguments[1]);\n          if (n != n) {\n            n = 0;\n          }\n          else if (n != 0 && n != (1 / 0) && n != -(1 / 0)) {\n            n = (n > 0 || -1) * Math.floor(Math.abs(n));\n          }\n        }\n    \n        for (k = n >= 0 ? Math.min(n, len - 1) : len - Math.abs(n); k >= 0; k--) {\n          if (k in t && t[k] === searchElement) {\n            return k;\n          }\n        }\n        return -1;\n      };\n    }\n    \n\nAgain, note that this implementation aims for absolute compatibility with\n`lastIndexOf` in Firefox and the SpiderMonkey JavaScript engine, including in\nseveral cases which are arguably edge cases. If you intend to use this in\nreal-world applications, you may be able to calculate `from` with less\ncomplicated code if you ignore those cases.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.lastIndexOf' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.lastIndexOf' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.indexOf()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Using_the_Equality_Operators\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.15\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.lastindexof\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.fill()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.fill()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**fill()**` method fills all the elements of an array from a start index\nto an end index with a static value.\n\n## Syntax\n\n    \n    \n    arr.fill(value[, start = 0[, end = this.length]])\n    \n\n### Parameters\n\n`value`\n\n    Value to fill an array.\n`start`\n\n    Optional. Start index.\n`end`\n\n    Optional. End index.\n\n## Description\n\nThe elements interval to fill is [`start`, `end`).\n\nThe **`fill`** method takes up to three arguments `value`, `start` and `end`.\nThe `start` and `end` arguments are optional with default values of `0` and\nthe `length` of the `this` object.\n\nIf `start` is negative, it is treated as `length+start` where `length` is the\nlength of the array. If `end` is negative, it is treated as `length+end`.\n\nThe **fill** function is intentionally generic, it does not require that its\n`this` value be an Array object.\n\nThe **fill** method is a mutable method, it will change `this` object itself,\nand return it, not just return a copy of it.\n\n## Examples\n\n    \n    \n    [1, 2, 3].fill(4)               // [4, 4, 4]\n    [1, 2, 3].fill(4, 1)            // [1, 4, 4]\n    [1, 2, 3].fill(4, 1, 2)         // [1, 4, 3]\n    [1, 2, 3].fill(4, 1, 1)         // [1, 2, 3]\n    [1, 2, 3].fill(4, -3, -2)       // [4, 2, 3]\n    [1, 2, 3].fill(4, NaN, NaN)     // [1, 2, 3]\n    [].fill.call({ length: 3 }, 4)  // {0: 4, 1: 4, 2: 4, length: 3}\n    \n\n## Polyfill\n\n    \n    \n    if (!Array.prototype.fill) {\n      Array.prototype.fill = function(value) {\n    \n        // Steps 1-2.\n        if (this == null) {\n          throw new TypeError('this is null or not defined');\n        }\n    \n        var O = Object(this);\n    \n        // Steps 3-5.\n        var len = O.length >>> 0;\n    \n        // Steps 6-7.\n        var start = arguments[1];\n        var relativeStart = start >> 0;\n    \n        // Step 8.\n        var k = relativeStart < 0 ?\n          Math.max(len + relativeStart, 0) :\n          Math.min(relativeStart, len);\n    \n        // Steps 9-10.\n        var end = arguments[2];\n        var relativeEnd = end === undefined ?\n          len : end >> 0;\n    \n        // Step 11.\n        var final = relativeEnd < 0 ?\n          Math.max(len + relativeEnd, 0) :\n          Math.min(relativeEnd, len);\n    \n        // Step 12.\n        while (k < final) {\n          O[k] = value;\n          k++;\n        }\n    \n        // Step 13.\n        return O;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.fill' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[31][3] (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31.0 (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.fill\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/Firefox/Releases/31\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.indexOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.indexof()", "content": "## Summary\n\nThe `**indexOf()**` method returns the first index at which a given element\ncan be found in the array, or -1 if it is not present.\n\n## Syntax\n\n    \n    \n    arr.indexOf(searchElement[, fromIndex = 0])\n\n### Parameters\n\n`searchElement`\n\n    Element to locate in the array.\n`fromIndex`\n\n    The index to start the search at. If the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. If the calculated index is less than 0, then the whole array will be searched. Default: 0 (Entire array is searched).\n\n## Description\n\n`indexOf` compares `searchElement` to elements of the Array using [strict\nequality][1] (the same method used by the ===, or triple-equals, operator).\n\n## Examples\n\n### Example: Using `indexOf`\n\nThe following example uses `indexOf` to locate values in an array.\n\n    \n    \n    var array = [2, 5, 9];\n    var index = array.indexOf(2);\n    // index is 0\n    index = array.indexOf(7);\n    // index is -1\n    index = array.indexOf(9, 2);\n    // index is 2\n    index = array.indexOf(2, -1);\n    // index is -1\n    index = array.indexOf(2, -3);\n    // index is 0\n    \n\n### Example: Finding all the occurrences of an element\n\nThe following example uses `indexOf` to find all the indices of an element in\na given array, using [`push`][2] to add them to another array as they are\nfound.\n\n    \n    \n    var indices = [];\n    var array = ['a', 'b', 'a', 'c', 'a', 'd'];\n    var element = 'a';\n    var idx = array.indexOf(element);\n    while (idx != -1) {\n      indices.push(idx);\n      idx = array.indexOf(element, idx + 1);\n    }\n    console.log(indices);\n    // [0, 2, 4]\n    \n\n## Polyfill\n\n`indexOf` was added to the ECMA-262 standard in the 5th edition; as such it\nmay not be present in all browsers. You can work around this by utilizing the\nfollowing code at the beginning of your scripts. This will allow you to use\n`indexOf` when there is still no native support. This algorithm matches the\none specified in ECMA-262, 5th edition, assuming [`TypeError`][3] and\n[`Math.abs`][4] have their original values.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.14\n    // Reference: http://es5.github.io/#x15.4.4.14\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function(searchElement, fromIndex) {\n    \n        var k;\n    \n        // 1. Let O be the result of calling ToObject passing\n        //    the this value as the argument.\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n    \n        var O = Object(this);\n    \n        // 2. Let lenValue be the result of calling the Get\n        //    internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n    \n        // 4. If len is 0, return -1.\n        if (len === 0) {\n          return -1;\n        }\n    \n        // 5. If argument fromIndex was passed let n be\n        //    ToInteger(fromIndex); else let n be 0.\n        var n = +fromIndex || 0;\n    \n        if (Math.abs(n) === Infinity) {\n          n = 0;\n        }\n    \n        // 6. If n >= len, return -1.\n        if (n >= len) {\n          return -1;\n        }\n    \n        // 7. If n >= 0, then Let k be n.\n        // 8. Else, n<0, Let k be len - abs(n).\n        //    If k is less than 0, then let k be 0.\n        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n    \n        // 9. Repeat, while k < len\n        while (k < len) {\n          var kValue;\n          // a. Let Pk be ToString(k).\n          //   This is implicit for LHS operands of the in operator\n          // b. Let kPresent be the result of calling the\n          //    HasProperty internal method of O with argument Pk.\n          //   This step can be combined with c\n          // c. If kPresent is true, then\n          //    i.  Let elementK be the result of calling the Get\n          //        internal method of O with the argument ToString(k).\n          //   ii.  Let same be the result of applying the\n          //        Strict Equality Comparison Algorithm to\n          //        searchElement and elementK.\n          //  iii.  If same is true, return k.\n          if (k in O && O[k] === searchElement) {\n            return k;\n          }\n          k++;\n        }\n        return -1;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.indexOf' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.indexOf' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][7] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.lastIndexOf()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Using_the_Equality_Operators\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.14\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.indexof\n\n[7]: /en-US/Firefox/Releases/1.5\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.entries()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.entries()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**entries()**` method returns a new `**Array Iterator**` object that\ncontains the key/value pairs for each index in the array.\n\n## Syntax\n\n    \n    \n    arr.entries()\n\n## Examples\n\n    \n    \n    var arr = ['a', 'b', 'c'];\n    var eArr = arr.entries();\n    \n    console.log(eArr.next().value); // [0, 'a']\n    console.log(eArr.next().value); // [1, 'b']\n    console.log(eArr.next().value); // [2, 'c']\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.entries' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[28][2] (28)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n28.0 (28)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.keys()`][3]\n  * [`Array.prototype.forEach()`][4]\n  * [`Array.prototype.every()`][5]\n  * [`Array.prototype.some()`][6]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.entries\n\n[2]: /en-US/Firefox/Releases/28\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.copyWithin()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.copywithin()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**copyWithin()**` method copies the sequence of array elements within the\narray to the position starting at `target`. The copy is taken from the index\npositions of the second and third arguments `start` and `end`. The `end`\nargument is optional and defaults to the length of the array.\n\n## Syntax\n\n    \n    \n    arr.copyWithin(target, start[, end = this.length])\n\n### Parameters\n\n`target`\n\n    Target start index position where to copy the elements to.\n`start`\n\n    Source start index position where to start copying elements from.\n`end`\n\n    Optional. Source end index position where to end copying elements from.\n\n## Description\n\nThe arguments `target`, `start`, and `end` are coerced to [`Number`][1] and\ntruncated to integer values.\n\nIf `start` is negative, it is treated as `length+start` where `length` is the\nlength of the array. If `end` is negative, it is treated as `length+end`.\n\nThe `copyWithin` function is intentionally _generic_, it does not require that\nits `this` value be an [`Array`][2] object and in addition, `copyWithin` is a\n_mutable method_, it will change `this` object itself, and return it, not just\nreturn a copy of it.\n\n## Examples\n\n    \n    \n    [1, 2, 3, 4, 5].copyWithin(0, 3);\n    // [4, 5, 3, 4, 5]\n    \n    [1, 2, 3, 4, 5].copyWithin(0, 3, 4);\n    // [4, 2, 3, 4, 5]\n    \n    [1, 2, 3, 4, 5].copyWithin(0, -2, -1);\n    // [4, 2, 3, 4, 5]\n    \n    [].copyWithin.call({length: 5, 3: 1}, 0, 3);\n    // {0: 1, 3: 1, length: 5}\n    \n    // ES6 Typed Arrays are subclasses of Array\n    var i32a = new Int32Array([1, 2, 3, 4, 5]);\n    \n    i32a.copyWithin(0, 2);\n    // Int32Array [3, 4, 5, 4, 5]\n    \n    // On platforms that are not yet ES6 compliant: \n    [].copyWithin.call(new Int32Array([1, 2, 3, 4, 5]), 0, 3, 4);\n    // Int32Array [4, 2, 3, 4, 5]\n    \n\n## Polyfill\n\n    \n    \n    if (!Array.prototype.copyWithin) {\n      Array.prototype.copyWithin = function(target, start/*, end*/) {\n        // Steps 1-2.\n        if (this == null) {\n          throw new TypeError('this is null or not defined');\n        }\n    \n        var O = Object(this);\n    \n        // Steps 3-5.\n        var len = O.length >>> 0;\n    \n        // Steps 6-8.\n        var relativeTarget = target >> 0;\n    \n        var to = relativeTarget < 0 ?\n          Math.max(len + relativeTarget, 0) :\n          Math.min(relativeTarget, len);\n    \n        // Steps 9-11.\n        var relativeStart = start >> 0;\n    \n        var from = relativeStart < 0 ?\n          Math.max(len + relativeStart, 0) :\n          Math.min(relativeStart, len);\n    \n        // Steps 12-14.\n        var end = arguments[2];\n        var relativeEnd = end === undefined ? len : end >> 0;\n    \n        var final = relativeEnd < 0 ?\n          Math.max(len + relativeEnd, 0) :\n          Math.min(relativeEnd, len);\n    \n        // Step 15.\n        var count = Math.min(final - from, len - to);\n    \n        // Steps 16-17.\n        var direction = 1;\n    \n        if (from < to && to < (from + count)) {\n          direction = -1;\n          from += count - 1;\n          to += count - 1;\n        }\n    \n        // Step 18.\n        while (count > 0) {\n          if (from in O) {\n            O[to] = O[from];\n          } else {\n            delete O[to];\n          }\n    \n          from += direction;\n          to += direction;\n          count--;\n        }\n    \n        // Step 19.\n        return O;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.copyWithin' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[32][4] (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n32.0 (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.copyWithin\n\n[4]: /en-US/Firefox/Releases/32\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.contains()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/contains", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.contains()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 7) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**contains()**` method determines whether an array contains a certain\nelement, returning `true` or `false` as appropriate.\n\n## Syntax\n\n    \n    \n    array.contains(searchElement[, fromIndex])\n\n### Parameters\n\n`searchElement`\n\n     The element to search for.\n`fromIndex`\n\n     Optional. The position in this array at which to begin searching for `searchElement`; defaults to 0.\n\n## Examples\n\n    \n    \n    [1, 2, 3].contains(2);     // true\n    [1, 2, 3].contains(4);     // false\n    [1, 2, 3].contains(3, 3);  // false\n    [1, 2, 3].contains(3, -1); // true\n    [1, 2, NaN].contains(NaN); // true\n    \n\n## Polyfill\n\n    \n    \n    if (![].contains) {\n      Object.defineProperty(Array.prototype, 'contains', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function(searchElement/*, fromIndex*/) {\n          if (this === undefined || this === null) {\n            throw new TypeError('Cannot convert this value to object');\n          }\n          var O = Object(this);\n          var len = parseInt(O.length) || 0;\n          if (len === 0) { return false; }\n          var n = parseInt(arguments[1]) || 0;\n          if (n >= len) { return false; }\n          var k;\n          if (n >= 0) {\n            k = n;\n          } else {\n            k = len + n;\n            if (k < 0) k = 0;\n          }\n          while (k < len) {\n            var currentElement = O[k];\n            if (searchElement === currentElement ||\n                searchElement !== searchElement && currentElement !== currentElement\n            ) {\n              return true;\n            }\n            k++;\n          }\n          return false;\n        }\n      });\n    }\n    \n\n## Specifications\n\nES7 proposal:\n<https://github.com/domenic/Array.prototype.contains/blob/master/spec.md>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][1].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.indexOf()`][2]\n  * [`String.prototype.contains()`][3] _ _\n\n[1]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.concat()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.concat()", "content": "## Summary\n\nThe `**concat()**` method returns a new array comprised of the array on which\nit is called joined with the array(s) and/or value(s) provided as arguments.\n\n## Syntax\n\n    \n    \n    var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])\n\n### Parameters\n\n`value_N_`\n\n     Arrays and/or values to concatenate into a new array. See the discussion below for details.\n\n## Description\n\n`concat` creates a new array consisting of the elements in the object on which\nit is called, followed in order by, for each argument, the elements of that\nargument (if the argument is an array) or the argument itself (if the argument\nis not an array).\n\n`concat` does not alter `this` or any of the arrays provided as arguments but\ninstead returns a shallow copy that contains copies of the same elements\ncombined from the original arrays. Elements of the original arrays are copied\ninto the new array as follows:\n\n  * Object references (and not the actual object): `concat` copies object references into the new array. Both the original and new array refer to the same object. That is, if a referenced object is modified, the changes are visible to both the new and original arrays.\n  * Strings and numbers (not [`String`][1] and [`Number`][2] objects): `concat` copies the values of strings and numbers into the new array.\n\n**Note:** Concatenating array(s)/value(s) will leave the originals untouched. Furthermore, any operation on the new array will have no effect on the original arrays, and vice versa.\n\n## Examples\n\n### Example: Concatenating two arrays\n\nThe following code concatenates two arrays:\n\n    \n    \n    var alpha = ['a', 'b', 'c'],\n        numeric = [1, 2, 3];\n    \n    var alphaNumeric = alpha.concat(numeric);\n    \n    console.log(alphaNumeric); // Result: ['a', 'b', 'c', 1, 2, 3]\n    \n\n### Example: Concatenating three arrays\n\nThe following code concatenates three arrays:\n\n    \n    \n    var num1 = [1, 2, 3],\n        num2 = [4, 5, 6],\n        num3 = [7, 8, 9];\n    \n    var nums = num1.concat(num2, num3);\n    \n    console.log(nums); // Result: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \n\n### Example: Concatenating values to an array\n\nThe following code concatenates three values to an array:\n\n    \n    \n    var alpha = ['a', 'b', 'c'];\n    \n    var alphaNumeric = alpha.concat(1, [2, 3]);\n    \n    console.log(alphaNumeric); // Result: ['a', 'b', 'c', 1, 2, 3]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.concat' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.concat' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1.0\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n5.5\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`push`][6] / [`pop`][7]\u00a0\u2014 add/remove elements from the end of the array\n  * [`unshift`][8] / [`shift`][9]\u00a0\u2014 add/remove elements from the beginning of the array\n  * [`splice`][10]\u00a0\u2014 add/remove elements from the specified location of the array\n  * [`String.prototype.concat()`][11]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.4\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.concat\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.findIndex()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.findindex()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**findIndex()**` method returns an **index** in the array, if an element\nin the array satisfies the provided testing function. Otherwise -1 is\nreturned.\n\nSee also the [`find()`][1] method, which returns the **value** of a found\nelement in the array instead of its index.\n\n## Syntax\n\n    \n    \n    arr.findIndex(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking three arguments: \n\n`element`\n\n    The current element being processed in the array.\n`index`\n\n    The index of the current element being processed in the array.\n`array`\n\n    The array `findIndex` was called upon.\n`thisArg`\n\n    Optional. Object to use as `this` when executing `callback`.\n\n## Description\n\nThe `findIndex` method executes the `callback` function once for each element\npresent in the array until it finds one where `callback` returns a true value.\nIf such an element is found, `findIndex` immediately returns the index of that\nelement. Otherwise, `findIndex` returns -1. `callback` is invoked only for\nindexes of the array which have assigned values; it is not invoked for indexes\nwhich have been deleted or which have never been assigned values.\n\n`callback` is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\nIf a `thisArg` parameter is provided to `findIndex`, it will be used as the\n`this` for each invocation of the `callback`. If it is not provided, then\n[`undefined`][2] is used.\n\n`findIndex` does not mutate the array on which it is called.\n\nThe range of elements processed by `findIndex` is set before the first\ninvocation of `callback`. Elements that are appended to the array after the\ncall to `findIndex` begins will not be visited by `callback`. If an existing,\nunvisited element of the array is changed by `callback`, its value passed to\nthe visiting `callback` will be the value at the time that `findIndex` visits\nthat element's index; elements that are deleted are not visited.\n\n## Examples\n\n### Example: Find the index of a prime number in an array\n\nThe following example finds the index of an element in the array that is a\nprime number (or returns -1 if there is no prime number).\n\n    \n    \n    function isPrime(element, index, array) {\n      var start = 2;\n      while (start <= Math.sqrt(element)) {\n        if (element % start++ < 1) {\n          return false;\n        }\n      }\n      return element > 1;\n    }\n    \n    console.log([4, 6, 8, 12].findIndex(isPrime)); // -1, not found\n    console.log([4, 6, 7, 12].findIndex(isPrime)); // 2\n    \n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can polyfill\n`Array.prototype.findIndex` with the following snippet:\n\n    \n    \n    if (!Array.prototype.findIndex) {\n      Array.prototype.findIndex = function(predicate) {\n        if (this == null) {\n          throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n    \n        for (var i = 0; i < length; i++) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return i;\n          }\n        }\n        return -1;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.findIndex' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[25.0][5] (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.find()`][1] _ _\n  * [`Array.prototype.indexOf()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.findIndex\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/25\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.find()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.find()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**find()**` method returns a **value** in the array, if an element in the\narray satisfies the provided testing function. Otherwise [`undefined`][1] is\nreturned.\n\nSee also the [`findIndex()`][2] method, which returns the **index** of a found\nelement in the array instead of its value.\n\n## Syntax\n\n    \n    \n    arr.find(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking three arguments: \n\n`element`\n\n    The current element being processed in the array.\n`index`\n\n    The index of the current element being processed in the array.\n`array`\n\n    The array `find` was called upon.\n`thisArg`\n\n    Optional. Object to use as `this` when executing `callback`.\n\n## Description\n\nThe `find` method executes the `callback` function once for each element\npresent in the array until it finds one where `callback` returns a true value.\nIf such an element is found, `find` immediately returns the value of that\nelement. Otherwise, `find` returns [`undefined`][1]. `callback` is invoked\nonly for indexes of the array which have assigned values; it is not invoked\nfor indexes which have been deleted or which have never been assigned values.\n\n`callback` is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\nIf a `thisArg` parameter is provided to `find`, it will be used as the `this`\nfor each invocation of the `callback`. If it is not provided, then\n[`undefined`][1] is used.\n\n`find` does not mutate the array on which it is called.\n\nThe range of elements processed by `find` is set before the first invocation\nof `callback`. Elements that are appended to the array after the call to\n`find` begins will not be visited by `callback`. If an existing, unvisited\nelement of the array is changed by `callback`, its value passed to the\nvisiting `callback` will be the value at the time that `find` visits that\nelement's index; elements that are deleted are not visited.\n\n## Examples\n\n### Example: Find a prime number in an array\n\nThe following example finds an element in the array that is a prime number (or\nreturns [`undefined`][1] if there is no prime number).\n\n    \n    \n    function isPrime(element, index, array) {\n      var start = 2;\n      while (start <= Math.sqrt(element)) {\n        if (element % start++ < 1) {\n          return false;\n        }\n      }\n      return element > 1;\n    }\n    \n    console.log([4, 6, 8, 12].find(isPrime)); // undefined, not found\n    console.log([4, 5, 8, 12].find(isPrime)); // 5\n    \n\n## Polyfill\n\nThis method has been added to the ECMAScript 6 specification and may not be\navailable in all JavaScript implementations yet. However, you can polyfill\n`Array.prototype.find` with the following snippet:\n\n    \n    \n    if (!Array.prototype.find) {\n      Array.prototype.find = function(predicate) {\n        if (this == null) {\n          throw new TypeError('Array.prototype.find called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n    \n        for (var i = 0; i < length; i++) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return value;\n          }\n        }\n        return undefined;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.find' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[25.0][5] (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.findIndex()`][2] _ _\n  * [`Array.prototype.every()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.find\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/25\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.isArray()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.isarray()", "content": "## Summary\n\nThe `**Array.isArray()**` method returns `true` if an object is an array,\n`false` if it is not.\n\n## Syntax\n\n    \n    \n    Array.isArray(obj)\n\n### Parameters\n\n`obj`\n\n    The object to be checked.\n\n## Description\n\nSee the article [\u201cDetermining with absolute accuracy whether or not a\nJavaScript object is an array\u201d][1] for more details.\n\n## Examples\n\n    \n    \n    // all following calls return true\n    Array.isArray([]);\n    Array.isArray([1]);\n    Array.isArray(new Array());\n    // Little known fact: Array.prototype itself is an array:\n    Array.isArray(Array.prototype); \n    \n    // all following calls return false\n    Array.isArray();\n    Array.isArray({});\n    Array.isArray(null);\n    Array.isArray(undefined);\n    Array.isArray(17);\n    Array.isArray('Array');\n    Array.isArray(true);\n    Array.isArray(false);\n    Array.isArray({ __proto__: Array.prototype });\n    \n\n## Polyfill\n\nRunning the following code before any other code will create `Array.isArray()`\nif it's not natively available.\n\n    \n    \n    if (!Array.isArray) {\n      Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.isArray' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.isArray' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[4.0][4] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][5].\n\n## See also\n\n  * [`Array`][6]\n\n[1]: http://web.mit.edu/jwalden/www/isArray.html\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.3.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.isarray\n\n[4]: /en-US/Firefox/Releases/4\n\n[5]: http://kangax.github.com/es5-compat-table/\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.some()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.some()", "content": "## Summary\n\nThe `**some()**` method tests whether some element in the array passes the\ntest implemented by the provided function.\n\n## Syntax\n\n    \n    \n    arr.some(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function to test for each element.\n`thisArg`\n\n     Optional. Value to use as `this` when executing `callback`.\n\n## Description\n\n`some` executes the `callback` function once for each element present in the\narray until it finds one where `callback` returns a true value. If such an\nelement is found, `some` immediately returns `true`. Otherwise, `some` returns\n`false`. `callback` is invoked only for indexes of the array which have\nassigned values; it is not invoked for indexes which have been deleted or\nwhich have never been assigned values.\n\n`callback` is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\nIf a `thisArg` parameter is provided to `some`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\n`some` does not mutate the array on which it is called.\n\nThe range of elements processed by `some` is set before the first invocation\nof `callback`. Elements that are appended to the array after the call to\n`some` begins will not be visited by `callback`. If an existing, unvisited\nelement of the array is changed by `callback`, its value passed to the\nvisiting `callback` will be the value at the time that `some` visits that\nelement's index; elements that are deleted are not visited.\n\n## Examples\n\n### Example: Testing value of array elements\n\nThe following example tests whether some element in the array is bigger than\n10.\n\n    \n    \n    function isBigEnough(element, index, array) {\n      return element >= 10;\n    }\n    var passed = [2, 5, 8, 1, 4].some(isBigEnough);\n    // passed is false\n    passed = [12, 5, 8, 1, 4].some(isBigEnough);\n    // passed is true\n    \n\n## Polyfill\n\n`some` was added to the ECMA-262 standard in the 5th edition; as such it may\nnot be present in all implementations of the standard. You can work around\nthis by inserting the following code at the beginning of your scripts,\nallowing use of `some` in implementations which do not natively support it.\nThis algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\n[`Object`][2] and [`TypeError`][3] have their original values and that\n`fun.call`\u00a0evaluates to the original value of\n`[`Function.prototype.call`][4]`.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.17\n    // Reference: http://es5.github.io/#x15.4.4.17\n    if (!Array.prototype.some) {\n      Array.prototype.some = function(fun /*, thisArg*/) {\n        'use strict';\n    \n        if (this == null) {\n          throw new TypeError('Array.prototype.some called on null or undefined');\n        }\n    \n        if (typeof fun !== 'function') {\n          throw new TypeError();\n        }\n    \n        var t = Object(this);\n        var len = t.length >>> 0;\n    \n        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n        for (var i = 0; i < len; i++) {\n          if (i in t && fun.call(thisArg, t[i], i, t)) {\n            return true;\n          }\n        }\n    \n        return false;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.some' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.some' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][7] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][8]\n  * [`Array.prototype.every()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.some\n\n[7]: /en-US/Firefox/Releases/1.5\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.every()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.every()", "content": "## Summary\n\nThe `**every()**` method tests whether all elements in the array pass the test\nimplemented by the provided function.\n\n## Syntax\n\n    \n    \n    arr.every(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function to test for each element, taking three arguments: \n\n`currentValue`\n\n    The current element being processed in the array.\n`index`\n\n    The index of the current element being processed in the array.\n`array`\n\n    The array `every` was called upon.\n`thisArg`\n\n    Optional. Value to use as `this` when executing `callback`.\n\n## Description\n\nThe `every` method executes the provided `callback` function once for each\nelement present in the array until it finds one where `callback` returns a\n_falsy_ value (a value that becomes false when converted to a Boolean). If\nsuch an element is found, the `every` method immediately returns `false`.\nOtherwise, if `callback` returned a true value for all elements, `every` will\nreturn `true`. `callback` is invoked only for indexes of the array which have\nassigned values; it is not invoked for indexes which have been deleted or\nwhich have never been assigned values.\n\n`callback` is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\nIf a `thisArg` parameter is provided to `every`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\n`every` does not mutate the array on which it is called.\n\nThe range of elements processed by `every` is set before the first invocation\nof `callback`. Elements which are appended to the array after the call to\n`every` begins will not be visited by `callback`. If existing elements of the\narray are changed, their value as passed to `callback` will be the value at\nthe time `every` visits them; elements that are deleted are not visited.\n\n`every` acts like the \"for all\" quantifier in mathematics. In particular, for\nan empty array, it returns true. (It is [vacuously true][2] that all elements\nof the [empty set][3] satisfy any given condition.)\n\n## Examples\n\n### Example: Testing size of all array elements\n\nThe following example tests whether all elements in the array are bigger than\n10.\n\n    \n    \n    function isBigEnough(element, index, array) {\n      return element >= 10;\n    }\n    var passed = [12, 5, 8, 130, 44].every(isBigEnough);\n    // passed is false\n    passed = [12, 54, 18, 130, 44].every(isBigEnough);\n    // passed is true\n    \n\n## Polyfill\n\n`every` was added to the ECMA-262 standard in the 5th edition; as such it may\nnot be present in other implementations of the standard. You can work around\nthis by inserting the following code at the beginning of your scripts,\nallowing use of `every` in implementations which do not natively support it.\nThis algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\n`Object`\u00a0and\u00a0`TypeError`\u00a0have their original values and that\u00a0`callbackfn.call`\nevaluates to the original value of [`Function.prototype.call`][4]\n\n    \n    \n    if (!Array.prototype.every) {\n      Array.prototype.every = function(callbackfn, thisArg) {\n        'use strict';\n        var T, k;\n    \n        if (this == null) {\n          throw new TypeError('this is null or not defined');\n        }\n    \n        // 1. Let O be the result of calling ToObject passing the this \n        //    value as the argument.\n        var O = Object(this);\n    \n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n    \n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== 'function') {\n          throw new TypeError();\n        }\n    \n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n          T = thisArg;\n        }\n    \n        // 6. Let k be 0.\n        k = 0;\n    \n        // 7. Repeat, while k < len\n        while (k < len) {\n    \n          var kValue;\n    \n          // a. Let Pk be ToString(k).\n          //   This is implicit for LHS operands of the in operator\n          // b. Let kPresent be the result of calling the HasProperty internal \n          //    method of O with argument Pk.\n          //   This step can be combined with c\n          // c. If kPresent is true, then\n          if (k in O) {\n    \n            // i. Let kValue be the result of calling the Get internal method\n            //    of O with argument Pk.\n            kValue = O[k];\n    \n            // ii. Let testResult be the result of calling the Call internal method\n            //     of callbackfn with T as the this value and argument list \n            //     containing kValue, k, and O.\n            var testResult = callbackfn.call(T, kValue, k, O);\n    \n            // iii. If ToBoolean(testResult) is false, return false.\n            if (!testResult) {\n              return false;\n            }\n          }\n          k++;\n        }\n        return true;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.every' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.every' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][7] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][8]\n  * [`Array.prototype.some()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]:\nhttp://en.wikipedia.org/wiki/Vacuous_truth#Vacuous_truths_in_mathematics\n\n[3]: http://en.wikipedia.org/wiki/Empty_set#Common_problems\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.16\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.every\n\n[7]: /en-US/Firefox/Releases/1.5\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.of()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.of()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Array.of()**` method creates a new `Array` instance with a variable\nnumber of arguments, regardless of number or type of the arguments.\n\n## Syntax\n\n    \n    \n    Array.of(element0[, element1[, ...[, elementN]]])\n\n### Parameters\n\n`element_N_`\n\n    Elements of which to create the array.\n\n## Description\n\nThis function is part of the ECMAScript 6 standard. For more information see\n[`Array.of` and `Array.from` proposal][1] and [`Array.of` polyfill][2].\n\n## Examples\n\n    \n    \n    Array.of(1);         // [1]\n    Array.of(1, 2, 3);   // [1, 2, 3]\n    Array.of(undefined); // [undefined]\n    \n\n## Polyfill\n\nRunning the following code before any other code will create `Array.of()` if\nit's not natively available.\n\n    \n    \n    if (!Array.of) {\n      Array.of = function() {\n        return Array.prototype.slice.call(arguments);\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.of' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n39 [1]\n\n</td>  \n<td>\n\n[25][4] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n39 [1]\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] The feature is available behind a preference. Go to\u00a0`chrome://flags`\u00a0and\nactivate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [`Array`][5]\n\n[1]: https://gist.github.com/rwaldron/1074126\n\n[2]: https://gist.github.com/rwaldron/3186576\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.of\n\n[4]: /en-US/Firefox/Releases/25\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.from()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.from()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Array.from()**` method creates a new `Array` instance from an array-\nlike or iterable object.\n\nIn ES6, class syntax allows for the subclassing of both built-in and user\ndefined classes; as a result, class-side static methods such as\n`**Array.from**` are \"inherited\" by subclasses of `**Array**` and create new\ninstances of the subclass, not `**Array**`.\n\n## Syntax\n\n    \n    \n    Array.from(arrayLike[, mapFn[, thisArg]])\n    \n\n### Parameters\n\n`arrayLike`\n\n     An array-like or iterable object to convert to an array.\n`mapFn`\n\n     Optional. Map function to call on every element of the array.\n`thisArg`\n\n     Optional. Value to use as `this` when executing `mapFn`.\n\n## Description\n\n`Array.from()` lets you create `Arrays` from:\n\n  * array-like objects (objects with a `length` property and indexed elements) or\n  * [iterable objects][1] (objects where you can get its elements, such as [`Map`][2] and [`Set`][3]).\n\n`Array.from()` has an optional parameter `mapFn`, which allows you to execute\na [`map`][4] function on each element of the array (or subclass object) that\nis being created. More clearly,` Array.from(obj, mapFn, thisArg)` is the same\nas `Array.from(obj).map(mapFn, thisArg)`, except that it does not create an\nintermediate array. This is especially important for certain array subclasses,\nlike [typed arrays][5], since the intermediate array would necessarily have\nvalues truncated to fit into the appropriate type.\n\nThe `length` property of the `from()` method is 1.\n\n## Examples\n\n    \n    \n    // Array-like object (arguments) to Array\n    function f() {\n      return Array.from(arguments);\n    }\n    \n    f(1, 2, 3); \n    // [1, 2, 3]\n    \n    \n    // Any iterable object...\n    // Set\n    var s = new Set([\"foo\", window]);\n    Array.from(s);   \n    // [\"foo\", window]\n    \n    \n    // Map\n    var m = new Map([[1, 2], [2, 4], [4, 8]]);\n    Array.from(m);                          \n    // [[1, 2], [2, 4], [4, 8]]  \n    \n    \n    // String\n    Array.from(\"foo\");                      \n    // [\"f\", \"o\", \"o\"]\n    \n    \n    // Using an arrow function as the map function to\n    // manipulate the elements\n    Array.from([1, 2, 3], x => x + x);      \n    // [2, 4, 6]\n    \n    \n    // Generate a sequence of numbers\n    Array.from({length: 5}, (v, k) => k);    \n    // [0, 1, 2, 3, 4]\n    \n    \n\n## Polyfill\n\n`Array.from` was added to the ECMA-262 standard in the 6th edition; as such it\nmay not be present in other implementations of the standard. You can work\naround this by inserting the following code at the beginning of your scripts,\nallowing use of `Array.from` in implementations that don't natively support\nit.\u00a0 This algorithm is exactly the one specified in ECMA-262, 6th edition,\nassuming `Object` and `TypeError` have their original values and that\n`callback.call` evaluates to the original value of\n[`Function.prototype.call`][6]. In addition, since true iterables can not be\npolyfilled, this implementation does not support generic iterables as defined\nin the 6th edition of ECMA-262.\n\n    \n    \n    // Production steps of ECMA-262, Edition 6, 22.1.2.1\n    // Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from\n    if (!Array.from) {\n      Array.from = (function () {\n        var toStr = Object.prototype.toString;\n        var isCallable = function (fn) {\n          return typeof fn === 'function' || toStr.call(fn) === '[object Function]';\n        };\n        var toInteger = function (value) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 var number = Number(value);\n    \u00a0\u00a0\u00a0\u00a0\u00a0 if (isNaN(number)) { return 0; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0 if (number === 0 || !isFinite(number)) { return number; }\n    \u00a0\u00a0\u00a0\u00a0\u00a0 return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));\n    \u00a0\u00a0  };\n        var maxSafeInteger = Math.pow(2, 53) - 1;\n        var toLength = function (value) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 var len = toInteger(value);\n          return Math.min(Math.max(len, 0), maxSafeInteger);\n    \u00a0\u00a0\u00a0 };\n    \n        // The length property of the from method is 1.\n        return function from(arrayLike/*, mapFn, thisArg */) {\n          // 1. Let C be the this value.\n          var C = this;\n    \n          // 2. Let items be ToObject(arrayLike).\n          var items = Object(arrayLike);\n    \n          // 3. ReturnIfAbrupt(items).\n          if (arrayLike == null) {\n            throw new TypeError(\"Array.from requires an array-like object - not null or undefined\");\n          }\n    \n          // 4. If mapfn is undefined, then let mapping be false.\n          var mapFn = arguments.length > 1 ? arguments[1] : void undefined;\n          var T;\n          if (typeof mapFn !== 'undefined') {\n            // 5. else      \n            // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.\n            if (!isCallable(mapFn)) {\n              throw new TypeError('Array.from: when provided, the second argument must be a function');\n            }\n    \n            // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.\n    \u00a0\u00a0  \u00a0   if (arguments.length > 2) {\n              T = arguments[2];\n            }\n          }\n    \n          // 10. Let lenValue be Get(items, \"length\").\n          // 11. Let len be ToLength(lenValue).\n          var len = toLength(items.length);\n    \n          // 13. If IsConstructor(C) is true, then\n          // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.\n          // 14. a. Else, Let A be ArrayCreate(len).\n          var A = isCallable(C) ? Object(new C(len)) : new Array(len);\n    \n          // 16. Let k be 0.\n          var k = 0;\n          // 17. Repeat, while k < len\u2026 (also steps a - h)\n          var kValue;\n          while (k < len) {\n            kValue = items[k];\n            if (mapFn) {\n              A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);\n            } else {\n              A[k] = kValue;\n            }\n            k += 1;\n          }\n          // 18. Let putStatus be Put(A, \"length\", len, true).\n          A.length = len;\n          // 20. Return A.\n          return A;\n        };\n      }());\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.from' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[32][9] (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n32.0 (32)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array`][10]\n  * [`Array.prototype.map`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/iterable\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[5]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/32\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype", "content": "## Summary\n\nThe **`Array.prototype`** property represents the prototype for the\n[`Array`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Array.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Array`][1] instances inherit from `Array.prototype`. As with all\nconstructors, you can change the constructor's prototype object to make\nchanges to all [`Array`][1] instances.\n\nLittle known fact: `Array.prototype` itself is an [`Array`][1]:\n\n    \n    \n    Array.isArray(Array.prototype); // true\n    \n\n## Properties\n\n`Array.prototype.constructor`\n\n     Specifies the function that creates an object's prototype.\n[`Array.prototype.length`][2]\n\n     Reflects the number of elements in an array.\n\nMethods inherited from [`Object`][3]:\n\n[`__defineGetter__`][4], [`__defineSetter__`][5], [`hasOwnProperty`][6],\n[`isPrototypeOf`][7], [`__lookupGetter__`][8], [`__lookupSetter__`][9],\n[`__noSuchMethod__`][10], [`propertyIsEnumerable`][11], [`toSource`][12],\n[`toLocaleString`][13], [`toString`][14], [`unwatch`][15], [`valueOf`][16],\n[`watch`][17]\n\n## Methods\n\n### Mutator methods\n\nThese methods modify the array:\n\n[`Array.prototype.copyWithin()`][18] _ _\n\n     Copies a sequence of array elements within the array.\n[`Array.prototype.fill()`][19] _ _\n\n     Fills all the elements of an array from a start index to an end index with a static value.\n[`Array.prototype.pop()`][20]\n\n     Removes the last element from an array and returns that element.\n[`Array.prototype.push()`][21]\n\n     Adds one or more elements to the end of an array and returns the new length of the array.\n[`Array.prototype.reverse()`][22]\n\n     Reverses the order of the elements of an array\u00a0\u2014 the first becomes the last, and the last becomes the first.\n[`Array.prototype.shift()`][23]\n\n     Removes the first element from an array and returns that element.\n[`Array.prototype.sort()`][24]\n\n     Sorts the elements of an array in place and returns the array.\n[`Array.prototype.splice()`][25]\n\n     Adds and/or removes elements from an array.\n[`Array.prototype.unshift()`][26]\n\n     Adds one or more elements to the front of an array and returns the new length of the array.\n\n### Accessor methods\n\nThese methods do not modify the array and return some representation of the\narray.\n\n[`Array.prototype.concat()`][27]\n\n     Returns a new array comprised of this array joined with other array(s) and/or value(s).\n[`Array.prototype.contains()`][28] _ _\n\n     Determines whether an array contains a certain element, returning `true` or `false` as appropriate.\n[`Array.prototype.join()`][29]\n\n     Joins all elements of an array into a string.\n[`Array.prototype.slice()`][30]\n\n     Extracts a section of an array and returns a new array.\n[`Array.prototype.toSource()`][31] _ _\n\n     Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the [`Object.prototype.toSource()`][32] method.\n[`Array.prototype.toString()`][33]\n\n     Returns a string representing the array and its elements. Overrides the [`Object.prototype.toString()`][34] method.\n[`Array.prototype.toLocaleString()`][35]\n\n     Returns a localized string representing the array and its elements. Overrides the [`Object.prototype.toLocaleString()`][36] method.\n[`Array.prototype.indexOf()`][37]\n\n     Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n[`Array.prototype.lastIndexOf()`][38]\n\n     Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\n### Iteration methods\n\nSeveral methods take as arguments functions to be called back while processing\nthe array. When these methods are called, the `length` of the array is\nsampled, and any element added beyond this length from within the callback is\nnot visited. Other changes to the array (setting the value of or deleting an\nelement) may affect the results of the operation if the method visits the\nchanged element afterwards. While the specific behavior of these methods in\nsuch cases is well-defined, you should not rely upon it so as not to confuse\nothers who might read your code. If you must mutate the array, copy into a new\narray instead.\n\n[`Array.prototype.forEach()`][39]\n\n     Calls a function for each element in the array.\n[`Array.prototype.entries()`][40] _ _\n\n     Returns a new `Array Iterator` object that contains the key/value pairs for each index in the array.\n[`Array.prototype.every()`][41]\n\n     Returns true if every element in this array satisfies the provided testing function.\n[`Array.prototype.some()`][42]\n\n     Returns true if at least one element in this array satisfies the provided testing function.\n[`Array.prototype.filter()`][43]\n\n     Creates a new array with all of the elements of this array for which the provided filtering function returns true.\n[`Array.prototype.find()`][44] _ _\n\n     Returns the found value in the array, if an element in the array satisfies the provided testing function or `undefined` if not found.\n[`Array.prototype.findIndex()`][45] _ _\n\n     Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.\n[`Array.prototype.keys()`][46] _ _\n\n     Returns a new `Array Iterator` that contains the keys for each index in the array.\n[`Array.prototype.map()`][47]\n\n     Creates a new array with the results of calling a provided function on every element in this array.\n[`Array.prototype.reduce()`][48]\n\n     Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.\n[`Array.prototype.reduceRight()`][49]\n\n     Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.\n\n### Generic methods\n\nMany methods on the JavaScript Array object are designed to be generally\napplied to all objects which \u201clook like\u201d Arrays. That is, they can be used on\nany object which has a `length` property, and which can usefully be accessed\nusing numeric property names (as with `array[5]` indexing). TODO: give\nexamples with Array.prototype.forEach.call, and adding the method to an object\nlike [`JavaArray`][50] or [`String`][51]. Some methods, such as [`join`][29],\nonly read the `length` and numeric properties of the object they are called\non. Others, like [`reverse`][22], require that the object's numeric properties\nand `length` be mutable; these methods can therefore not be called on objects\nlike [`String`][51], which does not permit its `length` property or\nsynthesized numeric properties to be set.\n\nMethods inherited from [`Object`][3]:\n\n[`__defineGetter__`][4], [`__defineSetter__`][5], [`hasOwnProperty`][6],\n[`isPrototypeOf`][7], [`__lookupGetter__`][8], [`__lookupSetter__`][9],\n[`__noSuchMethod__`][10], [`propertyIsEnumerable`][11],\n[`toLocaleString`][13], [`unwatch`][15], [`valueOf`][16], [`watch`][17]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype' in that specification.][52]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype' in that specification.][53]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][54].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array`][1]\n  * [`Function.prototype`][55]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToSource\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToString\n\n[15]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/contains\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JavaArray\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[52]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.3.1\n\n[53]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype\n\n[54]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "property"},
{"name": "Array.length", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.length", "content": "## Summary\n\nThe `**length**` property represents an unsigned, 32-bit integer that\nspecifies the number of elements in an array.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Array.length`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nyes\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    arr.length\n\n## Description\n\nThe value of the `length` property is an integer with a positive sign and a\nvalue less than 2 to the 32nd power (232).\n\nYou can set the `length` property to truncate an array at any time. When you\nextend an array by changing its `length` property, the number of actual\nelements does not increase; for example, if you set `length` to 3 when it is\ncurrently 2, the array still contains only 2 elements. Thus, the `length`\nproperty says nothing about the number of defined values in the array. See\nalso [Relationship between `length` and numerical properties][1].\n\n## Examples\n\n### Example: Iterating over an array\n\nIn the following example the array `numbers` is iterated through by looking at\nthe `length` property to see how many elements it has. The value in each\nelement is then doubled.\n\n    \n    \n    var numbers = [1, 2, 3, 4, 5];\n    \n    for (var i = 0; i < numbers.length; i++) {\n      numbers[i] *= 2;\n    }\n    // numbers is now [2, 4, 6, 8, 10]\n    \n\n### Example: Shortening an array\n\nThe following example shortens the array `statesUS` to a length of 50 if the\ncurrent length is greater than 50.\n\n    \n    \n    if (statesUS.length > 50) {\n      statesUS.length = 50;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.length' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.length' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Relationship_between_length_and_numerical_properties\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.5.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-array-instances-length\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "property"},
{"name": "Array.prototype.map()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.map()", "content": "## Summary\n\nThe `**map()**` method creates a new array with the results of calling a\nprovided function on every element in this array.\n\n## Syntax\n\n    \n    \n    arr.map(callback[, thisArg])\n\n### Parameters\n\n`callback`\n\n     Function that produces an element of the new Array, taking three arguments: \n\n`currentValue`\n\n    The current element being processed in the array.\n`index`\n\n    The index of the current element being processed in the array.\n`array`\n\n    The array `map` was called upon.\n`thisArg`\n\n    Optional. Value to use as `this` when executing `callback`.\n\n## Description\n\n`map` calls a provided `callback` function once for each element in an array,\nin order, and constructs a new array from the results. `callback` is invoked\nonly for indexes of the array which have assigned values; it is not invoked\nfor indexes that are undefined, those which have been deleted or which have\nnever been assigned values.\n\n`callback` is invoked with three arguments: the value of the element, the\nindex of the element, and the Array object being traversed.\n\nIf a `thisArg` parameter is provided to `map`, it will be passed to `callback`\nwhen invoked, for use as its `this` value.\u00a0 Otherwise, the value\n[`undefined`][1] will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][2].\n\n`map` does not mutate the array on which it is called (although `callback`, if\ninvoked, may do so).\n\nThe range of elements processed by `map` is set before the first invocation of\n`callback`. Elements which are appended to the array after the call to `map`\nbegins will not be visited by `callback`. If existing elements of the array\nare changed, or deleted, their value as passed to `callback` will be the value\nat the time `map` visits them; elements that are deleted are not visited.\n\n## Examples\n\n### Example: Mapping an array of numbers to an array of square roots\n\nThe following code takes an array of numbers and creates a new array\ncontaining the square roots of the numbers in the first array.\n\n    \n    \n    var numbers = [1, 4, 9];\n    var roots = numbers.map(Math.sqrt);\n    // roots is now [1, 2, 3], numbers is still [1, 4, 9]\n    \n\n### Example: Mapping an array of numbers using a function containing an\nargument\n\nThe following code shows how map works when a function requiring one argument\nis used with it. The argument will automatically be assigned to each element\nof the array as map loops through the original array.\n\n    \n    \n    var numbers = [1, 4, 9];\n    var doubles = numbers.map(function(num) {\n      return num * 2;\n    });\n    // doubles is now [2, 8, 18]. numbers is still [1, 4, 9]\n    \n\n### Example: using `map` generically\n\nThis example shows how to use map on a [`String`][3] to get an array of bytes\nin the ASCII encoding representing the character values:\n\n    \n    \n    var map = Array.prototype.map;\n    var a = map.call('Hello World', function(x) { return x.charCodeAt(0); });\n    // a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]\n    \n\n### Example: using\u00a0`map`\u00a0generically `querySelectorAll`\n\nThis example shows how to iterate through a collection of objects collected by\n`querySelectorAll`. In this case we get all selected options on the screen and\nprinted on the console:\n\n    \n    \n    var elems = document.querySelectorAll('select option:checked');\n    var values = [].map.call(elems, function(obj) {\n      return obj.value;\n    });\n    \n\n### Example: Using `map` to reverse a string\n\n    \n    \n    var str = '12345';\n    [].map.call(str, function(x) {\n      return x;\n    }).reverse().join(''); // Output: '54321', Bonus: use '===' to test if original string was a palindrome\n    \n\n### Example: Tricky use case\n\n[(inspired by this blog post)][4]\n\nIt is common to use the callback with one argument (the element being\ntraversed). Certain functions are also commonly used with one argument, even\nthough they take additional optional arguments. These habits may lead to\nconfusing behaviors.\n\n    \n    \n    // Consider:\n    ['1', '2', '3'].map(parseInt);\n    // While one could expect [1, 2, 3]\n    // The actual result is [1, NaN, NaN]\n    \n    // parseInt is often used with one argument, but takes two.\n    // The first is an expression and the second is the radix.\n    // To the callback function, Array.prototype.map passes 3 arguments: \n    // the element, the index, the array\n    // The third argument is ignored by parseInt, but not the second one,\n    // hence the possible confusion. See the blog post for more details\n    \n    function returnInt(element) {\n      return parseInt(element, 10);\n    }\n    \n    ['1', '2', '3'].map(returnInt); // [1, 2, 3]\n    // Actual result is an array of numbers (as expected)\n    \n    // A simpler way to achieve the above, while avoiding the \"gotcha\":\n    ['1', '2', '3'].map(Number); // [1, 2, 3]\n    \n\n## Polyfill\n\n`map` was added to the ECMA-262 standard in the 5th edition; as such it may\nnot be present in all implementations of the standard. You can work around\nthis by inserting the following code at the beginning of your scripts,\nallowing use of `map` in implementations which do not natively support it.\nThis algorithm is exactly the one specified in ECMA-262, 5th edition, assuming\n[`Object`][5], [`TypeError`][6], and [`Array`][7] have their original values\nand that `callback.call` evaluates to the original value of\n`[`Function.prototype.call`][8]`.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.19\n    // Reference: http://es5.github.io/#x15.4.4.19\n    if (!Array.prototype.map) {\n    \n      Array.prototype.map = function(callback, thisArg) {\n    \n        var T, A, k;\n    \n        if (this == null) {\n          throw new TypeError(' this is null or not defined');\n        }\n    \n        // 1. Let O be the result of calling ToObject passing the |this| \n        //    value as the argument.\n        var O = Object(this);\n    \n        // 2. Let lenValue be the result of calling the Get internal \n        //    method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n    \n        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== 'function') {\n          throw new TypeError(callback + ' is not a function');\n        }\n    \n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n          T = thisArg;\n        }\n    \n        // 6. Let A be a new array created as if by the expression new Array(len) \n        //    where Array is the standard built-in constructor with that name and \n        //    len is the value of len.\n        A = new Array(len);\n    \n        // 7. Let k be 0\n        k = 0;\n    \n        // 8. Repeat, while k < len\n        while (k < len) {\n    \n          var kValue, mappedValue;\n    \n          // a. Let Pk be ToString(k).\n          //   This is implicit for LHS operands of the in operator\n          // b. Let kPresent be the result of calling the HasProperty internal \n          //    method of O with argument Pk.\n          //   This step can be combined with c\n          // c. If kPresent is true, then\n          if (k in O) {\n    \n            // i. Let kValue be the result of calling the Get internal \n            //    method of O with argument Pk.\n            kValue = O[k];\n    \n            // ii. Let mappedValue be the result of calling the Call internal \n            //     method of callback with T as the this value and argument \n            //     list containing kValue, k, and O.\n            mappedValue = callback.call(T, kValue, k, O);\n    \n            // iii. Call the DefineOwnProperty internal method of A with arguments\n            // Pk, Property Descriptor\n            // { Value: mappedValue,\n            //   Writable: true,\n            //   Enumerable: true,\n            //   Configurable: true },\n            // and false.\n    \n            // In browsers that support Object.defineProperty, use the following:\n            // Object.defineProperty(A, k, {\n            //   value: mappedValue,\n            //   writable: true,\n            //   enumerable: true,\n            //   configurable: true\n            // });\n    \n            // For best browser support, use the following:\n            A[k] = mappedValue;\n          }\n          // d. Increase k by 1.\n          k++;\n        }\n    \n        // 9. return A\n        return A;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.map' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.map' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][11].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[1.5][12] (1.8)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.8)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][13]\n  * [`Map`][14] object\n  * [`Array.from()`][15]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[4]: http://www.wirfs-brock.com/allen/posts/166\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.19\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.map\n\n[11]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[12]: /en-US/Firefox/Releases/1.5\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Function.length", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.length", "content": "## Summary\n\nThe `**length**` property specifies the number of arguments expected by the\nfunction.\n\n## Description\n\n`length` is a property of a function object, and indicates how many arguments\nthe function expects, i.e. the number of formal parameters. This number does\nnot include the [rest parameter][1]. By contrast, [`arguments.length`][2] is\nlocal to a function and provides the number of arguments actually passed to\nthe function.\n\n### Data property of the `Function` constructor\n\nThe [`Function`][3] constructor is itself a [`Function`][3] object. It's\n`length` data property has a value of 1. The property attributes are:\nWritable: `false`, Enumerable: `false`, Configurable: `true`.\n\n### Property of the `Function` prototype object\n\nThe length property of the [`Function`][3] prototype object has a value of 0.\n\n## Examples\n\n    \n    \n    console.log(Function.length); /* 1 */\n    \n    console.log((function()        {}).length); /* 0 */\n    console.log((function(a)       {}).length); /* 1 */\n    console.log((function(a, b)    {}).length); /* 2 etc. */\n    console.log((function(...args) {}).length); /* 0, rest parameter is not counted */\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`length` property of the [`Function`][3] constructor:  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][4]  \n`length` property of the [`Function`][3] prototype object:  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][5]  \n`length` property of [`Function`][3] instances:  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n`length` property of the [`Function`][3] constructor:  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][7]  \n`length` property of the [`Function`][3] prototype object:  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][8]  \n`length` property of [`Function`][3] instances:  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function.length' in that specification.][9]  \n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][10].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/rest_parameters\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/length\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.3.2\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-properties-of-the-function-prototype-object\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.5.1\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function.length\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.3.4\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-instances-length\n\n[10]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Date.prototype.toLocaleString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tolocalestring()", "content": "## Summary\n\nThe `**toLocaleString()**` method returns a string with a language sensitive\nrepresentation of this date. The new `locales` and `options` arguments let\napplications specify the language whose formatting conventions should be used\nand customize the behavior of the function. In older implementations, which\nignore the `locales` and `options` arguments, the locale used and the form of\nthe string returned are entirely implementation dependent.\n\n## Syntax\n\n    \n    \n    dateObj.toLocaleString([locales [, options]])\n\n### Parameters\n\nCheck the Browser compatibility section to see which browsers support the\n`locales` and `options` arguments, and the Example: Checking for support for\n`locales` and `options` arguments for feature detection.\n\n`locales`\n\n    \n\nA string with a BCP 47 language tag, or an array of such strings. For the\ngeneral form and interpretation of the `locales` argument, see the [Intl\npage][1]. The following Unicode extension keys are allowed:\n\nnu\n\n     Numbering system. Possible values include: \"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\".\nca\n\n     Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".\n`options`\n\n    \n\nAn object with some or all of the following properties:\n\n`localeMatcher`\n\n     The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the [Intl page][2].\n`timeZone`\n\n     The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the [IANA time zone database][3], such as \"Asia/Shanghai\", \"Asia/Kolkata\", \"America/New_York\".\n`hour12`\n\n     Whether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent.\n`formatMatcher`\n\n     The format matching algorithm to use. Possible values are \"basic\" and \"best fit\"; the default is \"best fit\". See the following paragraphs for information about the use of this property.\n\nThe following properties describe the date-time components to use in formatted\noutput, and their desired representations.\u00a0 Implementations are required to\nsupport at least the following subsets:\n\n  * weekday, year, month, day, hour, minute, second\n  * weekday, year, month, day\n  * year, month, day\n  * year, month\n  * month, day\n  * hour, minute, second\n  * hour, minute\n\nImplementations may support other subsets, and requests will be negotiated\nagainst all available subset-representation combinations to find the best\nmatch. Two algorithms are available for this negotiation and selected by the\n`formatMatcher` property: A [fully specified \"basic\" algorithm][4] and an\nimplementation dependent \"best fit\" algorithm.\n\n`weekday`\n\n     The representation of the weekday. Possible values are \"narrow\", \"short\", \"long\".\n`era`\n\n     The representation of the era. Possible values are \"narrow\", \"short\", \"long\".\n`year`\n\n     The representation of the year. Possible values are \"numeric\", \"2-digit\".\n`month`\n\n     The representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".\n`day`\n\n     The representation of the day. Possible values are \"numeric\", \"2-digit\".\n`hour`\n\n     The representation of the hour. Possible values are \"numeric\", \"2-digit\".\n`minute`\n\n     The representation of the minute. Possible values are \"numeric\", \"2-digit\".\n`second`\n\n     The representation of the second. Possible values are \"numeric\", \"2-digit\".\n`timeZoneName`\n\n     The representation of the time zone name. Possible values are \"short\", \"long\".\n\nThe default value for each date-time component property is `undefined`, but if\nthe `weekday`, `year`, `month`, `day`, `hour`, `minute`, `second` properties\nare all `undefined`, then `year`, `month`, `day`, `hour`, `minute`, and\n`second` are assumed to be \"numeric\".\n\n## Examples\n\n### Example: Using `toLocaleString`\n\nIn basic use without specifying a locale, a formatted string in the default\nlocale and with default options is returned.\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n    \n    // toLocaleString without arguments depends on the implementation,\n    // the default locale, and the default time zone\n    date.toLocaleString();\n    // \u2192 \"12/11/2012, 7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n\n### Example: Checking for support for `locales` and `options` arguments\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\nTo check whether an implementation supports them already, you can use the\nrequirement that illegal language tags are rejected with a `RangeError`\nexception:\n\n    \n    \n    function toLocaleStringSupportsLocales() {\n        try {\n            new Date().toLocaleString(\"i\");\n        } catch (e) {\n            return e\u200b.name === \"RangeError\";\n        }\n        return false;\n    }\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized date and time formats.\nIn order to get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // formats below assume the local time zone of the locale;\n    // America/Los_Angeles for the US\n    \n    // US English uses month-day-year order\n    alert(date.toLocaleString(\"en-US\"));\n    // \u2192 \"12/19/2012, 7:00:00 PM\"\n    \n    // British English uses day-month-year order\n    alert(date.toLocaleString(\"en-GB\"));\n    // \u2192 \"20/12/2012 03:00:00\"\n    \n    // Korean uses year-month-day order\n    alert(date.toLocaleString(\"ko-KR\"));\n    // \u2192 \"2012. 12. 20. \uc624\ud6c4 12:00:00\"\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    alert(date.toLocaleString(\"ar-EG\"));\n    // \u2192 \"\u0662\u0660\u200f/\u0661\u0662\u200f/\u0662\u0660\u0661\u0662 \u0665:\u0660\u0660:\u0660\u0660 \u0635\"\n    \n    // for Japanese, applications may want to use the Japanese calendar,\n    // where 2012 was the year 24 of the Heisei era\n    alert(date.toLocaleString(\"ja-JP-u-ca-japanese\"));\n    // \u2192 \"24/12/20 12:00:00\"\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    alert(date.toLocaleString([\"ban\", \"id\"]));\n    // \u2192 \"20/12/2012 11.00.00\"\n    \n\n### Example: Using `options`\n\nThe results provided by `toLocaleString` can be customized using the `options`\nargument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // request a weekday along with a long date\n    var options = {weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\"};\n    alert(date.toLocaleString(\"de-DE\", options));\n    // \u2192 \"Donnerstag, 20. Dezember 2012\"\n    \n    // an application may want to use UTC and make that visible\n    options.timeZone = \"UTC\";\n    options.timeZoneName = \"short\";\n    alert(date.toLocaleString(\"en-US\", options));\n    // \u2192 \"Thursday, December 20, 2012, GMT\"\n    \n    // sometimes even the US needs 24-hour time\n    alert(date.toLocaleString(\"en-US\", {hour12: false}));\n    // \u2192 \"12/19/2012, 19:00:00\"\n    \n\n## Performance\n\nWhen formatting large numbers of dates, it is better to create an\n[`Intl.DateTimeFormat`][5] object and use the function provided by its\n[`format`][6] property.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API Specification, 1st Edition][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefines `locales` and `options` arguments.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][10] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n\n[bug\u00a0864843][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DateTimeFormat`][5]\n  * [`Date.prototype.toLocaleDateString()`][12]\n  * [`Date.prototype.toLocaleTimeString()`][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: https://www.iana.org/time-zones\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/sec-15.9.5.5\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.tolocalestring\n\n[9]: http://www.ecma-international.org/ecma-402/1.0/#sec-13.3.1\n\n[10]: /en-US/Firefox/Releases/29\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Function.displayName", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.displayname", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**_function_.displayName**` property returns the display name of the\nfunction.\n\n## Description\n\nWhen defined, the `displayName` property returns the display name of a\nfunction:\n\n    \n    \n    function doSomething() {}\n    \n    alert(doSomething.displayName); // \"undefined\"\n    \n    var popup = function(content) { alert(content); };\n    \n    popup.displayName = 'Show Popup';\n    \n    alert(popup.displayName); // \"Show Popup\"\n    \n\nYou can define a function with a display name in a [function expression][1]:\n\n    \n    \n    var object = {\n      someMethod: function() {}\n    };\n    \n    object.someMethod.displayName = 'someMethod';\n    \n    alert(object.someMethod.displayName); // alerts \"someMethod\"\n    \n    try { someMethod } catch(e) { alert(e); }\n    // ReferenceError: someMethod is not defined\n    \n\nYou can dynamically change the `displayName` of a function:\n\n    \n    \n    var object = {\n      // anonymous\n      someMethod: function(value) {\n        this.displayName = 'someMethod (' + value + ')';\n      }\n    };\n    \n    alert(object.someMethod.displayName); // \"undefined\"\n    \n    object.someMethod('123')\n    alert(object.someMethod.displayName); // \"someMethod (123)\"\n    \n\n## Examples\n\nIt is usually preferred by consoles and profilers over [`func.name`][2] to\ndisplay the name of a function.\n\nBy entering the following in a console, it should display as something like\n\"`function My Function()`\":\n\n    \n    \n    var a = function() {};\n    a.displayName = 'My Function';\n    \n    a\n    \n\n## Specifications\n\nNot part of any specification.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n[13][4] (13)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/Firefox/Releases/13\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Function.caller", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.caller", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**_function_.caller**` property returns the function that invoked the\nspecified function.\n\n## Description\n\nIf the function `f` was invoked by the top level code, the value of `f.caller`\nis [`null`][1], otherwise it's the function that called `f`.\n\nThis property replaces the obsolete [`arguments.caller`][2] property of the\n[`arguments`][3] object.\n\nThe special property `__caller__`, which returned the activation object of the\ncaller thus allowing to reconstruct the stack, was removed for security\nreasons.\n\n### Notes\n\nNote that in case of recursion, you can't reconstruct the call stack using\nthis property. Consider:\n\n    \n    \n    function f(n) { g(n - 1); }\n    function g(n) { if (n > 0) { f(n); } else { stop(); } }\n    f(2);\n    \n\nAt the moment `stop()` is called the call stack will be:\n\n    \n    \n    f(2) -> g(1) -> f(1) -> g(0) -> stop()\n    \n\nThe following is true:\n\n    \n    \n    stop.caller === g && f.caller === g && g.caller === f\n    \n\nso if you tried to get the stack trace in the `stop()` function like this:\n\n    \n    \n    var f = stop;\n    var stack = 'Stack trace:';\n    while (f) {\n      stack += '\\n' + f.name;\n      f = f.caller;\n    }\n    \n\nthe loop would never stop.\n\n## Examples\n\n### Example: Checking the value of a function's `caller` property\n\nThe following code checks the value a function's `caller` property.\n\n    \n    \n    function myFunc() {\n      if (myFunc.caller == null) {\n        return 'The function was called from the top!';\n      } else {\n        return 'This function\\'s caller was ' + myFunc.caller;\n      }\n    }\n    \n\n## Specifications\n\nNot part of any specification. Implemented in JavaScript 1.5.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * Implementation bug for SpiderMonkey [bug\u00a065683][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/caller\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=65683\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Function.arity", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.arity", "content": "**Obsolete**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n## Summary\n\nThe `**arity**` property used to return the number of arguments expected by\nthe function, however, it no longer exists and has been replaced by the\n[`Function.prototype.length`][1] property.\n\n## Specifications\n\nImplemented in JavaScript 1.2. Deprecated in JavaScript 1.4.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function.prototype.length`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Function.arguments", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.arguments", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**_function_.arguments**` property refers to an an array-like object\ncorresponding to the arguments passed to a function. Use the simple variable\n[`arguments`][1] instead.\n\n## Description\n\nThe syntax `_function_.arguments` is deprecated. The recommended way to access\nthe [`arguments`][1] object available within functions is simply to refer to\nthe variable [`arguments`][1].\n\nIn the case of recursion, i.e. if function `f` appears several times on the\ncall stack, the value of `f.arguments` represents the arguments corresponding\nto the most recent invocation of the function.\n\n## Examples\n\n    \n    \n    function f(n) { g(n - 1); }\n    \n    function g(n) {\n      console.log('before: ' + g.arguments[0]);\n      if (n > 0) { f(n); }\n      console.log('after: ' + g.arguments[0]);\n    }\n    \n    f(2);\n    \n    \n    // Output\n    \n    // before: 1\n    // before: 0\n    // after: 0\n    // after: 1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0. Deprecated in favor of\n[`arguments`][1].\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'arguments object' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n[`arguments`][1] object\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'arguments object' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n[`arguments`][1] object\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`arguments`][1] object\n  * [Functions and function scope][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-10.6\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arguments-object\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Array.prototype.values()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array.prototype.values()", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.values()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**values()**` method returns a new `**Array Iterator**` object that\ncontains the values for each index in the array.\n\n## Syntax\n\n    \n    \n    arr.values()\n\n## Iteration using `for..of loop`\n\n    \n    \n    var arr = [\"w\", \"y\", \"k\", \"o\", \"p\"];\n    var eArr = arr.values();\n    for (let letter of eArr) {  // your browser must support for..of loop and let-scoped variables in for loops\n      console.log(letter);\n    }\n    \n\n## Alternative iteration\n\n    \n    \n    var arr = [\"w\", \"y\", \"k\", \"o\", \"p\"];\n    var eArr = arr.values();\n    console.log(eArr.next().value); // w\n    console.log(eArr.next().value); // y\n    console.log(eArr.next().value); // k\n    console.log(eArr.next().value); // o\n    console.log(eArr.next().value); // p\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.values' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.keys()`][2]\n  * [`Array.prototype.entries()`][3]\n  * [`Array.prototype.forEach()`][4]\n  * [`Array.prototype.every()`][5]\n  * [`Array.prototype.some()`][6]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.values\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Function.name", "parent": "/javascript/javascript_reference/standard_built-in_objects/function", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function/function.name", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**_function_.name**` property returns the name of the function.\n\n## Description\n\nThe `name` property returns the name of a function, or an empty string for\nanonymous functions:\n\n    \n    \n    function doSomething() {}\n    \n    alert(doSomething.name); // alerts \"doSomething\"\n    \n\nFunctions created with the syntax `new Function(...)` or just `Function(...)`\nhave their `name` property set to an empty string. In the following examples\nanonymous functions are created, so `name` returns an empty string:\n\n    \n    \n    var f = function() {};\n    var object = {\n      someMethod: function() {}\n    };\n    \n    alert(f.name == ''); // true\n    alert(object.someMethod.name == ''); // also true\n    \n\nYou can define a function with a name in a [function expression][1]:\n\n    \n    \n    var object = {\n      someMethod: function object_someMethod() {}\n    };\n    alert(object.someMethod.name); // alerts \"object_someMethod\"\n    \n    try { object_someMethod } catch(e) { alert(e); }\n    // ReferenceError: object_someMethod is not defined\n    \n\nYou cannot change the name of a function, this property is read-only:\n\n    \n    \n    var object = {\n      // anonymous\n      someMethod: function() {}\n    };\n    \n    object.someMethod.name = 'someMethod';\n    alert(object.someMethod.name); // empty string, someMethod is anonymous\n    \n\n## Examples\n\nYou can use `obj.constructor.name` to check the \"class\" of an object:\n\n    \n    \n    function a() {}\n    \n    var b = new a();\n    \n    alert(b.constructor.name); // alerts \"a\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'name' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-name\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Function"], "type": "property"},
{"name": "Math.abs()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.abs()", "content": "## Summary\n\nThe `**Math.abs(x)**` function returns the absolute value of a number \"x\".\n\n## Syntax\n\n    \n    \n    var abs = Math.abs(_x_);\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `abs` is a static method of `Math`, you always use it as `Math.abs()`.\n\n## Examples\n\n### Example: Behaviour of `Math.abs()`\n\nPassing a non-numeric string or undefined/empty variable returns `NaN`.\nPassing null returns 0.\n\n    \n    \n    Math.abs('-1');     // 1\n    Math.abs(-2);       // 2\n    Math.abs(null);     // 0\n    Math.abs(\"string\"); // NaN\n    Math.abs();         // NaN\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math.abs' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.abs' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.ceil()`][4]\n  * [`Math.floor()`][5]\n  * [`Math.round()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.1\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.abs\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.floor()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.floor()", "content": "## Summary\n\nThe `**Math.floor(x)**` function returns the largest integer less than or\nequal to a number \"x\".\n\n## Syntax\n\n    \n    \n    Math.floor(_x_) \n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `floor` is a static method of `Math`, you always use it as\n`Math.floor()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.floor`\n\n    \n    \n    Math.floor( 45.95); //  45\n    Math.floor(-45.95); // -46\n    \n\n### Example: Decimal adjustment\n\n    \n    \n    // Closure\n    (function(){\n    \n    \t/**\n    \t * Decimal adjustment of a number.\n    \t *\n    \t * @param\t{String}\ttype\tThe type of adjustment.\n    \t * @param\t{Number}\tvalue\tThe number.\n    \t * @param\t{Integer}\texp\t\tThe exponent (the 10 logarithm of the adjustment base).\n    \t * @returns\t{Number}\t\t\tThe adjusted value.\n    \t */\n    \tfunction decimalAdjust(type, value, exp) {\n    \t\t// If the exp is undefined or zero...\n    \t\tif (typeof exp === 'undefined' || +exp === 0) {\n    \t\t\treturn Math[type](value);\n    \t\t}\n    \t\tvalue = +value;\n    \t\texp = +exp;\n    \t\t// If the value is not a number or the exp is not an integer...\n    \t\tif (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n    \t\t\treturn NaN;\n    \t\t}\n    \t\t// Shift\n    \t\tvalue = value.toString().split('e');\n    \t\tvalue = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n    \t\t// Shift back\n    \t\tvalue = value.toString().split('e');\n    \t\treturn +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n    \t}\n    \n    \t// Decimal round\n    \tif (!Math.round10) {\n    \t\tMath.round10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('round', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal floor\n    \tif (!Math.floor10) {\n    \t\tMath.floor10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('floor', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal ceil\n    \tif (!Math.ceil10) {\n    \t\tMath.ceil10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('ceil', value, exp);\n    \t\t};\n    \t}\n    \n    })();\n    \n    // Round\n    Math.round10(55.55, -1); // 55.6\n    Math.round10(55.549, -1); // 55.5\n    Math.round10(55, 1); // 60\n    Math.round10(54.9, 1); // 50\n    Math.round10(-55.55, -1); // -55.5\n    Math.round10(-55.551, -1); // -55.6\n    Math.round10(-55, 1); // -50\n    Math.round10(-55.1, 1); // -60\n    // Floor\n    Math.floor10(55.59, -1); // 55.5\n    Math.floor10(59, 1); // 50\n    Math.floor10(-55.51, -1); // -55.6\n    Math.floor10(-51, 1); // -60\n    // Ceil\n    Math.ceil10(55.51, -1); // 55.6\n    Math.ceil10(51, 1); // 60\n    Math.ceil10(-55.59, -1); // -55.5\n    Math.ceil10(-59, 1); // -50\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.abs`][4]\n  * [`Math.ceil()`][5]\n  * [`Math.round()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.9\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.floor\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Array.prototype.reduceRight()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.reduceright()", "content": "## Summary\n\nThe `**reduceRight()**` method applies a function against an accumulator and\neach value of the array (from right-to-left) has to reduce it to a single\nvalue.\n\n## Syntax\n\n    \n    \n    arr.reduceRight(callback[, initialValue])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking four arguments: \n\n`previousValue`\n\n     The value previously returned in the last invocation of the callback, or `initialValue`, if supplied. (See below.)\n`currentValue`\n\n     The current element being processed in the array.\n`index`\n\n     The index of the current element being processed in the array.\n`array`\n\n     The array `reduce` was called upon.\n`initialValue`\n\n     Optional. Object to use as the first argument to the first call of the `callback`.\n\n## Description\n\n`reduceRight` executes the callback function once for each element present in\nthe array, excluding holes in the array, receiving four arguments: the initial\nvalue (or value from the previous callback call), the value of the current\nelement, the current index, and the array over which iteration is occurring.\n\nThe call to the reduceRight `callback` would look something like this:\n\n    \n    \n    array.reduceRight(function(previousValue, currentValue, index, array) {\n      // ...\n    });\n    \n\nThe first time the function is called, the `previousValue` and `currentValue`\ncan be one of two values. If an `initialValue` was provided in the call to\n`reduceRight`, then `previousValue` will be equal to `initialValue` and\n`currentValue` will be equal to the last value in the array. If no\n`initialValue` was provided, then `previousValue` will be equal to the last\nvalue in the array and `currentValue` will be equal to the second-to-last\nvalue.\n\nIf the array is empty and no `initialValue `was provided, [`TypeError`][1]\nwould be thrown. If the array has only one element (regardless of position)\nand no `initialValue `was provided, or if `initialValue` is provided but the\narray is empty, the solo value would be returned without calling `callback`.\n\nSome example run-throughs of the function would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    });\n    \n\nThe callback would be invoked four times, with the arguments and return values\nin each call being as follows:  \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`7`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`7`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`9`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`9`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr> </table>\n\nThe value returned by `reduceRight` would be that of the last callback\ninvocation (`10`).\n\nAnd if you were to provide an `initialValue`, the result would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduceRight(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    }, 10);\n      \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`14`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`14`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`17`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`17`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`19`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`19`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfifth call\n\n</th>  \n<td>\n\n`20`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr> </table>\n\nThe value returned by `reduceRight` this time would be, of course, `20`.\n\n## Examples\n\n### Example: Sum up all values within an array\n\n    \n    \n    var total = [0, 1, 2, 3].reduceRight(function(a, b) {\n      return a + b;\n    });\n    // total == 6\n    \n\n### Example: Flatten an array of arrays\n\n    \n    \n    var flattened = [[0, 1], [2, 3], [4, 5]].reduceRight(function(a, b) {\n        return a.concat(b);\n    }, []);\n    // flattened is [4, 5, 2, 3, 0, 1]\n    \n\n## Polyfill\n\n`reduceRight` was added to the ECMA-262 standard in the 5th edition; as such\nit may not be present in all implementations of the standard. You can work\naround this by inserting the following code at the beginning of your scripts,\nallowing use of `reduceRight` in implementations which do not natively support\nit.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.22\n    // Reference: http://es5.github.io/#x15.4.4.22\n    if ('function' !== typeof Array.prototype.reduceRight) {\n      Array.prototype.reduceRight = function(callback /*, initialValue*/) {\n        'use strict';\n        if (null === this || 'undefined' === typeof this) {\n          throw new TypeError('Array.prototype.reduce called on null or undefined' );\n        }\n        if ('function' !== typeof callback) {\n          throw new TypeError(callback + ' is not a function');\n        }\n        var t = Object(this), len = t.length >>> 0, k = len - 1, value;\n        if (arguments.length >= 2) {\n          value = arguments[1];\n        } else {\n          while (k >= 0 && !k in t) {\n            k--;\n          }\n          if (k < 0) {\n            throw new TypeError('Reduce of empty array with no initial value');\n          }\n          value = t[k--];\n        }\n        for (; k >= 0; k--) {\n          if (k in t) {\n            value = callback(value, t[k], k, t);\n          }\n        }\n        return value;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.reduceRight' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.reduceRight' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.0][5] (1.9)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.reduce()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.22\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reduceright\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/3\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Array.prototype.reduce()", "parent": "/javascript/javascript_reference/standard_built-in_objects/array", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array/array.prototype.reduce()", "content": "## Summary\n\nThe `**reduce()**` method applies a function against an accumulator and each\nvalue of the array (from left-to-right) has to reduce it to a single value.\n\n## Syntax\n\n    \n    \n    arr.reduce(callback[, initialValue])\n\n### Parameters\n\n`callback`\n\n     Function to execute on each value in the array, taking four arguments: \n\n`previousValue`\n\n     The value previously returned in the last invocation of the callback, or `initialValue`, if supplied. (See below.)\n`currentValue`\n\n     The current element being processed in the array.\n`index`\n\n     The index of the current element being processed in the array.\n`array`\n\n     The array `reduce` was called upon.\n`initialValue`\n\n     Optional. Object to use as the first argument to the first call of the `callback`.\n\n## Description\n\n`reduce` executes the `callback` function once for each element present in the\narray, excluding holes in the array, receiving four arguments: the initial\nvalue (or value from the previous `callback` call), the value of the current\nelement, the current index, and the array over which iteration is occurring.\n\nThe first time the callback is called, `previousValue` and `currentValue` can\nbe one of two values. If `initialValue` is provided in the call to `reduce`,\nthen `previousValue` will be equal to `initialValue` and `currentValue` will\nbe equal to the first value in the array. If no `initialValue` was provided,\nthen `previousValue` will be equal to the first value in the array and\n`currentValue` will be equal to the second.\n\nIf the array is empty and no `initialValue` was provided, [`TypeError`][1]\nwould be thrown. If the array has only one element (regardless of position)\nand no `initialValue` was provided, or if `initialValue` is provided but the\narray is empty, the solo value would be returned without calling `callback`.\n\nSuppose the following use of `reduce` occurred:\n\n    \n    \n    [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    });\n    \n\nThe callback would be invoked four times, with the arguments and return values\nin each call being as follows:  \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`1`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`3`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`6`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`6`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr> </table>\n\nThe value returned by `reduce` would be that of the last callback invocation\n(`10`).\n\nIf you were to provide an initial value as the second argument to `reduce`,\nthe result would look like this:\n\n    \n    \n    [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {\n      return previousValue + currentValue;\n    }, 10);\n      \n  \n<table>  \n<tr>  \n<th>\n\n\n\n</th>  \n<th>\n\n`previousValue`\n\n</th>  \n<th>\n\n`currentValue`\n\n</th>  \n<th>\n\n`index`\n\n</th>  \n<th>\n\n`array`\n\n</th>  \n<th>\n\nreturn value\n\n</th> </tr>  \n<tr>  \n<th>\n\nfirst call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n`0`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`10`\n\n</td> </tr>  \n<tr>  \n<th>\n\nsecond call\n\n</th>  \n<td>\n\n`10`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n`1`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`11`\n\n</td> </tr>  \n<tr>  \n<th>\n\nthird call\n\n</th>  \n<td>\n\n`11`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n`2`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`13`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfourth call\n\n</th>  \n<td>\n\n`13`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n`3`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`16`\n\n</td> </tr>  \n<tr>  \n<th>\n\nfifth call\n\n</th>  \n<td>\n\n`16`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n`4`\n\n</td>  \n<td>\n\n[`0, 1, 2, 3, 4]`\n\n</td>  \n<td>\n\n`20`\n\n</td> </tr> </table>\n\nThe value returned by `reduce` this time would be, of course, `20`.\n\n## Examples\n\n### Example: Sum up all values within an array\n\n    \n    \n    var total = [0, 1, 2, 3].reduce(function(a, b) {\n      return a + b;\n    });\n    // total == 6\n    \n\n### Example: Flatten an array of arrays\n\n    \n    \n    var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {\n      return a.concat(b);\n    });\n    // flattened is [0, 1, 2, 3, 4, 5]\n    \n\n## Polyfill\n\n`Array.prototype.reduce` was added to the ECMA-262 standard in the 5th\nedition; as such it may not be present in all implementations of the standard.\nYou can work around this by inserting the following code at the beginning of\nyour scripts, allowing use of `reduce` in implementations which do not\nnatively support it.\n\n    \n    \n    // Production steps of ECMA-262, Edition 5, 15.4.4.21\n    // Reference: http://es5.github.io/#x15.4.4.21\n    if (!Array.prototype.reduce) {\n      Array.prototype.reduce = function(callback /*, initialValue*/) {\n        'use strict';\n        if (this == null) {\n          throw new TypeError('Array.prototype.reduce called on null or undefined');\n        }\n        if (typeof callback !== 'function') {\n          throw new TypeError(callback + ' is not a function');\n        }\n        var t = Object(this), len = t.length >>> 0, k = 0, value;\n        if (arguments.length == 2) {\n          value = arguments[1];\n        } else {\n          while (k < len && ! k in t) {\n            k++; \n          }\n          if (k >= len) {\n            throw new TypeError('Reduce of empty array with no initial value');\n          }\n          value = t[k++];\n        }\n        for (; k < len; k++) {\n          if (k in t) {\n            value = callback(value, t[k], k, t);\n          }\n        }\n        return value;\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array.prototype.reduce' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array.prototype.reduce' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.0][5] (1.9)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.reduceRight()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.21\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.prototype.reduce\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/Firefox/Releases/3\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Array"], "type": "method"},
{"name": "Object.setPrototypeOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.setprototypeof()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\n**Warning:** Mutating the [`[Prototype]]` of an object, using either this method or the deprecated [`Object.prototype.__proto__`][1], is strongly discouraged, because it is very slow and unavoidably slows down subsequent execution in modern JavaScript implementations.\n\nThe `**Object.setPrototype()**` method sets the prototype (i.e., the internal\n[`[Prototype]]` property) of a specified object to another object or\n[`null`][2].\n\n## Syntax\n\n    \n    \n    Object.setPrototypeOf(obj, prototype);\n\n### Parameters\n\n`obj`\n\n     The object which is to have its prototype set.\n`prototype`\n\n     The object's new prototype (an object or [`null`][2]).\n\n## Description\n\nThrows a [`TypeError`][3] exception if the object whose [`[Prototype]]` is to\nbe modified is non-extensible according to [`Object.isExtensible()`][4]. Does\nnothing if the `prototype` parameter isn't an object or [`null`][2] (i.e.,\nnumber, string, boolean, or [`undefined`][5]). Otherwise, this method changes\nthe [`[Prototype]]` of `obj` to the new value.\n\n**Warning:** Mutating the [`[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation. If you care at all about performance, you should never mutate the [`[Prototype]]` of an object, either using this method or using [`Object.prototype.__proto__`][1] property. Instead, create the object with the desired [`[Prototype]]` using [`Object.create()`][6].\n\n`Object.setPrototypeOf()` is in the latest ECMAScript 6 standard draft.\n\n## Examples\n\n    \n    \n    var dict = Object.setPrototypeOf({}, null);\n    \n\n## Polyfill\n\nUsing the old and deprecated [`Object.prototype.__proto__`][1] property, we\ncan easily define `Object.setPrototypeOf`\u00a0if it isn't available already:\n\n    \n    \n    Object.setPrototypeOf = Object.setPrototypeOf || function(obj, proto) {\n      obj.__proto__ = proto;\n      return obj; \n    }\n    \n\n## Appending a whole prototype chain to a new prototype object\n\nA combination of `Object.getPrototypeOf()` and\n[`Object.prototype.__proto__`][1] permits appending a whole prototype chain to\na new prototype object:\n\n    \n    \n    /**\n    *** Object.setPrototypeOf(@object, @prototype)\n    * Changes the prototype of an instance\n    *\n    **/\n    \n    Object.setPrototypeOf = function(oInstance, oProto) {\n      oInstance.__proto__ = oProto;\n      return oInstance;\n    };\n    \n    /**\n    *** Object.appendChain(@object, @prototype)\n    *\n    * Appends the first non-native prototype of a chain to a new prototype.\n    * Returns @object (if it was a primitive value it will transformed into an object).\n    *\n    *** Object.appendChain(@object [, \"@arg_name_1\", \"@arg_name_2\", \"@arg_name_3\", \"...\"], \"@function_body\")\n    *** Object.appendChain(@object [, \"@arg_name_1, @arg_name_2, @arg_name_3, ...\"], \"@function_body\")\n    *\n    * Appends the first non-native prototype of a chain to the native Function.prototype object, then appends a\n    * new Function([\"@arg\"(s)], \"@function_body\") to that chain.\n    * Returns the function.\n    *\n    **/\n    \n    Object.appendChain = function(oChain, oProto) {\n      if (arguments.length < 2) { \n        throw new TypeError('Object.appendChain - Not enough arguments');\n      }\n      if (typeof oProto === 'number' || typeof oProto === 'boolean') {\n        throw new TypeError('second argument to Object.appendChain must be an object or a string');\n      }\n    \n      var oNewProto = oProto,\n          oReturn = o2nd = oLast = oChain instanceof this ? oChain : new oChain.constructor(oChain);\n    \n      for (var o1st = this.getPrototypeOf(o2nd);\n        o1st !== Object.prototype && o1st !== Function.prototype;\n        o1st = this.getPrototypeOf(o2nd)\n      ) {\n        o2nd = o1st;\n      }\n    \n      if (oProto.constructor === String) {\n        oNewProto = Function.prototype;\n        oReturn = Function.apply(null, Array.prototype.slice.call(arguments, 1));\n        this.setPrototypeOf(oReturn, oLast);\n      }\n    \n      this.setPrototypeOf(o2nd, oNewProto);\n      return oReturn;\n    }\n    \n\n### Usage\n\n#### First example: Appending a chain to a prototype\n\n    \n    \n    function Mammal() {\n      this.isMammal = 'yes';\n    }\n    \n    function MammalSpecies(sMammalSpecies) {\n      this.species = sMammalSpecies;\n    }\n    \n    MammalSpecies.prototype = new Mammal();\n    MammalSpecies.prototype.constructor = MammalSpecies;\n    \n    var oCat = new MammalSpecies('Felis');\n    \n    alert(oCat.isMammal); // 'yes'\n    \n    function Animal() {\n      this.breathing = 'yes';\n    }\n    \n    Object.appendChain(oCat, new Animal());\n    \n    alert(oCat.breathing); // 'yes'\n    \n\n#### Second example: Transforming a primitive value into an instance of its\nconstructor and append its chain to a prototype\n\n    \n    \n    function Symbol() {\n      this.isSymbol = 'yes';\n    }\n    \n    var nPrime = 17;\n    \n    alert(typeof nPrime); // 'number'\n    \n    var oPrime = Object.appendChain(nPrime, new Symbol());\n    \n    alert(oPrime); // '17'\n    alert(oPrime.isSymbol); // 'yes'\n    alert(typeof oPrime); // 'object'\n    \n\n#### Third example: Appending a chain to the Function.prototype object and\nappending a new function to that chain\n\n    \n    \n    function Person(sName) {\n      this.identity = sName;\n    }\n    \n    var george = Object.appendChain(new Person('George'),\n                                    'alert(\"Hello guys!!\");');\n    \n    alert(george.identity); // 'George'\n    george(); // 'Hello guys!!'\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.setProtoypeOf' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n34  \nSee [Issue 2675][9]\n\n</td>  \n<td>\n\n[31][10] (31)  \nSee [bug\u00a0885788][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31.0 (31)  \nSee [bug\u00a0885788][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.isPrototypeOf()`][12]\n  * [`Object.getPrototypeOf()`][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.setprototypeof\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: https://code.google.com/p/v8/issues/detail?id=2675\n\n[10]: /en-US/Firefox/Releases/31\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=885788\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.seal()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.seal()", "content": "## Summary\n\nThe `**Object.seal()**` method seals an object, preventing new properties from\nbeing added to it and marking all existing properties as non-configurable.\nValues of present properties can still be changed as long as they are\nwritable.\n\n## Syntax\n\n    \n    \n    Object.seal(obj)\n\n### Parameters\n\n`obj`\n\n     The object which should be sealed.\n\n## Description\n\nBy default, objects are [extensible][1] (new properties can be added to them).\nSealing an object prevents new properties from being added and marks all\nexisting properties as non-configurable. This has the effect of making the set\nof properties on the object fixed and immutable. Making all properties non-\nconfigurable also prevents them from being converted from data properties to\naccessor properties and vice versa, but it does not prevent the values of data\nproperties from being changed. Attempting to delete or add properties to a\nsealed object, or to convert a data property to accessor or vice versa, will\nfail, either silently or by throwing a [`TypeError`][2] (most commonly,\nalthough not exclusively, when in [strict mode][3] code).\n\nThe prototype chain remains untouched. However, the [`__proto__`][4] _ _\nproperty is sealed as well.\n\n## Examples\n\n    \n    \n    var obj = {\n      prop: function() {},\n      foo: 'bar'\n    };\n    \n    // New properties may be added, existing properties may be changed or removed.\n    obj.foo = 'baz';\n    obj.lumpy = 'woof';\n    delete obj.prop;\n    \n    var o = Object.seal(obj);\n    \n    assert(o === obj);\n    assert(Object.isSealed(obj) === true);\n    \n    // Changing property values on a sealed object still works.\n    obj.foo = 'quux';\n    \n    // But you can't convert data properties to accessors, or vice versa.\n    Object.defineProperty(obj, 'foo', { get: function() { return 'g'; } }); // throws a TypeError\n    \n    // Now any changes, other than to property values, will fail.\n    obj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n    delete obj.foo; // silently doesn't delete the property\n    \n    // ...and in strict mode such attempts will throw TypeErrors.\n    function fail() {\n      'use strict';\n      delete obj.foo; // throws a TypeError\n      obj.sparky = 'arf'; // throws a TypeError\n    }\n    fail();\n    \n    // Attempted additions through Object.defineProperty will also throw.\n    Object.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n    Object.defineProperty(obj, 'foo', { value: 'eit' }); // changes existing property value\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][2]. In ES6, a non-object argument will be treated\nas if it was a sealed ordinary object, simply return it.\n\n    \n    \n    > Object.seal(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.seal(1)\n    1                             // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.seal' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.seal' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[4.0][8] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][9].\n\n## See also\n\n  * [`Object.isSealed()`][10]\n  * [`Object.preventExtensions()`][11]\n  * [`Object.isExtensible()`][1]\n  * [`Object.freeze`][12]\n  * [`Object.isFrozen()`][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.8\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.seal\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/Firefox/Releases/4\n\n[9]: http://kangax.github.com/es5-compat-table/\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.watch()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.watch()", "content": "**Warning:** Generally you should avoid using `watch()` and [`unwatch()`][1] when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as `window`. You can usually use [setters and getters][2] or proxies instead. See Browser compatibility for details. Also, do not confuse [`Object.watch`][3] with [`Object.observe`][4].\n\n## Summary\n\nThe `**watch()**` method watches for a property to be assigned a value and\nruns a function when that occurs.\n\n## Syntax\n\n    \n    \n    obj.watch(prop, handler)\n\n### Parameters\n\n`prop`\n\n     The name of a property of the object on which you wish to monitor changes.\n`handler`\n\n     A function to call when the specified property's value changes.\n\n## Description\n\nWatches for assignment to a property named `prop` in this object, calling\n`handler(prop, oldval, newval)` whenever `prop` is set and storing the return\nvalue in that property. A watchpoint can filter (or nullify) the value\nassignment, by returning a modified `newval` (or by returning `oldval`).\n\nIf you delete a property for which a watchpoint has been set, that watchpoint\ndoes not disappear. If you later recreate the property, the watchpoint is\nstill in effect.\n\nTo remove a watchpoint, use the [`unwatch()`][1] method. By default, the\n`watch` method is inherited by every object descended from [`Object`][5].\n\nThe JavaScript debugger has functionality similar to that provided by this\nmethod, as well as other debugging options. For information on the debugger,\nsee [Venkman][6].\n\nIn Firefox, `handler` is only called from assignments in script, not from\nnative code. For example, `window.watch('location', myHandler)` will not call\n`myHandler` if the user clicks a link to an anchor within the current\ndocument. However, `window.location += '#myAnchor'` will call `myHandler`.\n\n**Note:** Calling `watch()` on an object for a specific property overrides any previous handler attached for that property.\n\n## Examples\n\n### Example: Using `watch` and `unwatch`\n\n    \n    \n    var o = { p: 1 };\n    \n    o.watch('p', function (id, oldval, newval) {\n      console.log('o.' + id + ' changed from ' + oldval + ' to ' + newval);\n      return newval;\n    });\n    \n    o.p = 2;\n    o.p = 3;\n    delete o.p;\n    o.p = 4;\n    \n    o.unwatch('p');\n    o.p = 5;\n    \n\nThis script displays the following:\n\n    \n    \n    o.p changed from 1 to 2\n    o.p changed from 2 to 3\n    o.p changed from undefined to 4\n    \n\n### Example: Using `watch` to validate an object's properties\n\nYou can use `watch` to test any assignment to an object's properties. This\nexample ensures that every Person always has a valid name and an age between 0\nand 200.\n\n    \n    \n    Person = function(name, age) {\n      this.watch('age', Person.prototype._isValidAssignment);\n      this.watch('name', Person.prototype._isValidAssignment);\n      this.name = name;\n      this.age = age;\n    };\n    \n    Person.prototype.toString = function() {\n      return this.name + ', ' + this.age;\n    };\n    \n    Person.prototype._isValidAssignment = function(id, oldval, newval) {\n      if (id === 'name' && (!newval || newval.length > 30)) {\n        throw new RangeError('invalid name for ' + this);\n      }\n      if (id === 'age'  && (newval < 0 || newval > 200)) {\n        throw new RangeError('invalid age for ' + this);\n      }\n      return newval;\n    }\n    \n    will = new Person('Will', 29);\n    print(will);   // Will, 29\n    \n    try {\n      will.name = '';\n    } catch (e) {\n      print(e);\n    }\n    \n    try {\n      will.age = -4;\n    } catch (e) {\n      print(e);\n    }\n    \n\nThis script displays the following:\n\n    \n    \n    Will, 29\n    RangeError: invalid name for Will, 29\n    RangeError: invalid age for Will, 29\n    \n\n## Specifications\n\nNot part of any specifications. Implemented in JavaScript 1.2.\n\n## Browser compatibility\n\n  * This [Polyfill][7]\u00a0offers `watch` to all ES5 compatible browsers\n  * Using a [`Proxy`][8] enables you do even deeper changes to how property assignments work\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n**Note:** Calling `watch()` on the [`Document`][10] object throws a [`TypeError`][11] since Firefox\u00a023 ([bug\u00a0903332][12]). This regression has been fixed with Firefox\u00a027.\n\n## See also\n\n  * [`Object.unwatch()`][1]\n  * [`Object.observe()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[6]: /en-US/docs/Venkman\n\n[7]: https://gist.github.com/384583\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[10]: /en-US/docs/Web/API/Document\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=903332\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Math.min()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.min()", "content": "## Summary\n\nThe `**Math.min()**` function returns the smallest of zero or more numbers.\n\n## Syntax\n\n    \n    \n    Math.min([_value1_[,_value2_, ...]]) \n\n### Parameters\n\n`value1, value2, ...`\n\n     Numbers.\n\n## Description\n\nBecause `min` is a static method of `Math`, you always use it as `Math.min()`,\nrather than as a method of a `Math` object you created.\n\nIf no arguments are given, the result is [`Infinity`][1].\n\nIf at least one of arguments cannot be converted to a number, the result is\n[`NaN`][2].\n\n## Examples\n\n### Example: Using `Math.min`\n\nThis finds the min of x and y and assigns it to z:\n\n    \n    \n    var x = 10, y = -20;\n    var z = Math.min(x, y);\n    \n\n### Example: Clipping a value with `Math.min`\n\n`Math.min` is often used to clip a value so that it is always less than or\nequal to a boundary. For instance, this\n\n    \n    \n    var x = f(foo);\n    \n    if (x > boundary)\n        x = boundary;\n    \n\nmay be written as this\n\n    \n    \n    var x = Math.min(f(foo), boundary);\n\n[`Math.max()`][3] can be used in a similar way to clip a value at the other\nend.\n\n\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][6] object it belongs to.\n  * [`Math.max()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.12\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.min\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Object.prototype.__lookupGetter__()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__lookupgetter__()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**__lookupGetter__**` method returns the function bound as a getter to\nthe specified property.\n\n## Syntax\n\n    \n    \n    obj.__lookupGetter__(sprop)\n\n### Parameters\n\n`sprop`\n\n     A string containing the name of the property whose getter should be returned.\n\n## Description\n\nIf a getter has been defined for an object's property, it's not possible to\nreference the getter function through that property, because that property\nrefers to the return value of that function. `__lookupGetter__` can be used to\nobtain a reference to the getter function.\n\nIt is now possible to do this in a standardized way using\n[`Object.getOwnPropertyDescriptor()`][1] and [`Object.getPrototypeOf()`][2].\n\n## Examples\n\n    \n    \n    var obj = {\n      get foo() {\n        return Math.random() > 0.5 ? 'foo' : 'bar';\n      }\n    };\n    \n    obj.__lookupGetter__('foo');\n    // (function() { return Math.random() > 0.5 ? 'foo' : 'bar'; })\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.__lookupSetter__()`][3]\n  * [`get`][4] operator\n  * [`Object.getOwnPropertyDescriptor()`][1] and [`Object.getPrototypeOf()`][2]\n  * [`Object.prototype.__defineGetter__()`][5]\n  * [`Object.prototype.__defineSetter__()`][6]\n  * [JS Guide: Defining Getters and Setters][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/get\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\n\n[7]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.valueof()", "content": "## Summary\n\nThe `**valueOf()**` method returns the primitive value of the specified\nobject.\n\n## Syntax\n\n    \n    \n    object.valueOf()\n\n## Description\n\nJavaScript calls the `valueOf` method to convert an object to a primitive\nvalue. You rarely need to invoke the `valueOf` method yourself; JavaScript\nautomatically invokes it when encountering an object where a primitive value\nis expected.\n\nBy default, the `valueOf` method is inherited by every object descended from\n[`Object`][1]. Every built-in core object overrides this method to return an\nappropriate value. If an object has no primitive value, `valueOf` returns the\nobject itself, which is displayed as:\n\n    \n    \n    [object Object]\n\nYou can use `valueOf` within your own code to convert a built-in object into a\nprimitive value. When you create a custom object, you can override\n`Object.prototype.valueOf()` to call a custom method instead of the default\n[`Object`][1] method.\n\n### Overriding `valueOf` for custom objects\n\nYou can create a function to be called in place of the default `valueOf`\nmethod. Your function must take no arguments.\n\nSuppose you have an object type `myNumberType` and you want to create a\n`valueOf` method for it. The following code assigns a user-defined function to\nthe object's `valueOf` method:\n\n    \n    \n    myNumberType.prototype.valueOf = function() { return customPrimitiveValue; };\n\nWith the preceding code in place, any time an object of type `myNumberType` is\nused in a context where it is to be represented as a primitive value,\nJavaScript automatically calls the function defined in the preceding code.\n\nAn object's `valueOf` method is usually invoked by JavaScript, but you can\ninvoke it yourself as follows:\n\n    \n    \n    myNumber.valueOf()\n\n**Note:** Objects in string contexts convert via the [`toString()`][2] method, which is different from [`String`][3] objects converting to string primitives using `valueOf`. All objects have a string conversion, if only \"[`object _type_]`\". But many objects do not convert to number, boolean, or function.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    o = new Object();\n    myVar = o.valueOf();      // [object Object]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.valueOf' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.valueOf' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][2]\n  * [`parseInt()`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.4\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.valueof\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.unwatch()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.unwatch()", "content": "**Warning:** Generally you should avoid using `unwatch()` and [`watch()`][1] when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as `window`. You can usually use [setters and getters][2] or proxies instead. See Browser compatibility for details.\n\n## Summary\n\nThe `**unwatch()**` method removes a watchpoint set with the [`watch()`][1]\nmethod.\n\n## Syntax\n\n    \n    \n    obj.unwatch(prop)\n\n### Parameters\n\n`prop`\n\n     The name of a property of the object to stop watching.\n\n## Description\n\nThe JavaScript debugger has functionality similar to that provided by this\nmethod, as well as other debugging options. For information on the debugger,\nsee [Venkman][3].\n\nBy default, this method is inherited by every object descended from\n[`Object`][4].\n\n**Note:** The reason for `unwatch()` to take the property name _prop_ as its only parameter is due to the \"single handler allowing\" behavior of the [`watch()`][1] method.\n\n## Examples\n\nSee [`watch()`][1].\n\n## Specifications\n\nNot part of any specifications. Implemented in JavaScript 1.2.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n**Note:** Calling `unwatch()` on the [`Document`][6] object throws a [`TypeError`][7] since Firefox\u00a023 ([bug\u00a0903332][8]). This regression has been fixed with Firefox\u00a027.\n\n## See also\n\n  * [`Object.watch()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n[3]: /en-US/docs/Venkman\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/docs/Web/API/Document\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[8]: https://bugzilla.mozilla.org/show_bug.cgi?id=903332\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    Object.toSource();\n    obj.toSource();\n    \n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in [`Object`][1] object, `toSource` returns the following string indicating that the source code is not available: \n    \n        function Object() {\n        [native code]\n    }\n    \n\n  * For instances of [`Object`][1], `toSource` returns a string representing the source code.\n\nYou can call `toSource` while debugging to examine the contents of an object.\n\n### Overriding the `toSource` method\n\nIt is safe for objects to override the `toSource` method. For example:\n\n    \n    \n    function Person(name) {\n      this.name = name;\n    }\n    \n    Person.prototype.toSource = function Person_toSource() {\n      return 'new Person(' + uneval(this.name) + ')';\n    };\n    \n    console.log(new Person('Joe').toSource()); // ---> new Person(\"Joe\")\n    \n\n### Built-in `toSource` methods\n\nEach core JavaScript type has its own `toSource` method. These objects are:\n\n  * [`Array.prototype.toSource()`][2] _ _\u00a0\u2014 [`Array`][3] Object method.\n  * [`Boolean.prototype.toSource()`][4] _ _\u00a0\u2014 [`Boolean`][5] Object method.\n  * [`Date.prototype.toSource()`][6] _ _\u00a0\u2014 [`Date`][7] Object method.\n  * [`Function.prototype.toSource()`][8] _ _\u00a0\u2014 [`Function`][9] Object method.\n  * [`Number.prototype.toSource()`][10] _ _\u00a0\u2014 [`Number`][11] Object method.\n  * [`Regexp.prototype.toSource()`][12] _ _\u00a0\u2014 [`RegExp`][13] Object method.\n  * [`String.prototype.toSource()`][14] _ _\u00a0\u2014 [`String`][15] Object method.\n  * [`Symbol.prototype.toSource()`][16] _ _\u00a0\u2014 [`Symbol`][17] Object method.\n  * `Math.toSource()`\u00a0\u2014 Returns the String \"Math\".\n\n### Limitations on cyclical objects\n\nIn the case of objects that contain references to themselves, e.g. a\ncyclically linked list or a tree that can be traversed both ways,\u00a0`toSource`\nwill not recreate the self-reference, as of Firefox 24. For example:\n\n    \n    \n    var obj1 = {};\n    var obj2 = { a: obj1 };\n    obj1.b = obj2;\n    \n    console.log('Cyclical: ' + (obj1.b.a == obj1));\n    \n    var objSource = obj1.toSource(); // returns \"({b:{a:{}}})\"\n    \n    obj1 = eval(objSource);\n    \n    console.log('Cyclical: ' + (obj1.b.a == obj1));\n    \n\nIf a cyclical structure is employed and `toSource` is needed, the object must\nprovide an override to `toSource`, either using a reference to a constructor\nor providing an anonymous function.\n\n## Examples\n\n### Example: Using `toSource`\n\nThe following code defines the `Dog` object type and creates `theDog`, an\nobject of type `Dog`:\n\n    \n    \n    function Dog(name, breed, color, sex) {\n      this.name = name;\n      this.breed = breed;\n      this.color = color;\n      this.sex = sex;\n    }\n    \n    theDog = new Dog('Gabby', 'Lab', 'chocolate', 'female');\n    \n\nCalling the `toSource` method of `theDog` displays the JavaScript source that\ndefines the object:\n\n    \n    \n    theDog.toSource();\n    // returns ({name:\"Gabby\", breed:\"Lab\", color:\"chocolate\", sex:\"girl\"})\n    \n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][18].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][19]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp/toSource\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[18]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.toLocaleString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.tolocalestring()", "content": "## Summary\n\nThe `**toLocaleString()**` method returns a string representing the object.\nThis method is meant to be overriden by derived objects for locale-specific\npurposes.\n\n## Syntax\n\n    \n    \n    obj.toLocaleString();\n\n## Description\n\n[`Object`][1]'s `toLocaleString` returns the result of calling\n[`toString()`][2].\n\nThis function is provided to give objects a generic `toLocaleString` method,\neven though not all may use it. See the list below.\n\n### Objects overriding `toLocaleString`\n\n  * [`Array`][3]:\n\n[`Array.prototype.toLocaleString()`][4]\n  * [`Number`][5]:\n\n[`Number.prototype.toLocaleString()`][6]\n  * [`Date`][7]:\n\n[`Date.prototype.toLocaleString()`][8]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.toLocaleString' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.toLocaleString' in that\nspecification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][11].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]:\n\n/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n   [4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\n\n[5]:\n\n/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n   [6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[7]:\n\n/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n   [8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.3\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tolocalestring\n\n[11]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.isPrototypeOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.isprototypeof()", "content": "## Summary\n\nThe `**isPrototypeOf()**` method tests for an object in another object's\nprototype chain.\n\n**Note:** `isPrototypeOf` differs from the [`instanceof`][1] operator. In the expression \"`object instanceof AFunction`\", the `object` prototype chain is checked against `AFunction.prototype`, not against `AFunction` itself.\n\n## Syntax\n\n    \n    \n    prototypeObj.isPrototypeOf(obj)\n\n### Parameters\n\n`prototypeObj`\n\n    An object to be tested against each link in the prototype chain of the **object** argument.\n`object`\n\n    The object whose prototype chain will be searched.\n\n## Description\n\nThe `isPrototypeOf` method allows you to check whether or not an object exists\nwithin another object's prototype chain.\n\nFor example, consider the following prototype chain:\n\n    \n    \n    function Fee() {\n      // ...\n    }\n    \n    function Fi() {\n      // ...\n    }\n    Fi.prototype = new Fee();\n    \n    function Fo() {\n      // ...\n    }\n    Fo.prototype = new Fi();\n    \n    function Fum() {\n      // ...\n    }\n    Fum.prototype = new Fo();\n    \n\nLater on down the road, if you instantiate `Fum` and need to check if `Fi`'s\nprototype exists within the `Fum` prototype chain, you could do this:\n\n    \n    \n    var fum = new Fum();\n    // ...\n    \n    if (Fi.prototype.isPrototypeOf(fum)) {\n      // do something safe\n    }\n    \n\nThis, along with the [`instanceof`][1] operator particularly comes in handy if\nyou have code that can only function when dealing with objects descended from\na specific prototype chain, e.g., to guarantee that certain methods or\nproperties will be present on that object.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.hasOwnProperty' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.hasOwnProperty' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`instanceof`][1]\n  * [`Object.getPrototypeOf()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.5\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.hasownproperty\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.eval()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.eval()", "content": "**Obsolete**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n## Summary\n\nThe `**Object.eval()**` method used to evaluate a string of JavaScript code in\nthe context of an object, however, this method has been removed.\n\n## Syntax\n\n    \n    \n    obj.eval(string)\n\n### Parameters\n\n`string`\n\n     Any string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.\n\n## Description\n\nThe `eval` method can no longer be used as a method of an object. Use the top-\nlevel [`eval()`][1] function instead.\n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`eval()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.__lookupSetter__()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__lookupsetter__()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**__lookupSetter__**` method returns the function bound as a setter to\nthe specified property.\n\n## Syntax\n\n    \n    \n    obj.__lookupSetter__(sprop)\n\n### Parameters\n\n`sprop`\n\n     A string containing the name of the property whose setter should be returned.\n\n## Description\n\nIf a setter has been defined for an object's property, it was not possible to\nreference the setter function through that property, because that property\nrefers to the return value of that function. `__lookupSetter__` can be used to\nobtain a reference to the setter function.\n\nIt is now possible to do this in a standardized way using\n[`Object.getOwnPropertyDescriptor()`][1].\n\n## Examples\n\n    \n    \n    var obj = {\n      set foo(value) {\n        return this.bar = value;\n      }\n    };\n    \n    obj.__lookupSetter__('foo')\n    // (function(value) { return this.bar = value; })\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.__lookupGetter__()`][2]\n  * [`set`][3] operator\n  * [`Object.getOwnPropertyDescriptor()`][1] and [`Object.getPrototypeOf()`][4]\n  * [`Object.prototype.__defineGetter__()`][5]\n  * [`Object.prototype.__defineSetter__()`][6]\n  * [JS Guide: Defining Getters and Setters][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/set\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\n\n[7]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.__defineSetter__()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__definesetter__()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**__defineSetter__**` method binds an object's property to a function to\nbe called when an attempt is made to set that property.\n\n## Syntax\n\n    \n    \n    obj.__defineSetter__(sprop, fun)\n\n### Parameters\n\n`sprop`\n\n    A string containing the name of the property to be bound to the given function.\n`fun`\n\n    A function to be called when there is an attempt to set the specified property. This function takes the form \n    \n    \n    function(val) { . . . }\n\n`val`\n\n    An alias for the variable that holds the value attempted to be assigned to `prop`.\n\n## Description\n\nThe `__defineSetter__` method allows a [setter][1] to be defined on a pre-\nexisting object.\n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.__defineGetter__()`][2]\n  * [`set`][1] operator\n  * [`Object.defineProperty()`][3]\n  * [`Object.prototype.__lookupSetter__()`][4]\n  * [JS Guide: Defining Getters and Setters][5]\n  * [[Blog Post] Deprecation of __defineGetter__ and __defineSetter__][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/set\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\n\n[5]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n[6]: http://whereswalden.com/2010/04/16/more-spidermonkey-changes-ancient-esoteric-very-rarely-used-syntax-for-creating-getters-and-setters-is-being-removed/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.__defineGetter__()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__definegetter__()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**__defineGetter__**` method binds an object's property to a function to\nbe called when that property is looked up.\n\n## Syntax\n\n    \n    \n    obj.__defineGetter__(sprop, fun)\n\n### Parameters\n\n`sprop`\n\n    A string containing the name of the property to bind to the given function.\n`fun`\n\n    A function to be bound to a lookup of the specified property.\n\n## Description\n\nThe `__defineGetter__` allows a [getter][1] to be defined on a pre-existing\nobject.\n\n## Examples\n\n    \n    \n    // Non-standard and deprecated way\n    \n    var o = {};\n    o.__defineGetter__('gimmeFive', function() { return 5; });\n    console.log(o.gimmeFive); // 5\n    \n    \n    // Standard-compliant ways\n    \n    // Using the get operator\n    var o = { get gimmeFive() { return 5; } };\n    console.log(o.gimmeFive); // 5\n    \n    // Using Object.defineProperty\n    var o = {};\n    Object.defineProperty(o, 'gimmeFive', {\n      get: function() {\n        return 5;\n      }\n    });\n    console.log(o.gimmeFive); // 5\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.__defineSetter__()`][2]\n  * [`get`][1] operator\n  * [`Object.defineProperty()`][3]\n  * [`Object.prototype.__lookupGetter__()`][4]\n  * [JS Guide: Defining Getters and Setters][5]\n  * [[Blog Post] Deprecation of __defineGetter__ and __defineSetter__][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/get\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\n\n[5]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\n\n[6]: http://whereswalden.com/2010/04/16/more-spidermonkey-changes-ancient-esoteric-very-rarely-used-syntax-for-creating-getters-and-setters-is-being-removed/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.preventExtensions()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.preventextensions()", "content": "## Summary\n\nThe `**Object.preventExtensions()**` method prevents new properties from ever\nbeing added to an object (i.e. prevents future extensions to the object).\n\n## Syntax\n\n    \n    \n    Object.preventExtensions(obj)\n\n### Parameters\n\n`obj`\n\n     The object which should be made non-extensible.\n\n## Description\n\nAn object is extensible if new properties can be added to it.\n`Object.preventExtensions()`\u00a0marks an object as no longer extensible, so that\nit will never have properties beyond the ones it had at the time it was marked\nas non-extensible. Note that the properties of a non-extensible object, in\ngeneral, may still be _deleted_. Attempting to add new properties to a non-\nextensible object will fail, either silently or by throwing a [`TypeError`][1]\n(most commonly, but not exclusively, when in [strict mode][2]).\n\n`Object.preventExtensions()` only prevents addition of own properties.\nProperties can still be added to the object prototype. However, calling\n`Object.preventExtensions()` on an object will also prevent extensions on its\n[`__proto__`][3] _ _ property.\n\nIf there is a way to turn an extensible object to a non-extensible one, there\nis no way to do the opposite in ECMAScript 5.\n\n## Examples\n\n    \n    \n    // Object.preventExtensions returns the object being made non-extensible.\n    var obj = {};\n    var obj2 = Object.preventExtensions(obj);\n    assert(obj === obj2);\n    \n    // Objects are extensible by default.\n    var empty = {};\n    assert(Object.isExtensible(empty) === true);\n    \n    // ...but that can be changed.\n    Object.preventExtensions(empty);\n    assert(Object.isExtensible(empty) === false);\n    \n    // Object.defineProperty throws when adding a new property to a non-extensible object.\n    var nonExtensible = { removable: true };\n    Object.preventExtensions(nonExtensible);\n    Object.defineProperty(nonExtensible, 'new', { value: 8675309 }); // throws a TypeError\n    \n    // In strict mode, attempting to add new properties to a non-extensible object throws a TypeError.\n    function fail() {\n      'use strict';\n      nonExtensible.newProperty = 'FAIL'; // throws a TypeError\n    }\n    fail();\n    \n    // EXTENSION (only works in engines supporting __proto__\n    // (which is deprecated. Use Object.getPrototypeOf instead)):\n    // A non-extensible object's prototype is immutable.\n    var fixed = Object.preventExtensions({});\n    fixed.__proto__ = { oh: 'hai' }; // throws a TypeError\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][1]. In ES6, a non-object argument will be treated\nas if it was a non-extensible ordinary object, simply return it.\n\n    \n    \n    > Object.preventExtensions(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.preventExtensions(1)\n    1                             // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.preventExtensions' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.preventExtensions' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[4.0][7] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12.10\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nES6 behavior for non-object argument\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n[35.0][8] (35.0)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nES6 behavior for non-object argument\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n35.0 (35.0)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.isExtensible()`][9]\n  * [`Object.seal()`][10]\n  * [`Object.isSealed()`][11]\n  * [`Object.freeze()`][12]\n  * [`Object.isFrozen()`][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.10\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.preventextensions\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/4\n\n[8]: /en-US/Firefox/Releases/35\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.isSealed()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.issealed()", "content": "## Summary\n\nThe `**Object.isSealed()**` method determines if an object is sealed.\n\n## Syntax\n\n    \n    \n    Object.isSealed(obj)\n\n### Parameters\n\n`obj`\n\n    The object which should be checked.\n\n## Description\n\nReturns `true` if the object is sealed, otherwise `false`. An object is sealed\nif it is not [extensible][1] and if all its properties are non-configurable\nand therefore not removable (but not necessarily non-writable).\n\n## Examples\n\n    \n    \n    // Objects aren't sealed by default.\n    var empty = {};\n    assert(Object.isSealed(empty) === false);\n    \n    // If you make an empty object non-extensible, it is vacuously sealed.\n    Object.preventExtensions(empty);\n    assert(Object.isSealed(empty) === true);\n    \n    // The same is not true of a non-empty object, unless its properties are all non-configurable.\n    var hasProp = { fee: 'fie foe fum' };\n    Object.preventExtensions(hasProp);\n    assert(Object.isSealed(hasProp) === false);\n    \n    // But make them all non-configurable and the object becomes sealed.\n    Object.defineProperty(hasProp, 'fee', { configurable: false });\n    assert(Object.isSealed(hasProp) === true);\n    \n    // The easiest way to seal an object, of course, is Object.seal.\n    var sealed = {};\n    Object.seal(sealed);\n    assert(Object.isSealed(sealed) === true);\n    \n    // A sealed object is, by definition, non-extensible.\n    assert(Object.isExtensible(sealed) === false);\n    \n    // A sealed object might be frozen, but it doesn't have to be.\n    assert(Object.isFrozen(sealed) === true); // all properties also non-writable\n    \n    var s2 = Object.seal({ p: 3 });\n    assert(Object.isFrozen(s2) === false); // 'p' is still writable\n    \n    var s3 = Object.seal({ get p() { return 0; } });\n    assert(Object.isFrozen(s3) === true); // only configurability matters for accessor properties\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][2]. In ES6, a non-object argument will be treated\nas if it was a sealed ordinary object, simply return `true`.\n\n    \n    \n    > Object.isSealed(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.isSealed(1)\n    true                          // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.isSealed' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.isSealed' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[4.0][6] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][7].\n\n## See also\n\n  * [`Object.seal()`][8]\n  * [`Object.preventExtensions()`][9]\n  * [`Object.isExtensible()`][1]\n  * [`Object.freeze()`][10]\n  * [`Object.isFrozen()`][11]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.11\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.issealed\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/4\n\n[7]: http://kangax.github.com/es5-compat-table/\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.isFrozen()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.isfrozen()", "content": "## Summary\n\nThe `**Object.isFrozen()**` determines if an object is frozen.\n\n## Syntax\n\n    \n    \n    Object.isFrozen(obj)\n\n### Parameters\n\n`obj`\n\n     The object which should be checked.\n\n## Description\n\nAn object is frozen if and only if it is not [extensible][1], all its\nproperties are non-configurable, and all its data properties (that is,\nproperties which are not accessor properties with getter or setter components)\nare non-writable.\n\n## Examples\n\n    \n    \n    // A new object is extensible, so it is not frozen.\n    assert(Object.isFrozen({}) === false);\n    \n    // An empty object which is not extensible is vacuously frozen.\n    var vacuouslyFrozen = Object.preventExtensions({});\n    assert(Object.isFrozen(vacuouslyFrozen) === true);\n    \n    // A new object with one property is also extensible, ergo not frozen.\n    var oneProp = { p: 42 };\n    assert(Object.isFrozen(oneProp) === false);\n    \n    // Preventing extensions to the object still doesn't make it frozen,\n    // because the property is still configurable (and writable).\n    Object.preventExtensions(oneProp);\n    assert(Object.isFrozen(oneProp) === false);\n    \n    // ...but then deleting that property makes the object vacuously frozen.\n    delete oneProp.p;\n    assert(Object.isFrozen(oneProp) === true);\n    \n    // A non-extensible object with a non-writable but still configurable property is not frozen.\n    var nonWritable = { e: 'plep' };\n    Object.preventExtensions(nonWritable);\n    Object.defineProperty(nonWritable, 'e', { writable: false }); // make non-writable\n    assert(Object.isFrozen(nonWritable) === false);\n    \n    // Changing that property to non-configurable then makes the object frozen.\n    Object.defineProperty(nonWritable, 'e', { configurable: false }); // make non-configurable\n    assert(Object.isFrozen(nonWritable) === true);\n    \n    // A non-extensible object with a non-configurable but still writable property also isn't frozen.\n    var nonConfigurable = { release: 'the kraken!' };\n    Object.preventExtensions(nonConfigurable);\n    Object.defineProperty(nonConfigurable, 'release', { configurable: false });\n    assert(Object.isFrozen(nonConfigurable) === false);\n    \n    // Changing that property to non-writable then makes the object frozen.\n    Object.defineProperty(nonConfigurable, 'release', { writable: false });\n    assert(Object.isFrozen(nonConfigurable) === true);\n    \n    // A non-extensible object with a configurable accessor property isn't frozen.\n    var accessor = { get food() { return 'yum'; } };\n    Object.preventExtensions(accessor);\n    assert(Object.isFrozen(accessor) === false);\n    \n    // ...but make that property non-configurable and it becomes frozen.\n    Object.defineProperty(accessor, 'food', { configurable: false });\n    assert(Object.isFrozen(accessor) === true);\n    \n    // But the easiest way for an object to be frozen is if Object.freeze has been called on it.\n    var frozen = { 1: 81 };\n    assert(Object.isFrozen(frozen) === false);\n    Object.freeze(frozen);\n    assert(Object.isFrozen(frozen) === true);\n    \n    // By definition, a frozen object is non-extensible.\n    assert(Object.isExtensible(frozen) === false);\n    \n    // Also by definition, a frozen object is sealed.\n    assert(Object.isSealed(frozen) === true);\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][2]. In ES6, a non-object argument will be treated\nas if it was a frozen ordinary object, simply return `true`.\n\n    \n    \n    > Object.isFrozen(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.isFrozen(1)\n    true                          // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.isFrozen' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.isFrozen' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[4.0][6] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][7].\n\n## See also\n\n  * [`Object.freeze()`][8]\n  * [`Object.preventExtensions()`][9]\n  * [`Object.isExtensible()`][1]\n  * [`Object.seal()`][10]\n  * [`Object.isSealed()`][11]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.12\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.isfrozen\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/4\n\n[7]: http://kangax.github.com/es5-compat-table/\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.isExtensible()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.isextensible()", "content": "## Summary\n\nThe **`Object.isExtensible()`** method determines if an object is extensible\n(whether it can have new properties added to it).\n\n## Syntax\n\n    \n    \n    Object.isExtensible(obj)\n\n### Parameters\n\n`obj`\n\n    The object which should be checked.\n\n## Description\n\nObjects are extensible by default: they can have new properties added to them,\nand (in engines that support [`__proto__`][1] _ _ their __proto__ property)\ncan be modified. An object can be marked as non-extensible using\n[`Object.preventExtensions()`][2], [`Object.seal()`][3], or\n[`Object.freeze()`][4].\n\n## Examples\n\n    \n    \n    // New objects are extensible.\n    var empty = {};\n    assert(Object.isExtensible(empty) === true);\n    \n    // ...but that can be changed.\n    Object.preventExtensions(empty);\n    assert(Object.isExtensible(empty) === false);\n    \n    // Sealed objects are by definition non-extensible.\n    var sealed = Object.seal({});\n    assert(Object.isExtensible(sealed) === false);\n    \n    // Frozen objects are also by definition non-extensible.\n    var frozen = Object.freeze({});\n    assert(Object.isExtensible(frozen) === false);\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][5]. In ES6, a non-object argument will be treated\nas if it was a non-extensible ordinary object, simply return `false`.\n\n    \n    \n    > Object.isExtensible(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.isExtensible(1)\n    false                         // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.isExtensible' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.isExtensible' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n[4.0][9] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][10].\n\n## See also\n\n  * [`Object.preventExtensions()`][2]\n  * [`Object.seal()`][3]\n  * [`Object.isSealed()`][11]\n  * [`Object.freeze()`][4]\n  * [`Object.isFrozen()`][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.13\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.isextensible\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/4\n\n[10]: http://kangax.github.com/es5-compat-table/\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Date.prototype.toUTCString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.toutcstring()", "content": "## Summary\n\nThe `**toUTCString()**` method converts a date to a string, using the UTC time\nzone.\n\n## Syntax\n\n    \n    \n    dateObj.toUTCString()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe value returned by `toUTCString` is a human readable string in the UTC time\nzone. The format of the return value may vary according to the platform. The\nmost common return value is a RFC-1123 formatted date stamp, which is a\nslightly updated version of RFC-822 date stamps.\n\n## Examples\n\n### Example: Using `toUTCString`\n\n    \n    \n    var today = new Date();\n    var UTCstring = today.toUTCString();\n    // Mon, 03 Jul 2006 21:44:38 GMT\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toUTCString' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toUTCString' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleString()`][3]\n  * [`Date.prototype.toDateString()`][4]\n  * [`Date.prototype.toISOString()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.42\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.toutcstring\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toTimeString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.totimestring()", "content": "## Summary\n\nThe `**toTimeString()**` method returns the time portion of a `Date` object in\nhuman readable form in American English.\n\n## Syntax\n\n    \n    \n    dateObj.toTimeString()\n\n## Description\n\n[`Date`][1] instances refer to a specific point in time. Calling\n[`toString`][2] will return the date formatted in a human readable form in\nAmerican English. In [SpiderMonkey][3], this consists of the date portion\n(day, month, and year) followed by the time portion (hours, minutes, seconds,\nand time zone). Sometimes it is desirable to obtain a string of the time\nportion; such a thing can be accomplished with the `toTimeString` method.\n\nThe `toTimeString` method is especially useful because compliant engines\nimplementing [ECMA-262][4] may differ in the string obtained from `toString`\nfor `Date` objects, as the format is implementation-dependent; simple string\nslicing approaches may not produce consistent results across multiple engines.\n\n## Example\n\n### Example: A basic usage of `toTimeString`\n\n    \n    \n    var d = new Date(1993, 6, 28, 14, 39, 7);\n    \n    println(d.toString());     // prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)\n    println(d.toTimeString()); // prints 14:39:07 GMT-0600 (PDT)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toTimeString' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toTimeString' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleTimeString()`][7]\n  * [`Date.prototype.toDateString()`][8]\n  * [`Date.prototype.toString()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\n\n[3]: /en-US/docs/SpiderMonkey\n\n[4]: /en-US/docs/ECMAScript\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.4\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.totimestring\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the specified Date\nobject.\n\n## Syntax\n\n    \n    \n    dateObj.toString()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe [`Date`][1] object overrides the `toString` method of the [`Object`][2]\nobject; it does not inherit [`Object.prototype.toString()`][3]. For`\n`[`Date`][1] objects, the `toString` method returns a string representation of\nthe object.\n\nThe `toString` method always returns a string representation of the date in\nAmerican English.\n\nJavaScript calls the `toString` method automatically when a date is to be\nrepresented as a text value or when a date is referred to in a string\nconcatenation.\n\n## Examples\n\n### Example: Using `toString`\n\nThe following assigns the `toString` value of a `Date` object to `myVar`:\n\n    \n    \n    var x = new Date();\n    myVar = x.toString(); // assigns a value to myVar similar to:\n    // Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][3]\n  * [`Date.prototype.toDateString()`][6]\n  * [`Date.prototype.toLocaleString()`][7]\n  * [`Date.prototype.toTimeString()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.tostring\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    dateObj.toSource()\n    Date.toSource()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `Date` object, `toSource` returns the following string indicating that the source code is not available:\n    \n    \n    function Date() {\n        [native code]\n    }\n\n  * For instances of `Date`, `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toLocaleFormat()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tolocaleformat()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe non-standard `**toLocaleFormat()**` method converts a date to a string\nusing the specified formatting. [`DateTimeFormat`][1] is an alternative to\nformat dates in a standards-compliant way. See also the newer version of\n[`Date.prototype.toLocaleDateString()`][2].\n\n## Syntax\n\n    \n    \n    dateObj.toLocaleFormat(formatString)\n\n### Parameters\n\n`formatString`\n\n     A format string in the same format expected by the [`strftime()][3]` function in C.\n\n## Description\n\nThe `toLocaleFormat()` method provides greater software control over the\nformatting of the generated date and/or time. Names for months and days of the\nweek are localized using the operating system's locale. However, ordering of\nthe day and month and other localization tasks are not handled automatically\nsince you have control over the order in which they occur. You should take\ncare that the format string is localized properly according to the user's\nsystem settings. Be aware that the locale used is not necessarily the same as\nthe locale of the browser.\n\nExtension and XULRunner developers should know that just loading the format\nstring from a `.dtd` or `.properties` file using a\n`chrome://_somedomain_/locale/`_`somefile.ext`_ URI should be **avoided**, as\nthe `dtd`/`properties` file and the `toLocaleFormat` method does not not\nnecessarily use the same locale, which could result in odd looking or even\nambiguous or unreadable dates.\n\nAlso note that the behavior of the used locale depends on the platform, and\nthe user might customize the locale used, so using the system locale the\nchoose the format string might in some cases not even be adequate. You might\nconsider using some of the more general `toLocale*` methods of the `Date`\nobject or doing your own custom localization of the date to be displayed using\nsome of the `get*` methods of the `Date` object instead of using this method.\n\n## Examples\n\n### Example: Using `toLocaleFormat`\n\n    \n    \n    var today = new Date();\n    var date = today.toLocaleFormat(\"%A,\u00a0%B\u00a0%e,\u00a0%Y\"); //\u00a0Bad example\n    \n\nIn this example, `toLocaleFormat()` returns a string such as \"Wednesday,\nOctober 3, 2007\". Note that the format string in this example is not properly\nlocalized, which will result in the problems described above.\n\n## Specifications\n\nNot part of any specification. Implemented in JavaScript 1.6.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DateTimeFormat`][1]\n  * [`Date.prototype.toLocaleString()`][4]\n  * [`Date.prototype.toLocaleDateString()`][2]\n  * [`Date.prototype.toLocaleTimeString()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[3]: http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toJSON()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tojson()", "content": "## Summary\n\nThe `**toJSON()**` method returns a [JSON][1] representation of the Date\nobject.\n\n## Syntax\n\n    \n    \n    dateObj.toJSON()\n\n## Description\n\n[`Date`][2] instances refer to a specific point in time. Calling `toJSON()`\nreturns a JSON formatted string (using [`toISOString`][3]) representing the\nDate object's value. \u00a0This method is generally intended to, by default,\nusefully serialize Date objects during JSON serialization.\n\n## Example\n\n    \n    \n    var jsonDate = (new Date()).toJSON();\n    var backToDate = new Date(jsonDate);\n    \n    console.log(\"Serialized date object: \" + jsonDate);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toJSON' in that specification.][4]  \nImplemented in JavaScript 1.8.5\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toJSON' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleDateString()`][6]\n  * [`Date.prototype.toTimeString()`][7]\n  * [`Date.prototype.toUTCString()`][8]\n\n[1]: /en-US/docs/Glossary/JSON\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.44\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.tojson\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toISOString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.toisostring()", "content": "## Summary\n\nThe `**toISOString()**` method returns a string in ISO format ([ISO 8601\nExtended Format][1]), which can be described as follows: **YYYY-MM-\nDDTHH:mm:ss.sssZ**. The timezone is always UTC as denoted by the suffix \"Z\".\n\n## Syntax\n\n    \n    \n    dateObj.toISOString()\n\n## Examples\n\n    \n    \n    var today = new Date(\"05 October 2011 14:48 UTC\");\n    alert(today.toISOString()); // Returns 2011-10-05T14:48:00.000Z\n    \n\nThe above example uses parsing of a non\u2013standard string value that may not be\ncorrectly parsed in non\u2013Mozilla browsers.\n\n## Polyfill\n\nThis method was standardized in ECMA-262 5th edition. Engines which have not\nbeen updated to support this method can work around the absence of this method\nusing the following shim:\n\n    \n    \n    if ( !Date.prototype.toISOString ) {\n      ( function() {\n        \n        function pad(number) {\n          if ( number < 10 ) {\n            return '0' + number;\n          }\n          return number;\n        }\n     \n        Date.prototype.toISOString = function() {\n          return this.getUTCFullYear() +\n            '-' + pad( this.getUTCMonth() + 1 ) +\n            '-' + pad( this.getUTCDate() ) +\n            'T' + pad( this.getUTCHours() ) +\n            ':' + pad( this.getUTCMinutes() ) +\n            ':' + pad( this.getUTCSeconds() ) +\n            '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n            'Z';\n        };\n      \n      }() );\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toISOString' in that specification.][2]  \nImplemented in JavaScript 1.8\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toISOString' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleDateString()`][4]\n  * [`Date.prototype.toTimeString()`][5]\n  * [`Date.prototype.toUTCString()`][6]\n\n[1]: http://en.wikipedia.org/wiki/ISO_8601\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.43\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.toisostring\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.valueof()", "content": "## Summary\n\nThe `**valueOf()**` method returns the primitive value of a Date object.\n\n## Syntax\n\n    \n    \n    dateObj.valueOf()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `valueOf` method returns the primitive value of a `Date` object as a\nnumber data type, the number of milliseconds since midnight 01 January, 1970\nUTC.\n\nThis method is functionally equivalent to the [`Date.prototype.getTime()`][1]\nmethod.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    var x = new Date(56, 6, 17);\n    var myVar = x.valueOf();      // assigns -424713600000 to myVar\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.valueOf()`][4]\n  * [`Date.prototype.getTime()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.8\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.valueof\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "arguments.caller", "parent": "/javascript/javascript_reference/functions/arguments_object", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller", "parsed_url": "/javascript/javascript_reference/functions/arguments_object/arguments.caller", "content": "## Summary\n\nThe obsolete **`arguments.caller`** property used to provide the function that\ninvoked the currently executing function. This property has been removed and\nno longer works.\n\n## Description\n\nThis property is not available anymore, but you can still use\n[`Function.caller`][1].\n\n    \n    \n    function whoCalled() {\n       if (whoCalled.caller == null)\n          console.log('I was called from the global scope.');\n       else\n          console.log(whoCalled.caller + ' called me!');\n    }\n\n## Examples\n\nThe following code was used to check the value of `arguments.caller` in a\nfunction, but doesn't work anymore.\n\n    \n    \n    function whoCalled() {\n       if (arguments.caller == null)\n          console.log('I was called from the global scope.');\n       else\n          console.log(arguments.caller + ' called me!');\n    }\n    \n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.1 and removed in [bug\n7224][2] due to potentially vulnerable for security.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n\n[2]: https://bugzilla.mozilla.org/show_bug.cgi?id=7224\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions", "Arguments object"], "type": "others"},
{"name": "Math.trunc()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.trunc()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.trunc()**` function returns the integral part of a number by\nremoving any fractional digits. It does not round any numbers. The function\ncan be expressed with the [`floor()`][1] and [`ceil()`][2] function:\n\nMath.trunc(x)={\u230ax\u230bifx\u22650\u2308x\u2309ifx<0\\mathtt{\\operatorname{Math.trunc}(x)} =\n\\begin{cases} \\left\\lfloor x \\right\\rfloor & \\text{if} & x \\geq 0 \\\\\\\n\\left\\lceil x \\right\\rceil & \\text{if} &x < 0 \\end{cases}\n\n## Syntax\n\n    \n    \n    Math.trunc(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `trunc` is a static method of `Math`, you always use it as\n`Math.trunc()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.trunc`\n\n    \n    \n    Math.trunc(13.37)   // 13\n    Math.trunc(42.84)   // 42\n    Math.trunc(0.123)   //  0\n    Math.trunc(-0.123)  // -0\n    Math.trunc(\"-1.123\")// -1\n    Math.trunc(NaN)     // NaN\n    Math.trunc(\"foo\")   // NaN\n    Math.trunc()        // NaN\n\n## Polyfill\n\n    \n    \n    function trunc(x) {\n      return x < 0 ? Math.ceil(x) : Math.floor(x);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.trunc' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][4] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Math.round()`][5]\n  * [`Math.floor()`][1]\n  * [`Math.ceil()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.trunc\n\n[4]: /en-US/Firefox/Releases/25\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.tanh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.tanh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.tanh()**` function returns the hyperbolic tangent of a number,\nthat is\n\ntanhx=sinhxcoshx=ex-e-xex+e-x=e2x-1e2x+1\\tanh x = \\frac{\\sinh x}{\\cosh x} =\n\\frac {e^x - e^{-x}} {e^x + e^{-x}} = \\frac{e^{2x} - 1}{e^{2x}+1}\n\n## Syntax\n\n    \n    \n    Math.tanh(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `tanh` is a static method of `Math`, you always use it as\n`Math.tanh()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.tanh`\n\n    \n    \n    Math.tanh(0)        // 0\n    Math.tanh(Infinity) // 1\n    Math.tanh(1)        // 0.7615941559557649\n\n## Polyfill\n\nThis can be emulated with the help of the [`Math.exp()`][1]` `function:\n\n    \n    \n    function tanh(x) {\n      if(x === Infinity) {\n        return 1;\n      } else if(x === -Infinity) {\n        return -1;\n      } else {\n        return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));\n      }\n    }\n\nor using only one call to [`Math.exp()`][1]` :`\n\n    \n    \n    function tanh(x) {\n      if(x === Infinity) {\n        return 1;\n      } else if(x === -Infinity) {\n        return -1;\n      } else {\n        var y = Math.exp(2 * x);\n        return (y - 1) / (y + 1);\n      }\n    }\n    \n\n\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.tanh' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][3] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.tanh\n\n[3]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.tan()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.tan()", "content": "## Summary\n\nThe `**Math.tan()**` function returns the tangent of a number.\n\n## Syntax\n\n    \n    \n    Math.tan(_x_)\n\n### Parameters\n\n`x`\n\n     A number representing an angle in radians.\n\n## Description\n\nThe `tan` method returns a numeric value that represents the tangent of the\nangle.\n\nBecause `tan` is a static method of `Math`, you always use it as `Math.tan()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.tan`\n\nThe following function returns the tangent of the variable `x`:\n\n    \n    \n    function getTan(x) {\n       return Math.tan(x);\n    }\n\nBecause the `Math.tan()` function accepts radians, but it is often easier to\nwork with degrees, the following function accepts a value in degrees, converts\nit to radians and returns the tangent.\n\n    \n    \n    function getTanDeg(deg) {\n       var rad = deg * Math.PI/180;\n       return Math.tan(rad);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.18\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.sqrt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sqrt()", "content": "## Summary\n\nThe `**Math.sqrt()**` function returns the square root of a number, that is\n\n\u2200x\u22650,Math.sqrt(x)=x=the uniquey\u22650such thaty2=x\\forall x \\geq 0,\n\\mathtt{Math.sqrt(x)} = \\sqrt{x} = \\text{the unique} \\; y \\geq 0 \\; \\text{such\nthat} \\; y^2 = x\n\n## Syntax\n\n    \n    \n    Math.sqrt(_x_) \n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the value of `number` is negative, `sqrt` returns `NaN`.\n\nBecause `sqrt` is a static method of `Math`, you always use it as\n`Math.sqrt()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.sqrt`\n\n    \n    \n    Math.sqrt(9); // 3\n    Math.sqrt(2); // 1.414213562373095\n    \n    Math.sqrt(1);  // 1\n    Math.sqrt(0);  // 0\n    Math.sqrt(-1); // NaN\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math.sqrt' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.sqrt' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.17\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sqrt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.sinh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sinh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.sinh()**` function returns the hyperbolic sine of a number, that\ncan be expressed using the [constant e][1]:\n\nMath.sinh(x)=ex-e-x2\\mathtt{\\operatorname{Math.sinh(x)}} = \\frac{e^x -\ne^{-x}}{2}\n\n## Syntax\n\n    \n    \n    Math.sinh(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `sinh` is a static method of `Math`, you always use it as\n`Math.sinh()`, rather than as a method of a `Math` object you created (Math is\nnot a constructor).\n\n## Examples\n\n### Example: Using `Math.sinh`\n\n    \n    \n    Math.sinh(0) // 0\n    Math.sinh(1) // 1.1752011936438014\n\n## Polyfill\n\nThis can be emulated with the help of the [`Math.exp()`][2]` `function:\n\n    \n    \n    function sinh(x){\n        return (Math.exp(x) - Math.exp(-x)) / 2;\n    }\n\nor using only one call to the [`Math.exp()`][2]` `function:\n\n    \n    \n    function sinh(x){\n        var y = Math.exp(x);\n        return (y - 1/y) / 2;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.sinh' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][4] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Math.acos()`][5]\n  * [`Math.asin()`][6]\n  * [`Math.atan()`][7]\n  * [`Math.atan2()`][8]\n  * [`Math.cos()`][9]\n  * [`Math.tan()`][10]\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sinh\n\n[4]: /en-US/Firefox/Releases/25\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.sin()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sin()", "content": "## Summary\n\nThe `**Math.sin()**` function returns the sine of a number.\n\n## Syntax\n\n    \n    \n    Math.sin(_x_)\n\n### Parameters\n\n`x`\n\n     A number (given in radians).\n\n## Description\n\nThe `sin` method returns a numeric value between -1 and 1, which represents\nthe sine of the angle given in radians.\n\nBecause `sin` is a static method of `Math`, you always use it as `Math.sin()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.sin`\n\n    \n    \n    Math.sin(0);           // 0\n    Math.sin(1);           // 0.8414709848078965\n    \n    Math.sin(Math.PI / 2); // 1\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Math.acos()`][3]\n  * [`Math.asin()`][4]\n  * [`Math.atan()`][5]\n  * [`Math.atan2()`][6]\n  * [`Math.cos()`][7]\n  * [`Math.tan()`][8]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.16\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sin\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Symbol.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\nThis method is usually called internally by JavaScript.\n\n## Syntax\n\n    \n    \n    Symbol.toSource()\n    \n    var sym = Symbol()\n    sym.toSource()\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `Symbol` object, `toSource` returns the following string indicating that the source code is not available:\n    \n    \n    \"function Symbol() {\n       [native code]\n    }\"\n\n  * For instances of `Symbol`, `toSource` returns a string representing the source code.\n    \n    \n    \"Symbol()\"\n\n## Specifications\n\nNot part of any standard.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[33.0][1] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][2] _ _\n\n[1]: /en-US/Firefox/Releases/33\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "method"},
{"name": "RegExp.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/regexp", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Regexp/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp/regexp.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    _regexObj_.toSource()\n    RegExp.toSource()\n    \n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in `RegExp` object, `toSource` returns the following string indicating that the source code is not available:\n    \n    \n    function RegExp() { [native code] }\n\n  * For instances of `RegExp`, `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RegExp"], "type": "method"},
{"name": "Boolean.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/boolean", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/boolean/boolean.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns a string representing the source code of\nthe object.\n\n## Syntax\n\n    \n    \n    booleanObj.toSource()\n    Boolean.toSource()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `toSource` method returns the following values:\n\n  * For the built-in [`Boolean`][1] object, `toSource` returns the following string indicating that the source code is not available: \n    \n        function Boolean() {\n        [native code]\n    }\n    \n\n  * For instances of [`Boolean`][1], `toSource` returns a string representing the source code.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toSource()`][3] _ _\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Boolean"], "type": "method"},
{"name": "Math.sign()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sign()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.sign()**` function returns the sign of a number, indicating\nwhether the number is positive, negative or zero.\n\n## Syntax\n\n    \n    \n    Math.sign(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `sign` is a static method of `Math`, you always use it as\n`Math.sign()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\nThis function has 5 kinds of return values, `1, -1, 0, -0, NaN,` which\nrepresent \"positive number\",\u00a0\"negative number\",\u00a0\"positive zero\",\u00a0\u00a0\"negative\nzero\"\u00a0and NaN respectively.\n\nThe argument passed to this function will be converted to `number` type\nimplicitly.\n\n## Examples\n\n### Example: Using `Math.sign`\n\n    \n    \n    Math.sign(3)     //  1\n    Math.sign(-3)    // -1\n    Math.sign(\"-3\")  // -1\n    Math.sign(0)     //  0\n    Math.sign(-0)    // -0\n    Math.sign(NaN)   // NaN\n    Math.sign(\"foo\") // NaN\n    Math.sign()      // NaN\n    \n\n## Polyfill\n\n    \n    \n    function sign(x) {\n        x = +x // convert to a number\n        if (x === 0 || isNaN(x))\n            return x\n        return x > 0 ? 1 : -1\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.sign' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sign\n\n[2]: /en-US/Firefox/Releases/25\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.random()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.random()", "content": "## Summary\n\nThe `**Math.random()**` function returns a floating-point, pseudo-random\nnumber in the range [`0,\u00a01)`\u00a0that is, from 0 (inclusive) up to but not\nincluding 1 (exclusive), which you can then scale to your desired range.\u00a0 The\nimplementation selects the initial seed to the random number generation\nalgorithm; it cannot be chosen or reset by the user.\n\n**Note:** `Math.random()` **does not** provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the [`window.crypto.getRandomValues()`][1] method.\n\n## Syntax\n\n    \n    \n    Math.random()\n\n### Parameters\n\nNone.\n\n## Examples\n\n### Example: Using `Math.random`\n\nNote that as numbers in JavaScript are IEEE 754 floating point numbers with\nround-to-nearest-even behavior, the ranges claimed for the functions below\n(excluding the one for `Math.random()` itself) aren't exact.\u00a0 If extremely\nlarge bounds are chosen (253 or higher), it's possible in _extremely_ rare\ncases to calculate the usually-excluded upper bound.\n\n    \n    \n    // Returns a random number between 0 (inclusive) and 1 (exclusive)\n    function getRandom() {\n      return Math.random();\n    }\n    \n    \n    // Returns a random number between min (inclusive) and max (exclusive)\n    function getRandomArbitrary(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n    \n    \n    // Returns a random integer between min (included) and max (excluded)\n    // Using Math.round() will give you a non-uniform distribution!\n    function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. JavaScript 1.0 (UNIX Only) / JavaScript 1.1 (All\nplatform)\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math.random' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.random' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/API/RandomSource.getRandomValues\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.14\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.random\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.pow()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.pow()", "content": "## Summary\n\nThe `**Math.pow()**` function returns the `base` to the\u00a0`exponent `Power,\nthat is, `baseexponent`.\n\n## Syntax\n\n    \n    \n    Math.pow(_base_, _exponent_) \n\n### Parameters\n\n`base`\n\n     The base number.\n`exponent`\n\n     The exponent used to raise the\u00a0`base`.\n\n## Description\n\nBecause\u00a0`pow`\u00a0is a static method\u00a0of\u00a0`Math`, you always use it as\u00a0`Math.pow()`,\ninstead as a method of a\u00a0`Math Object`\u00a0you created.\n\n## Example\n\n### Example: Using\u00a0`Math.pow`\n\n    \n    \n    function raisePower(x,y) {\n       return Math.pow(x,y)\n    }\n\nIf\u00a0`x`\u00a0is 7 and\u00a0`y`\u00a0is 2, raisePower returns 49 (7 to the power of 2).\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.exp()`][4]\n  * [`Math.log()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.13\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.pow\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.max()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.max()", "content": "## Summary\n\nThe `**Math.max()**` function returns the largest of zero or more numbers.\n\n## Syntax\n\n    \n    \n    Math.max([_value1_[,_value2_, ...]]) \n\n## Parameters\n\n`value1, value2, ...`\n\n     Numbers.\n\n## Description\n\nBecause `max` is a static method of `Math`, you always use it as `Math.max()`,\nrather than as a method of a `Math` object you created.\n\nIf no arguments are given, the result is - [`Infinity`][1].\n\nIf at least one of arguments cannot be converted to a number, the result is\n[`NaN`][2].\n\n## Examples\n\n### Example: Using `Math.max`\n\n    \n    \n    Math.max(10, 20);   //  20\n    Math.max(-10, -20); // -10\n    Math.max(-10, 20);  //  20\n    \n\nThe following function uses` `[`apply`][3] to find the maximum element in a\nnumeric array. `getMaxOfArray([1,2,3])` is equivalent to `Math.max(1, 2, 3)`,\nbut you can use `getMaxOfArray` on programmatically constructed arrays of any\nsize.\n\n    \n    \n    function getMaxOfArray(numArray) {\n        return Math.max.apply(null, numArray);\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][6] object it belongs to.\n  * [`Math.min()`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.8.2.11\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.max\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.log2()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log2()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.log2()**` function returns the base 2 logarithm of a number, that\nis\n\n\u2200x>0,Math.log2(x)=log2(x)=the uniqueysuch that2y=x\\forall x > 0,\n\\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique} \\; y \\;\n\\text{such that} \\; 2^y = x\n\n## Syntax\n\n    \n    \n    Math.log2(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the value of `number` is less than 0, the return value is always `NaN`.\n\nBecause `log2` is a static method of `Math`, you always use it as\n`Math.log2()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.log2`\n\n    \n    \n    Math.log2(3)  // 1.584962500721156\n    Math.log2(2)  // 1\n    Math.log2(1)  // 0\n    Math.log2(0)  // -Infinity\n    Math.log2(-2) // NaN\n    Math.log2(1024) // 10\n    \n\n## Polyfill\n\nYou can approximate the function with\n\n    \n    \n    function log2(x) {\n      return Math.log(x) / Math.LN2;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.log2' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log2\n\n[2]: /en-US/Firefox/Releases/25\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.log1p()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log1p()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.log1p()**` function returns the natural logarithm ([base `e`][1])\nof 1 + a number, that is\n\n\u2200x>-1,Math.log1p(x)=ln(1+x)\\forall x > -1,\n\\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)\n\n## Syntax\n\n    \n    \n    Math.log1p(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the value of `number` is less than -1, the return value is always `NaN`.\n\nBecause `log1p` is a static method of `Math`, you always use it as\n`Math.log1p()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.log1p`\n\n    \n    \n    Math.log1p(1)  // 0.6931471805599453\n    Math.log1p(0)  // 0\n    Math.log1p(-1) // -Infinity\n    Math.log1p(-2) // NaN\n    \n\n## Polyfill\n\n    \n    \n    function log1p(x) {\n      return Math.log(1 + x);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.log1p' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][3] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][4] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log1p\n\n[3]: /en-US/Firefox/Releases/25\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.log10()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log10()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.log10()**` function returns the base 10 logarithm of a number,\nthat is\n\n\u2200x>0,Math.log10(x)=log10(x)=the uniqueysuch that10y=x\\forall x > 0,\n\\mathtt{\\operatorname{Math.log10}(x)} = \\log_10(x) = \\text{the unique} \\; y \\;\n\\text{such that} \\; 10^y = x\n\n## Syntax\n\n    \n    \n    Math.log10(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the value of `number` is less than 0, the return value is always `NaN`.\n\nBecause `log10` is a static method of `Math`, you always use it as\n`Math.log10()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.log10`\n\n    \n    \n    Math.log10(2)  // 0.3010299956639812\n    Math.log10(1)  // 0\n    Math.log10(0)  // -Infinity\n    Math.log10(-2) // NaN\n    Math.log10(100000) // 5\n    \n\n## Polyfill\n\nYou can approximate the function by:\n\n    \n    \n    function log10(x) {\n      return Math.log(x) / Math.LN10;\n    }\n    \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.log10' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log10\n\n[2]: /en-US/Firefox/Releases/25\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.log()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log()", "content": "## Summary\n\nThe `**Math.log()**` function returns the natural logarithm ([base `e`][1]) of\na number, that is\n\n\u2200x>0,Math.log(x)=ln(x)=the uniqueysuch thatey=x\\forall x > 0,\n\\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique} \\; y \\;\n\\text{such that} \\; e^y = x\n\n## Syntax\n\n    \n    \n    Math.log(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the value of `number` is negative, the return value is always `NaN`.\n\nBecause `log` is a static method of `Math`, you always use it as `Math.log()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.log`\n\n    \n    \n    Math.log(-1); // NaN, out of range\n    Math.log(0);  // -Infinity\n    Math.log(1);  // 0\n    Math.log(10); // 2.302585092994046\n\n### Example: Using `Math.log` with a different base\n\nThe following function returns the logarithm of `y` with base `x` (ie. logx\ny):\n\n    \n    \n    function getBaseLog(x, y) {\n        return Math.log(y) / Math.log(x);\n    }\n\nIf you run `getBaseLog(10, 1000)` it returns `2.9999999999999996` due to\nfloating-point rounding, which is very close to the actual answer of 3.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][4] object it belongs to.\n  * [`Math.exp()`][5]\n  * [`Math.pow()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.10\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.imul()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.imul()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.imul()**` function returns the result of the C-like 32-bit\nmultiplication of the two parameters.\n\n## Syntax\n\n    \n    \n    Math.imul(a, b)\n\n### Parameters\n\n`a`\n\n     First number.\n`b`\n\n     Second number.\n\n## Description\n\n`Math.imul` allows for fast 32-bit integer multiplication with C-like\nsemantics. This feature is useful for projects like [Emscripten][1].\u00a0 Because\n`imul` is a static method of `Math`, you always use it as `Math.imul()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n    \n    \n    Math.imul(2, 4)   // 8\n    Math.imul(-1, 8)  //-8\n    Math.imul(-2, -2) // 4\n    Math.imul(0xffffffff, 5) //-5\n    Math.imul(0xfffffffe, 5) //-10\n    \n\n## Polyfill\n\nThis can be emulated with the following function:\n\n    \n    \n    function imul(a, b) {\n      var ah  = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh  = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      // the shift by 0 fixes the sign on the high part\n      // the final |0 converts the unsigned value into a signed value\n      return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.imul' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n[20][4] (20)\n\n</td>  \n<td>\n\n28\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n16\n\n</td>  \n<td>\n\n7\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n20.0 (20)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\niOS 7\n\n</td> </tr> </table>\n\n\n\n[1]: http://en.wikipedia.org/wiki/Emscripten\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.imul\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/Firefox/Releases/20\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.hypot()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.hypot()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.hypot()**` function returns the square root of the sum of squares\nof its arguments, that is\n\nMath.hypot(v1,v2,\u2026,vn)=\u2211i=1nvi2=v12+v22+\u2026+vn2\\mathtt{\\operatorname{Math.hypot}\n(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 +\n\\dots + v_n^2}\n\n## Syntax\n\n    \n    \n    Math.hypot([_value1_[,_value2_, ...]]) \n\n## Parameters\n\n`value1, value2, ...`\n\n     Numbers.\n\n## Description\n\nBecause `hypot` is a static method of `Math`, you always use it as\n`Math.hypot()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\nIf no arguments are given, the result is +0.\n\nIf at least one of arguments cannot be converted to a number, the result is\n[`NaN`][1].\n\nWith one argument, `Math.hypot(x)` returns the same as `Math.abs(x)`.\n\n## Examples\n\n### Example: Using `Math.hypot`\n\n    \n    \n    Math.hypot(3, 4)        // 5\n    Math.hypot(3, 4, 5)     // 7.0710678118654755\n    Math.hypot()            // 0\n    Math.hypot(NaN)         // NaN\n    Math.hypot(3, 4, \"foo\") // NaN, +\"foo\" => NaN\n    Math.hypot(3, 4, \"5\")   // 7.0710678118654755, +\"5\" => 5\n    Math.hypot(-3)          // 3, the same as Math.abs(-3)\n    \n\n## Polyfill\n\nThis can be emulated using the following function:\n\n    \n    \n    if (!Math.hypot) {\n      Math.hypot = function hypot() {\n        var y = 0;\n        var length = arguments.length;\n    \n        for (var i = 0; i < length; i++) {\n          if(arguments[i] === Infinity || arguments[i] === -Infinity) {\n            return Infinity;\n          }\n          y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.hypot' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[27][3] (27)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n27.0 (27)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][4] object it belongs to.\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.hypot\n\n[3]: /en-US/Firefox/Releases/27\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.fround()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.fround()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.fround()**` function returns the nearest [single precision][1]\nfloat representation of a number.\n\n## Syntax\n\n    \n    \n    Math.fround(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `fround` is a static method of `Math`, you always use it as\n`Math.fround()`, rather than as a method of a `Math` object you created\n(`Math` is not a constructor).\n\n## Examples\n\n    \n    \n    Math.fround(0)     // 0\n    Math.fround(1)     // 1\n    Math.fround(1.337) // 1.3370000123977661\n    Math.fround(1.5)   // 1.5\n    Math.fround(NaN)   // NaN\n\n## Polyfill\n\nThis can be emulated with the following function, if Float32Array are\nsupported:\n\n    \n    \n    function fround(x) {\n      var f32 = new Float32Array(1);\n      return f32[0] = x, f32[0];\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.fround' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://en.wikipedia.org/wiki/Single_precision\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.fround\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.expm1()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.expm1()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.expm1()**` function returns `ex` \\- 1, where `x` is the argument,\nand [`e`][1] the base of the natural logarithms.\n\n## Syntax\n\n    \n    \n    Math.expm1(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `expm1` is a static method of `Math`, you always use it as\n`Math.expm1()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.expm1`\n\n    \n    \n    Math.expm1(-1); // -0.6321205588285577 \n    Math.expm1(0);  // 0\n    Math.expm1(1);  // 1.718281828459045\n\n## Polyfill\n\nThis can be emulated with the help of the [`exp()`][2] function:\n\n    \n    \n    function expm1(x) {\n        return Math.exp(x) - 1;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.expm1' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][4] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][5] object it belongs to.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.expm1\n\n[4]: /en-US/Firefox/Releases/25\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.exp()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.exp()", "content": "## Summary\n\nThe `**Math.exp()**` function returns `ex`, where `x` is the argument, and `e`\nis [Euler's constant][1], the base of the natural logarithms.\n\n## Syntax\n\n    \n    \n    Math.exp(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `exp` is a static method of `Math`, you always use it as `Math.exp()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.exp`\n\n    \n    \n    Math.exp(-1); // 0.36787944117144233\n    Math.exp(0);  // 1\n    Math.exp(1);  // 2.718281828459045\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][4] object it belongs to.\n  * [`Math.E`][1]\n  * [`Math.log()`][5]\n  * [`Math.pow()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.8\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.exp\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.cosh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.cosh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.cosh()**` function returns the hyperbolic cosine of a number, that\ncan be expressed using the [constant e][1]:\n\nMath.cosh(x)=ex+e-x2\\mathtt{\\operatorname{Math.cosh(x)}} = \\frac{e^x +\ne^{-x}}{2}\n\n## Syntax\n\n    \n    \n    Math.cosh(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `cos`h is a static method of `Math`, you always use it as\n`Math.cosh()`, rather than as a method of a `Math` object you created (Math is\nnot a constructor).\n\n## Examples\n\n### Example: Using `Math.cosh`\n\n    \n    \n    Math.cosh(0);  // 1\n    Math.cosh(1);  // 1.5430806348152437\n    Math.cosh(-1); // 1.5430806348152437\n    \n\n## Polyfill\n\nThis can be emulated with the help of the [`exp()`][2] function:\n\n    \n    \n    function cosh(x) {\n        return (Math.exp(x) + Math.exp(-x)) / 2;\n    }\n\nor using only one call to the [`exp()`][2] function:\n\n    \n    \n    function cosh(x) {\n        var y = Math.exp(x);\n        return (y + 1 / y) / 2;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.cosh' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][4] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.cosh\n\n[4]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.cos()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.cos()", "content": "## Summary\n\nThe `**Math.cos()**` function returns the cosine of a number.\n\n## Syntax\n\n    \n    \n    Math.cos(_x_)\n\n### Parameters\n\n`x`\n\n     A number given in unit of radians.\n\n## Description\n\nThe `cos` method returns a numeric value between -1 and 1, which represents\nthe cosine of the angle.\n\nBecause `cos` is a static method of `Math`, you always use it as `Math.cos()`,\nrather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.cos`\n\n    \n    \n    Math.cos(0);           // 1\n    Math.cos(1);           // 0.5403023058681398\n    \n    Math.cos(Math.PI);     // -1\n    Math.cos(2 * Math.PI); // 1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.7\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.cos\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.clz32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.clz32()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.clz32()**` function returns the number of leading zero bits in the\n32-bit binary representation of a number.\n\n## Syntax\n\n    \n    \n    Math.clz32 (x)\n    \n\n### Parameters\n\nx\n\n     A number.\n\n## Description\n\n\"clz32\" is short for CountLeadingZeroes32.\n\nIf `x`\u00a0is not a number, then it will be converted to a number first, then\nconverted to a\u00a032-bit unsigned integer.\n\nIf the converted 32-bit unsigned integer\u00a0is `0`, then return `32`, because all\nbits are `0`.\n\nThis function\u00a0is particularly useful for systems that compile to JS, like\n[Emscripten][1].\n\n## Examples\n\n    \n    \n    Math.clz32(1)                // 31\n    Math.clz32(1000)             // 22 \n    Math.clz32()                 // 32\n    \n    [NaN, Infinity, -Infinity, 0, -0, null, undefined, \"foo\", {}, []].filter(\n    function (n) {\n      return Math.clz32(n) !== 32\n    })                           // []\n    \n    Math.clz32(true)             // 31\n    Math.clz32(3.5)              // 30\n    \n\n## Polyfill\n\n    \n    \n    Math.clz32 = Math.clz32 || function(value) {\n        var value = Number(value) >>> 0;\n        return value ? 32 - value.toString(2).length : 32;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.clz32' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[31][3] (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31.0 (31)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Math`][4]\n\n[1]: /en-US/docs/Emscripten\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.clz32\n\n[3]: /en-US/Firefox/Releases/31\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.cbrt()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.cbrt()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.cbrt()**` function returns the cube root of a number, that is\n\nMath.cbrt(x)=x3=the uniqueysuch thaty3=x\\mathtt{Math.cbrt(x)} = \\sqrt[3]{x} =\n\\text{the unique} \\; y \\; \\text{such that} \\; y^3 = x\n\n## Syntax\n\n    \n    \n    Math.cbrt(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `cbrt` is a static method of `Math`, you always use it as\n`Math.cbrt()`, rather than as a method of a `Math` object you created (Math is\nnot a constructor).\n\n## Examples\n\n### Example: Using `Math.cbrt()`\n\n    \n    \n    Math.cbrt(-1); // -1\n    Math.cbrt(0);  // 0\n    Math.cbrt(1);  // 1\n    \n    Math.cbrt(2);  // 1.2599210498948734\n\n## Polyfill\n\nFor all x\u22650x \\geq 0, have x3=x1/3\\sqrt[3]{x} = x^{1/3} so this can be emulated\nby the following function:\n\n    \n    \n    function cbrt(x) {\n        var y = Math.pow(Math.abs(x), 1/3);\n        return x < 0 ? -y : y;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.cbrt' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.cbrt\n\n[2]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.atanh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.atanh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.atanh()**` function returns the hyperbolic arctangent of a number,\nthat is\n\n\u2200x\u220a(-1,1),Math.atanh(x)=arctanh(x)= the unique ysuch thattanh(y)=x\\forall x\n\\in \\left( -1, 1 \\right), \\mathtt{\\operatorname{Math.atanh}(x)} =\n\\operatorname{arctanh}(x) = \\text{ the unique } \\; y \\; \\text{such that} \\;\n\\tanh(y) = x\n\n## Syntax\n\n    \n    \n    Math.atanh(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `atanh` is a static method of `Math`, you always use it as\n`Math.atanh()`, rather than as a method of a `Math` object you created (Math\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.atanh()`\n\n    \n    \n    Math.atanh(-2);  // NaN\n    Math.atanh(-1);  // -Infinity\n    Math.atanh(0);   // 0\n    Math.atanh(0.5); // 0.5493061443340548\n    Math.atanh(1);   // Infinity\n    Math.atanh(2);   // NaN\n    \n\nFor values greater than 1 or less than -1, `NaN` is returned.\n\n## Polyfill\n\nFor |x|<1\\left|x\\right| < 1, we have artanh(x)=12ln(1+x1-x)\\operatorname\n{artanh} (x) = \\frac{1}{2}\\ln \\left( \\frac{1 + x}{1 - x} \\right)so this can be\nemulated by the following function\n\n    \n    \n    function atanh(x) {\n      return Math.log((1+x)/(1-x)) / 2;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.atanh' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.atanh\n\n[2]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.atan2()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.atan2()", "content": "## Summary\n\nThe `**Math.atan2()**` function returns the arctangent of the quotient of its\narguments.\n\n## Syntax\n\n    \n    \n    Math.atan2(_y_, _x_) \n\n## Parameters\n\n`y, x`\n\n     Numbers.\n\n## Description\n\nThe `atan2` method returns a numeric value between -pi and pi representing the\nangle theta of an (x,y) point. This is the counterclockwise angle, measured in\nradians, between the positive X axis, and the point (`x,y`). Note that the\narguments to this function pass the y-coordinate first and the x-coordinate\nsecond.\n\n`atan2` is passed separate `x` and `y` arguments, and `atan` is passed the\nratio of those two arguments.\n\nBecause `atan2` is a static method of `Math`, you always use it as\n`Math.atan2()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.atan2`\n\n`\n\n    \n    \n    Math.atan2(90, 15) // 1.4056476493802699\n    Math.atan2(15, 90) // 0.16514867741462683\n    \n    Math.atan2( \u00b10, -0 )               // \u00b1PI.\n    Math.atan2( \u00b10, +0 )               // \u00b10.\n    Math.atan2( \u00b10, -x )               // \u00b1PI for x > 0.\n    Math.atan2( \u00b10, x )                // \u00b10 for x > 0.\n    Math.atan2( -y, \u00b10 )               // -PI/2 for y > 0.\n    Math.atan2( y, \u00b10 )                // PI/2 for y > 0.\n    Math.atan2( \u00b1y, -Infinity )        // \u00b1PI for finite y > 0.\n    Math.atan2( \u00b1y, +Infinity )        // \u00b10 for finite y > 0.\n    Math.atan2( \u00b1Infinity, x )         // \u00b1PI/2 for finite x.\n    Math.atan2( \u00b1Infinity, -Infinity ) // \u00b13*PI/4.\n    Math.atan2( \u00b1Infinity, +Infinity ) // \u00b1PI/4.\n    \n\n`\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math.atan2' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.atan2' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.acos()`][4]\n  * [`Math.asin()`][5]\n  * [`Math.atan()`][6]\n  * [`Math.cos()`][7]\n  * [`Math.sin()`][8]\n  * [`Math.tan()`][9]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.atan2\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.atan()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.atan()", "content": "## Summary\n\nThe `**Math.atan()**` function returns the arctangent (in radians) of a\nnumber, that is\n\nMath.atan(x)=arctan(x)= the unique y\u220a[-\u03c02;\u03c02]such\nthattan(y)=x\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{ the\nunique } \\; y \\in \\left[-\\frac{\\pi}{2}; \\frac{\\pi}{2}\\right] \\, \\text{such\nthat} \\; \\tan(y) = x\n\n## Syntax\n\n    \n    \n    Math.atan(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nThe `atan` method returns a numeric value between\u00a0-\u03c02-\\frac{\\pi}{2} and\n\u03c02\\frac{\\pi}{2} radians.\n\nBecause `atan` is a static method of `Math`, you always use it as\n`Math.atan()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.atan`\n\n    \n    \n    Math.atan(1);  // 0.7853981633974483\n    Math.atan(0);  // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.acos()`][4]\n  * [`Math.asin()`][5]\n  * [`Math.atan2()`][6]\n  * [`Math.cos()`][7]\n  * [`Math.sin()`][8]\n  * [`Math.tan()`][9]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.4\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.atan\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "arguments.length", "parent": "/javascript/javascript_reference/functions/arguments_object", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length", "parsed_url": "/javascript/javascript_reference/functions/arguments_object/arguments.length", "content": "## Summary\n\nThe **`arguments.length`** property contains the number of arguments passed to\nthe function.\n\n## Syntax\n\n    \n    \n    arguments.length\n\n## Description\n\nThe arguments.length property provides the number of arguments actually passed\nto a function. This can be more or less than the defined parameter count (see\n[`Function.length`][1]).\n\n## Examples\n\n### Example: Using `arguments.length`\n\nIn this example we define a function that can add two or more numbers\ntogether.\n\n    \n    \n    function adder(base, /*, n2, ... */) {\n      base = Number(base);\n      for (var i = 0; i < arguments.length; i++) {\n        base += Number(arguments[i]);\n      }\n      return base;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Arguments Object' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Arguments Exotic Objects' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][5]\n  * [`Function.length`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-10.6\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arguments-exotic-objects\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions", "Arguments object"], "type": "others"},
{"name": "arguments.callee", "parent": "/javascript/javascript_reference/functions/arguments_object", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee", "parsed_url": "/javascript/javascript_reference/functions/arguments_object/arguments.callee", "content": "## Summary\n\nThe **`arguments.callee`** property contains the currently executing function.\n\n## Description\n\n`callee` is a property of the `arguments` object. It can be used to refer to\nthe currently executing function inside the function body of that function.\nThis is useful when the name of the function is unknown, such as within a\nfunction expression with no name (also called \"anonymous functions\").\n\n**Warning:** The 5th edition of ECMAScript (ES5) forbids use of `arguments.callee()` in [strict mode][1]. Avoid using `arguments.callee()` by either giving function expressions a name or use a function declaration where a function must call itself.\n\n### Why was `arguments.callee` removed from ES5 strict mode?\n\n(adapted from [a Stack Overflow answer by olliej][2])\n\nEarly versions of JavaScript did not allow named function expressions, and for\nthis reason you could not make a recursive function expression.\n\nFor example, this syntax worked:\n\n    \n    \n    function factorial (n) {\n        return !(n > 1) ? 1 : factorial(n - 1) * n;\n    }\n    \n    [1,2,3,4,5].map(factorial);\n\nbut:\n\n    \n    \n    [1,2,3,4,5].map(function (n) {\n        return !(n > 1) ? 1 : /* what goes here? */ (n - 1) * n;\n    });\n\ndid not. To get around this `arguments.callee` was added so you could do\n\n    \n    \n    [1,2,3,4,5].map(function (n) {\n        return !(n > 1) ? 1 : arguments.callee(n - 1) * n;\n    });\n\nHowever, this was actually a really bad solution as this (in conjunction with\nother `arguments`, `callee`, and `caller` issues) make inlining and tail\nrecursion impossible in the general case (you can achieve it in select cases\nthrough tracing, etc., but even the best code is suboptimal due to checks that\nwould not otherwise be necessary.) The other major issue is that the recursive\ncall will get a different `this` value, e.g.:\n\n    \n    \n    var global = this;\n    \n    var sillyFunction = function (recursed) {\n        if (!recursed) { return arguments.callee(true); }\n        if (this !== global) {\n            alert(\"This is: \" + this);\n        } else {\n            alert(\"This is the global\");\n        }\n    }\n    \n    sillyFunction();\n\nECMAScript 3 resolved these issues by allowing named function expressions. For\nexample:\n\n    \n    \n    [1,2,3,4,5].map(function factorial (n) {\n        return !(n > 1) ? 1 : factorial(n-1)*n;\n    });\n\nThis has numerous benefits:\n\n  * the function can be called like any other from inside your code\n  * it does not create a variable in the outer scope ([except for IE 8 and below][3])\n  * it's has better performance than accessing the arguments object\n\nAnother feature that was deprecated was `arguments.callee.caller`, or more\nspecifically `Function.caller`. Why is this? Well, at any point in time you\ncan find the deepest caller of any function on the stack, and as I said above\nlooking at the call stack has one single major effect: it makes a large number\nof optimizations impossible, or much much more difficult. For example, if you\ncannot guarantee that a function `f` will not call an unknown function, it is\nnot possible to inline `f`. Basically it means that any call site that may\nhave been trivially inlinable accumulates a large number of guards:\n\n    \n    \n    function f (a, b, c, d, e) { return a ? b * c : d * e; }\n\nIf the JavaScript interpreter cannot guarantee that all the provided arguments\nare numbers at the point that the call is made, it needs to either insert\nchecks for all the arguments before the inlined code, or it cannot inline the\nfunction. Now in this particular case a smart interpreter should be able to\nrearrange the checks to be more optimal and not check any values that would\nnot be used. However in many cases that's just not possible and therefore it\nbecomes impossible to inline.\n\n## Examples\n\n### Using `arguments.callee` in an anonymous recursive function\n\nA recursive function must be able to refer to itself. Typically, a function\nrefers to itself by its name. However, an anonymous function (which can be\ncreated by a [function expression][4] or the [`Function` constructor][5]) does\nnot have a name. Therefore if there is no accessible variable referring to it,\nthe only way the function can refer to itself is by `arguments.callee`.\n\nThe following example defines a function, which, in turn, defines and returns\na factorial function. This example isn't very practical, and there are nearly\nno cases where the same result cannot be achieved with [named function\nexpressions][4].\n\n    \n    \n    function create() {\n       return function(n) {\n          if (n <= 1)\n             return 1;\n          return n * arguments.callee(n - 1);\n       };\n    }\n    \n    var result = create()(5); // returns 120 (5 * 4 * 3 * 2 * 1)\n\n### A use of `arguments.callee` with no good alternative\n\nHowever, in a case like the following, there are not alternatives to\n`arguments.callee`, so its deprecation could be a bug (see [bug\u00a0725398][6]):\n\n    \n    \n    function createPerson (sIdentity) {\n        var oPerson = new Function(\"alert(arguments.callee.identity);\");\n        oPerson.identity = sIdentity;\n        return oPerson;\n    }\n    \n    var john = createPerson(\"John Smith\");\n    \n    john();\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Arguments Object' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Arguments Exotic Objects' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][5]\n\n[1]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[2]: http://stackoverflow.com/a/235760/578288\n\n[3]: http://kangax.github.io/nfe/#example_1_function_expression_identifier_leaks_into_an_enclosing_scope\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=725398\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-10.6\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arguments-exotic-objects\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions", "Arguments object"], "type": "others"},
{"name": "Math.asinh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.asinh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.asinh()**` function returns the hyperbolic arcsine of a number,\nthat is\n\nMath.asinh(x)=arsinh(x)= the unique ysuch\nthatsinh(y)=x\\mathtt{\\operatorname{Math.asinh}(x)} = \\operatorname{arsinh}(x)\n= \\text{ the unique } \\; y \\; \\text{such that} \\; \\sinh(y) = x\n\n## Syntax\n\n    \n    \n    Math.asinh(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `asinh` is a static method of `Math`, you always use it as\n`Math.asinh()`, rather than as a method of a `Math` object you created (Math\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.asinh`\n\n    \n    \n    Math.asinh(1);  // 0.881373587019543\n    Math.asinh(0);  // 0\n\n## Polyfill\n\nWe have arsinh(x)=ln(x+x2+1)\\operatorname {arsinh} (x) = \\ln \\left(x +\n\\sqrt{x^{2} + 1} \\right) and so this can be emulated by the following\nfunction:\n\n    \n    \n    function asinh(x) {\n      if(x === -Infinity) {\n        return x;\n      } else {\n        return Math.log(x + Math.sqrt(x * x + 1));\n      }\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.asinh' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.asinh\n\n[2]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.asin()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.asin()", "content": "## Summary\n\nThe `**Math.asin()**` function returns the arcsine (in radians) of a number,\nthat is\n\n\u2200x\u220a[-1;1],Math.asin(x)=arcsin(x)= the unique y\u220a[-\u03c02;\u03c02]such\nthatsin(y)=x\\forall x \\in [{-1};1],\\;\\mathtt{\\operatorname{Math.asin}(x)} =\n\\arcsin(x) = \\text{ the unique } \\; y \\in \\left[-\\frac{\\pi}{2};\n\\frac{\\pi}{2}\\right] \\, \\text{such that} \\; \\sin(y) = x\n\n## Syntax\n\n    \n    \n    Math.asin(_x_)\n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nThe `asin` method returns a numeric value between\u00a0-\u03c02-\\frac{\\pi}{2} and\n\u03c02\\frac{\\pi}{2} radians for x between -1 and 1. If the value of `number` is\noutside this range, it returns `NaN`.\n\nBecause `asin` is a static method of `Math`, you always use it as\n`Math.asin()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.asin()`\n\n    \n    \n    Math.asin(-2);  // NaN\n    Math.asin(-1);  // -1.5707963267948966 (-pi/2)\n    Math.asin(0);   // 0\n    Math.asin(0.5); // 0.5235987755982989\n    Math.asin(1);   // 1.570796326794897 (pi/2)\n    Math.asin(2);   // NaN\n\nFor values less than -1 or greater than 1, `Math.asin` returns `NaN`.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.acos()`][4]\n  * [`Math.atan()`][5]\n  * [`Math.atan2()`][6]\n  * [`Math.cos()`][7]\n  * [`Math.sin()`][8]\n  * [`Math.tan()`][9]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.3\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.asin\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.acosh()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.acosh()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Math.acosh()**` function returns the hyperbolic arc-cosine of a number,\nthat is\n\n\u2200x\u22651,Math.acosh(x)=arcosh(x)= the unique y\u22650such thatcosh(y)=x\\forall x \\geq\n1, \\mathtt{\\operatorname{Math.acosh}(x)} = \\operatorname{arcosh}(x) = \\text{\nthe unique } \\; y \\geq 0 \\; \\text{such that} \\; \\cosh(y) = x\n\n## Syntax\n\n    \n    \n    Math.acosh(_x_) \n\n## Parameters\n\n`x`\n\n     A number.\n\n## Description\n\n`Because acos`h is a static method of `Math`, you always use it as\n`Math.acosh()`, rather than as a method of a Math object you created (`Math`\nis no constructor).\n\n## Examples\n\n### Example: Using `Math.acosh`\n\n    \n    \n    Math.acosh(-1); // NaN\n    Math.acosh(0);  // NaN\n    Math.acosh(0.5) // NaN\n    Math.acosh(1);  // 0\n    Math.acosh(2);  // 1.3169578969248166\n\nFor values less than 1 `Math.acosh` returns `NaN`.\n\n## Polyfill\n\nFor all x\u22651x \\geq 1, we have\u00a0arcosh(x)=ln(x+x2-1)\\operatorname {arcosh} (x) =\n\\ln \\left(x + \\sqrt{x^{2} - 1} \\right) and so this can be emulated with the\nfollowing function:\n\n    \n    \n    function acosh(x) {\n      return Math.log(x + Math.sqrt(x * x - 1));\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.acosh' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25][2] (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.acosh\n\n[2]: /en-US/Firefox/Releases/25\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.acos()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.acos()", "content": "## Summary\n\nThe `**Math.acos()**` function returns the arccosine (in radians) of a number,\nthat is\n\n\u2200x\u220a[-1;1],Math.acos(x)=arccos(x)= the unique y\u220a[0;\u03c0]such thatcos(y)=x\\forall x\n\\in [{-1};1],\\;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{ the\nunique } \\; y \\in [0; \\pi] \\, \\text{such that} \\; \\cos(y) = x\n\n## Syntax\n\n    \n    \n    Math.acos(_x_) \n\n## Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nThe `acos` method returns a numeric value between 0 and pi radians for x\nbetween -1 and 1. If the value of `number` is outside this range, it returns\n`NaN`.\n\nBecause `acos` is a static method of `Math`, you always use it as\n`Math.acos()`, rather than as a method of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.acos`\n\n    \n    \n    Math.acos(-2);  // NaN\n    Math.acos(-1);  // 3.141592653589793\n    Math.acos(0);   // 1.5707963267948966\n    Math.acos(0.5); // 1.0471975511965979\n    Math.acos(1);   // 0\n    Math.acos(2);   // NaN\n    \n\nFor values less than -1 or greater than 1, `Math.acos` returns `NaN`.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.asin()`][4]\n  * [`Math.atan()`][5]\n  * [`Math.atan2()`][6]\n  * [`Math.cos()`][7]\n  * [`Math.sin()`][8]\n  * [`Math.tan()`][9]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.2\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.acos\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.SQRT2", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sqrt2", "content": "## Summary\n\nThe `**Math.SQRT2**` property represents the square root of 2, approximately\n1.414:\n\nMath.SQRT2=2\u22481.414\\mathtt{\\mi{Math.SQRT2}} = \\sqrt{2} \\approx 1.414  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.SQRT2`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `SQRT2` is a static property of `Math`, you always use it as\n`Math.SQRT2`, rather than as a property of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.SQRT2`\n\nThe following function returns the square root of 2:\n\n    \n    \n    function getRoot2() {\n       return Math.SQRT2\n    }\n    \n    getRoot2() // 1.4142135623730951\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.8\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sqrt2\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.SQRT1_2", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.sqrt1_2", "content": "## Summary\n\nThe `**Math.SQRT1_2**` property represents the square root of 1/2 which is\napproximately 0.707:\n\nMath.SQRT1_2=12=12\u22480.707\\mathtt{\\mi{Math.SQRT1_2}} = \\sqrt{\\frac{1}{2}} =\n\\frac{1}{\\sqrt{2}} \\approx 0.707  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.SQRT1_2`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `SQRT1_2` is a static property of `Math`, you always use it as\n`Math.SQRT1_2`, rather than as a property of a `Math` object you created\n(`Math` is not a constructor).\n\n## Examples\n\n### Example: Using `SQRT1_2`\n\nThe following function returns 1 over the square root of 2:\n\n    \n    \n    function getRoot1_2() {\n       return Math.SQRT1_2\n    }\n    \n    getRoot1_2() // 0.7071067811865476\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.7\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.sqrt1_2\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Symbol.keyFor()", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.keyfor()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Symbol.keyFor(sym)**` method retrieves a shared symbol key from the\nglobal symbol registry for the given symbol.\n\n## Syntax\n\n    \n    \n    Symbol.keyFor(sym);\n\n### Parameters\n\nsym\n\n     Symbol, required. The symbol to find a key for.\n\n## Examples\n\n    \n    \n    var globalSym = Symbol.for(\"foo\"); // create a new global symbol\n    Symbol.keyFor(globalSym); // \"foo\"\n    \n    var localSym = Symbol();\n    Symbol.keyFor(localSym); // undefined\n    \n    // well-known symbols are not symbols registered \n    // in the global symbol registry\n    Symbol.keyFor(Symbol.iterator) // undefined\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol.keyFor' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[33.0][2] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Symbol.prototype.for()`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol.keyfor\n\n[2]: /en-US/Firefox/Releases/33\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "method"},
{"name": "Boolean.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/boolean", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/boolean/boolean.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the specified\nBoolean object.\n\n## Syntax\n\n    \n    \n    bool.toString()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe [`Boolean`][1] object overrides the `toString` method of the [`Object`][2]\nobject; it does not inherit [`Object.prototype.toString()`][3]. For Boolean\nobjects, the `toString` method returns a string representation of the object.\n\nJavaScript calls the `toString` method automatically when a [`Boolean`][1] is\nto be represented as a text value or when a [`Boolean`][1] is referred to in a\nstring concatenation.\n\nFor [`Boolean`][1] objects and values, the built-in `toString` method returns\nthe string \"`true`\" or \"`false`\" depending on the value of the boolean object.\n\n## Examples\n\n### Example: Using `toString`\n\nIn the following code, `flag.toString()` returns \"`true`\":\n\n    \n    \n    var flag = new Boolean(true);\n    var myVar = flag.toString();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Boolean.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Boolean.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.4.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-boolean.prototype.tostring\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Boolean"], "type": "method"},
{"name": "Boolean.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/boolean", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/boolean/boolean.prototype", "content": "## Summary\n\nThe **`Boolean.prototype`** property represents the prototype for the\n[`Boolean`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Boolean.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Boolean`][1] instances inherit from `Boolean.prototype`. You can use the\nconstructor's prototype object to add properties or methods to all\n[`Boolean`][1] instances.\n\n## Properties\n\n`Boolean.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Boolean`][1] function by default.\n\nProperties inherited from [`Object`][2]:\n\n[`__parent__`][3], [`__proto__`][4]\n\n## Methods\n\n[`Boolean.prototype.toSource()`][5] _ _\n\n     Returns a string containing the source of the [`Boolean`][1] object; you can use this string to create an equivalent object. Overrides the [`Object.prototype.toSource()`][6] method.\n[`Boolean.prototype.toString()`][7]\n\n     Returns a string of either `\"true\"` or `\"false\"` depending upon the value of the object. Overrides the [`Object.prototype.toString()`][8] method.\n[`Boolean.prototype.valueOf()`][9]\n\n     Returns the primitive value of the [`Boolean`][1] object. Overrides the [`Object.prototype.valueOf()`][10] method.\n\nMethods inherited from [`Object`][2]:\n\n[`__defineGetter__`][11], [`__defineSetter__`][12], [`hasOwnProperty`][13],\n[`isPrototypeOf`][14], [`__lookupGetter__`][15], [`__lookupSetter__`][16],\n[`__noSuchMethod__`][17], [`propertyIsEnumerable`][18],\n[`toLocaleString`][19], [`unwatch`][20], [`watch`][21]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Boolean.prototype' in that specification.][22]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Boolean.prototype' in that specification.][23]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[15]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[22]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.3.1\n\n[23]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-boolean.prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Boolean"], "type": "property"},
{"name": "Symbol.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.prototype.tostring()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**toString()**` method returns a string representing the specified Symbol\nobject.\n\n## Syntax\n\n    \n    \n    Symbol().toString();\n\n## Description\n\nThe [`Symbol`][1] object overrides the `toString` method of the [`Object`][2]\nobject; it does not inherit [`Object.prototype.toString()`][3]. For `Symbol`\nobjects, the `toString` method returns a string representation of the object.\n\n### No string concatenation\n\nWhile you can call `toString()` on Symbols, you can't use string concatenation\nwith them:\n\n    \n    \n    Symbol(\"foo\") + \"bar\";       // TypeError: Can't convert symbol to string\n\n## Examples\n\n    \n    \n    Symbol(\"desc\").toString();   // \"Symbol(desc)\"\n    \n    // well-known symbols\n    Symbol.iterator.toString();  // \"Symbol(Symbol.iterator)\n    \n    // global symbols\n    Symbol.for(\"foo\").toString() // \"Symbol(foo)\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol.prototype.toString' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[33.0][5] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.toString()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol.prototype.tostring\n\n[5]: /en-US/Firefox/Releases/33\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "method"},
{"name": "Symbol.for()", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.for()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Symbol.for(key)**` method searches for existing symbols in a runtime-\nwide symbol registry with the given key and returns it if found. Otherwise a\nnew symbol gets created in the global symbol registry with this key.\n\n## Syntax\n\n    \n    \n    Symbol.for(key);\n\n### Parameters\n\nkey\n\n     String, required. The key for the symbol (and also used for the description of the symbol).\n\n## Description\n\nIn contrast to `Symbol()`, the `Symbol.for()` function creates a symbol\navailable in a global symbol registry list. `Symbol.for()` does also not\nnecessarily create a new symbol on every call, but checks first if a symbol\nwith the given `key` is already present in the registry. In that case, that\nsymbol is returned. If no symbol with the given key is found, `Symbol.for()`\nwill create a new global symbol.\n\n### Global symbol registry\n\nThe global symbol registry is a list with the following record structure and\nit is initialized empty:  \n  \n<table> A record in the global symbol registry  \n<tr>  \n<th>\n\nField name\n\n</th>  \n<th>\n\nValue\n\n</th> </tr>  \n<tr>  \n<td>\n\n[[key]]\n\n</td>  \n<td>\n\nA string key used to identify a symbol.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[[symbol]]\n\n</td>  \n<td>\n\nA symbol that is stored globally.\n\n</td> </tr> </table>\n\n## Examples\n\n    \n    \n    Symbol.for(\"foo\"); // create a new global symbol\n    Symbol.for(\"foo\"); // retrieve the already created symbol\n    \n    // Same global symbol, but not locally\n    Symbol.for(\"bar\") === Symbol.for(\"bar\"); // true\n    Symbol(\"bar\") === Symbol(\"bar\"); // false\n    \n    // The key is also used as the description\n    var sym = Symbol.for(\"mario\");\n    sym.toString(); // \"Symbol(mario)\"\n    \n\nTo avoid name clashes with your global symbol keys and other (library code)\nglobal symbols, it might be a good idea to prefix your symbols:\n\n    \n    \n    Symbol.for(\"mdn.foo\");\n    Symbol.for(\"mdn.bar\");\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol.for' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[33.0][2] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Symbol.prototype.keyFor()`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol.for\n\n[2]: /en-US/Firefox/Releases/33\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "method"},
{"name": "Symbol.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Symbol**`**`.prototype`** property represents the prototype for the\n[`Symbol`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Symbol.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Symbol`][1] instances inherit from [`Symbol.prototype`][2]. You can use the\nconstructor's prototype object to add properties or methods to all `Symbol`\ninstances.\n\n## Properties\n\n`Symbol.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Symbol`][1] function by default.\n\n## Methods\n\n[`Symbol.prototype.toSource()`][3] _ _\n\n     Returns a string containing the source of the [`Symbol`][1] object. Overrides the [`Object.prototype.toSource()`][4] method.\n[`Symbol.prototype.toString()`][5]\n\n     Returns a string of containing the description of the Symbol. Overrides the [`Object.prototype.toString()`][6] method.\n[`Symbol.prototype.valueOf()`][7]\n\n     Returns the primitive value of the [`Symbol`][1] object. Overrides the [`Object.prototype.valueOf()`][8] method.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol.prototype' in that specification.][9]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[33.0][10] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol.prototype\n\n[10]: /en-US/Firefox/Releases/33\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "property"},
{"name": "Math.LOG2E", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log2e", "content": "## Summary\n\nThe `**Math.LOG2E**` property represents the base 2 logarithm of e,\napproximately 1.442:\n\nMath.LOG2E=log2(e)\u22481.442\\mathtt{\\mi{Math.LOG2E}} = \\log_2(e) \\approx 1.442  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.LOG2E`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `LOG2E` is a static property of `Math`, you always use it as\n`Math.LOG2E`, rather than as a property of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.LOG2E`\n\nThe following function returns the base 2 logarithm of `E`:\n\n    \n    \n    function getLog2e() {\n       return Math.LOG2E\n    }\n    \n    getLog2e() // 1.4426950408889634\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.4\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log2e\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.LOG10E", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.log10e", "content": "## Summary\n\nThe `**Math.LOG10E**` property represents the base 10 logarithm of e,\napproximately 0.434:\n\nMath.LOG10E=log10(e)\u22480.434\\mathtt{\\mi{Math.LOG10E}} = \\log_10(e) \\approx 0.434  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.LOG10E`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `LOG10E` is a static property of `Math`, you always use it as\n`Math.LOG10E`, rather than as a property of a `Math` object you created\n(`Math` is not a constructor).\n\n## Examples\n\n### Example: Using `Math.LOG10E`\n\nThe following function returns the base 10 logarithm of `E`:\n\n    \n    \n    function getLog10e() {\n       return Math.LOG10E\n    }\n    \n    getLog10e() // 0.4342944819032518\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.log10e\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.LN2", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.ln2", "content": "## Summary\n\nThe `**Math.LN2**` property represents the natural logarithm of 2,\napproximately 0.693:\n\nMath.LN2=ln(2)\u22480.693\\mathtt{\\mi{Math.LN2}} = \\ln(2) \\approx 0.693  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.LN2`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `LN2` is a static property of `Math`, you always use it as `Math.LN2`,\nrather than as a property of a `Math` object you created (`Math` is not a\nconstructor).\n\n## Examples\n\n### Example: Using `Math.LN2`\n\nThe following function returns the natural log of 2:\n\n    \n    \n    function getNatLog2() {\n       return Math.LN2\n    }\n    \n    getNatLog2() // 0.6931471805599453\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.3\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.ln2\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.PI", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.pi", "content": "## Summary\n\nThe `**Math.PI**` property represents the ratio of the circumference of a\ncircle to its diameter, approximately 3.14159:\n\nMath.PI=\u03c0\u22483.14159\\mathtt{\\mi{Math.PI}} = \\pi \\approx 3.14159  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.PI`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `PI` is a static property of `Math`, you always use it as `Math.PI`,\nrather than as a property of a `Math` object you created (`Math` is not a\nconstructor).\n\n## Examples\n\n### Example: Using `Math.PI`\n\nThe following function returns the value of pi:\n\n    \n    \n    function getPi() {\n       return Math.PI\n    }\n    \n    getPi() // 3.141592653589793\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.6\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.pi\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.LN10", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.ln10", "content": "## Summary\n\nThe `**Math.LN10**` property represents the natural logarithm of 10,\napproximately 2.302:\n\nMath.LN10=ln(10)\u22482.302\\mathtt{\\mi{Math.LN10}} = \\ln(10) \\approx 2.302  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.LN10`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Description\n\nBecause `LN10` is a static property of `Math`, you always use it as\n`Math.LN10`, rather than as a property of a `Math` object you created (`Math`\nis not a constructor).\n\n## Examples\n\n### Example: Using `Math.LN10`\n\nThe following function returns the natural log of 10:\n\n    \n    \n    function getNatLog10() {\n       return Math.LN10\n    }\n    \n    getNatLog10() // 2.302585092994046\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.2\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.ln10\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.E", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.e", "content": "## Summary\n\nThe `**Math.E**` property represents the base of natural logarithms, e,\napproximately 2.718.\n\nMath.E=e\u22482.718\\mathtt{\\mi{Math.E}} = e \\approx 2.718  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Math.E`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nBecause `E` is a static property of `Math`, you always use it as `Math.E`,\nrather than as a property of a `Math` object you created (`Math` is not a\nconstructor).\n\n## Examples\n\n### Example: Using `Math.E`\n\nThe following function returns e:\n\n    \n    \n    function getNapier() {\n       return Math.E\n    }\n    \n    getNapier() // 2.718281828459045\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.1.1\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.e\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "property"},
{"name": "Math.round()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.round()", "content": "## Summary\n\nThe `**Math.round()**` function returns the value of a number rounded to the\nnearest integer.\n\n## Syntax\n\n    \n    \n    Math.round(_x_) \n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nIf the fractional portion of `number` is .5 or greater, the argument is\nrounded to the next higher integer. If the fractional portion of `number` is\nless than .5, the argument is rounded to the next lower integer.\n\nBecause `round` is a static method of `Math`, you always use it as\n`Math.round()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.round`\n\n    \n    \n    // Returns the value 20\n    x = Math.round(20.49);\n    \n    // Returns the value 21\n    x = Math.round(20.5);\n    \n    // Returns the value -20\n    x = Math.round(-20.5);\n    \n    // Returns the value -21\n    x = Math.round(-20.51);\n    \n    // Returns the value 1 (!)\n    // Note the rounding error because of inaccurate floating point arithmetics\n    // Compare this with Math.round10(1.005, -2) from the example below\n    x = Math.round(1.005*100)/100;\n    \n\n### Example: Decimal rounding\n\n    \n    \n    // Closure\n    (function(){\n    \n    \t/**\n    \t * Decimal adjustment of a number.\n    \t *\n    \t * @param\t{String}\ttype\tThe type of adjustment.\n    \t * @param\t{Number}\tvalue\tThe number.\n    \t * @param\t{Integer}\texp\t\tThe exponent (the 10 logarithm of the adjustment base).\n    \t * @returns\t{Number}\t\t\tThe adjusted value.\n    \t */\n    \tfunction decimalAdjust(type, value, exp) {\n    \t\t// If the exp is undefined or zero...\n    \t\tif (typeof exp === 'undefined' || +exp === 0) {\n    \t\t\treturn Math[type](value);\n    \t\t}\n    \t\tvalue = +value;\n    \t\texp = +exp;\n    \t\t// If the value is not a number or the exp is not an integer...\n    \t\tif (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n    \t\t\treturn NaN;\n    \t\t}\n    \t\t// Shift\n    \t\tvalue = value.toString().split('e');\n    \t\tvalue = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n    \t\t// Shift back\n    \t\tvalue = value.toString().split('e');\n    \t\treturn +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n    \t}\n    \n    \t// Decimal round\n    \tif (!Math.round10) {\n    \t\tMath.round10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('round', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal floor\n    \tif (!Math.floor10) {\n    \t\tMath.floor10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('floor', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal ceil\n    \tif (!Math.ceil10) {\n    \t\tMath.ceil10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('ceil', value, exp);\n    \t\t};\n    \t}\n    \n    })();\n    \n    // Round\n    Math.round10(55.55, -1); // 55.6\n    Math.round10(55.549, -1); // 55.5\n    Math.round10(55, 1); // 60\n    Math.round10(54.9, 1); // 50\n    Math.round10(-55.55, -1); // -55.5\n    Math.round10(-55.551, -1); // -55.6\n    Math.round10(-55, 1); // -50\n    Math.round10(-55.1, 1); // -60\n    Math.round10(1.005, -2); // 1.01 -- compare this with Math.round(1.005*100)/100 above\n    // Floor\n    Math.floor10(55.59, -1); // 55.5\n    Math.floor10(59, 1); // 50\n    Math.floor10(-55.51, -1); // -55.6\n    Math.floor10(-51, 1); // -60\n    // Ceil\n    Math.ceil10(55.51, -1); // 55.6\n    Math.ceil10(51, 1); // 60\n    Math.ceil10(-55.59, -1); // -55.5\n    Math.ceil10(-59, 1); // -50\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math.round' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math.round' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Math.abs()`][3]\n  * [`Math.ceil()`][4]\n  * [`Math.floor()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.15\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.round\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Math.ceil()", "parent": "/javascript/javascript_reference/standard_built-in_objects/math", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math/math.ceil()", "content": "## Summary\n\nThe `**Math.ceil(x)**` function returns the smallest integer greater than or\nequal to a number \"x\".\n\n## Syntax\n\n    \n    \n    Math.ceil(_x_) \n\n### Parameters\n\n`x`\n\n     A number.\n\n## Description\n\nBecause `ceil` is a static method of `Math`, you always use it as\n`Math.ceil()`, rather than as a method of a `Math` object you created.\n\n## Examples\n\n### Example: Using `Math.ceil`\n\nThe following example shows example usage of `Math.ceil()`.\n\n    \n    \n    Math.ceil(.95); // 1\n    Math.ceil(4); // 4\n    Math.ceil(7.004) // 8\n\n### Example: Decimal adjustment\n\n    \n    \n    // Closure\n    (function(){\n    \n    \t/**\n    \t * Decimal adjustment of a number.\n    \t *\n    \t * @param\t{String}\ttype\tThe type of adjustment.\n    \t * @param\t{Number}\tvalue\tThe number.\n    \t * @param\t{Integer}\texp\t\tThe exponent (the 10 logarithm of the adjustment base).\n    \t * @returns\t{Number}\t\t\tThe adjusted value.\n    \t */\n    \tfunction decimalAdjust(type, value, exp) {\n    \t\t// If the exp is undefined or zero...\n    \t\tif (typeof exp === 'undefined' || +exp === 0) {\n    \t\t\treturn Math[type](value);\n    \t\t}\n    \t\tvalue = +value;\n    \t\texp = +exp;\n    \t\t// If the value is not a number or the exp is not an integer...\n    \t\tif (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n    \t\t\treturn NaN;\n    \t\t}\n    \t\t// Shift\n    \t\tvalue = value.toString().split('e');\n    \t\tvalue = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n    \t\t// Shift back\n    \t\tvalue = value.toString().split('e');\n    \t\treturn +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n    \t}\n    \n    \t// Decimal round\n    \tif (!Math.round10) {\n    \t\tMath.round10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('round', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal floor\n    \tif (!Math.floor10) {\n    \t\tMath.floor10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('floor', value, exp);\n    \t\t};\n    \t}\n    \t// Decimal ceil\n    \tif (!Math.ceil10) {\n    \t\tMath.ceil10 = function(value, exp) {\n    \t\t\treturn decimalAdjust('ceil', value, exp);\n    \t\t};\n    \t}\n    \n    })();\n    \n    // Round\n    Math.round10(55.55, -1); // 55.6\n    Math.round10(55.549, -1); // 55.5\n    Math.round10(55, 1); // 60\n    Math.round10(54.9, 1); // 50\n    Math.round10(-55.55, -1); // -55.5\n    Math.round10(-55.551, -1); // -55.6\n    Math.round10(-55, 1); // -50\n    Math.round10(-55.1, 1); // -60\n    // Floor\n    Math.floor10(55.59, -1); // 55.5\n    Math.floor10(59, 1); // 50\n    Math.floor10(-55.51, -1); // -55.6\n    Math.floor10(-51, 1); // -60\n    // Ceil\n    Math.ceil10(55.51, -1); // 55.6\n    Math.ceil10(51, 1); // 60\n    Math.ceil10(-55.59, -1); // -55.5\n    Math.ceil10(-59, 1); // -50\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Math`][3] object it belongs to.\n  * [`Math.abs()`][4]\n  * [`Math.floor()`][5]\n  * [`Math.round()`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8.2.6\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math.ceil\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Math"], "type": "method"},
{"name": "Date.prototype.toGMTString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.togmtstring()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**toGMTString()**` method converts a date to a string, using Internet\nGreenwich Mean Time (GMT) conventions. The exact format of the value returned\nby `toGMTString()` varies according to the platform and browser, in general it\nshould represent a human readable date string.\n\n**Note**: `toGMTString()` is deprecated and should no longer be used. It remains implemented only for backward compatibility; please use [`toUTCString()`][1] instead.\n\n## Syntax\n\n    \n    \n    dateObj.toGMTString()\n\n## Examples\n\n### Simple example\n\nIn this example, the `toGMTString()` method converts the date to GMT (UTC)\nusing the operating system's time-zone offset and returns a string value that\nis similar to the following form. The exact format depends on the platform.\n\n    \n    \n    var today = new Date();\n    var str = today.toGMTString();  // deprecated! use toUTCString()\n    \n    console.log(str);               // Mon, 18 Dec 1995 17:28:35 GMT\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition, but already declared as deprecated.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toGMTString' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) compatibility annex.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toGMTString' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) annex for additional features for web browsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleDateString()`][5]\n  * [`Date.prototype.toTimeString()`][6]\n  * [`Date.prototype.toUTCString()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.6\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.togmtstring\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toDateString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.todatestring()", "content": "## Summary\n\nThe `**toDateString()**` method returns the date portion of a `Date` object in\nhuman readable form in American English.\n\n## Syntax\n\n    \n    \n    dateObj.toDateString()\n\n## Description\n\n[`Date`][1] instances refer to a specific point in time. Calling\n[`toString`][2] will return the date formatted in a human readable form in\nAmerican English. In [SpiderMonkey][3], this consists of the date portion\n(day, month, and year) followed by the time portion (hours, minutes, seconds,\nand time zone). Sometimes it is desirable to obtain a string of the date\nportion; such a thing can be accomplished with the `toDateString` method.\n\nThe `toDateString` method is especially useful because compliant engines\nimplementing [ECMA-262][4] may differ in the string obtained from `toString`\nfor `Date` objects, as the format is implementation-dependent and simple\nstring slicing approaches may not produce consistent results across multiple\nengines.\n\n## Examples\n\n### Example: A basic usage of `toDateString`\n\n    \n    \n    var d = new Date(1993, 6, 28, 14, 39, 7);\n    \n    println(d.toString());     // prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT)\n    println(d.toDateString()); // prints Wed Jul 28 1993\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.toDateString' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.toDateString' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.toLocaleDateString()`][7]\n  * [`Date.prototype.toTimeString()`][8]\n  * [`Date.prototype.toString()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\n\n[3]: /en-US/docs/SpiderMonkey\n\n[4]: /en-US/docs/ECMAScript\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.3\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.todatestring\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setyear()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe `**setYear()**` method sets the year for a specified date according to\nlocal time. Because `setYear` does not set full years (\"year 2000 problem\"),\nit is no longer used and has been replaced by the [`setFullYear`][1] method.\n\n## Syntax\n\n    \n    \n    dateObj.setYear(_yearValue_)\n\n### Parameters\n\n`yearValue`\n\n     An integer.\n\n### Returns\n\nIf `yearValue` is a number between 0 and 99 (inclusive), then the year for\n`dateObj` is set to 1900 + `yearValue`. Otherwise, the year for `dateObj` is\nset to `yearValue`.\n\n## Examples\n\n### Example: Using `setYear`\n\nThe first two lines set the year to 1996. The third sets the year to 2000.\n\n    \n    \n    var theBigDay = new Date();\n    \n    theBigDay.setYear(96);\n    theBigDay.setYear(1996);\n    theBigDay.setYear(2000);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getYear' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) compatibility annex.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getYear' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) annex for additional features for web browsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getFullYear()`][4]\n  * [`Date.prototype.getUTCFullYear()`][5]\n  * [`Date.prototype.setFullYear()`][1]\n  * [`Date.prototype.setUTCFullYear()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.5\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setyear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCSeconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcseconds()", "content": "## Summary\n\nThe `**setUTCSeconds()**` method sets the seconds for a specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCSeconds(_secondsValue_[, _msValue_]) \n\n### Parameters\n\n`secondsValue`\n\n     An integer between 0 and 59.\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds.\n\n## Description\n\nIf you do not specify the `msValue` parameter, the value returned from the\n[`getUTCMilliseconds()`][1] method is used.\n\nIf a parameter you specify is outside of the expected range, `setUTCSeconds`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes stored in the `Date`\nobject will be incremented by 1, and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setUTCSeconds`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCSeconds(20);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCSeconds()`][4]\n  * [`Date.prototype.setSeconds()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.31\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Boolean.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/boolean", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/boolean/boolean.prototype.valueof()", "content": "## Summary\n\nThe `**valueOf()**` method returns the primitive value of a [`Boolean`][1]\nobject.\n\n## Syntax\n\n    \n    \n    bool.valueOf()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `valueOf` method of [`Boolean`][1] returns the primitive value of a\n[`Boolean`][1] object or literal [`Boolean`][1] as a Boolean data type.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    x = new Boolean();\n    myVar = x.valueOf(); // assigns false to myVar\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Boolean.prototype.valueOf' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Boolean.prototype.valueOf' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.valueOf()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.6.4.3\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-boolean.prototype.valueof\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Boolean"], "type": "method"},
{"name": "Symbol.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/symbol", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol/symbol.prototype.valueof()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**valueOf()**` method returns the primitive value of a Symbol object.\n\n## Syntax\n\n    \n    \n    Symbol().valueOf();\n    \n\n## Description\n\nThe `valueOf` method of [`Symbol`][1] returns the primitive value of a Symbol\nobject as a Symbol data type.\n\nJavaScript calls the `valueOf` method to convert an object to a primitive\nvalue. You rarely need to invoke the `valueOf` method yourself; JavaScript\nautomatically invokes it when encountering an object where a primitive value\nis expected.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol.prototype.valueOf' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[33.0][3] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.valueOf()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol.prototype.valueof\n\n[3]: /en-US/Firefox/Releases/33\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Symbol"], "type": "method"},
{"name": "Date.prototype.setUTCMonth()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcmonth()", "content": "## Summary\n\nThe `**setUTCMonth()**` method sets the month for a specified date according\nto universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCMonth(_monthValue_[, _dayValue_]) \n\n### Parameters\n\n`monthValue`\n\n     An integer between 0 and 11, representing the months January through December.\n`dayValue`\n\n     An integer from 1 to 31, representing the day of the month.\n\n## Description\n\nIf you do not specify the `dayValue` parameter, the value returned from the\n[`getUTCDate()`][1] method is used.\n\nIf a parameter you specify is outside of the expected range, `setUTCMonth`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 15 for `monthValue`, the year will be incremented by 1\n(year + 1), and 3 will be used for month.\n\n## Examples\n\n### Example: Using `setUTCMonth`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCMonth(11);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMonth()`][4]\n  * [`Date.prototype.setMonth()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.39\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcmonth\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCMinutes()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcminutes()", "content": "## Summary\n\nThe `**setUTCMinutes()**` method sets the minutes for a specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCMinutes(_minutesValue_[, _secondsValue_[, _msValue_]]) \n\n### Parameters\n\n`minutesValue`\n\n     An integer between 0 and 59, representing the minutes.\n`secondsValue`\n\n     An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.\n\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.\n\n## Description\n\nIf you do not specify the `secondsValue` and `msValue` parameters, the values\nreturned from [`getUTCSeconds()`][1] and [`getUTCMilliseconds()`][2] methods\nare used.\n\nIf a parameter you specify is outside of the expected range, `setUTCMinutes`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes (`minutesValue`) will\nbe incremented by 1 (`minutesValue` \\+ 1), and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setUTCMinutes`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCMinutes(43);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMinutes()`][5]\n  * [`Date.prototype.setMinutes()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.33\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcminutes\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCMilliseconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcmilliseconds()", "content": "## Summary\n\nThe `**setUTCMilliseconds()**` method sets the milliseconds for a specified\ndate according to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCMilliseconds(_millisecondsValue_) \n\n### Parameters\n\n`millisecondsValue`\n\n     A number between 0 and 999, representing the milliseconds.\n\n## Description\n\nIf a parameter you specify is outside of the expected range,\n`setUTCMilliseconds` attempts to update the date information in the `Date`\nobject accordingly. For example, if you use 1100 for `millisecondsValue`, the\nseconds stored in the `Date` object will be incremented by 1, and 100 will be\nused for milliseconds.\n\n## Examples\n\n### Example: Using `setUTCMilliseconds`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCMilliseconds(500);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMilliseconds()`][3]\n  * [`Date.prototype.setMilliseconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.29\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcmilliseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCHours()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutchours()", "content": "## Summary\n\nThe `**setUTCHours()**` method sets the hour for a specified date according to\nuniversal time,\u00a0and returns the number of milliseconds since 1 January 1970\n00:00:00 UTC until the time represented by the updated\u00a0[`Date`][1]\u00a0instance.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCHours(_hoursValue_[, _minutesValue_[, _secondsValue_[, _msValue_]]])\n\n### Parameters\n\n`hoursValue`\n\n     An integer between 0 and 23, representing the hour.\n`minutesValue`\n\n     An integer between 0 and 59, representing the minutes.\n`secondsValue`\n\n     An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.\n\n## Description\n\nIf you do not specify the `minutesValue`, `secondsValue`, and `msValue`\nparameters, the values returned from the [`getUTCMinutes()`][2],\n[`getUTCSeconds()`][3], and [`getUTCMilliseconds()`][4] methods are used.\n\nIf a parameter you specify is outside of the expected range, `setUTCHours`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes will be incremented by\n1 (min + 1), and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setUTCHours`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCHours(8);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCHours()`][7]\n  * [`Date.prototype.setHours()`][8]\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.35\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutchours\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCFullYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcfullyear()", "content": "## Summary\n\nThe `**setUTCFullYear()**` method sets the full year for a specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCFullYear(_yearValue_[, _monthValue_[, _dayValue_]])\n\n### Parameters\n\n`yearValue`\n\n     An integer specifying the numeric value of the year, for example, 1995.\n`monthValue`\n\n     An integer between 0 and 11 representing the months January through December.\n`dayValue`\n\n     An integer between 1 and 31 representing the day of the month. If you specify the `dayValue` parameter, you must also specify the `monthValue`.\n\n## Description\n\nIf you do not specify the `monthValue` and `dayValue` parameters, the values\nreturned from the [`getUTCMonth()`][1] and [`getUTCDate()`][2] methods are\nused.\n\nIf a parameter you specify is outside of the expected range, `setUTCFullYear`\nattempts to update the other parameters and the date information in the `Date`\nobject accordingly. For example, if you specify 15 for `monthValue`, the year\nis incremented by 1 (year + 1), and 3 is used for the month.\n\n## Examples\n\n### Example: Using `setUTCFullYear`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCFullYear(1997);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCFullYear()`][5]\n  * [`Date.prototype.setFullYear()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.41\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcfullyear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setUTCDate()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setutcdate()", "content": "## Summary\n\nThe `**setUTCDate()**` method sets the day of the month for a specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.setUTCDate(_dayValue_)\n\n### Parameters\n\n`dayValue`\n\n     An integer from 1 to 31, representing the day of the month.\n\n## Description\n\nIf a parameter you specify is outside of the expected range, `setUTCDate`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 40 for `dayValue`, and the month stored in the `Date`\nobject is June, the day will be changed to 10 and the month will be\nincremented to July.\n\n## Examples\n\n### Example: Using `setUTCDate`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setUTCDate(20);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCDate()`][3]\n  * [`Date.prototype.setDate()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.37\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setutcdate\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setTime()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.settime()", "content": "## Summary\n\nThe `**setTime()**` method sets the `Date` object to the time represented by a\nnumber of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n## Syntax\n\n    \n    \n    dateObj.setTime(_timeValue_)\n\n### Parameters\n\n`timeValue`\n\n     An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.\n\n## Description\n\nUse the `setTime` method to help assign a date and time to another `Date`\nobject.\n\n## Examples\n\n### Example: Using `setTime`\n\n    \n    \n    var theBigDay = new Date(\"July 1, 1999\");\n    var sameAsBigDay = new Date();\n    sameAsBigDay.setTime(theBigDay.getTime());\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.setTime' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.setTime' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getTime()`][3]\n  * [`Date.prototype.setUTCHours()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.27\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.settime\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setSeconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setseconds()", "content": "## Summary\n\nThe `**setSeconds()**` method sets the seconds for a specified date according\nto local time.\n\n## Syntax\n\n    \n    \n    dateObj.setSeconds(_secondsValue_[, _msValue_])\n\n### Versions prior to JavaScript 1.3\n\n    \n    \n    dateObj.setSeconds(_secondsValue_)\n\n### Parameters\n\n`secondsValue`\n\n     An integer between 0 and 59.\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds.\n\n## Description\n\nIf you do not specify the `msValue` parameter, the value returned from the\n[`getMilliseconds()`][1] method is used.\n\nIf a parameter you specify is outside of the expected range, `setSeconds`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes stored in the `Date`\nobject will be incremented by 1, and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setSeconds`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setSeconds(30)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getSeconds()`][4]\n  * [`Date.prototype.setUTCSeconds()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.30\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setMonth()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setmonth()", "content": "## Summary\n\nThe `**setMonth()**` method sets the month for a specified date according to\nlocal time.\n\n## Syntax\n\n    \n    \n    dateObj.setMonth(_monthValue_[, _dayValue_])\n\n### Versions prior to JavaScript 1.3\n\n    \n    \n    dateObj.setMonth(_monthValue_)\n\n### Parameter\n\n`monthValue`\n\n     An integer between 0 and 11 (representing the months January through December).\n\n`dayValue`\n\n     An integer from 1 to 31, representing the day of the month.\n\n## Description\n\nIf you do not specify the `dayValue` parameter, the value returned from the\n[`getDate`][1] method is used.\n\nIf a parameter you specify is outside of the expected range, `setMonth`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 15 for `monthValue`, the year will be incremented by 1\n(year + 1), and 3 will be used for month.\n\n## Examples\n\n### Example: Using `setMonth`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setMonth(6);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMonth()`][4]\n  * [`Date.prototype.setUTCMonth()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.38\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setmonth\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setMinutes()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setminutes()", "content": "## Summary\n\nThe `**setMinutes()**` method sets the minutes for a specified date according\nto local time.\n\n## Syntax\n\n    \n    \n    dateObj.setMinutes(_minutesValue_[, _secondsValue_[, _msValue_]])\n\n### Versions prior to JavaScript 1.3\n\n    \n    \n    dateObj.setMinutes(_minutesValue_)\n\n### Parameters\n\n`minutesValue`\n\n     An integer between 0 and 59, representing the minutes.\n\n`secondsValue`\n\n     An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.\n\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.\n\n## Description\n\nIf you do not specify the `secondsValue` and `msValue` parameters, the values\nreturned from [`getSeconds()`][1] and [`getmilliseconds()`][2] methods are\nused.\n\nIf a parameter you specify is outside of the expected range, `setMinutes`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes (`minutesValue`) will\nbe incremented by 1 (`minutesValue` \\+ 1), and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setMinutes`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setMinutes(45);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMinutes()`][5]\n  * [`Date.prototype.setUTCMinutes()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.32\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setminutes\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setMilliseconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setmilliseconds()", "content": "## Summary\n\nThe `**setMilliseconds()**` method sets the milliseconds for a specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.setMilliseconds(_millisecondsValue_)\n\n### Parameters\n\n`millisecondsValue`\n\n     A number between 0 and 999, representing the milliseconds.\n\n## Description\n\nIf you specify a number outside the expected range, the date information in\nthe `Date` object is updated accordingly. For example, if you specify 1005,\nthe number of seconds is incremented by 1, and 5 is used for the milliseconds.\n\n## Examples\n\n### Example: Using `setMilliseconds`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setMilliseconds(100);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMilliseconds()`][3]\n  * [`Date.prototype.setUTCMilliseconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.28\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setmilliseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setHours()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.sethours()", "content": "## Summary\n\nThe `**setHours()**` method sets the hours for a specified date according to\nlocal time, and returns the number of milliseconds since 1 January 1970\n00:00:00 UTC until the time represented by the updated [`Date`][1] instance.\n\n## Syntax\n\n    \n    \n    dateObj.setHours(_hoursValue_[, _minutesValue_[, _secondsValue_[, _msValue_]]])\n    \n\n### Versions prior to JavaScript 1.3\n\n    \n    \n    dateObj.setHours(_hoursValue_) \n\n### Parameters\n\n`hoursValue`\n\n     An integer between 0 and 23, representing the hour.\n`minutesValue`\n\n     An integer between 0 and 59, representing the minutes.\n`secondsValue`\n\n     An integer between 0 and 59, representing the seconds. If you specify the `secondsValue` parameter, you must also specify the `minutesValue`.\n`msValue`\n\n     A number between 0 and 999, representing the milliseconds. If you specify the `msValue` parameter, you must also specify the `minutesValue` and `secondsValue`.\n\n## Description\n\nIf you do not specify the `minutesValue`, `secondsValue`, and `msValue`\nparameters, the values returned from the [`getMinutes()`][2],\n[`getSeconds()`][3], and [`getMilliseconds()`][4] methods are used.\n\nIf a parameter you specify is outside of the expected range, `setHours`\nattempts to update the date information in the `Date` object accordingly. For\nexample, if you use 100 for `secondsValue`, the minutes will be incremented by\n1 (min + 1), and 40 will be used for seconds.\n\n## Examples\n\n### Example: Using `setHours`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setHours(7);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getHours()`][7]\n  * [`Date.prototype.setUTCHours()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.34\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.sethours\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setFullYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setfullyear()", "content": "## Summary\n\nThe `**setFullYear()**` method sets the full year for a specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.setFullYear(_yearValue_[, _monthValue_[, _dayValue_]]) \n\n### Parameters\n\n`yearValue`\n\n     An integer specifying the numeric value of the year, for example, 1995.\n`monthValue`\n\n     An integer between 0 and 11 representing the months January through December.\n`dayValue`\n\n     An integer between 1 and 31 representing the day of the month. If you specify the `dayValue` parameter, you must also specify the `monthValue`.\n\n## Description\n\nIf you do not specify the `monthValue` and `dayValue` parameters, the values\nreturned from the `getMonth` and `getDate` methods are used.\n\nIf a parameter you specify is outside of the expected range, `setFullYear`\nattempts to update the other parameters and the date information in the `Date`\nobject accordingly. For example, if you specify 15 for `monthValue`, the year\nis incremented by 1 (year + 1), and 3 is used for the month.\n\n## Examples\n\n### Example: Using `setFullYear`\n\n    \n    \n    var theBigDay = new Date();\n    theBigDay.setFullYear(1997);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCFullYear()`][3]\n  * [`Date.prototype.setUTCFullYear()`][4]\n  * [`Date.prototype.setYear()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.40\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setfullyear\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.setDate()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.setdate()", "content": "## Summary\n\nThe `**setDate()**` method sets the day of the month for a specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.setDate(_dayValue_)\n\n### Parameters\n\n`dayValue`\n\n     An integer representing the day of the month.\n\n## Description\n\nIf the `dayValue`\u00a0is outside of the range of date values for the month,\n`setDate` will update the\u00a0`Date` object accordingly. For example, if 0 is\nprovided for `dayValue`, the date will be set to the last day of the previous\nmonth.\n\n## Examples\n\n### Example: Using `setDate`\n\n    \n    \n    var theBigDay = new Date(1962, 6, 7); // 1962-07-07\n    theBigDay.setDate(24);  // 1962-07-24\n    theBigDay.setDate(32);\u00a0 // 1962-08-01\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getDate()`][3]\n  * [`Date.prototype.setUTCDate()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.36\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.setdate\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getyear()", "content": "**Deprecated**  \nThis feature has been removed from the Web standards. Though some browsers may\nstill support it, it is in the process of being dropped. Do not use it in old\nor new projects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe **`getYear()`** method returns the year in the specified date according to\nlocal time. Because `getYear` does not return full years (\"year 2000\nproblem\"), it is no longer used and has been replaced by the\n[`getFullYear`][1] method.\n\n## Syntax\n\n    \n    \n    dateObj.getYear() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe `getYear` method returns the year minus 1900; thus:\n\n  * For years greater than or equal to 2000, the value returned by `getYear` is 100 or greater. For example, if the year is 2026, `getYear` returns 126.\n  * For years between and including 1900 and 1999, the value returned by `getYear` is between 0 and 99. For example, if the year is 1976, `getYear` returns 76.\n  * For years less than 1900, the value returned by `getYear` is less than 0. For example, if the year is 1800, `getYear` returns -100.\n\nTo take into account years before and after 2000, you should use\n[`getFullYear()`][1] instead of `getYear` so that the year is specified in\nfull.\n\n## Backward Compatibility\n\n### Behaviour in JavaScript 1.2 and earlier\n\nThe `getYear` method returns either a 2-digit or 4-digit year:\n\n  * For years between and including 1900 and 1999, the value returned by `getYear` is the year minus 1900. For example, if the year is 1976, the value returned is 76.\n  * For years less than 1900 or greater than 1999, the value returned by `getYear` is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.\n\n## Examples\n\n### Example: Years between 1900 and 1999\n\nThe second statement assigns the value 95 to the variable `year`.\n\n    \n    \n    var Xmas = new Date(\"December 25, 1995 23:15:00\");\n    var year = Xmas.getYear(); // returns 95\n    \n\n### Example: Years above 1999\n\nThe second statement assigns the value 100 to the variable `year`.\n\n    \n    \n    var Xmas = new Date(\"December 25, 2000 23:15:00\");\n    var year = Xmas.getYear(); // returns 100\n    \n\n### Example: Years below 1900\n\nThe second statement assigns the value -100 to the variable `year`.\n\n    \n    \n    var Xmas = new Date(\"December 25, 1800 23:15:00\");\n    var year = Xmas.getYear(); // returns -100\n    \n\n### Example: Setting and getting a year between 1900 and 1999\n\nThe second statement assigns the value 95 to the variable `year`, representing\nthe year 1995.\n\n    \n    \n    var Xmas.setYear(95);\n    var year = Xmas.getYear(); // returns 95 \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getYear' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) compatibility annex.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getYear' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) annex for additional features for web browsers.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getFullYear()`][1]\n  * [`Date.prototype.getUTCFullYear()`][5]\n  * [`Date.prototype.setYear()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.4\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getyear\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCMonth()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcmonth()", "content": "## Summary\n\nThe `**getUTCMonth()**` returns the month of the specified date according to\nuniversal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCMonth()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCMonth` is an integer between 0 and 11\ncorresponding to the month. 0 for January, 1 for February, 2 for March, and so\non.\n\n## Examples\n\n### Example: Using `getUTCMonth`\n\nThe following example assigns the month portion of the current date to the\nvariable `mon`.\n\n    \n    \n    var Today = new Date();\n    var mon = Today.getUTCMonth();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMonth' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMonth' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMonth()`][3]\n  * [`Date.prototype.setUTCMonth()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.13\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcmonth\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCMinutes()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcminutes()", "content": "## Summary\n\nThe `**getUTCMinutes()**` method returns the minutes in the specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCMinutes()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCMinutes` is an integer between 0 and 59.\n\n## Examples\n\n### Example: Using `getUTCMinutes`\n\nThe following example assigns the minutes portion of the current time to the\nvariable `min`.\n\n    \n    \n    var Today = new Date();\n    var min = Today.getUTCMinutes();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMinutes' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMinutes' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMinutes()`][3]\n  * [`Date.prototype.setUTCMinutes()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.21\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcminutes\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCSeconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcseconds()", "content": "## Summary\n\nThe `**getUTCSeconds()**` method returns the seconds in the specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCSeconds()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCSeconds` is an integer between 0 and 59.\n\n## Examples\n\n### Example: Using `getUTCSeconds`\n\nThe following example assigns the seconds portion of the current time to the\nvariable `sec`.\n\n    \n    \n    var Today = new Date();\n    var sec = Today.getUTCSeconds();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCSeconds' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCSeconds' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getSeconds()`][3]\n  * [`Date.prototype.setUTCSeconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.23\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCMilliseconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcmilliseconds()", "content": "## Summary\n\nThe `**getUTCMilliseconds()**` method returns the milliseconds in the\nspecified date according to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCMilliseconds()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCMilliseconds` is an integer between 0 and 999.\n\n## Examples\n\n### Example: Using `getUTCMilliseconds`\n\nThe following example assigns the milliseconds portion of the current time to\nthe variable `ms`.\n\n    \n    \n    var Today = new Date();\n    var ms = Today.getUTCMilliseconds();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMilliseconds' in that\nspecification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCMilliseconds' in that\nspecification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getMilliseconds()`][3]\n  * [`Date.prototype.setUTCMilliseconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.25\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcmilliseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCHours()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutchours()", "content": "## Summary\n\nThe `**getUTCHours()**` method returns the hours in the specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCHours()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCHours` is an integer between 0 and 23.\n\n## Examples\n\n### Example: Using `getUTCHours`\n\nThe following example assigns the hours portion of the current time to the\nvariable `hrs`.\n\n    \n    \n    var Today = new Date();\n    var hrs = Today.getUTCHours();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCHours' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCHours' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getHours()`][3]\n  * [`Date.prototype.setUTCHours()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.19\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutchours\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCFullYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcfullyear()", "content": "## Summary\n\nThe `**getUTCFullYear()**` method returns the year in the specified date\naccording to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCFullYear()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCFullYear` is an absolute number that is compliant\nwith year-2000, for example, 1995.\n\n## Examples\n\n### Example: Using `getUTCFullYear`\n\nThe following example assigns the four-digit value of the current year to the\nvariable `yr`.\n\n    \n    \n    var Today = new Date();\n    var yr = Today.getUTCFullYear();\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCFullYear' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCFullYear' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getFullYear()`][3]\n  * [`Date.prototype.setFullYear()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.11\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcfullyear\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCDay()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcday()", "content": "## Summary\n\nThe `**getUTCDay()**` method returns the day of the week in the specified date\naccording to universal time, where 0 represents Sunday.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCDay()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCDay` is an integer corresponding to the day of\nthe week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.\n\n## Examples\n\n### Example: Using `getUTCDay`\n\nThe following example assigns the weekday portion of the current date to the\nvariable `weekday`.\n\n    \n    \n    var weekday;\n    Today = new Date()\n    weekday = Today.getUTCDay()\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCDay' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getUTCDay' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCDate()`][3]\n  * [`Date.prototype.getDay()`][4]\n  * [`Date.prototype.setUTCDate()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.17\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcday\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getUTCDate()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getutcdate()", "content": "## Summary\n\nThe `**getUTCDate()**` method returns the day (date) of the month in the\nspecified date according to universal time.\n\n## Syntax\n\n    \n    \n    dateObj.getUTCDate()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getUTCDate` is an integer between 1 and 31.\n\n## Examples\n\n### Example: Using `getUTCDate`\n\nThe following example assigns the day portion of the current date to the\nvariable `d`.\n\n    \n    \n    var Today = new Date();\n    var d = Today.getUTCDate(); \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getDate()`][3]\n  * [`Date.prototype.getUTCDay()`][4]\n  * [`Date.prototype.setUTCDate()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.15\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getutcdate\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getTimezoneOffset()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.gettimezoneoffset()", "content": "## Summary\n\nThe `**getTimezoneOffset()**` method returns the time-zone offset from UTC, in\nminutes, for the current locale.\n\n## Syntax\n\n    \n    \n    dateObj.getTimezoneOffset() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe time-zone offset is the difference, in minutes, between UTC\u00a0and local\ntime. Note that this means that the offset is positive if the local timezone\nis behind UTC\u00a0and negative if it is ahead.\u00a0 For example, if your time zone is\nUTC+10 (Australian Eastern Standard Time), -600 will be returned. Daylight\nsaving time prevents this value from being a constant even for a given locale.\n\n## Examples\n\n### Example: Using `getTimezoneOffset`\n\n    \n    \n    var x = new Date();\n    var currentTimeZoneOffsetInHours = x.getTimezoneOffset() / 60;\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.26\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.gettimezoneoffset\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getTime()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.gettime()", "content": "## Summary\n\nThe `**getTime()**` method returns the numeric value corresponding to the time\nfor the specified date according to universal time.\n\nYou can use this method to help assign a date and time to another `Date`\nobject. This method is functionally equivalent to the [`valueOf()`][1] method.\n\n## Syntax\n\n    \n    \n    dateObj.getTime() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by the `getTime` method is the number of milliseconds since\n1 January 1970 00:00:00 UTC.\n\n## Examples\n\n### Using getTime for copying dates\n\nConstructing a date object with the identical time value.\n\n    \n    \n    var birthday = new Date(1994, 11, 10);\n    var copy = new Date();\n    copy.setTime(birthday.getTime());\n    \n\n### Measuring execution time\n\nSubtracting two subsequent getTime calls on newly generated Date objects, give\nthe time span between these two calls. This can be used to calculate the\nexecuting time of some operations.\n\n    \n    \n    var end, start;\n    \n    start = new Date();\n    for (var i = 0; i < 1000; i++)\n      Math.sqrt(i);\n    end = new Date();\n    \n    console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.prototype.getTime' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.prototype.getTime' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.setTime()`][4]\n  * [`Date.prototype.valueOf()`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueof\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.9\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.gettime\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getSeconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getseconds()", "content": "## Summary\n\nThe `**getSeconds()**` method returns the seconds in the specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.getSeconds()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getSeconds` is an integer between 0 and 59.\n\n## Examples\n\n### Example: Using `getSeconds`\n\nThe second statement below assigns the value 30 to the variable `secs`, based\non the value of the `Date` object `Xmas95`.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:30\");\n    var secs = Xmas95.getSeconds();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCSeconds()`][3]\n  * [`Date.prototype.setSeconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.22\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getMonth()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getmonth()", "content": "## Summary\n\nThe `**getMonth()**` method returns the month in the specified date according\nto local time, as a zero-based value (where zero indicates the first month of\nthe year).\n\n## Syntax\n\n    \n    \n    _dateObj.g_etMonth() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getMonth` is an integer between 0 and 11. 0 corresponds\nto January, 1 to February, and so on.\n\n## Examples\n\n### Example: Using `getMonth`\n\nThe second statement below assigns the value 11 to the variable `month`, based\non the value of the `Date` object `Xmas95`.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:00\");\n    var month = Xmas95.getMonth();\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMonth()`][3]\n  * [`Date.prototype.setMonth()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.12\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getmonth\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getMinutes()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getminutes()", "content": "## Summary\n\nThe `**getMinutes()**` method returns the minutes in the specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.getMinutes() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getMinutes` is an integer between 0 and 59.\n\n## Examples\n\n### Example: Using `getMinutes`\n\nThe second statement below assigns the value 15 to the variable `minutes`,\nbased on the value of the `Date` object `Xmas95`.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:00\");\n    var minutes = Xmas95.getMinutes();\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMinutes()`][3]\n  * [`Date.prototype.setMinutes()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.20\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getminutes\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getMilliseconds()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getmilliseconds()", "content": "## Summary\n\nThe `**getMilliseconds()**` method returns the milliseconds in the specified\ndate according to local time.\n\n## Syntax\n\n    \n    \n    dateObj.getMilliseconds()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getMilliseconds()` is a number between 0 and 999.\n\n## Examples\n\n### Example: Using `getMilliseconds`\n\nThe following example assigns the milliseconds portion of the current time to\nthe variable `ms`:\n\n    \n    \n    var ms;\n    Today = new Date();\n    ms = Today.getMilliseconds(); \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCMilliseconds()`][3]\n  * [`Date.prototype.setMilliseconds()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.24\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getmilliseconds\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getHours()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.gethours()", "content": "## Summary\n\nThe `**getHours()**` method returns the hour for the specified date, according\nto local time.\n\n## Syntax\n\n    \n    \n    dateObj.getHours()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getHours` is an integer between `0` and `23`.\n\n## Examples\n\n### Example: Using `getHours`\n\nThe second statement below assigns the value 23 to the variable `hours`, based\non the value of the `Date` object `Xmas95`.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:00\");\n    var hours = Xmas95.getHours();\n    \n    alert(hours); // 23\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCHours()`][3]\n  * [`Date.prototype.setHours()`][4]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.18\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.gethours\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getFullYear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getfullyear()", "content": "## Summary\n\nThe `**getFullYear()**` method returns the year of the specified date\naccording to local time.\n\nUse this method instead of the [`getYear()`][1] method.\n\n## Syntax\n\n    \n    \n    dateObj.getFullYear() \n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getFullYear()` is an absolute number. For dates between\nthe years 1000 and 9999, `getFullYear()` returns a four-digit number, for\nexample, 1995. Use this function to make sure a year is compliant with years\nafter 2000.\n\n## Examples\n\n### Example: Using `getFullYear`\n\nThe following example assigns the four-digit value of the current year to the\nvariable `yr`.\n\n    \n    \n    var today = new Date();\n    var yr = today.getFullYear(); \n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.3\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCFullYear()`][4]\n  * [`Date.prototype.setFullYear()`][5]\n  * [`Date.prototype.getYear()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.10\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getfullyear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getDay()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getday()", "content": "## Summary\n\nThe `**getDay()**` method returns the day of the week for the specified date\naccording to local time, where 0 represents Sunday.\n\n## Syntax\n\n    \n    \n    dateObj.getDay()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getDay()` is an integer corresponding to the day of the\nweek: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.\n\n## Examples\n\n### Example: Using `getDay`\n\nThe second statement below assigns the value 1 to `weekday`, based on the\nvalue of the `Date` object `Xmas95`. December 25, 1995, is a Monday.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:00\");\n    var weekday = Xmas95.getDay();\n    \n    alert(weekday); // 1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCDate()`][3]\n  * [`Date.prototype.getUTCDay()`][4]\n  * [`Date.prototype.setDate()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.16\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getday\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.getDate()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.getdate()", "content": "## Summary\n\nThe `**getDate()**` method returns the day of the month for the specified date\naccording to local time.\n\n## Syntax\n\n    \n    \n    dateObj.getDate()\n\n### Parameters\n\nNone.\n\n### Returns\n\nThe value returned by `getDate()` is an integer between 1 and 31.\n\n## Examples\n\n### Example: Using `getDate()`\n\nThe second statement below assigns the value 25 to the variable `day`, based\non the value of the `Date` object `Xmas95`.\n\n    \n    \n    var Xmas95 = new Date(\"December 25, 1995 23:15:00\");\n    var day = Xmas95.getDate();\n    \n    alert(day); // 25\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.prototype.getUTCDate()`][3]\n  * [`Date.prototype.getUTCDay()`][4]\n  * [`Date.prototype.setDate()`][5]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.14\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.getdate\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.now()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.now()", "content": "## Summary\n\nThe**` Date.now()`** method returns the number of milliseconds elapsed since 1\nJanuary 1970 00:00:00 UTC.\n\n## Syntax\n\n    \n    \n    var timeInMs = Date.now();\n    \n\n### Parameters\n\nNone.\n\n## Description\n\nThe `now()` method returns the milliseconds elapsed since 1 January 1970\n00:00:00 UTC up until now as a [`Number`][1].\n\nBecause `now` is a static method of `Date`, you always use it as `Date.now()`.\n\n## Polyfill\n\nThis method was standardized in ECMA-262 5th edition. Engines which have not\nbeen updated to support this method can work around the absence of this method\nusing the following shim:\n\n    \n    \n    if (!Date.now) {\n      Date.now = function now() {\n        return new Date().getTime();\n      };\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.now' in that specification.][2]  \nImplemented in JavaScript 1.5\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.now' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nBased on [Kangax's compat table][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n3\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n10.50\n\n</td>  \n<td>\n\n4\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`window.performance.now`][5] \\- provides timestamps with sub-millisecond resolution for use in measuring web page performance\n  * [`console.time`][6] / [`console.timeEnd`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.now\n\n[4]: http://kangax.github.com/es5-compat-table/\n\n[5]: /en-US/docs/Web/API/window.performance.now\n\n[6]: /en-US/docs/Web/API/console.time\n\n[7]: /en-US/docs/Web/API/console.timeEnd\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.UTC()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.utc()", "content": "## Summary\n\nThe `**Date.UTC()**` method accepts the same parameters as the longest form of\nthe constructor, and returns the number of milliseconds in a `Date` object\nsince January 1, 1970, 00:00:00, universal time.\n\n## Syntax\n\n    \n    \n    Date.UTC(_year_,_month_[,_date_[,_hrs_[,_min_[,_sec_[,_ms_]]]]]) \n\n## Parameters\n\n`year`\n\n     A year after 1900.\n`month`\n\n     An integer between 0 and 11 representing the month.\n`date`\n\n     An integer between 1 and 31 representing the day of the month.\n`hrs`\n\n     An integer between 0 and 23 representing the hours.\n`min`\n\n     An integer between 0 and 59 representing the minutes.\n`sec`\n\n     An integer between 0 and 59 representing the seconds.\n`ms`\n\n     An integer between 0 and 999 representing the milliseconds.\n\n## Description\n\n`UTC` takes comma-delimited date parameters and returns the number of\nmilliseconds between January 1, 1970, 00:00:00, universal time and the time\nyou specified.\n\nYou should specify a full year for the year; for example, 1998. If a year\nbetween 0 and 99 is specified, the method converts the year to a year in the\n20th century (1900 + year); for example, if you specify 95, the year 1995 is\nused.\n\nThe `UTC` method differs from the `Date` constructor in two ways.\n\n  * `Date.UTC` uses universal time instead of the local time.\n  * `Date.UTC` returns a time value as a number instead of creating a `Date` object.\n\nIf a parameter you specify is outside of the expected range, the `UTC` method\nupdates the other parameters to allow for your number. For example, if you use\n15 for month, the year will be incremented by 1 (year + 1), and 3 will be used\nfor the month.\n\nBecause `UTC` is a static method of `Date`, you always use it as `Date.UTC()`,\nrather than as a method of a `Date` object you created.\n\n## Examples\n\n### Example: Using `Date.UTC`\n\nThe following statement creates a `Date` object using UTC instead of local\ntime:\n\n    \n    \n    var utcDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.parse()`][3]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.3\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.utc\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype", "content": "## Summary\n\nThe **`Date.prototype`** property represents the prototype for the [`Date`][1]\nconstructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Date.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nyes\n\n</td> </tr> </table>\n\n## Description\n\nJavaScript [`Date`][1] instances inherit from [`Date.prototype`][2]. You can\nmodify the constructor's prototype object to affect properties and methods\ninherited by JavaScript `Date` instances.\n\nFor compatibility with millennium calculations (in other words, to take into\naccount the year 2000), you should always specify the year in full; for\nexample, use 1998, not 98. To assist you in specifying the complete year,\nJavaScript includes the methods [`getFullYear()`][3], [`setFullYear()`][4],\n[`getUTCFullYear()`][5] and [`setUTCFullYear()`][6].\n\n## Properties\n\nDate.prototype.constructor\n\n     Returns the function that created an instance. This is the [`Date`][1] `Date` constructor by default.\n\nProperties inherited from [`Object`][7]:\n\n[`__parent__`][8], [`__proto__`][9]\n\n## Methods\n\n### Getter\n\n[`Date.prototype.getDate()`][10]\n\n     Returns the day of the month (1-31) for the specified date according to local time.\n[`Date.prototype.getDay()`][11]\n\n     Returns the day of the week (0-6) for the specified date according to local time.\n[`Date.prototype.getFullYear()`][3]\n\n     Returns the year (4 digits for 4-digit years) of the specified date according to local time.\n[`Date.prototype.getHours()`][12]\n\n     Returns the hour (0-23) in the specified date according to local time.\n[`Date.prototype.getMilliseconds()`][13]\n\n     Returns the milliseconds (0-999) in the specified date according to local time.\n[`Date.prototype.getMinutes()`][14]\n\n     Returns the minutes (0-59) in the specified date according to local time.\n[`Date.prototype.getMonth()`][15]\n\n     Returns the month (0-11) in the specified date according to local time.\n[`Date.prototype.getSeconds()`][16]\n\n     Returns the seconds (0-59) in the specified date according to local time.\n[`Date.prototype.getTime()`][17]\n\n     Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).\n[`Date.prototype.getTimezoneOffset()`][18]\n\n     Returns the time-zone offset in minutes for the current locale.\n[`Date.prototype.getUTCDate()`][19]\n\n     Returns the day (date) of the month (1-31) in the specified date according to universal time.\n[`Date.prototype.getUTCDay()`][20]\n\n     Returns the day of the week (0-6) in the specified date according to universal time.\n[`Date.prototype.getUTCFullYear()`][5]\n\n     Returns the year (4 digits for 4-digit years) in the specified date according to universal time.\n[`Date.prototype.getUTCHours()`][21]\n\n     Returns the hours (0-23) in the specified date according to universal time.\n[`Date.prototype.getUTCMilliseconds()`][22]\n\n     Returns the milliseconds (0-999) in the specified date according to universal time.\n[`Date.prototype.getUTCMinutes()`][23]\n\n     Returns the minutes (0-59) in the specified date according to universal time.\n[`Date.prototype.getUTCMonth()`][24]\n\n     Returns the month (0-11) in the specified date according to universal time.\n[`Date.prototype.getUTCSeconds()`][25]\n\n     Returns the seconds (0-59) in the specified date according to universal time.\n[`Date.prototype.getYear()`][26] _ _\n\n     Returns the year (usually 2-3 digits) in the specified date according to local time. Use [`getFullYear()`][3] instead.\n\n### Setter\n\n[`Date.prototype.setDate()`][27]\n\n     Sets the day of the month for a specified date according to local time.\n[`Date.prototype.setFullYear()`][4]\n\n     Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.\n[`Date.prototype.setHours()`][28]\n\n     Sets the hours for a specified date according to local time.\n[`Date.prototype.setMilliseconds()`][29]\n\n     Sets the milliseconds for a specified date according to local time.\n[`Date.prototype.setMinutes()`][30]\n\n     Sets the minutes for a specified date according to local time.\n[`Date.prototype.setMonth()`][31]\n\n     Sets the month for a specified date according to local time.\n[`Date.prototype.setSeconds()`][32]\n\n     Sets the seconds for a specified date according to local time.\n[`Date.prototype.setTime()`][33]\n\n     Sets the `Date` object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.\n[`Date.prototype.setUTCDate()`][34]\n\n     Sets the day of the month for a specified date according to universal time.\n[`Date.prototype.setUTCFullYear()`][6]\n\n     Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.\n[`Date.prototype.setUTCHours()`][35]\n\n     Sets the hour for a specified date according to universal time.\n[`Date.prototype.setUTCMilliseconds()`][36]\n\n     Sets the milliseconds for a specified date according to universal time.\n[`Date.prototype.setUTCMinutes()`][37]\n\n     Sets the minutes for a specified date according to universal time.\n[`Date.prototype.setUTCMonth()`][38]\n\n     Sets the month for a specified date according to universal time.\n[`Date.prototype.setUTCSeconds()`][39]\n\n     Sets the seconds for a specified date according to universal time.\n[`Date.prototype.setYear()`][40] _ _\n\n     Sets the year (usually 2-3 digits) for a specified date according to local time. Use [`setFullYear()`][4] instead.\n\n### Conversion getter\n\n[`Date.prototype.toDateString()`][41]\n\n     Returns the \"date\" portion of the Date as a human-readable string.\n[`Date.prototype.toISOString()`][42]\n\n     Converts a date to a string following the ISO 8601 Extended Format.\n[`Date.prototype.toJSON()`][43]\n\n     Returns a string representing the Date using [`toISOString()`][42]. Intended for use by [`JSON.stringify()`][44].\n[`Date.prototype.toGMTString()`][45] _ _\n\n     Returns a string representing the Date based on the GMT (UT) time zone. Use [`toUTCString()`][46] instead.\n[`Date.prototype.toLocaleDateString()`][47]\n\n     Returns a string with a locality sensitive representation of the date portion of this date based on system settings.\n[`Date.prototype.toLocaleFormat()`][48] _ _\n\n     Converts a date to a string, using a format string.\n[`Date.prototype.toLocaleString()`][49]\n\n     Returns a string with a locality sensitive representation of this date. Overrides the [`Object.prototype.toLocaleString()`][50] method.\n[`Date.prototype.toLocaleTimeString()`][51]\n\n     Returns a string with a locality sensitive representation of the time portion of this date based on system settings.\n[`Date.prototype.toSource()`][52] _ _\n\n     Returns a string representing the source for an equivalent `Date` object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][53] method.\n[`Date.prototype.toString()`][54]\n\n     Returns a string representing the specified `Date` object. Overrides the [`Object.prototype.toString()`][55] method.\n[`Date.prototype.toTimeString()`][56]\n\n     Returns the \"time\" portion of the Date as a human-readable string.\n[`Date.prototype.toUTCString()`][46]\n\n     Converts a date to a string using the UTC timezone.\n[`Date.prototype.valueOf()`][57]\n\n     Returns the primitive value of a `Date` object. Overrides the [`Object.prototype.valueOf()`][58] method.\n\nMethods inherited from [`Object`][7]:\n\n[`__defineGetter__`][59], [`__defineSetter__`][60], [`hasOwnProperty`][61],\n[`isPrototypeOf`][62], [`__lookupGetter__`][63], [`__lookupSetter__`][64],\n[`__noSuchMethod__`][65], [`propertyIsEnumerable`][66], [`unwatch`][67],\n[`watch`][68]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][69]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][70]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[59]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[60]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[61]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[62]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[63]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[64]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[65]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[66]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[67]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[68]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[69]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5\n\n[70]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-date-prototype-object\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "property"},
{"name": "Date.prototype.toLocaleTimeString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tolocaletimestring()", "content": "## Summary\n\nThe `**toLocaleTimeString()**` method returns a string with a language\nsensitive representation of the time portion of this date. The new `locales`\nand `options` arguments let applications specify the language whose formatting\nconventions should be used and customize the behavior of the function. In\nolder implementations, which ignore the `locales` and `options` arguments, the\nlocale used and the form of the string returned are entirely implementation\ndependent.\n\n## Syntax\n\n    \n    \n    dateObj.toLocaleTimeString([locales [, options]])\n\n### Parameters\n\nCheck the Browser compatibility section to see which browsers support the\n`locales` and `options` arguments, and the Example: Checking for support for\n`locales` and `options` arguments for feature detection.\n\n`locales`\n\n    \n\nA string with a BCP 47 language tag, or an array of such strings. For the\ngeneral form and interpretation of the `locales` argument, see the [Intl\npage][1]. The following Unicode extension keys are allowed:\n\nnu\n\n     Numbering system. Possible values include: \"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\".\nca\n\n     Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".\n`options`\n\n    \n\nAn object with some or all of the following properties:\n\n`localeMatcher`\n\n     The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the [Intl page][2].\n`timeZone`\n\n     The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the [IANA time zone database][3], such as \"Asia/Shanghai\", \"Asia/Kolkata\", \"America/New_York\".\n`hour12`\n\n     Whether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent.\n`formatMatcher`\n\n     The format matching algorithm to use. Possible values are \"basic\" and \"best fit\"; the default is \"best fit\". See the following paragraphs for information about the use of this property.\n\nThe following properties describe the date-time components to use in formatted\noutput, and their desired representations.\u00a0 Implementations are required to\nsupport at least the following subsets:\n\n  * weekday, year, month, day, hour, minute, second\n  * weekday, year, month, day\n  * year, month, day\n  * year, month\n  * month, day\n  * hour, minute, second\n  * hour, minute\n\nImplementations may support other subsets, and requests will be negotiated\nagainst all available subset-representation combinations to find the best\nmatch. Two algorithms are available for this negotiation and selected by the\n`formatMatcher` property: A [fully specified \"basic\" algorithm][4] and an\nimplementation dependent \"best fit\" algorithm.\n\n`weekday`\n\n     The representation of the weekday. Possible values are \"narrow\", \"short\", \"long\".\n`era`\n\n     The representation of the era. Possible values are \"narrow\", \"short\", \"long\".\n`year`\n\n     The representation of the year. Possible values are \"numeric\", \"2-digit\".\n`month`\n\n     The representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".\n`day`\n\n     The representation of the day. Possible values are \"numeric\", \"2-digit\".\n`hour`\n\n     The representation of the hour. Possible values are \"numeric\", \"2-digit\".\n`minute`\n\n     The representation of the minute. Possible values are \"numeric\", \"2-digit\".\n`second`\n\n     The representation of the second. Possible values are \"numeric\", \"2-digit\".\n`timeZoneName`\n\n     The representation of the time zone name. Possible values are \"short\", \"long\".\n\nThe default value for each date-time component property is `undefined`, but if\nthe `hour`, `minute`, `second` properties are all `undefined`, then `hour`,\n`minute`, and `second` are assumed to be \"numeric\".\n\n## Examples\n\n### Example: Using `toLocaleTimeString`\n\nIn basic use without specifying a locale, a formatted string in the default\nlocale and with default options is returned.\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n    \n    // toLocaleTimeString without arguments depends on the implementation,\n    // the default locale, and the default time zone\n    alert(date.toLocaleTimeString());\n    // \u2192 \"7:00:00 PM\" if run in en-US locale with time zone America/Los_Angeles\n\n### Example: Checking for support for `locales` and `options` arguments\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\nTo check whether an implementation supports them already, you can use the\nrequirement that illegal language tags are rejected with a `RangeError`\nexception:\n\n    \n    \n    function toLocaleTimeStringSupportsLocales() {\n        try {\n            new Date().toLocaleTimeString(\"i\");\n        } catch (e) {\n            return e\u200b.name === \"RangeError\";\n        }\n        return false;\n    }\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized time formats. In order\nto get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // formats below assume the local time zone of the locale;\n    // America/Los_Angeles for the US\n    \n    // US English uses 12-hour time with AM/PM\n    alert(date.toLocaleTimeString(\"en-US\"));\n    // \u2192 \"7:00:00 PM\"\n    \n    // British English uses 24-hour time without AM/PM\n    alert(date.toLocaleTimeString(\"en-GB\"));\n    // \u2192 \"03:00:00\"\n    \n    // Korean uses 12-hour time with AM/PM\n    alert(date.toLocaleTimeString(\"ko-KR\"));\n    // \u2192 \"\uc624\ud6c4 12:00:00\"\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    alert(date.toLocaleTimeString(\"ar-EG\"));\n    // \u2192 \"\u0667:\u0660\u0660:\u0660\u0660 \u0645\"\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    alert(date.toLocaleTimeString([\"ban\", \"id\"]));\n    // \u2192 \"11.00.00\"\n    \n\n### Example: Using `options`\n\nThe results provided by `toLocaleTimeString` can be customized using the\n`options` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // an application may want to use UTC and make that visible\n    var options = {timeZone: \"UTC\", timeZoneName: \"short\"};\n    alert(date.toLocaleTimeString(\"en-US\", options));\n    // \u2192 \"3:00:00 AM GMT\"\n    \n    // sometimes even the US needs 24-hour time\n    alert(date.toLocaleTimeString(\"en-US\", {hour12: false}));\n    // \u2192 \"19:00:00\"\n    \n\n## Performance\n\nWhen formatting large numbers of dates, it is better to create an\n[`Intl.DateTimeFormat`][5] object and use the function provided by its\n[`format`][6] property.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API Specification, 1st Edition][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefines `locales` and `options` arguments.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][10] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n\n[bug\u00a0864843][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DateTimeFormat`][5]\n  * [`Date.prototype.toLocaleDateString()`][12]\n  * [`Date.prototype.toLocaleString()`][13]\n  * [`Date.prototype.toTimeString()`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: https://www.iana.org/time-zones\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.7\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.tolocalestring\n\n[9]: http://www.ecma-international.org/ecma-402/1.0/#sec-13.3.3\n\n[10]: /en-US/Firefox/Releases/29\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Date.prototype.toLocaleDateString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.tolocaledatestring()", "content": "## Summary\n\nThe `**toLocaleDateString()**` method returns a string with a language\nsensitive representation of the date portion of this date. The new `locales`\nand `options` arguments let applications specify the language whose formatting\nconventions should be used and allow to customize the behavior of the\nfunction. In older implementations, which ignore the `locales` and `options`\narguments, the locale used and the form of the string returned are entirely\nimplementation dependent.\n\n## Syntax\n\n    \n    \n    dateObj.toLocaleDateString([locales [, options]])\n\n### Parameters\n\nCheck the Browser compatibility section to see which browsers support the\n`locales` and `options` arguments, and the Example: Checking for support for\n`locales` and `options` arguments for feature detection.\n\n`locales`\n\n    \n\nA string with a BCP 47 language tag, or an array of such strings. For the\ngeneral form and interpretation of the `locales` argument, see the [Intl\npage][1]. The following Unicode extension keys are allowed:\n\nnu\n\n     Numbering system. Possible values include: \"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\".\nca\n\n     Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".\n`options`\n\n    \n\nAn object with some or all of the following properties:\n\n`localeMatcher`\n\n     The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the [Intl page][2].\n`timeZone`\n\n     The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the [IANA time zone database][3], such as \"Asia/Shanghai\", \"Asia/Kolkata\", \"America/New_York\".\n`hour12`\n\n     Whether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent.\n`formatMatcher`\n\n     The format matching algorithm to use. Possible values are \"basic\" and \"best fit\"; the default is \"best fit\". See the following paragraphs for information about the use of this property.\n\nThe following properties describe the date-time components to use in formatted\noutput, and their desired representations.\u00a0 Implementations are required to\nsupport at least the following subsets:\n\n  * weekday, year, month, day, hour, minute, second\n  * weekday, year, month, day\n  * year, month, day\n  * year, month\n  * month, day\n  * hour, minute, second\n  * hour, minute\n\nImplementations may support other subsets, and requests will be negotiated\nagainst all available subset-representation combinations to find the best\nmatch. Two algorithms are available for this negotiation and selected by the\n`formatMatcher` property: A [fully specified \"basic\" algorithm][4] and an\nimplementation dependent \"best fit\" algorithm.\n\n`weekday`\n\n     The representation of the weekday. Possible values are \"narrow\", \"short\", \"long\".\n`era`\n\n     The representation of the era. Possible values are \"narrow\", \"short\", \"long\".\n`year`\n\n     The representation of the year. Possible values are \"numeric\", \"2-digit\".\n`month`\n\n     The representation of the month. Possible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".\n`day`\n\n     The representation of the day. Possible values are \"numeric\", \"2-digit\".\n`hour`\n\n     The representation of the hour. Possible values are \"numeric\", \"2-digit\".\n`minute`\n\n     The representation of the minute. Possible values are \"numeric\", \"2-digit\".\n`second`\n\n     The representation of the second. Possible values are \"numeric\", \"2-digit\".\n`timeZoneName`\n\n     The representation of the time zone name. Possible values are \"short\", \"long\".\n\nThe default value for each date-time component property is `undefined`, but if\nthe `weekday`, `year`, `month`, `day` properties are all `undefined`, then\n`year`, `month`, and `day` are assumed to be \"numeric\".\n\n## Examples\n\n### Example: Using `toLocaleDateString`\n\nIn basic use without specifying a locale, a formatted string in the default\nlocale and with default options is returned.\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 12, 3, 0, 0));\n    \n    // toLocaleDateString without arguments depends on the implementation,\n    // the default locale, and the default time zone\n    date.toLocaleDateString();\n    // \u2192 \"12/11/2012\" if run in en-US locale with time zone America/Los_Angeles\n\n### Example: Checking for support for `locales` and `options` arguments\n\nThe `locales` and `options` arguments are not supported in all browsers yet.\nTo check whether an implementation supports them already, you can use the\nrequirement that illegal language tags are rejected with a `RangeError`\nexception:\n\n    \n    \n    function toLocaleDateStringSupportsLocales() {\n        try {\n            new Date().toLocaleDateString(\"i\");\n        } catch (e) {\n            return e\u200b.name === \"RangeError\";\n        }\n        return false;\n    }\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized date formats. In order\nto get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // formats below assume the local time zone of the locale;\n    // America/Los_Angeles for the US\n    \n    // US English uses month-day-year order\n    alert(date.toLocaleDateString(\"en-US\"));\n    // \u2192 \"12/19/2012\"\n    \n    // British English uses day-month-year order\n    alert(date.toLocaleDateString(\"en-GB\"));\n    // \u2192 \"20/12/2012\"\n    \n    // Korean uses year-month-day order\n    alert(date.toLocaleDateString(\"ko-KR\"));\n    // \u2192 \"2012. 12. 20.\"\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    alert(date.toLocaleDateString(\"ar-EG\"));\n    // \u2192 \"\u0662\u0660\u200f/\u0661\u0662\u200f/\u0662\u0660\u0661\u0662\"\n    \n    // for Japanese, applications may want to use the Japanese calendar,\n    // where 2012 was the year 24 of the Heisei era\n    alert(date.toLocaleDateString(\"ja-JP-u-ca-japanese\"));\n    // \u2192 \"24/12/20\"\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    alert(date.toLocaleDateString([\"ban\", \"id\"]));\n    // \u2192 \"20/12/2012\"\n    \n\n### Example: Using `options`\n\nThe results provided by `toLocaleDateString` can be customized using the\n`options` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // request a weekday along with a long date\n    var options = {weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\"};\n    alert(date.toLocaleDateString(\"de-DE\", options));\n    // \u2192 \"Donnerstag, 20. Dezember 2012\"\n    \n    // an application may want to use UTC and make that visible\n    options.timeZone = \"UTC\";\n    options.timeZoneName = \"short\";\n    alert(date.toLocaleDateString(\"en-US\", options));\n    // \u2192 \"Thursday, December 20, 2012, GMT\"\n    \n\n## Performance\n\nWhen formatting large numbers of dates, it is better to create an\n[`Intl.DateTimeFormat`][5] object and use the function provided by its\n[`format`][6] property.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API Specification, 1st Edition][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefines `locales` and `options` arguments.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][10] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`locales` and `options` arguments\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n\n[bug\u00a0864843][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DateTimeFormat`][5]\n  * [`Date.prototype.toLocaleString()`][12]\n  * [`Date.prototype.toLocaleTimeString()`][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: https://www.iana.org/time-zones\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/sec-15.9.5.6\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.tolocaledatestring\n\n[9]: http://www.ecma-international.org/ecma-402/1.0/#sec-13.3.2\n\n[10]: /en-US/Firefox/Releases/29\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Intl.DateTimeFormat.prototype.format", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat/intl.datetimeformat.prototype.format", "content": "## Summary\n\nThe **`Intl.DateTimeFormat.prototype.format`** property returns a getter\nfunction that formats a date according to the locale and formatting options of\nthis [`DateTimeFormat`][1] object.\n\n## Syntax\n\n    \n    \n    dateTimeFormat.format(date)\n\n### Parameters\n\n`date`\n\n    The date to format.\n\n## Description\n\nThe function returned by the `format` getter formats a date into a string\naccording to the locale and formatting options of this [`DateTimeFormat`][1]\nobject.\n\n## Examples\n\n### Example: Using `format`\n\nUse the function returned by the `format` getter for formatting a single date,\nhere for Serbia:\n\n    \n    \n    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    var dateTimeFormat = new Intl.DateTimeFormat('sr-RS', options);\n    console.log(dateTimeFormat.format(new Date()));\n    // \u2192 \"\u043d\u0435\u0434\u0435\u0459\u0430, 7. \u0430\u043f\u0440\u0438\u043b 2013.\"\n    \n\n### Example: Using `format` with `map`\n\nUse the function returned by the `format` getter for formatting all dates in\nan array. Note that the function is bound to the [`DateTimeFormat`][1] from\nwhich it was obtained, so it can be passed directly to\n[`Array.prototype.map()`][2].\n\n    \n    \n    var a = [new Date(2012, 08), new Date(2012, 11), new Date(2012, 03)];\n    var options = { year: 'numeric', month: 'long' };\n    var dateTimeFormat = new Intl.DateTimeFormat('pt-BR', options);\n    var formatted = a.map(dateTimeFormat.format);\n    console.log(formatted.join('; '));\n    // \u2192 \"setembro de 2012; dezembro de 2012; abril de 2012\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.DateTimeFormat.format' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.DateTimeFormat`][1]\n  * [`Date.prototype.toLocaleString()`][6]\n  * [`Date.prototype.toLocaleDateString()`][7]\n  * [`Date.prototype.toLocaleTimeString()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-12.3.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.DateTimeFormat"], "type": "property"},
{"name": "Date.parse()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.parse()", "content": "## Summary\n\nThe `**Date.parse()**` method parses a string representation of a date, and\nreturns the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n\n## Syntax\n\nDirect call:\n\n    \n    \n    Date.parse(dateString)\n\nImplicit call:\n\n    \n    \n    new Date(dateString)\n\n### Parameters\n\n`dateString`\n\n     A string representing an [RFC2822][1] or ISO 8601 date (other formats may be used, but results may be unexpected).\n\n## Description\n\nThe `parse` method takes a date string (such as \"`Dec 25, 1995`\") and returns\nthe number of milliseconds since January 1, 1970, 00:00:00 UTC. This function\nis useful for setting date values based on string values, for example in\nconjunction with the [`setTime()`][2] method and the [`Date`][3]\u00a0object.\n\nGiven a string representing a time, `parse` returns the time value. It accepts\nthe RFC2822 / IETF date syntax ([RFC2822 Section 3.3][1]), e.g. \"`Mon, 25 Dec\n1995 13:30:00 GMT`\". It understands the continental US time zone\nabbreviations, but for general use, use a time zone offset, for example,\n\"`Mon, 25 Dec 1995 13:30:00 +0430`\" (4 hours, 30 minutes east of the Greenwich\nmeridian). If a time zone is not specified and the string is in an ISO format\nrecognized by ES5, UTC is assumed. GMT and UTC are considered equivalent. The\nlocal time zone is used to interpret arguments in [RFC2822 Section 3.3][1]\nformat (or any format not recognized as ISO 8601 in ES5) that do not contain\ntime zone information.\n\n### ECMAScript 5 ISO-8601 format support\n\nThe date time string may be in [ISO 8601][4] format. For example,\n\"`2011-10-10`\" (just date) or \"`2011-10-10T14:48:00`\" (date and time) can be\npassed and parsed. The UTC time zone is used to interpret arguments in [ISO\n8601][4] format that do not contain time zone information (note that\n[ECMAScript ed 6 draft][5]\u00a0specifies that\u00a0date time strings without a time\nzone are to be treated as local, not UTC).\n\nWhile time zone specifiers are used during date string parsing to interpret\nthe argument, the value returned is always the number of milliseconds between\nJanuary 1, 1970 00:00:00 UTC and the point in time represented by the\nargument.\n\nBecause `parse` is a static method of `Date`, it is called as `Date.parse()`\nrather than as a method of a `Date` instance.\n\n### Differences in assumed time zone\n\nGiven a date string of \"`March 7, 2014`\", `parse` assumes a local time zone,\nbut given an ISO format such as \u00a0\"`2014-03-07`\" it will assume a time zone of\nUTC. Therefore Date objects produced using those strings will represent\ndifferent moments in time unless the system is set with a local time zone of\nUTC. This means that two date strings that appear equivalent may result in two\ndifferent values depending on the format of the string that is being converted\n(this behavior is changed in ECMAScript ed 6 so that both will be treated as\nlocal).\n\n### Fall-back to implementation-specific date formats\n\nThe ECMAScript specification states: If the String does not conform to the\nstandard format the function may fall back to any implementation\u2013specific\nheuristics or implementation\u2013specific parsing algorithm. Unrecognizable\nstrings or dates containing illegal element values in ISO formatted strings\nshall cause `Date.parse` to return `NaN`.\n\nHowever, invalid values in date strings not recognized as ISO format as\ndefined by ES5 may or may not result in `NaN`, depending on the browser and\nvalues provided, e.g.\n\n    \n    \n    // Non-ISO string with invalid date values\n    new Date('23/25/2014');\n    \n\nwill be treated as a local date of 25 November, 2015 in Firefox 30 and an\ninvalid date in Safari 7. However, if the string is recognized as an ISO\nformat string and it contains invalid values, it will return `NaN` in all\nbrowsers compliant with ES5:\n\n    \n    \n    // ISO string with invalid values \n    new Date('2014-25-23').toISOString(); \n    // returns \"RangeError: invalid date\" in all es5 compliant browsers\n\nSpiderMonkey's implementation-specific heuristic can be found in\n[`jsdate.cpp`][6]. The String \"10 06 2014\" is an example of a non\u2013conforming\nISO format and thus falls back to a custom routine. See also this [rough\noutline][7] on how the parsing works.\n\n    \n    \n    new Date('10 06 2014');\n    \n\nwill be treated as a local date of 6 October, 2014 and not 10 June, 2014.\nOther examples:\n\n    \n    \n    new Date('foo-bar 2014').toString();\n    // returns: \"Invalid Date\"\n    \n    Date.parse('foo-bar 2014');\n    // returns: NaN\n    \n\n## Examples\n\n### Example: Using `Date.parse()`\n\nIf `IPOdate` is an existing `Date` object, it can be set to August 9, 1995\n(local time) as follows:\n\n    \n    \n    IPOdate.setTime(Date.parse(\"Aug 9, 1995\"));\n    \n\nSome other examples of parsing non\u2013standard date strings:\n\n    \n    \n    Date.parse(\"Aug 9, 1995\");\n\nReturns `807937200000` in time zone GMT-0300, and other values in other time\nzones, since the string does not specify a time zone and is not ISO format,\ntherefore the time zone defaults to local.\n\n    \n    \n    Date.parse(\"Wed, 09 Aug 1995 00:00:00 GMT\");\n\nReturns `807926400000` no matter the local time zone as GMT (UTC) is provided.\n\n    \n    \n    Date.parse(\"Wed, 09 Aug 1995 00:00:00\");\n\nReturns `807937200000` in time zone GMT-0300, and other values in other time\nzones, since there is no time zone specifier in the argument and it is not ISO\nformat, so is treated as local.\n\n    \n    \n    Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT\");\n\nReturns `0` no matter the local time zone as a time zone GMT (UTC) is\nprovided.\n\n    \n    \n    Date.parse(\"Thu, 01 Jan 1970 00:00:00\");\n\nReturns `14400000` in time zone GMT-0400, and other values in other time\nzones, since no time zone is provided and the string is not in ISO format,\ntherfore the local time zone is used.\n\n    \n    \n    Date.parse(\"Thu, 01 Jan 1970 00:00:00 GMT-0400\");\n\nReturns `14400000` no matter the local time zone as a time zone GMT (UTC) is\nprovided.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date.parse' in that specification.][8]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nISO 8601 format added\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date.parse' in that specification.][9]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nISO 8601 format\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[4.0][10] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nISO 8601 format\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Date.UTC()`][11]\n\n[1]: http://tools.ietf.org/html/rfc2822#page-14\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[4]: http://www.w3.org/TR/NOTE-datetime\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date-time-string-format\n\n[6]: http://mxr.mozilla.org/mozilla-central/source/js/src/jsdate.cpp?rev=64553c483cd1#889\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=1023155#c6\n\n[8]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.2\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.parse\n\n[10]: /en-US/Firefox/Releases/4\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Object.getOwnPropertySymbols()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.getownpropertysymbols()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Object.getOwnPropertySymbols()**` method returns an array of all symbol\nproperties found directly upon a given object.\n\n## Syntax\n\n    \n    \n    Object.getOwnPropertySymbols(obj)\n\n### Parameters\n\n`obj`\n\n     The object whose symbol properties are to be returned.\n\n## Description\n\nSimilar to [`Object.getOwnPropertyNames()`][1], you can get all symbol\nproperties of a given object as an array of symbols. Note that\n[`Object.getOwnPropertyNames()`][1] itself does not contain the symbol\nproperties of an object and only the string properties.\n\nAs all objects have no own symbol properties initially,\n`Object.getOwnPropertySymbols()` returns an empty array unless you have set\nsymbol properties on your object.\n\n## Examples\n\n    \n    \n    var obj = {};\n    var a = Symbol('a');\n    var b = Symbol.for('b');\n    \n    obj[a] = 'localSymbol';\n    obj[b] = 'globalSymbol';\n    \n    var objectSymbols = Object.getOwnPropertySymbols(obj);\n    \n    console.log(objectSymbols.length); // 2\n    console.log(objectSymbols);        // [Symbol(a), Symbol(b)]\n    console.log(objectSymbols[0]);     // Symbol(a)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.getOwnPropertySymbols' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[33.0][3] (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.getOwnPropertyNames()`][1]\n  * [`Symbol`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.getownpropertysymbols\n\n[3]: /en-US/Firefox/Releases/33\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.getOwnPropertyDescriptor()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.getownpropertydescriptor()", "content": "## Summary\n\nThe `**Object.getOwnPropertyDescriptor()**` method returns a property\ndescriptor for an own property (that is, one directly present on an object,\nnot present by dint of being along an object's prototype chain) of a given\nobject.\n\n## Syntax\n\n    \n    \n    Object.getOwnPropertyDescriptor(obj, prop)\n\n### Parameters\n\n`obj`\n\n     The object in which to look for the property.\n`prop`\n\n     The name of the property whose description is to be retrieved.\n\n### Returns\n\nA property descriptor of the given property if it exists on the object,\n[`undefined`][1] otherwise.\n\n## Description\n\nThis method permits examination of the precise description of a property. A\nproperty in JavaScript consists of a string-valued name and a property\ndescriptor. Further information about property descriptor types and their\nattributes can be found in [`Object.defineProperty()`][2].\n\nA property descriptor is a record with some of the following attributes:\n\n`value`\n\n     The value associated with the property (data descriptors only).\n`**writable**`\n\n     `true` if and only if the value associated with the property may be changed (data descriptors only).\n`get`\n\n     A function which serves as a getter for the property, or [`undefined`][1] if there is no getter (accessor descriptors only).\n`set`\n\n     A function which serves as a setter for the property, or [`undefined`][1] if there is no setter (accessor descriptors only).\n`configurable`\n\n     `true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n`enumerable`\n\n     `true` if and only if this property shows up during enumeration of the properties on the corresponding object.\n\n## Examples\n\n    \n    \n    var o, d;\n    \n    o = { get foo() { return 17; } };\n    d = Object.getOwnPropertyDescriptor(o, 'foo');\n    // d is { configurable: true, enumerable: true, get: /*the getter function*/, set: undefined }\n    \n    o = { bar: 42 };\n    d = Object.getOwnPropertyDescriptor(o, 'bar');\n    // d is { configurable: true, enumerable: true, value: 42, writable: true }\n    \n    o = {};\n    Object.defineProperty(o, 'baz', { value: 8675309, writable: false, enumerable: false });\n    d = Object.getOwnPropertyDescriptor(o, 'baz');\n    // d is { value: 8675309, writable: false, enumerable: false, configurable: false }\n    \n\n## Notes\n\nIn ES5, if the first argument to this method is not an object (a primitive),\nthen it will cause a [`TypeError`][3]. In ES6, a non-object first argument\nwill be coerced to an object at first.\n\n    \n    \n    > Object.getOwnPropertyDescriptor(\"foo\", 0)\n    TypeError: \"foo\" is not an object  // ES5 code\n    \n    > Object.getOwnPropertyDescriptor(\"foo\", 0)\n    {configurable:false, enumerable:true, value:\"f\", writable:false}  // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.getOwnPropertyDescriptor' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.getOwnPropertyDescriptor' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[4.0][7] (2)\n\n</td>  \n<td>\n\n8\n\n</td>  \n<td>\n\n12 alpha\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][8].\n\n## See also\n\n  * [`Object.defineProperty()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.3\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.getownpropertydescriptor\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/4\n\n[8]: http://kangax.github.com/es5-compat-table/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.freeze()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.freeze()", "content": "## Summary\n\nThe `**Object.freeze()**` method freezes an object: that is, prevents new\nproperties from being added to it; prevents existing properties from being\nremoved; and prevents existing properties, or their enumerability,\nconfigurability, or writability, from being changed. In essence the object is\nmade effectively immutable. The method returns the object being frozen.\n\n## Syntax\n\n    \n    \n    Object.freeze(obj)\n\n### Parameters\n\n`obj`\n\n     The object to freeze.\n\n## Description\n\nNothing can be added to or removed from the properties set of a frozen object.\nAny attempt to do so will fail, either silently or by throwing a\n[`TypeError`][1] exception (most commonly, but not exclusively, when in\n[strict mode][2]).\n\nValues cannot be changed for data properties. Accessor properties (getters and\nsetters) work the same (and still give the illusion that you are changing the\nvalue). Note that values that are objects can still be modified, unless they\nare also frozen.\n\n## Examples\n\n    \n    \n    var obj = {\n      prop: function() {},\n      foo: 'bar'\n    };\n    \n    // New properties may be added, existing properties may be changed or removed\n    obj.foo = 'baz';\n    obj.lumpy = 'woof';\n    delete obj.prop;\n    \n    var o = Object.freeze(obj);\n    \n    assert(Object.isFrozen(obj) === true);\n    \n    // Now any changes will fail\n    obj.foo = 'quux'; // silently does nothing\n    obj.quaxxor = 'the friendly duck'; // silently doesn't add the property\n    \n    // ...and in strict mode such attempts will throw TypeErrors\n    function fail(){\n      'use strict';\n      obj.foo = 'sparky'; // throws a TypeError\n      delete obj.quaxxor; // throws a TypeError\n      obj.sparky = 'arf'; // throws a TypeError\n    }\n    \n    fail();\n    \n    // Attempted changes through Object.defineProperty will also throw\n    Object.defineProperty(obj, 'ohai', { value: 17 }); // throws a TypeError\n    Object.defineProperty(obj, 'foo', { value: 'eit' }); // throws a TypeError\n    \n\nThe following example shows that object values in a frozen object can be\nmutated (freeze is shallow).\n\n    \n    \n    obj = {\n      internal: {}\n    };\n    \n    Object.freeze(obj);\n    obj.internal.a = 'aValue';\n    \n    obj.internal.a // 'aValue'\n    \n    // To make obj fully immutable, freeze each object in obj.\n    // To do so, we use this function.\n    \n    function deepFreeze(o) {\n      var prop, propKey;\n      Object.freeze(o); // First freeze the object.\n      for (propKey in o) {\n        prop = o[propKey];\n        if (!o.hasOwnProperty(propKey) || !(typeof prop === 'object') || Object.isFrozen(prop)) {\n          // If the object is on the prototype, not an object, or is already frozen,\n          // skip it. Note that this might leave an unfrozen reference somewhere in the\n          // object if there is an already frozen object containing an unfrozen object.\n          continue;\n        }\n    \n        deepFreeze(prop); // Recursively call deepFreeze.\n      }\n    }\n    \n    obj2 = {\n      internal: {}\n    };\n    \n    deepFreeze(obj2);\n    obj2.internal.a = 'anotherValue';\n    obj2.internal.a; // undefined\n    \n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][1]. In ES6, a non-object argument will be treated\nas if it was a \u00a0frozen ordinary object, simply return it.\n\n    \n    \n    > Object.freeze(1)\n    TypeError: 1 is not an object // ES5 code\n    \n    > Object.freeze(1)\n    1                             // ES6 code\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.freeze' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.freeze' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n[4.0][6] (2)\n\n</td>  \n<td>\n\n6\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][7].\n\n## See also\n\n  * [`Object.isFrozen()`][8]\n  * [`Object.preventExtensions()`][9]\n  * [`Object.isExtensible()`][10]\n  * [`Object.seal()`][11]\n  * [`Object.isSealed()`][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.9\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.freeze\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/4\n\n[7]: http://kangax.github.com/es5-compat-table/\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.assign()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.assign()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Object.assign()**` method is used to copy the values of all enumerable\nown properties from one or more source objects to a target object. It will\nreturn the target object.\n\n## Syntax\n\n    \n    \n    Object.assign(target, ...sources)\n\n### Parameters\n\n`target`\n\n     The target object.\n`sources`\n\n     The source object(s).\n\n### Return value\n\nThe target object gets returned.\n\n## Description\n\nThe `Object.assign` method only copies _enumerable_ and _own_ properties from\na source object to a target object. It uses [`[Get]]` on the source and\n[`[Put]]` on the target, so it will invoke getters and setters. Therefore it\n_assigns_ properties versus just copying or defining new properties.\n\nBoth [`String`][1] and [`Symbol`][2] properties are copied.\n\nIn case of an error, for example if a property is non-writable, a\n[`TypeError`][3] will be raised, but assignment continues and the error is\nthrown at the end.\n\nNote that `Object.assign` does not throw on [`null`][4] or [`undefined`][5]\nsource values.\n\n## Examples\n\n### Example: Cloning an object\n\n    \n    \n    var obj = { a: 1 };\n    var copy = Object.assign({}, obj);\n    \n\n### Example: Merging objects\n\n    \n    \n    var o1 = { a: 1 };\n    var o2 = { b: 2 };\n    var o3 = { c: 3 };\n    \n    var obj = Object.assign(o1, o2, o3);\n    console.log(obj);\n    // { a: 1, b: 2, c: 3 }\n    \n\n### Example: Exception cases\n\n    \n    \n    Object.assign(window, {undefined: true, foo: \"foo\"}, {bar: \"bar\"});\n    // TypeError: \"undefined\" is read-only\n    console.log(window.foo);\n    // \"foo\", exception is thrown after completing this source\n    console.log(window.bar);\n    // undefined, all later sources will be ignored\n    \n\n## Polyfill\n\nThis polyfill doesn't support symbol properties, since ES5 doesn't have\nsymbols anyway:\n\n    \n    \n    if (!Object.assign) {\n      Object.defineProperty(Object, \"assign\", {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function(target, firstSource) {\n          \"use strict\";\n          if (target === undefined || target === null)\n            throw new TypeError(\"Cannot convert first argument to object\");\n    \n          var to = Object(target);\n    \n          var hasPendingException = false;\n          var pendingException;\n    \n          for (var i = 1; i < arguments.length; i++) {\n            var nextSource = arguments[i];\n            if (nextSource === undefined || nextSource === null)\n              continue;\n    \n            var keysArray = Object.keys(Object(nextSource));\n            for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n              var nextKey = keysArray[nextIndex];\n              try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (desc !== undefined && desc.enumerable)\n                  to[nextKey] = nextSource[nextKey];\n              } catch (e) {\n                if (!hasPendingException) {\n                  hasPendingException = true;\n                  pendingException = e;\n                }\n              }\n            }\n    \n            if (hasPendingException)\n              throw pendingException;\n          }\n          return to;\n        }\n      });\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.assign' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][8] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.defineProperties()`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/Firefox/Releases/34\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.constructor", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.constructor", "content": "## Summary\n\nReturns a reference to the [`Object`][1] function that created the instance's\nprototype. Note that the value of this property is a reference to the function\nitself, not a string containing the function's name. The value is only read-\nonly for primitive values such as\u00a0`1`,\u00a0`true` and\u00a0`\"test\"`.\n\n## Description\n\nAll objects inherit a `constructor` property from their `prototype`:\n\n    \n    \n    var o = {};\n    o.constructor === Object; // true\n    \n    var a = [];\n    a.constructor === Array; // true\n    \n    var n = new Number(3);\n    n.constructor === Number; // true\n    \n\n## Examples\n\n### Example: Displaying the constructor of an object\n\nThe following example creates a prototype, `Tree`, and an object of that type,\n`theTree`. The example then displays the `constructor` property for the object\n`theTree`.\n\n    \n    \n    function Tree(name) {\n      this.name = name;\n    }\n    \n    var theTree = new Tree('Redwood');\n    console.log('theTree.constructor is ' + theTree.constructor);\n    \n\nThis example displays the following output:\n\n    \n    \n    theTree.constructor is function Tree(name) {\n      this.name = name;\n    }\n    \n\n### Example: Changing the constructor of an object\n\nThe following example shows how to modify constructor value of generic\nobjects. Only `true`, `1` and `\"test\"`\u00a0will not be affected as they have read-\nonly native constructors. This example shows that it is not always safe to\nrely on the `constructor` property of an object.\n\n    \n    \n    function Type () {}\n    \n    var types = [\n      new Array(),\n      [],\n      new Boolean(),\n      true,             // remains unchanged\n      new Date(),\n      new Error(),\n      new Function(),\n      function () {},\n      Math,\n      new Number(),\n      1,                // remains unchanged\n      new Object(),\n      {},\n      new RegExp(),\n      /(?:)/,\n      new String(),\n      'test'            // remains unchanged\n    ];\n    \n    for (var i = 0; i < types.length; i++) {\n      types[i].constructor = Type;\n      types[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()];\n    }\n    \n    console.log(types.join('\\n'));\n    \n\nThis example displays the following output:\n\n    \n    \n    function Type() {},false,\n    function Type() {},false,\n    function Type() {},false,false\n    function Boolean() {\n        [native code]\n    },false,true\n    function Type() {},false,Mon Sep 01 2014 16:03:49 GMT+0600\n    function Type() {},false,Error\n    function Type() {},false,function anonymous() {\n    \n    }\n    function Type() {},false,function () {}\n    function Type() {},false,[object Math]\n    function Type() {},false,0\n    function Number() {\n        [native code]\n    },false,1\n    function Type() {},false,[object Object]\n    function Type() {},false,[object Object]\n    function Type() {},false,/(?:)/\n    function Type() {},false,/(?:)/\n    function Type() {},false,\n    function String() {\n        [native code]\n    },false,\u0442\u0435\u0441\u0442\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype.constructor' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.constructor' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.1\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.constructor\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Object.defineProperties()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.defineproperties()", "content": "## Summary\n\nThe `**Object.defineProperties()**` method defines new or modifies existing\nproperties directly on an object, returning the object.\n\n## Syntax\n\n    \n    \n    Object.defineProperties(obj, props)\n\n### Parameters\n\n`obj`\n\n     The object on which to define or modify properties.\n`props`\n\n     An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. Properties have the following optional keys: \n\n`configurable`\n\n     `true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.  \n**Defaults to `false`.**\n`enumerable`\n\n     `true` if and only if this property shows up during enumeration of the properties on the corresponding object.  \n**Defaults to `false`.**\n\n`value`\n\n     The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).  \n**Defaults to [`undefined`][1].**\n`writable`\n\n     `true` if and only if the value associated with the property may be changed with an [assignment operator][2].  \n**Defaults to `false`.**\n\n`get`\n\n     A function which serves as a getter for the property, or [`undefined`][1] if there is no getter. The function return will be used as the value of property.  \n**Defaults to [`undefined`][1].**\n`set`\n\n     A function which serves as a setter for the property, or [`undefined`][1] if there is no setter. The function will receive as only argument the new value being assigned to the property.  \n**Defaults to [`undefined`][1].**\n\n## Description\n\n`Object.defineProperties`, in essence, defines all properties corresponding to\nthe enumerable own properties of `props` on the object `obj` object.\n\n## Example\n\n    \n    \n    Object.defineProperties(obj, {\n      \"property1\": {\n        value: true,\n        writable: true\n      },\n      \"property2\": {\n        value: \"Hello\",\n        writable: false\n      }\n      // etc. etc.\n    });\n    \n\n## Polyfill\n\nAssuming a pristine execution environment with all names and properties\nreferring to their initial values, `Object.defineProperties` is almost\ncompletely equivalent (note the comment in `isCallable`) to the following\nreimplementation in JavaScript:\n\n    \n    \n    function defineProperties(obj, properties) {\n      function convertToDescriptor(desc) {\n        function hasProperty(obj, prop) {\n          return Object.prototype.hasOwnProperty.call(obj, prop);\n        }\n    \n        function isCallable(v) {\n          // NB: modify as necessary if other values than functions are callable.\n          return typeof v === \"function\";\n        }\n    \n        if (typeof desc !== \"object\" || desc === null)\n          throw new TypeError(\"bad desc\");\n    \n        var d = {};\n    \n        if (hasProperty(desc, \"enumerable\"))\n          d.enumerable = !!obj.enumerable;\n        if (hasProperty(desc, \"configurable\"))\n          d.configurable = !!obj.configurable;\n        if (hasProperty(desc, \"value\"))\n          d.value = obj.value;\n        if (hasProperty(desc, \"writable\"))\n          d.writable = !!desc.writable;\n        if (hasProperty(desc, \"get\")) {\n          var g = desc.get;\n    \n          if (!isCallable(g) && typeof g !== \"undefined\")\n            throw new TypeError(\"bad get\");\n          d.get = g;\n        }\n        if (hasProperty(desc, \"set\")) {\n          var s = desc.set;\n          if (!isCallable(s) && typeof s !== \"undefined\")\n            throw new TypeError(\"bad set\");\n          d.set = s;\n        }\n    \n        if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))\n          throw new TypeError(\"identity-confused descriptor\");\n    \n        return d;\n      }\n    \n      if (typeof obj !== \"object\" || obj === null)\n        throw new TypeError(\"bad obj\");\n    \n      properties = Object(properties);\n    \n      var keys = Object.keys(properties);\n      var descs = [];\n    \n      for (var i = 0; i < keys.length; i++)\n        descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);\n    \n      for (var i = 0; i < descs.length; i++)\n        Object.defineProperty(obj, descs[i][0], descs[i][1]);\n    \n      return obj;\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.defineProperties' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.8.5\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.defineProperties' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n[4.0][6] (2)\n\n</td>  \n<td>\n\n5 (previous versions untested)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n11.60\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n11.50\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat tables][7].\n\n## See also\n\n  * [`Object.defineProperty()`][8]\n  * [`Object.keys()`][9]\n  * [Enumerability and ownership of properties][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.7\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.defineproperties\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/4\n\n[7]: http://kangax.github.com/es5-compat-table/\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n[10]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.__proto__", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/proto", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__proto__", "content": "## Summary\n\n**Warning:** The `__proto__` property is deprecated and should not be used.\u00a0 [`Object.getPrototypeOf`][1] should be used instead of the `__proto__` getter to determine the [`[Prototype]]` of an object. Mutating the [`[Prototype]]` of an object, no matter how this is accomplished, is strongly discouraged, because it is very slow and unavoidably slows down subsequent execution in modern JavaScript implementations. However, [`Object.setPrototypeOf`][2] is provided in ES6 as a very-slightly-preferred alternative to the `__proto__` setter.\n\nThe `__proto__` property of [`Object.prototype`][3] is an accessor property (a\ngetter function and a setter function) that exposes the internal\n[`[Prototype]]` (either an object or [`null`][4]) of the object through which\nit is accessed.\n\n## Syntax\n\n    \n    \n    var proto = obj.__proto__;\n\nNote: that is two underscores, followed by the five characters \"proto\",\nfollowed by two more underscores.\n\n## Description\n\nThe `__proto__` getter function exposes the value of the internal\n[`[Prototype]]` of an object.\u00a0 For objects created using an object literal,\nthis value is [`Object.prototype`][3]. For objects created using array\nliterals, this value is [`Array.prototype`][5]. For functions, this value is\n[`Function.prototype`][6]. For objects created using `new fun`, where `fun` is\none of the built-in constructor functions provided by JavaScript\n([`Array`][7], [`Boolean`][8], [`Date`][9], [`Number`][10], [`Object`][11],\n[`String`][12], and so on\u00a0\u2014 including new constructors added as JavaScript\nevolves), this value is `fun.prototype`. For objects created using `new fun`,\nwhere `fun` is a function defined in a script, this value is the value of\n`fun.prototype` at the time `new fun` is evaluated. (That is, if a new value\nis assigned to `fun.prototype`, previously-created `fun` instances will\ncontinue to have the previous value as their [`[Prototype]]`, and subsequent\n`new fun` calls will use the newly-assigned value as their [`[Prototype]]`.)\n\n**Note:** The [`Object.getPrototypeOf`][1] function is the preferred way to access the [`[Prototype]]` of an object.\u00a0 `__proto__` and the `__proto__` getter function are deprecated and should not be used.\n\nThe `__proto__` setter allows the [`[Prototype]]` of an object to be mutated.\nThe object must be extensible according to [`Object.isExtensible`][13]: if itis not, a\n\n[`TypeError`][14] is thrown. The value provided must be an object or\n[`null`][4]. Providing any other value will do nothing.\n\n**Warning:** Mutating the [`[Prototype]]` of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation. If you care at all about performance, you should never mutate the [`[Prototype]]` of an object, either using this method or using [`Object.setPrototypeOf`][2]. Instead, create the object with the desired [`[Prototype]]` using [`Object.create`][15]. Furthermore, `__proto__` and the `__proto__` setter function are deprecated and should not be used.\n\nTo understand how prototypes are used for inheritance, see guide article\n[Inheritance and the prototype chain][16].\n\nThere is nothing special about the `__proto__` property. It is simply an\naccessor property\u00a0\u2014 a property consisting of a getter function and a setter\nfunction\u00a0\u2014 on [`Object.prototype`][3]. A property access for `__proto__` that\neventually consults [`Object.prototype`][3] will find this property, but an\naccess that does not consult [`Object.prototype`][3] will not find it. If some\nother `__proto__` property is found before [`Object.prototype`][3] is\nconsulted, that property will hide the one found on [`Object.prototype`][3].\n\n    \n    \n    var noProto = Object.create(null);\n    \n    console.log(typeof noProto.__proto__); // undefined\n    console.log(Object.getPrototypeOf(noProto)); // null\n    \n    noProto.__proto__ = 17;\n    \n    console.log(noProto.__proto__); // 17\n    console.log(Object.getPrototypeOf(noProto)); // null\n    \n    var protoHidden = {};\n    Object.defineProperty(protoHidden, \"__proto__\",\n                          { value: 42, writable: true, configurable: true, enumerable: true });\n    \n    console.log(protoHidden.__proto__); // 42\n    console.log(Object.getPrototypeOf(protoHidden) === Object.prototype); // true\n    \n\n## Examples\n\nIn the following, a new instance of `Employee` is created, then tested to show\nthat its `__proto__` is the same object as its constructor's `prototype`.\n\n    \n    \n    // Declare a function to be used as a constructor\n    function Employee() {\n      /* initialise instance */\n    }\n    \n    // Create a new instance of Employee\n    var fred = new Employee();\n    \n    // Test equivalence\n    fred.__proto__ === Employee.prototype; // true\n    \n\nAt this point, `fred` inherits from `Employee`, however assigning a different\nobject to `fred.__proto__` can change that:\n\n    \n    \n    // Assign a new object to __proto__\n    fred.__proto__ = Object.prototype;\n    \n\nNow `fred` no longer inherits from `Employee.prototype`, but directly from\n[`Object.prototype`][3], and loses the properties it originally inherited from\n`Employee.prototype`.\n\nHowever, this only applies to [extensible][13] objects, a non\u2013extensible\nobject's `__proto__` property cannot be changed:\n\n    \n    \n    var obj = {};\n    Object.preventExtensions(obj);\n    \n    obj.__proto__ = {}; // throws a TypeError\n    \n\nNote that even `Object.prototype`'s `__proto__` property can be redefined as\nlong as the chain leads to null:\n\n    \n    \n    var b = {};\n    \n    Object.prototype.__proto__ =\n      Object.create(null, // [[Prototype]]\n                    { hi: { value: function() { alert(\"hi\"); } } });\n    \n    b.hi();\n    \n\nIf [`Object.prototype`][3]'s `__proto__` had not been set to [`null`][4], or\nhad not been set to another object whose prototype chain did not eventually\nlead explicitly to [`null`][4], a \"cyclic __proto__ value\" [`TypeError`][14]\nwould result since the chain must eventually lead to [`null`][4] (as it\nnormally does on [`Object.prototype`][3]).\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype.__proto__' in that specification.][17]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nIncluded in the (normative) annex for addtional ECMAScript features for Web\nbrowsers (note that the specification codifies what is already in\nimplementations).\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][18].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n[16]: /en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain\n\n[17]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.__proto__\n\n[18]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Object.create()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.create()", "content": "## Summary\n\nThe `**Object.create()**` method creates a new object with the specified\nprototype object and properties.\n\n## Syntax\n\n    \n    \n    Object.create(proto[, propertiesObject])\n\n### Parameters\n\n`proto`\n\n    The object which should be the prototype of the newly-created object.\n`propertiesObject`\n\n    Optional. If specified and not [`undefined`][1], an object whose enumerable own properties (that is, those properties defined upon itself and _not_ enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of [`Object.defineProperties()`][2].\n\n### Throws\n\nThrows a [`TypeError`][3] exception if the `proto` parameter isn't [`null`][4]\nor an object.\n\n## Examples\n\n### Example: Classical inheritance with `Object.create`\n\nBelow is an example of how to use `Object.create` to achieve classical\ninheritance. This is for single inheritance, which is all that Javascript\nsupports.\n\n    \n    \n    // Shape - superclass\n    function Shape() {\n      this.x = 0;\n      this.y = 0;\n    }\n    \n    // superclass method\n    Shape.prototype.move = function(x, y) {\n      this.x += x;\n      this.y += y;\n      console.info('Shape moved.');\n    };\n    \n    // Rectangle - subclass\n    function Rectangle() {\n      Shape.call(this); // call super constructor.\n    }\n    \n    // subclass extends superclass\n    Rectangle.prototype = Object.create(Shape.prototype);\n    Rectangle.prototype.constructor = Rectangle;\n    \n    var rect = new Rectangle();\n    \n    rect instanceof Rectangle; // true\n    rect instanceof Shape; // true\n    \n    rect.move(1, 1); // Outputs, 'Shape moved.'\n    \n\nIf you wish to inherit from multiple objects, then mixins are a possibility.\n\n    \n    \n    function MyClass() {\n      SuperClass.call(this);\n      OtherSuperClass.call(this);\n    }\n    \n    MyClass.prototype = Object.create(SuperClass.prototype); // inherit\n    mixin(MyClass.prototype, OtherSuperClass.prototype); // mixin\n    \n    MyClass.prototype.myMethod = function() {\n      // do a thing\n    };\n    \n\nThe `mixin` function would copy the functions from the superclass prototype to\nthe subclass prototype, the mixin function needs to be supplied by the user.\nAn example of a mixin like function would be [jQuery.extend][5].\n\n### Example: Using `propertiesObject` argument with `Object.create`\n\n    \n    \n    var o;\n    \n    // create an object with null as prototype\n    o = Object.create(null);\n    \n    \n    o = {};\n    // is equivalent to:\n    o = Object.create(Object.prototype);\n    \n    \n    // Example where we create an object with a couple of sample properties.\n    // (Note that the second parameter maps keys to *property descriptors*.)\n    o = Object.create(Object.prototype, {\n      // foo is a regular 'value property'\n      foo: { writable: true, configurable: true, value: 'hello' },\n      // bar is a getter-and-setter (accessor) property\n      bar: {\n        configurable: false,\n        get: function() { return 10; },\n        set: function(value) { console.log('Setting `o.bar` to', value); }\n      }\n    });\n    \n    \n    function Constructor() {}\n    o = new Constructor();\n    // is equivalent to:\n    o = Object.create(Constructor.prototype);\n    // Of course, if there is actual initialization code in the\n    // Constructor function, the Object.create cannot reflect it\n    \n    \n    // create a new object whose prototype is a new, empty object\n    // and a adding single property 'p', with value 42\n    o = Object.create({}, { p: { value: 42 } });\n    \n    // by default properties ARE NOT writable, enumerable or configurable:\n    o.p = 24;\n    o.p;\n    // 42\n    \n    o.q = 12;\n    for (var prop in o) {\n      console.log(prop);\n    }\n    // 'q'\n    \n    delete o.p;\n    // false\n    \n    // to specify an ES3 property\n    o2 = Object.create({}, {\n      p: {\n        value: 42,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      }\n    });\n    \n\n## Polyfill\n\nThis polyfill covers the main use case which is creating a new object for\nwhich the prototype has been chosen but doesn't take the second argument into\naccount.\n\n    \n    \n    if (typeof Object.create != 'function') {\n      Object.create = (function() {\n        var Object = function() {};\n        return function (prototype) {\n          if (arguments.length > 1) {\n            throw Error('Second argument not supported');\n          }\n          if (typeof prototype != 'object') {\n            throw TypeError('Argument must be an object');\n          }\n          Object.prototype = prototype;\n          var result = new Object();\n          Object.prototype = null;\n          return result;\n        };\n      })();\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.create' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.create' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[4.0][8] (2)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n11.60\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[4.0][8] (2)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n11.50\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][9].\n\n## See also\n\n  * [`Object.defineProperty`][10]\n  * [`Object.defineProperties`][2]\n  * [`Object.prototype.isPrototypeOf`][11]\n  * John Resig's post on [getPrototypeOf][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[5]: http://api.jquery.com/jQuery.extend/\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.5\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.create\n\n[8]: /en-US/Firefox/Releases/4\n\n[9]: http://kangax.github.com/es5-compat-table/\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\n\n[12]: http://ejohn.org/blog/objectgetprototypeof/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.prototype.__parent__", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__parent__", "content": "**Obsolete since Gecko 2 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n## Summary\n\nThe **`__parent__`** property used to point to an object's context, but it has\nbeen removed.\n\n## Syntax\n\n    \n    \n    obj.__parent__\n\n## Description\n\nFor top-level objects, this is the e.g. window.\n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [SpiderMonkey change du jour: the special __parent__ property has been removed][1]\n  * [Components.utils.getGlobalForObject][2]\n\n[1]: http://whereswalden.com/2010/05/07/spidermonkey-change-du-jour-the-special-__parent__-property-has-been-removed/\n\n[2]: /en-US/docs/Components.utils.getGlobalForObject\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Object.prototype.__noSuchMethod__", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/noSuchMethod", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__nosuchmethod__", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe **`__noSuchMethod__`** property references a function to be executed when\na non-existent method is called on an object.\n\n## Syntax\n\n    \n    \n    obj.__noSuchMethod__ = fun\n\n### Parameters\n\n`fun`\n\n    A function that takes the form\n    \n    \n    \n    function (id, args) { . . . }\n\n`id`\n\n    The name of the non-existent method that was called\n`args`\n\n    An array of the arguments passed to the method\n\n## Description\n\nBy default, an attempt to call a method that doesn't exist on an object\nresults in a [`TypeError`][1] being thrown. This behavior can be circumvented\nby defining a function at that object's `__noSuchMethod__` member. The\nfunction takes two arguments, the first is the name of the method attempted\nand the second is an array of the arguments that were passed in the method\ncall. The second argument is an actual array (that is, it inherits through the\n[`Array.prototype`][2] chain) and not the array-like [arguments object][3].\n\nIf this method cannot be called, either as if `undefined` by default, if\ndeleted, or if manually set to a non-function, the JavaScript engine will\nrevert to throwing `TypeError`s.\n\n## Examples\n\n### Example: Simple test of `__noSuchMethod__`\n\n    \n    \n    var o = {\n      __noSuchMethod__: function(id, args) { console.log(id, '(' + args.join(', ') + ')'); }\n    };\n    \n    o.foo(1, 2, 3);\n    o.bar(4, 5);\n    o.baz();\n    \n    // Output\n    // foo (1, 2, 3)\n    // bar (4, 5)\n    // baz ()\n    \n\n### Example: Using `__noSuchMethod__` to simulate multiple inheritance\n\nAn example of code that implements a primitive form of multiple inheritance is\nshown below.\n\n    \n    \n    // Doesn't work with multiple inheritance objects as parents\n    function noMethod(name, args) {\n      var parents = this.__parents_;\n    \n      // Go through all parents\n      for (var i = 0; i < parents.length; i++) {\n        // If we find a function on the parent, we call it\n        if (typeof parents[i][name] == \"function\") {\n          return parents[i][name].apply(this, args);\n        }\n      }\n    \n      // If we get here, the method hasn't been found\n      throw new TypeError;\n    }\n    \n    // Used to add a parent for multiple inheritance\n    function addParent(obj, parent) {\n      // If the object isn't initialized, initialize it\n      if (!obj.__parents_) {\n        obj.__parents_ = [];\n        obj.__noSuchMethod__ = noMethod;\n      }\n    \n      // Add the parent\n      obj.__parents_.push(parent);\n    }\n    \n\nAn example of using this idea is shown below.\n\n    \n    \n    // Example base class 1\n    function NamedThing(name){\n      this.name=name;\n    }\n    \n    NamedThing.prototype = {\n      getName: function() { return this.name; },\n      setName: function(newName) { this.name = newName; }\n    }\n    \n    // Example base class 2\n    function AgedThing(age) {\n      this.age = age;\n    }\n    \n    AgedThing.prototype = {\n      getAge: function() { return this.age; },\n      setAge: function(age) { this.age = age; }\n    }\n    \n    // Child class. inherits from NamedThing and AgedThing as well as defining address\n    function Person(name, age, address){\n      addParent(this, NamedThing.prototype);\n      NamedThing.call(this, name);\n      addParent(this, AgedThing.prototype);\n      AgedThing.call(this, age);\n      this.address = address;\n    }\n    \n    Person.prototype = {\n      getAddr: function() { return this.address; },\n      setAddr: function(addr) { this.address = addr; }\n    }\n    \n    var bob = new Person(\"bob\", 25, \"New York\");\n    \n    console.log(\"getAge is \" + ((\"getAge\" in bob) ? \"in\" : \"not in\") + \" bob\");\n    console.log(\"bob's age is: \" + bob.getAge());\n    console.log(\"getName is \" + ((\"getName\" in bob) ? \"in\" : \"not in\") + \" bob\");\n    console.log(\"bob's name is: \" + bob.getName());\n    console.log(\"getAddr is \" + ((\"getAddr\" in bob) ? \"in\" : \"not in\") + \" bob\");\n    console.log(\"bob's address is: \" + bob.getAddr());\n    \n\nExample output would be follows:\n\n    \n    \n    getAge is not in bob\n    bob's age is: 25\n    getName is not in bob\n    bob's name is: bob\n    getAddr is in bob\n    bob's address is: New York\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Object.prototype.__count__", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype.__count__", "content": "**Obsolete since Gecko 2 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n## Summary\n\nThe **`__count__`** property used to store the count of enumerable properties\non the object, but it has been removed.\n\n## Syntax\n\n    \n    \n    obj.__count__\n\n## Examples\n\n    \n    \n    { 1: 1 }.__count__              // 1\n    [].__count__                    // 0\n    [1].__count__                   // 1\n    [1, /* hole */, 2, 3].__count__ // 3\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [[Blog post] More changes coming to SpiderMonkey: the magical __count__ property is being removed][1]\n\n[1]: http://whereswalden.com/2010/04/06/more-changes-coming-to-spidermonkey-the-magical-__count__-property-of-objects-is-being-removed/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Date.prototype.valueOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/date", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueof", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date/date.prototype.valueof()", "content": "## Summary\n\nThe `**valueOf()**` method returns the primitive value of a Date object.\n\n## Syntax\n\n    \n    \n    dateObj.valueOf()\n\n### Parameters\n\nNone.\n\n## Description\n\nThe `valueOf` method returns the primitive value of a `Date` object as a\nnumber data type, the number of milliseconds since midnight 01 January, 1970\nUTC.\n\nThis method is functionally equivalent to the [`Date.prototype.getTime()`][1]\nmethod.\n\nThis method is usually called internally by JavaScript and not explicitly in\ncode.\n\n## Examples\n\n### Example: Using `valueOf`\n\n    \n    \n    var x = new Date(56, 6, 17);\n    var myVar = x.valueOf();      // assigns -424713600000 to myVar\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object.prototype.valueOf()`][4]\n  * [`Date.prototype.getTime()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5.8\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date.prototype.valueof\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Date"], "type": "method"},
{"name": "Object.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.prototype", "content": "## Summary\n\nThe `**Object.prototype**` property represents the [`Object`][1] prototype\nobject.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Object.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll objects in JavaScript are descended from [`Object`][1]; all objects\ninherit methods and properties from `Object.prototype`, although they may be\noverridden (except an `Object` with a `null` prototype, i.e.\n`Object.create(null)`). For example, other constructors' prototypes override\nthe `constructor` property and provide their own [`toString()`][2] methods.\nChanges to the `Object` prototype object are propagated to all objects unless\nthe properties and methods subject to those changes are overridden further\nalong the prototype chain.\n\n## Properties\n\n[`Object.prototype.constructor`][3]\n\n     Specifies the function that creates an object's prototype.\n[`Object.prototype.__proto__`][4] _ _\n\n     Points to the object which was used as prototype when the object was instantiated.\n[`Object.prototype.__noSuchMethod__`][5] _ _\n\n     Allows a function to be defined that will be executed when an undefined object member is called as a method.\n<s>[`Object.prototype.__count__`][6] _ _</s>\n\n     <s>Used to return the number of enumerable properties directly on a user-defined object, but has been removed.</s>\n<s>[`Object.prototype.__parent__`][7] _ _</s>\n\n     <s>Used to point to an object's context, but has been removed.</s>\n\n## Methods\n\n[`Object.prototype.__defineGetter__()`][8] _ _ _ _\n\n     Associates a function with a property that, when accessed, executes that function and returns its return value.\n[`Object.prototype.__defineSetter__()`][9] _ _ _ _\n\n     Associates a function with a property that, when set, executes that function which modifies the property.\n[`Object.prototype.__lookupGetter__()`][10] _ _ _ _\n\n     Returns the function associated with the specified property by the [`__defineGetter__`][11] method.\n[`Object.prototype.__lookupSetter__()`][12] _ _ _ _\n\n     Returns the function associated with the specified property by the [`__defineSetter__`][13] method.\n[`Object.prototype.hasOwnProperty()`][14]\n\n     Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.\n[`Object.prototype.isPrototypeOf()`][15]\n\n     Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.\n[`Object.prototype.propertyIsEnumerable()`][16]\n\n     Returns a boolean indicating if the internal [ECMAScript DontEnum attribute][17] is set.\n[`Object.prototype.toSource()`][18] _ _\n\n     Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.\n[`Object.prototype.toLocaleString()`][19]\n\n     Calls [`toString()`][2].\n[`Object.prototype.toString()`][2]\n\n     Returns a string representation of the object.\n[`Object.prototype.unwatch()`][20] _ _\n\n     Removes a watchpoint from a property of the object.\n[`Object.prototype.valueOf()`][21]\n\n     Returns the primitive value of the specified object.\n[`Object.prototype.watch()`][22] _ _\n\n     Adds a watchpoint to a property of the object.\n<s>[`Object.prototype.eval()`][23] _ _</s>\n\n     <s>Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.</s>\n\n## Examples\n\nSince Javascript doesn't exactly have sub-class objects, prototype is a useful\nworkaround to make a \u201cbase class\u201d object of certain functions that act as\nobjects. For example:\n\n    \n    \n    var Person = function() {\n      this.canTalk = true;\n      this.greet = function() {\n        if (this.canTalk) {\n          console.log('Hi, I\\'m ' + this.name);\n        }\n      };\n    };\n    \n    var Employee = function(name, title) {\n      this.name = name;\n      this.title = title;\n      this.greet = function() {\n        if (this.canTalk) {\n          console.log(\"Hi, I'm \" + this.name + \", the \" + this.title);\n        }\n      };\n    };\n    Employee.prototype = new Person();\n    \n    var Customer = function(name) {\n      this.name = name;\n    };\n    Customer.prototype = new Person();\n    \n    var Mime = function(name) {\n      this.name = name;\n      this.canTalk = false;\n    };\n    Mime.prototype = new Person();\n    \n    var bob = new Employee('Bob', 'Builder');\n    var joe = new Customer('Joe');\n    var rg = new Employee('Red Green', 'Handyman');\n    var mike = new Customer('Mike');\n    var mime = new Mime('Mime');\n    bob.greet();\n    joe.greet();\n    rg.greet();\n    mike.greet();\n    mime.greet();\n    \n\nThis will output:\n\n    \n    \n    Hi, I'm Bob, the Builder\n    Hi, I'm Joe\n    Hi, I'm Red Green, the Handyman\n    Hi, I'm Mike\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.0.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.prototype' in that specification.][24]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.prototype' in that specification.][25]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][26].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__proto__\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__noSuchMethod__\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__count__\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__parent__\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[17]: /en-US/docs/ECMAScript_DontEnum_attribute\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval\n\n[24]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.1\n\n[25]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype\n\n[26]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "property"},
{"name": "Object.keys()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.keys()", "content": "## Summary\n\nThe `**Object.keys()**` method returns an array of a given object's own\nenumerable properties, in the same order as that provided by a [`for...in`][1]\nloop (the difference being that a for-in loop enumerates properties in the\nprototype chain as well).\n\n## Syntax\n\n    \n    \n    Object.keys(obj)\n\n### Parameters\n\n`obj`\n\n     The object whose enumerable own properties are to be returned.\n\n## Description\n\n`Object.keys` returns an array whose elements are strings corresponding to the\nenumerable properties found directly upon `object`. The ordering of the\nproperties is the same as that given by looping over the properties of the\nobject manually.\n\n## Examples\n\n    \n    \n    var arr = ['a', 'b', 'c'];\n    console.log(Object.keys(arr)); // console: ['0', '1', '2']\n    \n    // array like object\n    var obj = { 0: 'a', 1: 'b', 2: 'c' };\n    console.log(Object.keys(obj)); // console: ['0', '1', '2']\n    \n    // array like object with random key ordering\n    var an_obj = { 100: 'a', 2: 'b', 7: 'c' };\n    console.log(Object.keys(an_obj)); // console: ['2', '7', '100']\n    \n    // getFoo is property which isn't enumerable\n    var my_obj = Object.create({}, { getFoo: { value: function() { return this.foo; } } });\n    my_obj.foo = 1;\n    \n    console.log(Object.keys(my_obj)); // console: ['foo']\n    \n\nIf you want all properties, even not enumerables, see\n[`Object.getOwnPropertyNames()`][2].\n\n## Notes\n\nIn ES5, if the argument to this method is not an object (a primitive), then it\nwill cause a [`TypeError`][3]. In ES6, a non-object argument will be coerced\nto an object.\n\n    \n    \n    > Object.keys(\"foo\")\n    TypeError: \"foo\" is not an object // ES5 code\n    \n    > Object.keys(\"foo\")\n    [\"0\", \"1\", \"2\"]                   // ES6 code\n    \n\n## Polyfill\n\nTo add compatible `Object.keys` support in older environments that do not\nnatively support it, copy the following snippet:\n\n    \n    \n    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n    if (!Object.keys) {\n      Object.keys = (function() {\n        'use strict';\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString'),\n            dontEnums = [\n              'toString',\n              'toLocaleString',\n              'valueOf',\n              'hasOwnProperty',\n              'isPrototypeOf',\n              'propertyIsEnumerable',\n              'constructor'\n            ],\n            dontEnumsLength = dontEnums.length;\n    \n        return function(obj) {\n          if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n            throw new TypeError('Object.keys called on non-object');\n          }\n    \n          var result = [], prop, i;\n    \n          for (prop in obj) {\n            if (hasOwnProperty.call(obj, prop)) {\n              result.push(prop);\n            }\n          }\n    \n          if (hasDontEnumBug) {\n            for (i = 0; i < dontEnumsLength; i++) {\n              if (hasOwnProperty.call(obj, dontEnums[i])) {\n                result.push(dontEnums[i]);\n              }\n            }\n          }\n          return result;\n        };\n      }());\n    }\n    \n\nPlease note that the above code includes non-enumerable keys in IE7 (and maybe\nIE8), when passing in an object from a different window.\n\nFor a simple browser polyfill, see [Javascript - Object.keys Browser\nCompatibility][4].\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.keys' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.keys' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n5\n\n</td>  \n<td>\n\n[4.0][8] (2.0)\n\n</td>  \n<td>\n\n9\n\n</td>  \n<td>\n\n12\n\n</td>  \n<td>\n\n5\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][9].\n\n## See also\n\n  * [Enumerability and ownership of properties][10]\n  * [`Object.prototype.propertyIsEnumerable()`][11]\n  * [`Object.create()`][12]\n  * [`Object.getOwnPropertyNames()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.14\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/Firefox/Releases/4\n\n[9]: http://kangax.github.com/es5-compat-table/\n\n[10]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "Object.defineProperty()", "parent": "/javascript/javascript_reference/standard_built-in_objects/object", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.defineproperty()", "content": "## Summary\n\nThe `**Object.defineProperty()**` method defines a new property directly on an\nobject, or modifies an existing property on an object, and returns the object.\n\n## Syntax\n\n    \n    \n    Object.defineProperty(obj, prop, descriptor)\n\n### Parameters\n\n`obj`\n\n    The object on which to define the property.\n`prop`\n\n    The name of the property to be defined or modified.\n`descriptor`\n\n    The descriptor for the property being defined or modified.\n\n## Description\n\nThis method allows precise addition to or modification of a property on an\nobject. Normal property addition through assignment creates properties which\nshow up during property enumeration ([`for...in`][1] loop or\n[`Object.keys`][2] method), whose values may be changed, and which may be\n[deleted][3]. This method allows these extra details to be changed from their\ndefaults.\n\nProperty descriptors present in objects come in two main flavors: data\ndescriptors and accessor descriptors. A _data descriptor_ is a property that\nhas a value, which may or may not be writable. An accessor descriptor is a\nproperty described by a getter-setter pair of functions. A descriptor must be\none of these two flavors; it cannot be both.\n\nBoth data and accessor descriptors are objects. They share the following\noptional keys:\n\n`configurable`\n\n     `true` if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.  \n**Defaults to `false`.**\n`enumerable`\n\n     `true` if and only if this property shows up during enumeration of the properties on the corresponding object.  \n**Defaults to `false`.**\n\nA data descriptor also has the following optional keys:\n\n`value`\n\n     The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).  \n**Defaults to [`undefined`][4].**\n`writable`\n\n     `true` if and only if the value associated with the property may be changed with an [assignment operator][5].  \n**Defaults to `false`.**\n\nAn accessor descriptor also has the following optional keys:\n\n`get`\n\n     A function which serves as a getter for the property, or [`undefined`][4] if there is no getter. The function return will be used as the value of property.  \n**Defaults to [`undefined`][4].**\n`set`\n\n     A function which serves as a setter for the property, or [`undefined`][4] if there is no setter. The function will receive as only argument the new value being assigned to the property.  \n**Defaults to [`undefined`][4].**\n\nBear in mind that these options are not necessarily own properties so, if\ninherited, will be considered too. In order to ensure these defaults are\npreserved you might freeze the [`Object.prototype`][6] upfront, specify all\noptions explicitly, or point to [`null`][7] as [`__proto__`][8] property.\n\n    \n    \n    // using __proto__\n    Object.defineProperty(obj, 'key', {\n      __proto__: null, // no inherited properties\n      value: 'static'  // not enumerable\n                       // not configurable\n                       // not writable\n                       // as defaults\n    });\n    \n    // being explicit\n    Object.defineProperty(obj, 'key', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: 'static'\n    });\n    \n    // recycling same object\n    function withValue(value) {\n      var d = withValue.d || (\n        withValue.d = {\n          enumerable: false,\n          writable: false,\n          configurable: false,\n          value: null\n        }\n      );\n      d.value = value;\n      return d;\n    }\n    // ... and ...\n    Object.defineProperty(obj, 'key', withValue('static'));\n    \n    // if freeze is available, prevents the code to add\n    // value, get, set, enumerable, writable, configurable\n    // to the Object prototype\n    (Object.freeze || Object)(Object.prototype);\n    \n\n## Examples\n\nIf you want to see how to use the `Object.defineProperty` method with a\n_binary-flags-like_ syntax, see [additional examples][9].\n\n### Example: Creating a property\n\nWhen the property specified doesn't exist in the object,\n`Object.defineProperty()` creates a new property as described. Fields may be\nomitted from the descriptor, and default values for those fields are imputed.\nAll of the Boolean-valued fields default to `false`. The `value`, `get`, and\n`set` fields default to [`undefined`][4]. A property which is defined without\n`get`/`set`/`value`/`writable` is called \u201cgeneric\u201d and is \u201ctyped\u201d as a data\ndescriptor.\n\n    \n    \n    var o = {}; // Creates a new object\n    \n    // Example of an object property added with defineProperty with a data property descriptor\n    Object.defineProperty(o, 'a', {\n      value: 37,\n      writable: true,\n      enumerable: true,\n      configurable: true\n    });\n    // 'a' property exists in the o object and its value is 37\n    \n    // Example of an object property added with defineProperty with an accessor property descriptor\n    var bValue = 38;\n    Object.defineProperty(o, 'b', {\n      get: function() { return bValue; },\n      set: function(newValue) { bValue = newValue; },\n      enumerable: true,\n      configurable: true\n    });\n    o.b; // 38\n    // 'b' property exists in the o object and its value is 38\n    // The value of o.b is now always identical to bValue, unless o.b is redefined\n    \n    // You cannot try to mix both:\n    Object.defineProperty(o, 'conflict', {\n      value: 0x9f91102,\n      get: function() { return 0xdeadbeef; }\n    });\n    // throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n    \n\n### Example: Modifying a property\n\nWhen the property already exists, `Object.defineProperty()` attempts to modify\nthe property according to the values in the descriptor and the object's\ncurrent configuration. If the old descriptor had its `configurable` attribute\nset to `false` (the property is said to be \u201cnon-configurable\u201d), then no\nattribute besides `writable` can be changed. In that case, it is also not\npossible to switch back and forth between the data and accessor property\ntypes.\n\nIf a property is non-configurable, its `writable` attribute can only be\nchanged to `false`.\n\nA [`TypeError`][10] is thrown when attempts are made to change non-\nconfigurable property attributes (besides the `writable` attribute) unless the\ncurrent and new values are the same.\n\n#### Writable attribute\n\nWhen the `writable` property attribute is set to `false`, the property is said\nto be \u201cnon-writable\u201d. It cannot be reassigned.\n\n    \n    \n    var o = {}; // Creates a new object\n    \n    Object.defineProperty(o, 'a', {\n      value: 37,\n      writable: false\n    });\n    \n    console.log(o.a); // logs 37\n    o.a = 25; // No error thrown (it would throw in strict mode, even if the value had been the same)\n    console.log(o.a); // logs 37. The assignment didn't work.\n    \n\nAs seen in the example, trying to write into the non-writable property doesn't\nchange it but doesn't throw an error either.\n\n#### Enumerable attribute\n\nThe `enumerable` property attribute defines whether the property shows up in a\n[`for...in`][1] loop and [`Object.keys()`][2] or not.\n\n    \n    \n    var o = {};\n    Object.defineProperty(o, 'a', { value: 1, enumerable: true });\n    Object.defineProperty(o, 'b', { value: 2, enumerable: false });\n    Object.defineProperty(o, 'c', { value: 3 }); // enumerable defaults to false\n    o.d = 4; // enumerable defaults to true when creating a property by setting it\n    \n    for (var i in o) {\n      console.log(i);\n    }\n    // logs 'a' and 'd' (in undefined order)\n    \n    Object.keys(o); // ['a', 'd']\n    \n    o.propertyIsEnumerable('a'); // true\n    o.propertyIsEnumerable('b'); // false\n    o.propertyIsEnumerable('c'); // false\n    \n\n#### Configurable attribute\n\nThe `configurable` attribute controls at the same time whether the property\ncan be deleted from the object and whether its attributes (other than\n`writable`) can be changed.\n\n    \n    \n    var o = {};\n    Object.defineProperty(o, 'a', {\n      get: function() { return 1; },\n      configurable: false\n    });\n    \n    Object.defineProperty(o, 'a', { configurable: true }); // throws a TypeError\n    Object.defineProperty(o, 'a', { enumerable: true }); // throws a TypeError\n    Object.defineProperty(o, 'a', { set: function() {} }); // throws a TypeError (set was undefined previously)\n    Object.defineProperty(o, 'a', { get: function() { return 1; } }); // throws a TypeError (even though the new get does exactly the same thing)\n    Object.defineProperty(o, 'a', { value: 12 }); // throws a TypeError\n    \n    console.log(o.a); // logs 1\n    delete o.a; // Nothing happens\n    console.log(o.a); // logs 1\n    \n\nIf the `configurable` attribute of `o.a` had been `true`, none of the errors\nwould be thrown and the property would be deleted at the end.\n\n### Example: Adding properties and default values\n\nIt's important to consider the way default values of attributes are applied.\nThere is often a difference between simply using dot notation to assign a\nvalue and using `Object.defineProperty()`, as shown in the example below.\n\n    \n    \n    var o = {};\n    \n    o.a = 1;\n    // is equivalent to:\n    Object.defineProperty(o, 'a', {\n      value: 1,\n      writable: true,\n      configurable: true,\n      enumerable: true\n    });\n    \n    \n    // On the other hand,\n    Object.defineProperty(o, 'a', { value: 1 });\n    // is equivalent to:\n    Object.defineProperty(o, 'a', {\n      value: 1,\n      writable: false,\n      configurable: false,\n      enumerable: false\n    });\n    \n\n### Example: Custom Setters and Getters\n\nExample below shows how to implement a self-archiving object. When\n`temperature` property is set, the `archive` array gets a log entry.\n\n    \n    \n    function Archiver() {\n      var temperature = null;\n      var archive = [];\n    \n      Object.defineProperty(this, 'temperature', {\n        get: function() {\n          console.log('get!');\n          return temperature;\n        },\n        set: function(value) {\n          temperature = value;\n          archive.push({ val: temperature });\n        }\n      });\n    \n      this.getArchive = function() { return archive; };\n    }\n    \n    var arc = new Archiver();\n    arc.temperature; // 'get!'\n    arc.temperature = 11;\n    arc.temperature = 13;\n    arc.getArchive(); // [{ val: 11 }, { val: 13 }]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object.defineProperty' in that specification.][11]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.8.5.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object.defineProperty' in that specification.][12]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n[4.0][13] (2)\n\n</td>  \n<td>\n\n5 (previous versions untested)\n\n</td>  \n<td>\n\n9 (8, but only on DOM objects and with some non-standard behaviors. See\nbelow.)\n\n</td>  \n<td>\n\n11.60\n\n</td>  \n<td>\n\n5.1 (5, but not on DOM objects)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n9 and above\n\n</td>  \n<td>\n\n11.50\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat tables][14].\n\n### Redefining the `length` property of an `Array` object\n\nIt is possible to redefine the [`length`][15] property of arrays, subject to\nthe usual redefinition restrictions. (The [`length`][15] property is initially\nnon-configurable, non-enumerable, and writable. Thus on an unaltered array it\nis possible to change the [`length`][15] property's value, or to make it non-\nwritable. It is not allowed to change its enumerability or configurability, or\nif it is non-writable to change its value or writability.) However, not all\nbrowsers permit this redefinition.\n\nFirefox 4 through 22 will throw a [`TypeError`][10] on any attempt whatsoever\n(whether permitted or not) to redefine the [`length`][15] property of an\narray.\n\nVersions of Chrome which implement `Object.defineProperty()` in some\ncircumstances ignore a length value different from the array's current\n[`length`][15] property. In some circumstances changing writability seems to\nsilently not work (and not throw an exception). Also, relatedly, some array-\nmutating methods like [`Array.prototype.push`][16] don't respect a non-\nwritable length.\n\nVersions of Safari which implement `Object.defineProperty()` ignore a `length`\nvalue different from the array's current [`length`][15] property, and attempts\nto change writability execute without error but do not actually change the\nproperty's writability.\n\nOnly Internet Explorer 9 and later, and Firefox 23 and later, appear to fully\nand correctly implement redefinition of the [`length`][15] property of arrays.\nFor now, don't rely on redefining the [`length`][15] property of an array to\neither work, or to work in a particular manner. And even when you _can_ rely\non it, [there's really no good reason to do so][17].\n\n### Internet Explorer 8 specific notes\n\nInternet Explorer 8 implemented a `Object.defineProperty()` method that could\n[only be used on DOM objects][18]. A few things need to be noted:\n\n  * Trying to use `Object.defineProperty()` on native objects throws an error.\n  * Property attributes must be set to some values. `true, true, true` for data descriptor and `true` for configurable, `false` for enumerable for accessor descriptor.(?) Any attempt to provide other value(?) will result in an error being thrown.\n  * Reconfiguring a property requires first deleting the property. If the property isn't deleted, it stays as it was before the reconfiguration attempt.\n\n## See also\n\n  * [Enumerability and ownership of properties][19]\n  * [`Object.defineProperties()`][20]\n  * [`Object.propertyIsEnumerable()`][21]\n  * [`Object.getOwnPropertyDescriptor()`][22]\n  * [`Object.prototype.watch()`][23]\n  * [`Object.prototype.unwatch()`][24]\n  * [`get`][25]\n  * [`set`][26]\n  * [`Object.create()`][27]\n  * [Additional `Object.defineProperty` examples][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__proto__\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[11]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.6\n\n[12]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.defineproperty\n\n[13]: /en-US/Firefox/Releases/4\n\n[14]: http://kangax.github.com/es5-compat-table/\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[17]: http://whereswalden.com/2013/08/05/new-in-firefox-23-the-length-property-of-an-array-can-be-made-non-writable-but-you-shouldnt-do-it/\n\n[18]: http://msdn.microsoft.com/en-us/library/dd229916%28VS.85%29.aspx\n\n[19]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Operators/get\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Operators/set\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object"], "type": "method"},
{"name": "TypedArray", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "content": "## Summary\n\nA _TypedArray_ object describes an array-like view of an underlying [binary\ndata buffer][1]. There is no global property named `TypedArray`, nor is there\na directly visible `TypedArray` constructor.\u00a0 Instead, there are a number of\ndifferent global properties, whose values are typed array constructors for\nspecific element types, listed below. On the following pages you will find\ncommon properties and methods that can be used with any typed array containing\nelements of any type.\n\n## Syntax\n\n    \n    \n    new_ TypedArray_(length);\n    new TypedArray(typedArray);\n    new TypedArray(object);\n    new TypedArray(buffer [, byteOffset [, length]]);\n    \n    where _TypedArray_ is one of:\n    \n    Int8Array();\n    Uint8Array();\n    Uint8ClampedArray();\n    Int16Array();\n    Uint16Array();\n    Int32Array();\n    Uint32Array();\n    Float32Array();\n    Float64Array();\n    \n\n### Parameters\n\nlength\n\n     When called with a `length` argument, a typed array containing `length` zeroes is created.\ntypedArray\n\n     When called with a `typedArray` argument, which can be an object of any of the typed array types (such as `Int32Array`), the `typedArray` gets copied into a new typed array. Each value in `typedArray` is converted to the corresponding type of the constructor before being copied into the new array.\nobject\n\n     When called with an `object` argument, a new typed array is created as if by the `_TypedArray_.from()` method.\nbuffer, byteOffset, length\n\n     When called with a `buffer`, and optional a `byteOffset` and a `length` argument, a new typed array view is created that views the specified [`ArrayBuffer`][1]. The `byteOffset` and `length` parameters specify the memory range that will be exposed by the typed array view.\u00a0 If both are omitted, all of `buffer` is viewed; if only `length` is omitted, the remainder of `buffer` is viewed.\n\n## Description\n\nECMAScript 6 defines a `%TypedArray%` constructor that serves as the\n[`[Prototype]]` of all _TypedArray_ constructors.\u00a0 This constructor is not\ndirectly exposed: there is no global `%TypedArray%` or `TypedArray` property.\nIt is only directly accessible through\n`Object.getPrototypeOf(Int8Array.prototype)` and similar.\u00a0 All _TypedArray_s\nconstructors inherit common properties from the `%TypedArray%` constructor\nfunction.\u00a0 Additionally, all typed array prototypes (_TypedArray_`.prototype`)\nhave `%TypedArray%.prototype` as their [`[Prototype]]`.\n\nThe `%TypedArray%` constructor on its own is not particularly useful.\u00a0 Calling\nit or using it in a `new` expression will throw a `TypeError`, except when\nused during object creation in JS engines that support subclassing.\u00a0 There are\nat present no such engines, so `%TypedArray%` is only useful to polyfill\nfunctions or properties onto all _TypedArray_ constructors.\n\n### Property access\n\nYou can reference elements in the array using standard array index syntax\n(that is, using bracket notation). However, getting or setting indexed\nproperties on typed arrays will not search in the prototype chain for this\nproperty, even when the indices are out of bound. Indexed properties will\nconsult the [`ArrayBuffer`][1] and will never look at object properties. You\ncan still use named properties, just like with all objects.\n\n    \n    \n    // Setting and getting using standard array syntax\n    var int16 = new Int16Array(2);\n    int16[0] = 42;\n    console.log(int16[0]); // 42\n    \n    // Indexed properties on prototypes are not consulted (Fx 25)\n    Int8Array.prototype[20] = \"foo\";\n    (new Int8Array(32))[20]; // 0\n    // even when out of bound\n    Int8Array.prototype[20] = \"foo\";\n    (new Int8Array(8))[20]; // undefined\n    // or with negative integers\n    Int8Array.prototype[-1] = \"foo\";\n    (new Int8Array(8))[-1]; // undefined\n    \n    // Named properties are allowed, though (Fx 30)\n    Int8Array.prototype.foo = \"bar\";\n    (new Int8Array(32)).foo; // \"bar\"\n\n## TypedArray objects  \n  \n<table>  \n<tr>  \n<td>\n\nType\n\n</td>  \n<td>\n\nSize\n\n</td>  \n<td>\n\nDescription\n\n</td>  \n<td>\n\nWeb IDL type\n\n</td>  \n<td>\n\nEquivalent C type\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Int8Array`][2]\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n8-bit twos complement signed integer\n\n</td>  \n<td>\n\n`byte`\n\n</td>  \n<td>\n\n`int8_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Uint8Array`][3]\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n8-bit unsigned integer\n\n</td>  \n<td>\n\n`octet`\n\n</td>  \n<td>\n\n`uint8_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Uint8ClampedArray`][4]\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n8-bit unsigned integer (clamped)\n\n</td>  \n<td>\n\n`octet`\n\n</td>  \n<td>\n\n`uint8_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Int16Array`][5]\n\n</td>  \n<td>\n\n2\n\n</td>  \n<td>\n\n16-bit twos complement signed integer\n\n</td>  \n<td>\n\n`short`\n\n</td>  \n<td>\n\n`int16_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Uint16Array`][6]\n\n</td>  \n<td>\n\n2\n\n</td>  \n<td>\n\n16-bit unsigned integer\n\n</td>  \n<td>\n\n`unsigned short`\n\n</td>  \n<td>\n\n`uint16_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Int32Array`][7]\n\n</td>  \n<td>\n\n4\n\n</td>  \n<td>\n\n32-bit twos complement signed integer\n\n</td>  \n<td>\n\n`long`\n\n</td>  \n<td>\n\n`int32_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Uint32Array`][8]\n\n</td>  \n<td>\n\n4\n\n</td>  \n<td>\n\n32-bit unsigned integer\n\n</td>  \n<td>\n\n`unsigned long`\n\n</td>  \n<td>\n\n`uint32_t`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Float32Array`][9]\n\n</td>  \n<td>\n\n4\n\n</td>  \n<td>\n\n32-bit IEEE\u00a0floating point number\n\n</td>  \n<td>\n\n`unrestricted float`\n\n</td>  \n<td>\n\n`float`\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`Float64Array`][10]\n\n</td>  \n<td>\n\n8\n\n</td>  \n<td>\n\n64-bit IEEE floating point number\n\n</td>  \n<td>\n\n`unrestricted double`\n\n</td>  \n<td>\n\n`double`\n\n</td> </tr> </table>\n\n## Properties\n\n[`TypedArray.BYTES_PER_ELEMENT`][11]\n\n     Returns a number value of the element size for the different typed array objects.\n_TypedArray_.length\n\n     Length property whose value is 3.\n[`TypedArray.name`][12]\n\n     Returns the string value of the constructor name. E.g \"Int8Array\".\n[`TypedArray.prototype`][13]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\n_TypedArray_.from()\n\n     See [`Array.from()`][14]. Not implemented, see [bug\u00a0896608][15].\n_TypedArray_.of()\n\n     See [`Array.of()`][16]. Not implemented, see [bug\u00a0896608][15].\n\n## `TypedArray` prototype\n\nAll _TypedArray_s inherit from [`TypedArray.prototype`][13].\n\n### Properties\n\n`TypedArray.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is one the corresponding [typed array type][17] functions by default.\n[`TypedArray.prototype.buffer`][18] Read only\n\n     Returns the [`ArrayBuffer`][1] referenced by the typed array. Fixed at construction time and thus **read only**.\n[`TypedArray.prototype.byteLength`][19] Read only\n\n     Returns the length (in bytes) of the typed array from the start of its [`ArrayBuffer`][1]. Fixed at construction time and thus **read only.**\n[`TypedArray.prototype.byteOffset`][20] Read only\n\n     Returns the offset (in bytes) of the typed array from the start of its [`ArrayBuffer`][1]. Fixed at construction time and thus **read only.**\n[`TypedArray.prototype.length`][21] Read only\n\n     Returns the number of elements hold in the typed array. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`TypedArray.prototype.copyWithin()`][22]\n\n     See [`Array.prototype.copyWithin()`][23].\n[`TypedArray.prototype.move()`][24] _ _ Unimplemented\n\n     Former non-standard version of [`TypedArray.prototype.copyWithin()`][22].\n[`TypedArray.prototype.set()`][25]\n\n     Stores multiple values in the typed array, reading input values from a specified array.\n[`TypedArray.prototype.subarray()`][26]\n\n     Returns a new TypedArray from the given start and end element index.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][27]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nDefined as `TypedArray` and `ArrayBufferView` interface with typed array view\ntypes. Superseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray Objects' in that specification.][28]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][29] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nIndexed properties not consulting prototype\n\n</td>  \n<td>\n\n(Yes) (see [1])\n\n</td>  \n<td>\n\n[25][30] (25)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nNamed properties\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[30][31] (30)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr>  \n<tr>  \n<td>\n\nIndexed properties not consulting prototype\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\u00a0(see [1])\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nNamed properties\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n30.0 (30)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\nNotes  \n[1] `-1`\u00a0and similar are not considered as indexed properties and therefore\nreturn the value of the prototype property.\n\n## See also\n\n  * [JavaScript typed arrays][32]\n  * [`ArrayBuffer`][1]\n  * [`DataView`][33]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[15]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[27]: https://www.khronos.org/registry/typedarray/specs/latest/#6\n\n[28]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-typedarray-objects\n\n[29]: /en-US/Firefox/Releases/4\n\n[30]: /en-US/Firefox/Releases/25\n\n[31]: /en-US/Firefox/Releases/30\n\n[32]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "JavaScript reference", "parent": "/javascript", "url": "/en-US/docs/Web/JavaScript/Reference", "parsed_url": "/javascript/javascript_reference", "content": "This part of the JavaScript section on MDN serves as a repository of facts\nabout the JavaScript language. Read more [about this reference][1].\n\n## Global Objects\n\nThis chapter documents all the [JavaScript standard built-in objects][2],\nalong with their methods and properties.\n\n### Value properties\n\nGlobal properties returning a simple value.\n\n  * [`Infinity`][3]\n  * [`NaN`][4]\n  * [`undefined`][5]\n  * [`null`][6] literal\n\n### Function properties\n\nGlobal functions returning the result of a specific routine.\n\n  * [`eval()`][7]\n  * [`uneval()`][8] _ _\n  * [`isFinite()`][9]\n  * [`isNaN()`][10]\n  * [`parseFloat()`][11]\n  * [`parseInt()`][12]\n  * [`decodeURI()`][13]\n  * [`decodeURIComponent()`][14]\n  * [`encodeURI()`][15]\n  * [`encodeURIComponent()`][16]\n  * [`escape()`][17] _ _\n  * [`unescape()`][18] _ _\n\n### Fundamental objects\n\nGeneral language objects, functions and errors.\n\n  * [`Object`][19]\n  * [`Function`][20]\n  * [`Boolean`][21]\n  * [`Symbol`][22] _ _\n  * [`Error`][23]\n  * [`EvalError`][24]\n  * [`InternalError`][25]\n  * [`RangeError`][26]\n  * [`ReferenceError`][27]\n  * [`StopIteration`][28]\n  * [`SyntaxError`][29]\n  * [`TypeError`][30]\n  * [`URIError`][31]\n\n### Numbers and dates\n\nObjects dealing with numbers, dates and mathematical calculations.\n\n  * [`Number`][32]\n  * [`Math`][33]\n  * [`Date`][34]\n\n### Text processing\n\nObjects for manipulating texts.\n\n  * [`String`][35]\n  * [`RegExp`][36]\n\n### Indexed collections\n\nCollections ordered by an index. Array-type objects.\n\n  * [`Array`][37]\n  * [`Int8Array`][38]\n  * [`Uint8Array`][39]\n  * [`Uint8ClampedArray`][40]\n  * [`Int16Array`][41]\n  * [`Uint16Array`][42]\n  * [`Int32Array`][43]\n  * [`Uint32Array`][44]\n  * [`Float32Array`][45]\n  * [`Float64Array`][46]\n  * [`ParallelArray`][47] _ _\n\n### Keyed collections\n\nCollections of objects as keys. Elements iterable in insertion order.\n\n  * [`Map`][48] _ _\n  * [`Set`][49] _ _\n  * [`WeakMap`][50] _ _\n  * [`WeakSet`][51] _ _\n\n### Structured data\n\nData buffers and **J**ava**S**cript **O**bject **N**otation.\n\n  * [`ArrayBuffer`][52]\n  * [`DataView`][53]\n  * [`JSON`][54]\n\n### Control abstraction objects\n\n  * [`Iterator`][55] _ _\n  * [`Generator`][56] _ _\n  * [`Promise`][57] _ _\n\n### Reflection\n\n  * [`Reflect`][58] _ _\n  * [`Proxy`][59] _ _\n\n### Internationalization\n\nAdditions to the ECMAScript core for language-sensitive functionalities.\n\n  * [`Intl`][60]\n  * [`Intl.Collator`][61]\n  * [`Intl.DateTimeFormat`][62]\n  * [`Intl.NumberFormat`][63]\n\n### Other\n\n  * [`arguments][64]`\n\n## Statements\n\nThis chapter documents all the [JavaScript statements and declarations][65].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Control flow\n\n[`Block`][66]\n\n     A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\n[`break`][67]\n\n     Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n[`continue`][68]\n\n     Terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n[`Empty`][69]\n\n     An empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n[`if...else`][70]\n\n     Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n[`switch`][71]\n\n     Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n[`throw`][72]\n\n     Throws a user-defined exception.\n[`try...catch`][73]\n\n     Marks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### Declarations\n\n[`var`][74]\n\n     Declares a variable, optionally initializing it to a value.\n_ _ [`let`][75]\n\n     Declares a block scope local variable, optionally initializing it to a value.\n_ _ [`const`][76]\n\n     Declares a read-only named constant.\n\n### Functions\n\n[`function`][77]\n\n     Declares a function with the specified parameters.\n_ _ [`function*`][78]\n\n     Generators functions enable writing [iterators][79] more easily.\n[`return`][80]\n\n     Specifies the value to be returned by a function.\n_ _ [`yield`][81]\n\n     See\u00a0[New_in_JavaScript 1.7][82]\u00a0&\u00a0[Iterators and generators][83]\n\n### Iterations\n\n[`do...while][84]`\n\n     Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n[`for`][85]\n\n     Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n_ _ _ _ [`for each...in`][86]\n\n     Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\n[`for...in`][87]\n\n     Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n_ _ [`for...of`][88]\n\n     Iterates over iterable objects (including [arrays][89], array-like objects, [iterators and generators][90]), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n[`while`][91]\n\n     Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### Others\n\n[`debugger`][92]\n\n     Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n_ _ [`export`][93]\n\n     Used to export functions to make them available for imports in external modules, another scripts.\n_ _ [`import`][94]\n\n     Used to import functions exported from an external module, another script.\n[`label`][95]\n\n     Provides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n_ _ [`with`][96]\n\n     Extends the scope chain for a statement.\n\n## Expressions and operators\n\nThis chapter documents all the [JavaScript expressions and operators][97].\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Primary expressions\n\nBasic keywords and general expressions in JavaScript.\n\n[`this`][98]\n\n     The `this` keyword refers to the function's execution context.\n[`function`][99]\n\n     The `function` keyword defines a function expression.\n[`[]`][37]\n\n     Array initializer/literal syntax.\n[`{}`][100]\n\n     Object initializer/literal syntax.\n[`/ab+c/i`][36]\n\n     Regular expression literal syntax.\n_ _ [`[for (x of y) x]`][101]\n\n     Array comprehensions.\n_ _ [`(for (x of y) y)`][102]\n\n     Generator comprehensions.\n[`( )`][103]\n\n     Grouping operator.\n\n### Left-hand-side expressions\n\nLeft values are the destination of an assignment.\n\n[Property accessors][104]\n\n     Member operators provide access to a property or method of an object  \n(`object.property` and `object[\"property\"]`).\n\n[`new`][105]\n\n     The `new` operator creates an instance of a constructor.\n_ _ [`super`][106]\n\n     The `super` keyword calls the parent constructor.\n_ _ [`...obj`][107]\n\n     The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.\n\n### Increment and decrement\n\nPostfix/prefix increment and postfix/prefix decrement operators.\n\n[`A++`][108]\n\n     Postfix increment operator.\n[`A--`][109]\n\n     Postfix decrement operator.\n[`++A`][108]\n\n     Prefix increment operator.\n[`\\--A`][109]\n\n     Prefix decrement operator.\n\n### Unary operators\n\nA unary operation is operation with only one operand.\n\n[`delete`][110]\n\n     The `delete` operator deletes a property from an object.\n[`void`][111]\n\n     The `void` operator discards an expression's return value.\n[`typeof`][112]\n\n     The `typeof` operator determines the type of a given object.\n[`+`][113]\n\n     The unary plus operator converts its operand to Number type.\n[`-`][114]\n\n     The unary negation operator converts its operand to Number type and then negates it.\n[`~`][115]\n\n     Bitwise NOT operator.\n[`!`][116]\n\n     Logical NOT operator.\n\n### Arithmetic operators\n\nArithmetic operators take numerical values (either literals or variables) as\ntheir operands and return a single numerical value.\n\n[`+`][117]\n\n     Addition operator.\n[`-`][118]\n\n     Subtraction operator.\n[`/`][119]\n\n     Division operator.\n[`*`][120]\n\n     Multiplication operator.\n[`%`][121]\n\n     Remainder operator.\n\n### Relational operators\n\nA comparison operator compares its operands and returns a `Boolean` value\nbased on whether the comparison is true.\n\n[`in`][122]\n\n     The `in` operator determines whether an object has a given property.\n[`instanceof`][123]\n\n     The `instanceof` operator determines whether an object is an instance of another object.\n`<`\n\n     Less than operator.\n`>`\n\n     Greater than operator.\n`<[=`][124]\n\n     Less than or equal operator.\n`>[=`][125]\n\n     Greater than or equal operator.\n\n### Equality operators\n\nThe result of evaluating an equality operator is always of type `Boolean`\nbased on whether the comparison is true.\n\n[`==`][126]\n\n     Equality operator.\n[`!=`][127]\n\n     Inequality operator.\n[`===`][128]\n\n     Identity operator.\n[`!==`][129]\n\n     Nonidentity operator.\n\n### Bitwise shift operators\n\nOperations to shift all bits of the operand.\n\n`<<`\n\n     Bitwise left shift operator.\n`>>`\n\n     Bitwise right shift operator.\n`>>>`\n\n     Bitwise unsigned right shift operator.\n\n### Binary bitwise operators\n\nBitwise operators treat their operands as a set of 32 bits (zeros and ones)\nand return standard JavaScript numerical values.\n\n`&`\n\n     Bitwise AND.\n[`|`][130]\n\n     Bitwise OR.\n[`^`][131]\n\n     Bitwise XOR.\n\n### Binary logical operators\n\nLogical operators are typically used with boolean (logical) values, and when\nthey are, they return a boolean value.\n\n`&&`\n\n     Logical AND.\n[`||`][132]\n\n     Logical OR.\n\n### Conditional (ternary) operator\n\n[`(condition ? ifTrue : ifFalse)`][133]\n\n    \n\nThe conditional operator returns one of two values based on the logical value\nof the condition.\n\n### Assignment operators\n\nAn assignment operator assigns a value to its left operand based on the value\nof its right operand.\n\n[`=`][134]\n\n     Assignment operator.\n[`*=`][135]\n\n     Multiplication assignment.\n[`/=`][136]\n\n     Division assignment.\n[`%=`][137]\n\n     Remainder assignment.\n[`+=`][138]\n\n     Addition assignment.\n[`-=`][139]\n\n     Subtraction assignment\n`<<[=`][140]\n\n     Left shift assignment.\n`>>[=`][141]\n\n     Right shift assignment.\n`>>>[=`][142]\n\n     Unsigned right shift assignment.\n`&[=`][143]\n\n     Bitwise AND assignment.\n[`^=`][144]\n\n     Bitwise XOR assignment.\n[`|=`][145]\n\n     Bitwise OR assignment.\n_ _ [`[a, b] = [1, 2]`][146]  \n_ _ [`{a, b} = {a:1, b:2}`][146]\n\n    \n\nDestructuring assignment allows you to assign the properties of an array or\nobject to variables using syntax that looks similar to array or object\nliterals.\n\n### Comma operator\n\n[`,`][147]\n\n    \n\nThe comma operator allows multiple expressions to be evaluated in a single\nstatement and returns the result of the last expression.\n\n## Functions\n\nThis chapter documents how to work with [JavaScript functions][148] to develop\nyour applications.\n\n  * [`arguments`][149]\n  * [Arrow functions][150]\n  * [Default parameters][151]\n  * [Rest parameters][152]\n\n## Additional reference pages\n\n  * [Lexical grammar][153]\n  * [Data types and data structures][154]\n  * [Strict mode][155]\n  * [Deprecated features][156]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/About\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[28]: /en-US/docs/Web/JavaScript/Reference/StopIteration\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Reflect\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Statements\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[69]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[71]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[72]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[73]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[74]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[75]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[76]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[77]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[78]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[79]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[80]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[81]: /en-US/docs/Web/JavaScript/Reference/Statements/yield\n\n[82]: https://developer.mozilla.org/en/JavaScript/New_in_JavaScript/1.7\n\n[83]:\nhttps://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators\n\n[84]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[85]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[86]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[87]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[88]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[89]: https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Reference/Global_Objects/Array\n\n[90]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators\n\n[91]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[92]: /en-US/docs/Web/JavaScript/Reference/Statements/debugger\n\n[93]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n[94]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n[95]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[96]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[97]: /en-US/docs/Web/JavaScript/Reference/Operators\n\n[98]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[99]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[100]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[101]: /en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\n\n[102]: /en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\n\n[103]: /en-US/docs/Web/JavaScript/Reference/Operators/Grouping\n\n[104]: /en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\n\n[105]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[106]: /en-US/docs/Web/JavaScript/Reference/Operators/super\n\n[107]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[108]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[109]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement\n\n[110]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[111]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[112]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[113]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\n\n[114]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation\n\n[115]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\n\n[116]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT\n\n[117]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[118]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[119]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[120]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[121]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[122]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[123]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[124]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator\n\n[125]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator\n\n[126]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[127]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality\n\n[128]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[129]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity\n\n[130]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[131]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[132]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR\n\n[133]: /en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[134]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Assignment\n\n[135]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment\n\n[136]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment\n\n[137]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment\n\n[138]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment\n\n[139]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment\n\n[140]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment\n\n[141]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment\n\n[142]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment\n\n[143]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment\n\n[144]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment\n\n[145]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment\n\n[146]: /en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n\n[147]: /en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\n\n[148]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[149]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[150]: /en-US/docs/Web/JavaScript/Reference/arrow_functions\n\n[151]: /en-US/docs/Web/JavaScript/Reference/default_parameters\n\n[152]: /en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\n\n[153]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n[154]: /en-US/docs/Web/JavaScript/Data_structures\n\n[155]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n[156]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features\n\n", "docset": "JavaScript", "path": ["JavaScript"], "type": "others"},
{"name": "Lexical grammar", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Lexical_grammar", "parsed_url": "/javascript/javascript_reference/lexical_grammar", "content": "This section describes JavaScript's lexical grammar. The source text of\nECMAScript scripts gets scanned from left to right and is converted into a\nsequence of input elements which are tokens, control characters, line\nterminators, comments or white space. ECMAScript also defines certain keywords\nand literals and has rules for automatic insertion of semicolons to end\nstatements.\n\n## Control characters\n\nControl characters have no visual representation but are used to control the\ninterpretation of the text.  \n  \n<table> Unicode format-control characters  \n<tr>  \n<th>\n\nCode point\n\n</th>  \n<th>\n\nName\n\n</th>  \n<th>\n\nAbbreviation\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n`U+200C`\n\n</td>  \n<td>\n\nZero width non-joiner\n\n</td>  \n<td>\n\n<ZWNJ>\n\n</td>  \n<td>\n\nPlaced between characters to prevent being connected into ligatures in certain\nlanguages ([Wikipedia][1]).\n\n</td> </tr>  \n<tr>  \n<td>\n\n`U+200D`\n\n</td>  \n<td>\n\nZero width joiner\n\n</td>  \n<td>\n\n<ZWJ>\n\n</td>  \n<td>\n\nPlaced between characters that would not normally be connected in order to\ncause the characters to be rendered using their connected form in certain\nlanguages ([Wikipedia][2]).\n\n</td> </tr>  \n<tr>  \n<td>\n\n`U+FEFF`\n\n</td>  \n<td>\n\nByte order mark\n\n</td>  \n<td>\n\n<BOM>\n\n</td>  \n<td>\n\nUsed at the start of the script to mark it as Unicode and the text's byte\norder ([Wikipedia][3]).\n\n</td> </tr> </table>\n\n## White space\n\nWhite space characters improve the readability of source text and separate\ntokens from each other. These characters are usually unnecessary for the\nfunctionality of the code. [Minification tools][4] are often used to remove\nwhitespace in order to reduce the amount of data that needs to be transferred.  \n  \n<table> White space characters  \n<tr>  \n<th>\n\nCode point\n\n</th>  \n<th>\n\nName\n\n</th>  \n<th>\n\nAbbreviation\n\n</th>  \n<th>\n\nDescription\n\n</th>  \n<th>\n\nEscape sequence\n\n</th> </tr>  \n<tr>  \n<td>\n\nU+0009\n\n</td>  \n<td>\n\nCharacter tabulation\n\n</td>  \n<td>\n\n<HT>\n\n</td>  \n<td>\n\nHorizontal tabulation\n\n</td>  \n<td>\n\n\\t\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+000B\n\n</td>  \n<td>\n\nLine tabulation\n\n</td>  \n<td>\n\n<VT>\n\n</td>  \n<td>\n\nVertical tabulation\n\n</td>  \n<td>\n\n\\v\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+000C\n\n</td>  \n<td>\n\nForm feed\n\n</td>  \n<td>\n\n<FF>\n\n</td>  \n<td>\n\nPage breaking control character ([Wikipedia][5]).\n\n</td>  \n<td>\n\n\\f\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+0020\n\n</td>  \n<td>\n\nSpace\n\n</td>  \n<td>\n\n<SP>\n\n</td>  \n<td>\n\nNormal space\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+00A0\n\n</td>  \n<td>\n\nNo-break space\n\n</td>  \n<td>\n\n<NBSP>\n\n</td>  \n<td>\n\nNormal space, but no point at which a line may break\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\nOthers\n\n</td>  \n<td>\n\nOther Unicode space characters\n\n</td>  \n<td>\n\n<USP>\n\n</td>  \n<td>\n\n[Spaces in Unicode on Wikipedia][6]\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Line terminators\n\nIn addition to white space characters, line terminator characters are used to\nimprove the readability of the source text. However, in some cases, line\nterminators can influence the the execution of JavaScript code as there are a\nfew places where they are forbidden. Line terminators also affect the process\nof automatic semicolon insertion. Line terminators are matched by the **\\s**\nclass in [regular expressions][7].\n\nOnly the following Unicode code points are treated as line terminators in\nECMAScript, other line breaking characters are treated as white space (for\nexample, Next Line, NEL, U+0085 is considered as white space).  \n  \n<table> Line terminator characters  \n<tr>  \n<th>\n\nCode point\n\n</th>  \n<th>\n\nName\n\n</th>  \n<th>\n\nAbbreviation\n\n</th>  \n<th>\n\nDescription\n\n</th>  \n<th>\n\nEscape sequence\n\n</th> </tr>  \n<tr>  \n<td>\n\nU+000A\n\n</td>  \n<td>\n\nLine Feed\n\n</td>  \n<td>\n\n<LF>\n\n</td>  \n<td>\n\nNew line character in UNIX systems.\n\n</td>  \n<td>\n\n\\n\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+000D\n\n</td>  \n<td>\n\nCarriage Return\n\n</td>  \n<td>\n\n<CR>\n\n</td>  \n<td>\n\nNew line character in Commodore and early Mac systems.\n\n</td>  \n<td>\n\n\\r\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+2028\n\n</td>  \n<td>\n\nLine Separator\n\n</td>  \n<td>\n\n<LS>\n\n</td>  \n<td>\n\n[Wikipedia][8]\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\nU+2029\n\n</td>  \n<td>\n\nParagraph Separator\n\n</td>  \n<td>\n\n<PS>\n\n</td>  \n<td>\n\n[Wikipedia][8]\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Comments\n\nComments are used to add hints, notes, suggestions, or warnings to JavaScript\ncode. This can make it easier to read and understand. They can also be used to\ndisable code to prevent it from being executed; this can be a valuable\ndebugging tool.\n\nJavaScript has two ways of assigning comments in its code.\n\nThe first way is the `//` comment; this makes all text following it on the\nsame line into a comment. For example:\n\n    \n    \n    function comment() {\n    \u00a0 // This is a one line JavaScript comment\n    \u00a0 console.log(\"Hello world!\");\n    }\n    comment();\n    \n\nThe second way is the `/* */` style, which is much more flexible.\n\nFor example, you can use it on a single line:\n\n    \n    \n    function comment() {\n    \u00a0 /* This is a one line JavaScript comment */\n    \u00a0 console.log(\"Hello world!\");\n    }\n    comment();\n\nYou can also make multiple-line comments, like this:\n\n    \n    \n    function comment() {\n    \u00a0 /*\u00a0This comment spans multiple lines. Notice\n    \u00a0\u00a0\u00a0\u00a0 that we don't need to end the comment until we're done. */\n    \u00a0 console.log(\"Hello world!\");\n    }\n    comment();\n\nYou can also use it in the middle of a line, if you wish, although this can\nmake your code harder to read so it should be used with caution:\n\n    \n    \n    function comment(x) {\n    \u00a0 console.log(\"Hello \" + x /* insert the value of x */ +\u00a0\" !\");\n    }\n    comment(\"world\");\n\nIn addition, you can use it to disable code to prevent it from running, by\nwrapping code in a comment, like this:\n\n    \n    \n    function comment() {\n    \u00a0 /* console.log(\"Hello world!\"); */\n    }\n    comment();\n\nIn this case, the `console.log()` call is never issued, since it's inside a\ncomment. Any number of lines of code can be disabled this way.\n\n## Keywords\n\n### Reserved keywords as of ECMAScript 6\n\n  * [`break`][9]\n  * [`case`][10]\n  * `class`\n  * [`catch`][11]\n  * [`const`][12]\n  * [`continue`][13]\n  * [`debugger`][14]\n  * [`default`][10]\n  * [`delete`][15]\n  * [`do`][16]\n  * [`else`][17]\n  * [`export`][18]\n  * `extends`\n  * [`finally`][11]\n  * [`for`][19]\n  * [`function`][20]\n  * [`if`][17]\n  * [`import`][21]\n  * [`in`][22]\n  * [`instanceof`][23]\n  * [`let`][24]\n  * [`new`][25]\n  * [`return`][26]\n  * [`super`][27]\n  * [`switch`][10]\n  * [`this`][28]\n  * [`throw`][29]\n  * [`try`][11]\n  * [`typeof`][30]\n  * [`var`][31]\n  * [`void`][32]\n  * [`while`][16]\n  * [`with`][33]\n  * `yield`\n\n### Future reserved keywords\n\nThe following are reserved as future keywords by the ECMAScript specification.\nThey have no special functionality at present, but they might at some future\ntime, so they cannot be used as identifiers. These keywords may not be used in\neither strict or non-strict mode.\n\n  * `enum`\n  * `await`\n\nThe following are reserved as future keywords when they are found in strict\nmode code:\n\n  * `implements`\n  * `package`\n  * `protected`\n  * `static`\n  * `interface`\n  * `private`\n  * `public`\n\n#### Future reserved keywords in older standards\n\nThe following are reserved as future keywords by older ECMAScript\nspecifications (ECMAScript 1 till 3).\n\n  * `abstract`\n  * `boolean`\n  * `byte`\n  * `char`\n  * `double`\n  * `final`\n  * `float`\n  * `goto`\n  * `int`\n  * `long`\n  * `native`\n  * `short`\n  * `synchronized`\n  * `transient`\n  * `volatile`\n\nAdditionally, the literals `null`, `true`, and `false` are reserved in\nECMAScript for their normal uses.\n\n### Reserved word usage\n\nReserved words actually only apply to Identifiers (vs. `IdentifierNames`) . As\ndescribed in [es5.github.com/#A.1][34], these are all `IdentifierNames` which\ndo not exclude `ReservedWords`.\n\n    \n    \n    a.import\n    a[\"import\"]\n    a = { import: \"test\" }.\n    \n\nOn the other hand the following is illegal because it's an Identifier, which\nis an `IdentifierName` without the reserved words. Identifiers are used for\n`FunctionDeclaration` and `FunctionExpression`.\n\n    \n    \n    function import() {} // Illegal.\n\n## Literals\n\n### Null literal\n\nSee also [`null`][35] for more information.\n\n    \n    \n    null\n\n### Boolean literal\n\nSee also [`Boolean`][36] for more information.\n\n    \n    \n    true\n    false\n\n### Numeric literals\n\n#### Decimal\n\n    \n    \n    1234567890\n    42\n    \n    // Caution when using leading zeros:\n    \n    0888 // 888 parsed as decimal\n    0777 // parsed as octal, 511 in decimal\n    \n\nNote that decimal literals can start with a zero (`0`) followed by another\ndecimal digit, but If the next digit after the leading `0` is smaller than 8,\nthe number gets parsed as an octal number. This won't throw in JavaScript, see\n[bug\u00a0957513][37]. See also the page about [`parseInt()`][38].\n\n#### Binary\n\nBinary number syntax using a leading zero followed by a lowercase or uppercase\nLatin letter \"B\" (`0b` or `0B`). This syntax is new in ECMAScript 6, please\nsee the browser compatibility table. This will throw a [`SyntaxError][39]`:\n\"Missing binary digits after 0b\", if digits are not 0 or 1.\n\n    \n    \n    var FLT_SIGNBIT  = 0b10000000000000000000000000000000; // 2147483648\n    var FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040\n    var FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607\n\n#### Octal\n\nOctal number syntax using a leading zero followed by a lowercase or uppercase\nLatin letter \"O\" (`0o` or `0O)`. This syntax is new in ECMAScript 6, please\nsee the browser compatibility table. This will throw a `SyntaxError`: \"Missing\noctal digits after 0o\", if digits are not between 0 and 7.\n\n    \n    \n    var n = 0O755; // 493\n    var m = 0o644; // 420\n    \n    // Also possible with leading zeros (see note about decimals above)\n    0755\n    0644\n    \n\n#### Hexadecimal\n\nHexadecimal number syntax using a leading zero followed by a lowercase or\nuppercase Latin letter \"X\" (`0x` or `0X)`. This will throw a `SyntaxError`:\n\"Identifier starts immediately after numeric literal\", if it is outside the\nhexadecimal range (0123456789ABCDEF).\n\n    \n    \n    0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n    0x123456789ABCDEF   // 81985529216486900\n    0XA                 // 10\n    \n\n### Object literals\n\nSee also [`Object`][40] and [Object initializer][41] for more information.\n\n    \n    \n    var o = { a: \"foo\", b: \"bar\", c: 42 };\n    \n    // shorthand notation. New in ES6\n    var a = \"foo\", b = \"bar\", c = 42;\n    var o = {a, b, c};\n    // instead of\n    var o = { a: a, b: b, c: c };\n    \n\n### Array literals\n\nSee also [`Array`][42] for more information.\n\n    \n    \n    [1954, 1974, 1990, 2014]\n\n### String literals\n\n    \n    \n    'foo'\n    \"bar\"\n\n#### Hexadecimal escape sequences\n\n    \n    \n    '\\xA9' // \"\u00a9\"\n    \n\n#### Unicode escape sequences\n\nThe Unicode escape sequences require at least four characters following `\\u`.\n\n    \n    \n    '\\u00A9' // \"\u00a9\"\n\n#### Unicode code point escapes\n\nNew in ECMAScript 6. With Unicode code point escapes, any character can be\nescaped using hexadecimal numbers so that it is possible to use Unicode code\npoints up to `0x10FFFF`. With simple Unicode escapes it is often necessary to\nwrite the surrogate halves separately to achieve the same.\n\nSee also [`String.fromCodePoint()`][43] or\n[`String.prototype.codePointAt()`][44].\n\n    \n    \n    '\\u{2F804}'\n    \n    // the same with simple Unicode escapes\n    '\\uD87E\\uDC04'\n\n### Regular expression literals\n\nSee also [`RegExp`][45] for more information.\n\n    \n    \n    /ab+c/f\n\n### Template literals\n\nSee also [template strings][46] for more information.\n\n    \n    \n    `string text`\n    \n    `string text line 1\n     string text line 2`\n    \n    `string text ${expression} string text`\n    \n    tag `string text ${expression} string text`\n\n## Automatic semicolon insertion\n\nSome [JavaScript statements][47] must be terminated with semicolons and are\ntherefore affected by automatic semicolon insertion (ASI):\n\n  * Empty statement\n  * `let`, `const`, variable statement\n  * `import`, `export`, module declaration\n  * Expression statement\n  * `debugger`\n  * `continue`, `break`, `throw`\n  * `return`\n\nThe ECMAScript specification mentions[ three rules of semicolon\ninsertion][48].\n\n1.\u00a0 A semicolon is inserted before, when a Line terminator or \"}\" is\nencountered that is not allowed by the grammar.\n\n{ 1 2 } 3 // is transformed by ASI into { 1 2 ;} 3;\n\n2.\u00a0 A semicolon is inserted at the end, when the end of the input stream of\ntokens is detected and the the parser is unable to parse the single input\nstream as a complete program.\n\nHere `++` is not treated as a [postfix operator][49] applying to variable `b`,\nbecause a line terminator occurs between `b` and `++`.\n\n    \n    \n    a = b\n    ++c\n    \n    // is transformend by ASI into\n    \n    a = b;\n    ++c;\n    \n\n3\\. A semicolon is inserted at the end, when a statement with restricted\nproductions in the grammar is followed by a line terminator. These statements\nwith \"no LineTerminator here\" rules are:\n\n  * PostfixExpressions (`++` and `\\--`)\n  * `continue`\n  * `break`\n  * `return`\n  * `yield`, `yield*`\n  * `module`\n    \n    \n    return\n    a + b\n    \n    // is transformed by ASI into\n    \n    return;\n    a + b;\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Lexical Conventions' in that specification.][50]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Lexical Grammar' in that specification.][51]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nAdded: Binary and Octal Numeric literals, Unicode code point escapes,\nTemplates\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][52].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBinary and octal numeric literals  \n(`0b` and `0o`)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[25][53] (25)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnicode code point escapes  \n(`\\u{}`)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0952985][54]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand notation for object literals\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[33][55] (33)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nTemplate literals\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][56] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBinary and octal numeric literals\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n33.0 (33)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnicode code point escapes\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0952985][54]\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand notation for object literals\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n33.0 (33)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nTemplate literals\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n#### Firefox-specific notes\n\n  * Prior to Firefox 5 (JavaScript 1.8.6), future reserved keywords could be used when not in strict mode. This ECMAScript violation was fixed in Firefox 5.\n\n## See also\n\n  * [Jeff Walden: Binary and octal numbers][57]\n  * [Mathias Bynens: JavaScript character escape sequences][58]\n  * [`Boolean`][36]\n  * [`Number`][59]\n  * [`RegExp`][45]\n  * [`String`][60]\n\n[1]: http://en.wikipedia.org/wiki/Zero-width_non-joiner\n\n[2]: http://en.wikipedia.org/wiki/Zero-width_joiner\n\n[3]: http://en.wikipedia.org/wiki/Byte_order_mark\n\n[4]: http://en.wikipedia.org/wiki/Minification_%28programming%29\n\n[5]: http://en.wikipedia.org/wiki/Page_break#Form_feed\n\n[6]: http://en.wikipedia.org/wiki/Space_%28punctuation%29#Spaces_in_Unicode\n\n[7]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n[8]: http://en.wikipedia.org/wiki/Newline\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Statements/debugger\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Operators/super\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[34]: http://es5.github.com/#A.1\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[37]: https://bugzilla.mozilla.org/show_bug.cgi?id=957513\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt#Octal_interpretations_with_no_radix\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[46]: /en-US/docs/Web/JavaScript/Reference/template_strings\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Statements\n\n[48]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-rules-of-automatic-semicolon-insertion\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[50]: http://www.ecma-international.org/ecma-262/5.1/#sec-7\n\n[51]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-lexical-grammar\n\n[52]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[53]: /en-US/Firefox/Releases/25\n\n[54]: https://bugzilla.mozilla.org/show_bug.cgi?id=952985\n\n[55]: /en-US/Firefox/Releases/33\n\n[56]: /en-US/Firefox/Releases/34\n\n[57]: http://whereswalden.com/2013/08/12/micro-feature-from-es6-now-in-firefox-aurora-and-nightly-binary-and-octal-numbers/\n\n[58]: http://mathiasbynens.be/notes/javascript-escapes\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "Rest parameters", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters", "parsed_url": "/javascript/javascript_reference/functions/rest_parameters", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **rest parameter** syntax allows to represent an indefinite number of\narguments as an array.\n\n## Syntax\n\n    \n    \n    function(a, b, ...theArgs) {\n      // ...\n    }\n    \n\n## Description\n\nIf the last named argument of a function is prefixed with `...`, it becomes an\narray whose elements from `0` to `theArgs.length` are supplied by the actual\narguments passed to the function.\n\nIn the above example, `theArgs` would collect the third argument of the\nfunction (because the first one is mapped to `a`, and the second to `b`) and\nall the consecutive arguments.\n\n### Difference between rest parameters and the `arguments` object\n\nThere are three main differences between rest parameters and the\n[`arguments`][1] object:\n\n  * rest parameters are only the ones that haven't been given a separate name, while the `arguments` object contains all arguments passed to the function;\n  * the `arguments` object is not a real array, while rest parameters are [`Array`][2] instances, meaning methods like [`sort`][3], [`map`][4], [`forEach`][5] or [`pop`][6] can be applied on it directly;\n  * the `arguments` object has additional functionality specific to itself (like the `callee` property).\n\n### From arguments to an array\n\nRest parameters have been introduced to reduce the boilerplate code that was\ninduced by the arguments\n\n    \n    \n    // Before rest parameters, the following could be found:\n    function f(a, b){\n      var args = Array.prototype.slice.call(arguments, f.length);\n    \n      // ...\n    }\n    \n    // to be equivalent of\n    \n    function(a, b, ...args) {\n      \n    }\n    \n\n## Examples\n\nSince `theArgs` is an array, you can get the count of its elements by using\nthe `length` property:\n\n    \n    \n    function fun1(...theArgs) {\n      console.log(theArgs.length);\n    }\n    \n    fun1();  // 0\n    fun1(5); // 1\n    fun1(5, 6, 7); // 3\n    \n\nIn the next example, we use the rest parameters to collect arguments from the\nsecond one to the end. We then multiply them by the first one:\n\n    \n    \n    function multiply(multiplier, ...theArgs) {\n      return theArgs.map(function (element) {\n        return multiplier * element;\n      });\n    }\n    \n    var arr = multiply(2, 1, 2, 3); \n    console.log(arr); // [2, 4, 6]\n    \n\nThe following example shows that you can use `Array` methods on rest params,\nbut not on the `arguments` object:\n\n    \n    \n    function sortRestArgs(...theArgs) {\n      var sortedArgs = theArgs.sort();\n      return sortedArgs;\n    }\n    \n    console.log(sortRestArgs(5,3,7,1)); // shows 1,3,5,7\n    \n    function sortArguments() {\n      var sortedArgs = arguments.sort(); \n      return sortedArgs; // this will never happen\n    }\n    \n    // throws a TypeError: arguments.sort is not a function\n    console.log(sortArguments(5,3,7,1));\n    \n\nIn order to use `Array` methods on the `arguments` object, you would need to\nconvert it to a real array first.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function Definitions' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][8].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[15.0][9] (15.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n15.0 (15.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Arguments object][1]\n  * [Array][2]\n  * [Functions][10]\n  * [Original proposal at ecmascript.org][11]\n  * [JavaScript arguments object and beyond][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-definitions\n\n[8]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[9]: /en-US/Firefox/Releases/15\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Functions\n\n[11]: http://wiki.ecmascript.org/doku.php?id=harmony:rest_parameters\n\n[12]: http://javascriptweblog.wordpress.com/2011/01/18/javascripts-arguments-object-and-beyond/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "Deprecated and obsolete features", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features", "parsed_url": "/javascript/javascript_reference/deprecated_and_obsolete_features", "content": "This page lists features of JavaScript that are deprecated (that is, still\navailable but planned for removal) and obsolete (that is, no longer usable).\n\n## Deprecated features\n\nThese deprecated features can still be used, but should be used with caution\nbecause they are expected to be removed entirely sometime in the future. You\nshould work to remove their use from your code.\n\n### RegExp properties\n\nThe following properties are deprecated. This does not affect their use in\n[replacement strings][1]:\n\n<table>  \n<tr>  \n<th>\n\nProperty\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n`$1, ..., $9`\n\n</td>  \n<td>\n\nParenthesized substring matches, if any.  \n**Warning:** Using these properties can result in problems, since browser extensions can modify them. Avoid them!\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$_`\n\n</td>  \n<td>\n\nSee `input`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$*`\n\n</td>  \n<td>\n\nSee `multiline`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$&`\n\n</td>  \n<td>\n\nSee `lastMatch`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$+`\n\n</td>  \n<td>\n\nSee `lastParen`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$``\n\n</td>  \n<td>\n\nSee `leftContext`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$'`\n\n</td>  \n<td>\n\nSee `rightContext`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`input`\n\n</td>  \n<td>\n\nThe string against which a regular expression is matched.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`lastMatch`\n\n</td>  \n<td>\n\nThe last matched characters.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`lastParen`\n\n</td>  \n<td>\n\nThe last parenthesized substring match, if any.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`leftContext`\n\n</td>  \n<td>\n\nThe substring preceding the most recent match.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`rightContext`\n\n</td>  \n<td>\n\nThe substring following the most recent match.\n\n</td> </tr> </table>\n\nThe following are now properties of RegExp instances, no longer of the RegExp\nobject:  \n  \n<table>  \n<tr>  \n<th>\n\nProperty\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n`global`\n\n</td>  \n<td>\n\nWhether or not to test the regular expression against all possible matches in\na string, or only against the first.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`ignoreCase`\n\n</td>  \n<td>\n\nWhether or not to ignore case while attempting a match in a string.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`lastIndex`\n\n</td>  \n<td>\n\nThe index at which to start the next match.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`multiline`\n\n</td>  \n<td>\n\nWhether or not to search in strings across multiple lines.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`source`\n\n</td>  \n<td>\n\nThe text of the pattern.\n\n</td> </tr> </table>\n\n### RegExp methods\n\n  * The `compile` method is deprecated.\n  * The `valueOf` method is no longer specialized for RegExp. Use `Object.valueOf`.\n\n### Function properties\n\n  * The [`caller`][2] and [`arguments`][3] properties are deprecated, because they leak the function caller. Instead of the arguments property, you should use the [`arguments][4]` object inside function closures.\n\n### Date methods\n\n  * [`getYear`][5] and [`setYear`][6] are affected by the Year-2000-Problem and have been subsumed by [`getFullYear`][7] and [`setFullYear`][8].\n  * You should use [`toISOString`][9] instead of the deprecated [`toGMTString`][10] method in new code.\n\n### Escape sequences\n\n  * Octal escape sequences (\\ followed by one, two, or three octal digits) are deprecated in string and regular expression literals.\n  * The [`escape`][11] and [`unescape`][12] functions are deprecated. Use [`encodeURI`][13], [`encodeURIComponent`][14], [`decodeURI`][15] or [`decodeURIComponent`][16] to encode and decode escape sequences for special characters.\n\n### String methods\n\n  * [HTML wrapper methods][17] like [`String.prototype.fontsize`][18] and [`String.prototype.big`][19].\n\n## Obsolete features\n\nThese obsolete features have been entirely removed from JavaScript and can no\nlonger be used as of the indicated version of JavaScript.\n\n### Object  \n  \n<table>  \n<tr>  \n<th>\n\nProperty\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n[`__count__`][20]\n\n</td>  \n<td>\n\nReturns the number of enumerable properties directly on a user-defined object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`__parent__`][21]\n\n</td>  \n<td>\n\nPoints to an object's context.\n\n</td> </tr> </table>  \n<table>  \n<tr>  \n<th>\n\nMethod\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n[`Object.prototype.eval()`][22]\n\n</td>  \n<td>\n\nEvaluates a string of JavaScript code in the context of the specified object.\n\n</td> </tr> </table>\n\n### Function  \n  \n<table>  \n<tr>  \n<th>\n\nProperty\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n[`arity`][23]\n\n</td>  \n<td>\n\nNumber of formal arguments.\n\n</td> </tr> </table>\n\n### Number\n\n  * [`Number.toInteger()`][24]\n\n### ParallelArray\n\n  * [`ParallelArray`][25]\n\n### Statements\n\n  * [`for each...in][26]` use [`for...of][27]` instead`.`\n\n### E4X\n\nSee [E4X][28] for more information.\n\n### Sharp variables\n\nSee [Sharp variables in JavaScript][29] for more information.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[17]: https://developer.mozilla.org/en-US/docs/tag/HTML%20wrapper%20methods\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/count\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[28]: /en-US/docs/Archive/Web/E4X\n\n[29]: /en-US/docs/Archive/Web/Sharp_variables_in_JavaScript\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "Strict mode", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Strict_mode", "parsed_url": "/javascript/javascript_reference/strict_mode", "content": "[ECMAScript 5][1]'s strict mode is a way to _opt in_ to a restricted variant\nof JavaScript. Strict mode isn't just a subset: it _intentionally_ has\ndifferent semantics from normal code. Browsers not supporting strict mode will\nrun strict mode code with different behavior from browsers that do, so don't\nrely on strict mode without feature-testing for support for the relevant\naspects of strict mode. Strict mode code and non-strict mode code can coexist,\nso scripts can opt into strict mode incrementally.\n\nStrict mode makes several changes to normal JavaScript semantics. First,\nstrict mode eliminates some JavaScript silent errors by changing them to throw\nerrors. Second, strict mode fixes mistakes that make it difficult for\nJavaScript engines to perform optimizations: strict mode code can sometimes be\nmade to run faster than identical code that's not strict mode. Third, strict\nmode prohibits some syntax likely to be defined in future versions of\nECMAScript.\n\nSee [transitioning to strict mode][2], if you want to change your code to work\nin the restricted variant of JavaScript.\n\n## Invoking strict mode\n\nStrict mode applies to _entire scripts_ or to _individual functions_. It\ndoesn't apply to block statements enclosed in `{}` braces; attempting to apply\nit to such contexts does nothing. `eval` code, `Function` code, event handler\nattributes, strings passed to [`setTimeout`][3], and the like are entire\nscripts, and invoking strict mode in them works as expected.\n\n### Strict mode for scripts\n\nTo invoke strict mode for an entire script, put the _exact_ statement `\"use\nstrict\";` (or `'use strict';`) before any other statements.\n\n    \n    \n    // Whole-script strict mode syntax\n    \"use strict\";\n    var v = \"Hi!  I'm a strict mode script!\";\n    \n\nThis syntax has a trap that has [already bitten][4] [a major site][5]: itisn\n\n't possible to blindly concatenate non-conflicting scripts. Consider\nconcatenating a strict mode script with a non-strict mode script: the entire\nconcatenation looks strict! The inverse is also true: non-strict plus strict\nlooks non-strict. Concatenation of strict mode scripts with each other is\nfine, and concatenation of non-strict mode scripts is fine. Only concatenating\nstrict and non-strict scripts is problematic. It is thus recommended that you\nenable strict mode on a function-by-function basis (at least during the\ntransition period).\n\nYou can also take the approach of wrapping the entire contents of a script in\na function and having that outer function use strict mode. This eliminates the\nconcatenation problem but it means that you have to explicitly export any\nglobal variables out of the function scope.\n\n### Strict mode for functions\n\nLikewise, to invoke strict mode for a function, put the _exact_ statement\n`\"use strict\";` (or `'use strict';`) in the function's body before any other\nstatements.\n\n    \n    \n    function strict(){\n      // Function-level strict mode syntax\n      'use strict';\n      function nested() { return \"And so am I!\"; }\n      return \"Hi!  I'm a strict mode function!  \" + nested();\n    }\n    function notStrict() { return \"I'm not strict.\"; }\n    \n\n## Changes in strict mode\n\nStrict mode changes both syntax and runtime behavior. Changes generally fall\ninto these categories: changes converting mistakes into errors (as syntax\nerrors or at runtime), changes simplifying how the particular variable for a\ngiven use of a name is computed, changes simplifying `eval` and `arguments`,\nchanges making it easier to write \"secure\" JavaScript, and changes\nanticipating future ECMAScript evolution.\n\n### Converting mistakes into errors\n\nStrict mode changes some previously-accepted mistakes into errors. JavaScript\nwas designed to be easy for novice developers, and sometimes it gives\noperations which should be errors non-error semantics. Sometimes this fixes\nthe immediate problem, but sometimes this creates worse problems in the\nfuture. Strict mode treats these mistakes as errors so that they're discovered\nand promptly fixed.\n\nFirst, strict mode makes it impossible to accidentally create global\nvariables. In normal JavaScript mistyping a variable in an assignment creates\na new property on the global object and continues to \"work\" (although future\nfailure is possible: likely, in modern JavaScript). Assignments which would\naccidentally create global variables instead throw in strict mode:\n\n    \n    \n    \"use strict\";\n                           // Assuming a global variable mistypedVariable exists\n    mistypedVaraible = 17; // this line throws a ReferenceError due to the \n                           // mispelling of variable\n    \n\nSecond, strict mode makes assignments which would otherwise silently fail\nthrow an exception. For example, `NaN` is a non-writable global variable. In\nnormal code assigning to `NaN` does nothing; the developer receives no failure\nfeedback. In strict mode assigning to `NaN` throws an exception. Any\nassignment that silently fails in normal code (assignment to a non-writable\nproperty, assignment to a getter-only property, assignment to a new property\non a [non-extensible][6] object) will throw in strict mode:\n\n    \n    \n    \"use strict\";\n    \n    // Assignment to a non-writable property\n    var obj1 = {};\n    Object.defineProperty(obj1, \"x\", { value: 42, writable: false });\n    obj1.x = 9; // throws a TypeError\n    \n    // Assignment to a getter-only property\n    var obj2 = { get x() { return 17; } };\n    obj2.x = 5; // throws a TypeError\n    \n    // Assignment to a new property on a non-extensible object\n    var fixed = {};\n    Object.preventExtensions(fixed);\n    fixed.newProp = \"ohai\"; // throws a TypeError\n    \n\nThird, strict mode makes attempts to delete undeletable properties throw\n(where before the attempt would simply have no effect):\n\n    \n    \n    \"use strict\";\n    delete Object.prototype; // throws a TypeError\n    \n\nFourth, strict mode requires that all properties named in an object literal be\nunique. Normal code may duplicate property names, with the last one\ndetermining the property's value. But since only the last one does anything,\nthe duplication is simply a vector for bugs, if the code is modified to change\nthe property value other than by changing the last instance. Duplicate\nproperty names are a syntax error in strict mode:\n\n    \n    \n    \"use strict\";\n    var o = { p: 1, p: 2 }; // !!! syntax error\n    \n\nFifth, strict mode requires that function parameter names be unique. In normal\ncode the last duplicated argument hides previous identically-named arguments.\nThose previous arguments remain available through `arguments[i]`, so they're\nnot completely inaccessible. Still, this hiding makes little sense and is\nprobably undesirable (it might hide a typo, for example), so in strict mode\nduplicate argument names are a syntax error:\n\n    \n    \n    function sum(a, a, c){ // !!! syntax error\n      \"use strict\";\n      return a + b + c; // wrong if this code ran\n    }\n    \n\nSixth, strict mode forbids octal syntax. Octal syntax isn't part of\nECMAScript, but it's supported in all browsers by prefixing the octal number\nwith a zero: `0644 === 420` and `\"\\045\" === \"%\"`. Novice developers sometimes\nbelieve a leading zero prefix has no semantic meaning, so they use it as an\nalignment device \u2014 but this changes the number's meaning! Octal syntax is\nrarely useful and can be mistakenly used, so strict mode makes octal a syntax\nerror:\n\n    \n    \n    \"use strict\";\n    var sum = 015 + // !!! syntax error\n              197 +\n              142;\n    \n\n### Simplifying variable uses\n\nStrict mode simplifies how variable names map to particular variable\ndefinitions in the code. Many compiler optimizations rely on the ability to\nsay that variable _X_ is stored in _that_ location: this is critical to fully\noptimizing JavaScript code. JavaScript sometimes makes this basic mapping of\nname to variable definition in the code impossible to perform until runtime.\nStrict mode removes most cases where this happens, so the compiler can better\noptimize strict mode code.\n\nFirst, strict mode prohibits `with`. The problem with `with` is that any name\ninside the block might map either to a property of the object passed to it, or\nto a variable in surrounding (or even global) scope, at runtime: it's\nimpossible to know which beforehand. Strict mode makes `with` a syntax error,\nso there's no chance for a name in a `with` to refer to an unknown location at\nruntime:\n\n    \n    \n    \"use strict\";\n    var x = 17;\n    with (obj) // !!! syntax error\n    {\n      // If this weren't strict mode, would this be var x, or\n      // would it instead be obj.x?  It's impossible in general\n      // to say without running the code, so the name can't be\n      // optimized.\n      x;\n    }\n    \n\nThe simple alternative of assigning the object to a short name variable, then\naccessing the corresponding property on that variable, stands ready to replace\n`with`.\n\nSecond, [`eval` of strict mode code does not introduce new variables into the\nsurrounding scope][7]. In normal code `eval(\"var x;\")` introduces a variable\n`x` into the surrounding function or the global scope. This means that, in\ngeneral, in a function containing a call to `eval` every name not referring to\nan argument or local variable must be mapped to a particular definition at\nruntime (because that `eval` might have introduced a new variable that would\nhide the outer variable). In strict mode `eval` creates variables only for the\ncode being evaluated, so `eval` can't affect whether a name refers to an outer\nvariable or some local variable:\n\n    \n    \n    var x = 17;\n    var evalX = eval(\"'use strict'; var x = 42; x\");\n    assert(x === 17);\n    assert(evalX === 42);\n    \n\nRelatedly, if the function `eval` is invoked by an expression of the form\n`eval(...)` in strict mode code, the code will be evaluated as strict mode\ncode. The code may explicitly invoke strict mode, but it's unnecessary to do\nso.\n\n    \n    \n    function strict1(str){\n      \"use strict\";\n      return eval(str); // str will be treated as strict mode code\n    }\n    function strict2(f, str){\n      \"use strict\";\n      return f(str); // not eval(...): str is strict if and only\n                     // if it invokes strict mode\n    }\n    function nonstrict(str){\n      return eval(str); // str is strict if and only \n                        // if it invokes strict mode\n    }\n    \n    strict1(\"'Strict mode code!'\");\n    strict1(\"'use strict'; 'Strict mode code!'\");\n    strict2(eval, \"'Non-strict code.'\");\n    strict2(eval, \"'use strict'; 'Strict mode code!'\");\n    nonstrict(\"'Non-strict code.'\");\n    nonstrict(\"'use strict'; 'Strict mode code!'\");\n    \n\nThus names in strict mode `eval` code behave identically to names in strict\nmode code not being evaluated as the result of `eval`.\n\nThird, strict mode forbids deleting plain names. `delete name` in strict mode\nis a syntax error:\n\n    \n    \n    \"use strict\";\n    eval(\"var x; delete x;\"); // !!! syntax error\n    \n\n### Making `eval` and `arguments` simpler\n\nStrict mode makes `arguments` and `eval` less bizarrely magical. Both involve\na considerable amount of magical behavior in normal code: `eval` to add or\nremove bindings and to change binding values, and `arguments` by its indexed\nproperties aliasing named arguments. Strict mode makes great strides toward\ntreating `eval` and `arguments` as keywords, although full fixes will not come\nuntil a future edition of ECMAScript.\n\nFirst, the names `eval` and `arguments` can't be bound or assigned in language\nsyntax. All these attempts to do so are syntax errors:\n\n    \n    \n    \"use strict\";\n    eval = 17;\n    arguments++;\n    ++eval;\n    var obj = { set p(arguments) { } };\n    var eval;\n    try { } catch (arguments) { }\n    function x(eval) { }\n    function arguments() { }\n    var y = function eval() { };\n    var f = new Function(\"arguments\", \"'use strict'; return 17;\");\n    \n\nSecond, strict mode code doesn't alias properties of `arguments` objects\ncreated within it. In normal code within a function whose first argument is\n`arg`, setting `arg` also sets `arguments[0]`, and vice versa (unless no\narguments were provided or `arguments[0]` is deleted). `arguments` objects for\nstrict mode functions store the original arguments when the function was\ninvoked. `arguments[i]` does not track the value of the corresponding named\nargument, nor does a named argument track the value in the corresponding\n`arguments[i]`.\n\n    \n    \n    function f(a){\n      \"use strict\";\n      a = 42;\n      return [a, arguments[0]];\n    }\n    var pair = f(17);\n    assert(pair[0] === 42);\n    assert(pair[1] === 17);\n    \n\nThird, `arguments.callee` is no longer supported. In normal code\n`arguments.callee` refers to the enclosing function. This use case is weak:\nsimply name the enclosing function! Moreover, `arguments.callee` substantially\nhinders optimizations like inlining functions, because it must be made\npossible to provide a reference to the un-inlined function if\n`arguments.callee` is accessed. `arguments.callee` for strict mode functions\nis a non-deletable property which throws when set or retrieved:\n\n    \n    \n    \"use strict\";\n    var f = function() { return arguments.callee; };\n    f(); // throws a TypeError\n    \n\n### \"Securing\" JavaScript\n\nStrict mode makes it easier to write \"secure\" JavaScript. Some websites now\nprovide ways for users to write JavaScript which will be run by the website\n_on behalf of other users_. JavaScript in browsers can access the user's\nprivate information, so such JavaScript must be partially transformed before\nit is run, to censor access to forbidden functionality. JavaScript's\nflexibility makes it effectively impossible to do this without many runtime\nchecks. Certain language functions are so pervasive that performing runtime\nchecks has considerable performance cost. A few strict mode tweaks, plus\nrequiring that user-submitted JavaScript be strict mode code and that it be\ninvoked in a certain manner, substantially reduce the need for those runtime\nchecks.\n\nFirst, the value passed as `this` to a function in strict mode is not forced\ninto being an object (a.ka. \"boxed\"). For a normal function, `this` is always\nan object: either the provided object if called with an object-valued `this`;\nthe value, boxed, if called with a Boolean, string, or number `this`; or the\nglobal object if called with an `undefined` or `null` `this`. (Use\n[`call`][8], [`apply`][9], or [`bind`][10] to specify a particular `this`.)\nNot only is automatic boxing is a performance cost, but exposing the global\nobject in browsers is a security hazard, because the global object provides\naccess to functionality that \"secure\" JavaScript environments must restrict.\nThus for a strict mode function, the specified `this` is not boxed into an\nobject, and if unspecified, `this` will be `undefined`:\n\n    \n    \n    \"use strict\";\n    function fun() { return this; }\n    assert(fun() === undefined);\n    assert(fun.call(2) === 2);\n    assert(fun.apply(null) === null);\n    assert(fun.call(undefined) === undefined);\n    assert(fun.bind(true)() === true);\n    \n\nThat means, among other things, that in browsers it's no longer possible to\nreference the `window` object through `this` inside a strict mode function.\n\nSecond, in strict mode it's no longer possible to \"walk\" the JavaScript stack\nvia commonly-implemented extensions to ECMAScript. In normal code with these\nextensions, when a function `fun` is in the middle of being called,\n`fun.caller` is the function that most recently called `fun`, and\n`fun.arguments` is the `arguments` for that invocation of `fun`. Both\nextensions are problematic for \"secure\" JavaScript, because they allow\n\"secured\" code to access \"privileged\" functions and their (potentially\nunsecured) arguments. If `fun` is in strict mode, both `fun.caller` and\n`fun.arguments` are non-deletable properties which throw when set or\nretrieved:\n\n    \n    \n    function restricted()\n    {\n      \"use strict\";\n      restricted.caller;    // throws a TypeError\n      restricted.arguments; // throws a TypeError\n    }\n    function privilegedInvoker()\n    {\n      return restricted();\n    }\n    privilegedInvoker();\n    \n\nThird, `arguments` for strict mode functions no longer provide access to the\ncorresponding function call's variables. In some old ECMAScript\nimplementations `arguments.caller` was an object whose properties aliased\nvariables in that function. This is a [security hazard][11] because it breaks\nthe ability to hide privileged values via function abstraction; it also\nprecludes most optimizations. For these reasons no recent browsers implement\nit. Yet because of its historical functionality, `arguments.caller` for a\nstrict mode function is also a non-deletable property which throws when set or\nretrieved:\n\n    \n    \n    \"use strict\";\n    function fun(a, b)\n    {\n      \"use strict\";\n      var v = 12;\n      return arguments.caller; // throws a TypeError\n    }\n    fun(1, 2); // doesn't expose v (or a or b)\n    \n\n### Paving the way for future ECMAScript versions\n\nFuture ECMAScript versions will likely introduce new syntax, and strict mode\nin ECMAScript 5 applies some restrictions to ease the transition. It will be\neasier to make some changes if the foundations of those changes are prohibited\nin strict mode.\n\nFirst, in strict mode a short list of identifiers become reserved keywords.\nThese words are `implements`, `interface`, `let`, `package`, `private`,\n`protected`, `public`, `static`, and `yield`. In strict mode, then, you can't\nname or use variables or arguments with these names.\n\n    \n    \n    function package(protected){ // !!!\n      \"use strict\";\n      var implements; // !!!\n    \n      interface: // !!!\n      while (true){\n        break interface; // !!!\n      }\n    \n      function private() { } // !!!\n    }\n    function fun(static) { 'use strict'; } // !!!\n    \n    \n\nTwo Mozilla-specific caveats: First, if your code is JavaScript 1.7 or greater\n(for example in chrome code or when using the right `<script type=\"\">`) and is\nstrict mode code, `let` and `yield` have the functionality they've had since\nthose keywords were first introduced. But strict mode code on the web, loaded\nwith `<script src=\"\">` or `<script>...</script>`, won't be able to use\n`let`/`yield` as identifiers. Second, while ES5 unconditionally reserves the\nwords `class`, `enum`, `export`, `extends`, `import`, and `super`, before\nFirefox 5 Mozilla reserved them only in strict mode.\n\nSecond, [strict mode prohibits function statements not at the top level of a\nscript or function][12]. In normal code in browsers, function statements are\npermitted \"everywhere\". _This is not part of ES5 (or even ES3)!_ It's an\nextension with incompatible semantics in different browsers. Future ECMAScript\neditions will hopefully specify new semantics for function statements not at\nthe top level of a script or function. [Prohibiting such function statements\nin strict mode][13] \"clears the deck\" for specification in a future ECMAScript\nrelease:\n\n    \n    \n    \"use strict\";\n    if (true){\n      function f() { } // !!! syntax error\n      f();\n    }\n    \n    for (var i = 0; i < 5; i++){\n      function f2() { } // !!! syntax error\n      f2();\n    }\n    \n    function baz(){ // kosher\n      function eit() { } // also kosher\n    }\n    \n\nThis prohibition isn't strict mode proper, because such function statements\nare an extension of basic ES5. But it is the recommendation of the ECMAScript\ncommittee, and browsers will implement it.\n\n## Strict mode in browsers\n\nThe major Browsers now implement strict mode. However, don't blindly depend on\nit since there is still a considerable amount of [Browser versions used in the\nwild which has only partial support for strict mode][14] or does not support\nit at all (e.g. Internet Explorer below version 10!). _Strict mode changes\nsemantics._ Relying on those changes will cause mistakes and errors in\nbrowsers which don't implement strict mode. Exercise caution in using strict\nmode, and back up reliance on strict mode with feature tests that check\nwhether relevant parts of strict mode are implemented. Finally, make sure to\n_test your code in browsers that do and don't support strict mode_. If you\ntest only in browsers that don't support strict mode, you're very likely to\nhave problems in browsers that do, and vice versa.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Strict Mode Code' in that specification.][15]  \n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Strict mode restriction and exceptions' in that\nspecification.][16]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Strict Mode Code' in that specification.][17]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Strict mode restriction and exceptions' in that\nspecification.][18]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## See also\n\n  * [Where's Walden? \u00bb New ES5 strict mode support: now with poison pills!][19]\n  * [Where's Walden? \u00bb New ES5 strict mode requirement: function statements not at top level of a program or function are prohibited][12]\n  * [Where's Walden? \u00bb New ES5 strict mode support: new vars created by strict mode eval code are local to that code only][7]\n  * [John Resig - ECMAScript 5 Strict Mode, JSON, and More][20]\n  * [ECMA-262-5 in detail. Chapter 2. Strict Mode.][21]\n  * [Strict mode compatibility table][22]\n  * [Transitioning to strict mode][2]\n\n[1]: http://www.ecma-international.org/publications/standards/Ecma-262.htm\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\n\n[3]: /en-US/docs/Web/API/WindowTimers.setTimeout\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=579119\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=627531\n\n[6]: /en-US/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[7]: http://whereswalden.com/2011/01/10/new-es5-strict-mode-support-new-vars-created-by-strict-mode-eval-code-are-local-to-that-code-only/\n\n[8]: /en-US/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[9]: /en-US/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[10]: /en-US/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[11]: http://stuff.mit.edu/iap/2008/facebook/\n\n[12]: http://whereswalden.com/2011/01/24/new-es5-strict-mode-requirement-function-statements-not-at-top-level-of-a-program-or-function-are-prohibited/\n\n[13]: http://wiki.ecmascript.org/doku.php?id=conventions:no_non_standard_strict_decls\n\n[14]: http://caniuse.com/use-strict\n\n[15]: http://www.ecma-international.org/ecma-262/5.1/#sec-10.1.1\n\n[16]: http://www.ecma-international.org/ecma-262/5.1/#sec-C\n\n[17]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-strict-mode-code\n\n[18]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-strict-mode-of-ecmascript\n\n[19]: http://whereswalden.com/2010/09/08/new-es5-strict-mode-support-now-with-poison-pills/\n\n[20]: http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\n\n[21]: http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\n\n[22]: http://kangax.github.io/compat-table/es5/#Strict_mode\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "Comma operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/comma_operator", "content": "## Summary\n\nThe** comma operator** evaluates each of its operands (from left to right)\u00a0and\nreturns the value of the last operand.\n\n## Syntax\n\n    \n    \n    _expr1_, _expr2, expr3..._\n\n## Parameters\n\n`expr1`, `expr2, expr3...`\n\n     Any expressions.\n\n## Description\n\nYou can use the comma operator when you want to include multiple expressions\nin a location that requires a single expression. The most common usage of this\noperator is to supply multiple parameters in a `for` loop.\n\n## Example\n\nIf `a` is a 2-dimensional array with 10 elements on a side, the following code\nuses the comma operator to increment two variables at once. Note that the\ncomma in the `var` statement is _**not**_ the comma operator, because it\ndoesn't exist within an expression. Rather, it is a special character in `var`\nstatements to combine multiple of them into one. Practically, that comma\nbehaves almost the same as the comma operator, though. The code prints the\nvalues of the diagonal elements in the array:\n\n    \n    \n    for (var i = 0, j = 9; i <= 9; i++, j--)\n      document.writeln(\"a[\" + i + \"][\" + j + \"] = \" + a[i][j]);\n\n### Processing and then returning\n\nAnother example that one could make with comma operator is processing before\nreturning. As stated, only the last element will be returned but all others\nare going to be evaluated as well. So, one could do:\n\n    \n    \n    function myFunc () {\n      var x = 0;\n    \n      return (x += 1, x); // the same of return ++x;\n    }\n\n##\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Comma operator' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Comma operator' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\n3.0\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td>  \n<td>\n\nYes\n\n</td> </tr> </table>\n\n## See also\n\n  * [for loop][3]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.14\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-comma-operator\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Destructuring assignment", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/destructuring_assignment", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **destructuring assignment** syntax is a JavaScript expression that makes\nit possible to extract data from arrays or objects using a syntax that mirrors\nthe construction of array and object literals.\n\n## Syntax\n\n    \n    \n    [a, b] = [1, 2]\n    {a, b} = {a:1, b:2}\n    \n\n## Description\n\nThe object and array literal expressions provide an easy way to create ad-hoc\npackages of data. Once you've created these packages of data, you can use them\nany way you want to. You can even return them from functions.\n\nOne particularly useful thing you can do with destructuring assignment is to\nread an entire structure in a single statement, although there are a number of\ninteresting things you can do with them, as shown in the section full of\nexamples that follows.\n\nThis capability is similar to features present in languages such as Perl and\nPython.\n\n## Array destructuring\n\n### Simple example\n\n    \n    \n    var foo = [\"one\", \"two\", \"three\"];\n    \n    // without destructuring\n    var one   = foo[0];\n    var two   = foo[1];\n    var three = foo[2];\n    \n    // with destructuring\n    var [one, two, three] = foo;\n\n### Swapping variables\n\nAfter executing this code, b is 1 and a is 3. Without destructuring\nassignment, swapping two values requires a temporary variable (or, in some\nlow-level languages, the [XOR-swap trick][1]).\n\n    \n    \n    var a = 1;\n    var b = 3;\n    \n    [a, b] = [b, a];\n\n### Multiple-value returns\n\nThanks to destructuring assignment, functions can return multiple values.\nWhile it's always been possible to return an array from a function, this\nprovides an added degree of flexibility.\n\n    \n    \n    function f() {\n      return [1, 2];\n    }\n    \n\nAs you can see, returning results is done using an array-like notation, with\nall the values to return enclosed in brackets. You can return any number of\nresults in this way. In this example, `f()` returns the values [`1, 2]` as its\noutput.\n\n    \n    \n    var a, b;\n    [a, b] = f();\n    console.log(\"A is \" + a + \" B is \" + b);\n    \n\nThe statement [`a, b] = f()` assigns the results of the function to the\nvariables in brackets, in order: a is set to 1 and b is set to 2.\n\nYou can also retrieve the return values as an array:\n\n    \n    \n    var a = f();\n    console.log(\"A is \" + a);\n    \n\nIn this case, a is an array containing the values 1 and 2.\n\n### Ignoring some returned values\n\nYou can also ignore return values that you're not interested in:\n\n    \n    \n    function f() {\n      return [1, 2, 3];\n    }\n    \n    var [a, , b] = f();\n    console.log(\"A is \" + a + \" B is \" + b);\n    \n\nAfter running this code, a is 1 and b is 3. The value 2 is ignored. You can\nignore any (or all) returned values this way. For example:\n\n    \n    \n    [,,] = f();\n    \n\n### Pulling values from a regular expression match\n\nWhen the regular expression [` exec()][2]` method finds a match, it returns an\narray containing first the entire matched portion of the string and then the\nportions of the string that matched each parenthesized group in the regular\nexpression. Destructuring assignment allows you to pull the parts out of this\narray easily, ignoring the full match if it is not needed.\n\n    \n    \n    var url = \"https://developer.mozilla.org/en-US/Web/JavaScript\";\n    \n    var parsedURL = /^(\\w+)\\:\\/\\/([^\\/]+)\\/(.*)$/.exec(url);\n    var [, protocol, fullhost, fullpath] = parsedURL;\n    \n    console.log(protocol); // logs \"https:\"\n    \n\n## Object destructuring\n\n### Simple example\n\n    \n    \n    var o = {p: 42, q: true};\n    var {p, q} = o;\n    \n    console.log(p); // 42\n    console.log(q); // true \n    \n    // Assign new variable names\n    var {p: foo, q: bar} = o;\n    \n    console.log(foo); // 42\n    console.log(bar); // true \n    \n\n### Module loading\n\nDestructuring can help to load specific subsets of a module like here in the\n[Add-on SDK][3]:\n\n    \n    \n    const { Loader, main } = require('toolkit/loader');\n    \n\n### Nested object and array destructuring\n\n    \n    \n    var metadata = {\n    \u00a0\u00a0\u00a0 title: \"Scratchpad\",\n    \u00a0\u00a0\u00a0 translations: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 locale: \"de\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 localization_tags: [ ],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 last_edit: \"2014-04-14T08:43:37\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 url: \"/de/docs/Tools/Scratchpad\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 title: \"JavaScript-Umgebung\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n    \u00a0\u00a0\u00a0 ],\n    \u00a0\u00a0\u00a0 url: \"/en-US/docs/Tools/Scratchpad\"\n    };\n    \n    var { title: englishTitle, translations: [{ title: localeTitle }] } = metadata;\n    \n    console.log(englishTitle); // \"Scratchpad\"\n    console.log(localeTitle);\u00a0 // \"JavaScript-Umgebung\"\n\n### For of iteration and destructuring\n\n    \n    \n    var people = [\n    \u00a0 {\n    \u00a0\u00a0\u00a0 name: \"Mike Smith\",\n    \u00a0\u00a0\u00a0 family: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 mother: \"Jane Smith\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0 father: \"Harry Smith\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0 sister: \"Samantha Smith\"\n    \u00a0\u00a0\u00a0 },\n    \u00a0\u00a0\u00a0 age: 35\n    \u00a0 },\n    \u00a0 {\n    \u00a0\u00a0\u00a0 name: \"Tom Jones\",\n    \u00a0\u00a0\u00a0 family: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 mother: \"Norah Jones\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0 father: \"Richard Jones\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0 brother: \"Howard Jones\"\n    \u00a0\u00a0\u00a0 },\n    \u00a0\u00a0\u00a0 age: 25\n    \u00a0 }\n    ];\n    \n    for (var {name: n, family: { father: f } } of people) {\n      console.log(\"Name: \" + n + \", Father: \" + f);\n    }\n    \n    // \"Name: Mike Smith, Father: Harry Smith\"\n    // \"Name: Tom Jones, Father: Richard Jones\"\n\n### Pulling fields from objects passed as function parameter\n\n    \n    \n    function userId({id}) {\n      return id;\n    }\n    \n    function whois({displayName: displayName, fullName: {firstName: name}}){\n      console.log(displayName + \" is \" + name);\n    }\n    \n    var user = { \n      id: 42, \n      displayName: \"jdoe\",\n      fullName: { \n          firstName: \"John\",\n          lastName: \"Doe\"\n      }\n    };\n    \n    console.log(\"userId: \" + userId(user)); // \"userId: 42\"\n    whois(user); // \"jdoe is John\"\n\nThis pulls the `id`, `displayName` and `firstName` from the user object and\nprints them.\n\n### Computed object property names and destructuring\n\nComputed property names, like on [object literals][4], can be used with\ndestructuring.\n\n    \n    \n    let key = \"z\";\n    let { [key]: foo } = { z: \"bar\" };\n    \n    console.log(foo); // \"bar\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Destructuring assignment' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[2.0][7] (1.8.1)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][8] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### Firefox-specific notes\n\n  * The [spread operator][9] does not yet work with destructuring [`h, ...t] = [1, 2, 3]` ([bug\u00a0933276][10]).\n  * Default values for destructuring assignments are not yet implemented: `var { x = 3 } = {}` and `var [foo = \"bar\"] = []`. See ([bug\u00a0932080][11]).\n\n## See also\n\n  * [Assignment operators][12]\n\n[1]: http://en.wikipedia.org/wiki/XOR_swap\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[3]: /en-US/Add-ons/SDK\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-destructuring-assignment\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/2\n\n[8]: /en-US/Firefox/Releases/34\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[10]: https://bugzilla.mozilla.org/show_bug.cgi?id=933276\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=932080\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Intl.DateTimeFormat.supportedLocalesOf()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/supportedLocalesOf", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat/intl.datetimeformat.supportedlocalesof()", "content": "## Summary\n\nThe **`Intl.DateTimeFormat.supportedLocalesOf()`** method returns an array\ncontaining those of the provided locales that are supported in date and time\nformatting without having to fall back to the runtime's default locale.\n\n## Syntax\n\n    \n    \n    Intl.DateTimeFormat.supportedLocalesOf(locales[, options])\n\n### Parameters\n\n`locales`\n\n    A string with a BCP 47 language tag, or an array of such strings. For the general form of the `locales` argument, see the [Intl page][1].\n`options`\n\n    \n\nOptional. An object that may have the following property:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n\n## Description\n\nReturns an array with a subset of the language tags provided in `locales`. The\nlanguage tags returned are those for which the runtime supports a locale in\ndate and time formatting that the locale matching algorithm used considers a\nmatch, so that it wouldn't have to fall back to the default locale.\n\n## Examples\n\n### Example: Using `supportedLocalesOf`\n\nAssuming a runtime that supports Indonesian and German but not Balinese in\ndate and time formatting, `supportedLocalesOf` returns the Indonesian and\nGerman language tags unchanged, even though pinyin collation is neither\nrelevant to date and time formatting nor used with Indonesian, and a\nspecialized German for Indonesia is unlikely to be supported. Note the\nspecification of the `\"lookup\"` algorithm here\u00a0\u2014 a `\"best fit\"` matcher might\ndecide that Indonesian is an adequate match for Balinese since most Balinese\nspeakers also understand Indonesian, and therefore return the Balinese\nlanguage tag as well.\n\n    \n    \n    var locales = ['ban', 'id-u-co-pinyin', 'de-ID'];\n    var options = { localeMatcher: 'lookup' };\n    console.log(Intl.DateTimeFormat.supportedLocalesOf(locales, options).join(', '));\n    // \u2192 \"id-u-co-pinyin, de-ID\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.DateTimeFormat.supportedLocalesOf' in that\nspecification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][4] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][5]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.DateTimeFormat`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: http://www.ecma-international.org/ecma-402/1.0/#sec-12.2.2\n\n[4]: /en-US/Firefox/Releases/29\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.DateTimeFormat"], "type": "method"},
{"name": "Conditional (ternary) Operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/conditional_(ternary)_operator", "content": "## Summary\n\nThe **conditional (ternary) operator** is the only JavaScript operator that\ntakes three operands. This operator is frequently used as a shortcut for the\n[`if`][1] statement.\n\n## Syntax\n\n    \n    \n    _condition_ ? _expr1_ : _expr2_ \n\n## Parameters\n\n`condition`\n\n     An expression that evaluates to `true` or `false`.\n\n`expr1`, `expr2`\n\n     Expressions with values of any type.\n\n## Description\n\nIf `condition` is `true`, the operator returns the value of `expr1`;\notherwise, it returns the value of `expr2`. For example, to display a\ndifferent message based on the value of the `isMember` variable, you could use\nthis statement:\n\n    \n    \n    \"The fee is \" + (isMember ? \"$2.00\" : \"$10.00\")\n    \n\nYou can also assign variables depending on a ternary result:\n\n    \n    \n    var elvisLives = Math.PI > 4 ? \"Yep\" : \"Nope\";\n\nMultiple ternary evaluations are also possible (note: the conditional operator\nis right associative):\n\n    \n    \n    var hadRelations = false,\n      isSure = false,\n      presidentQuote = hadRelations ? \"Had relations\" : isSure ? \"Did not have relations\" : \"I admit\";\n      \n    console.log( presidentQuote ); // Prints \"I admit\" in the console\n\nYou can also use ternary evaluations in free space in order to do different\noperations:\n\n    \n    \n    var bStop = false, nAge = 16;\n    \n    nAge > 18 ? location.assign(\"continue.html\") : bStop = true;\n    \n\nYou can also do more than one single operation per case, separating them with\na comma:\n\n    \n    \n    var bStop = false, nAge = 23;\n    \n    nAge > 18 ? (\n        alert(\"Ok, you can go.\"),\n        location.assign(\"continue.html\")\n    ) : (\n        bStop = true,\n        alert(\"Sorry, you are much too young!\")\n    );\n    \n\nYou can also do more than one operation during the assignation of a value. In\nthis case, **_the last comma-separated value of the parenthesis_ will be the\nvalue to be assigned**.\n\n    \n    \n    var nAge = 16;\n    \n    var sURL = nAge > 18 ? (\n        alert(\"Ok, you can go.\"), \n        // alert returns \"undefined\", but it will be ignored because\n        // isn't the last comma-separated value of the parenthesis\n        \"continue.html\" // the value to be assigned if nAge > 18\n    ) : (\n        alert(\"You are much too young!\"),\n        alert(\"Sorry :-(\"),\n        // etc. etc.\n        \"stop.html\" // the value to be assigned if !(nAge > 18)\n    );\n    \n    location.assign(sURL); // \"stop.html\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The conditional operator' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Conditional Operator' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [if statement][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.12\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-conditional-operator\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "instanceof", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/instanceof", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/instanceof", "content": "## Summary\n\nThe `instanceof` operator tests whether an object has in its prototype chain\nthe `prototype` property of a constructor.\n\n## Syntax\n\n    \n    \n    _object_ instanceof _constructor_\n\n### Parameters\n\n`object`\n\n     The object to test.\n\n`constructor`\n\n     Function to test against\n\n## Description\n\nThe `instanceof` operator tests presence of `constructor.prototype` in\n`object` prototype chain.\n\n    \n    \n    // defining constructors\n    function C(){}\n    function D(){}\n    \n    var o = new C();\n    \n    // true, because: Object.getPrototypeOf(o) === C.prototype\n    o instanceof C;\n    \n    // false, because D.prototype is nowhere in o's prototype chain\n    o instanceof D;\n    \n    o instanceof Object; // true, because:\n    C.prototype instanceof Object // true\n    \n    C.prototype = {};\n    var o2 = new C();\n    \n    o2 instanceof C; // true\n    \n    // false, because C.prototype is nowhere in\n    // o's prototype chain anymore\n    o instanceof C; \n    \n    D.prototype = new C(); // use inheritance\n    var o3 = new D();\n    o3 instanceof D; // true\n    o3 instanceof C; // true\n    \n\nNote that if the value of an `instanceof` test can change based on changes to\nthe `prototype` property of constructors, it cannot be changed by changing an\nobject prototype, because changing an object prototype is not possible in\nstandard ECMAScript. It is however possible using the non-standard `__proto__`\npseudo-property.\n\n### `instanceof` and multiple context (e.g. frames or windows)\n\nDifferent scope have different execution environments. This means that they\nhave different built-ins (different global object, different constructors,\netc.). This may result in unexpected results. For instance, [`] instanceof\nwindow.frames[0].Array` will return `false`, because `Array.prototype !==\n``window.frames[0].Array` and arrays inherit from the former. This may not\nmake sense at first but when you start dealing with multiple frames or windows\nin your script and pass objects from one context to another via functions,\nthis will be a valid and strong issue. For instance, you can securely check if\na given object is in fact an Array using `Array.isArray(myObj)`\n\n**Note for Mozilla developers:**  \nIn code using XPCOM `instanceof` has special effect: `obj instanceof\n`_`xpcomInterface`_ (e.g. `Components.interfaces.nsIFile`) calls\n`obj.QueryInterface(_xpcomInterface_)` and returns `true` if QueryInterface\nsucceeded. A side effect of such call is that you can use _`xpcomInterface`_'s\nproperties on `obj` after a successful `instanceof` test. Unlike standard\nJavaScript globals, the test `obj instanceof xpcomInterface `works as expected\neven if `obj` is from a different scope.\n\n## Examples\n\n### Example: Demonstrating that `String` and `Date` are of type `Object` and\nexceptional cases\n\nThe following code uses `instanceof` to demonstrate that `String` and `Date`\nobjects are also of type `Object` (they are derived from `Object`).\n\nHowever, objects created with the object literal notation are an exception\nhere: Although the prototype is undefined, `instanceof Object` returns `true`.\n\n    \n    \n    var simpleStr = \"This is a simple string\"; \n    var myString  = new String();\n    var newStr    = new String(\"String created with constructor\");\n    var myDate    = new Date();\n    var myObj     = {};\n    \n    simpleStr instanceof String; // returns false, checks the prototype chain, finds undefined\n    myString  instanceof String; // returns true\n    newStr    instanceof String; // returns true\n    myString  instanceof Object; // returns true\n    \n    myObj instanceof Object;    // returns true, despite an undefined prototype\n    ({})  instanceof Object;    // returns true, same case as above\n    \n    myString instanceof Date;   // returns false\n    \n    myDate instanceof Date;     // returns true\n    myDate instanceof Object;   // returns true\n    myDate instanceof String;   // returns false\n    \n\n### Example: Demonstrating that `mycar` is of type `Car` and type `Object`\n\nThe following code creates an object type `Car` and an instance of that object\ntype, `mycar`. The `instanceof` operator demonstrates that the `mycar` object\nis of type `Car` and of type `Object`.\n\n    \n    \n    function Car(make, model, year) {\n      this.make = make;\n      this.model = model;\n      this.year = year;\n    }\n    var mycar = new Car(\"Honda\", \"Accord\", 1998);\n    var a = mycar instanceof Car;    // returns true\n    var b = mycar instanceof Object; // returns true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.4\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The instanceof operator' in that specification.][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Relational Operators' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [typeof][3]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.8.6\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-relational-operators\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Intl.DateTimeFormat.prototype.resolvedOptions()", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat/intl.datetimeformat.prototype.resolvedoptions()", "content": "## Summary\n\nThe **`Intl.DateTimeFormat.prototype.resolvedOptions()`** method returns a new\nobject with properties reflecting the locale and date and time formatting\noptions computed during initialization of this [`DateTimeFormat`][1] object.\n\n## Syntax\n\n    \n    \n    dateTimeFormat.resolvedOptions()\n\n## Description\n\nReturns a new object with properties reflecting the locale and date and time\nformatting options computed during initialization of this\n[`DateTimeFormat`][1] object. The object has the following properties:\n\n`locale`\n\n    The BCP 47 language tag for the locale actually used. If any Unicode extension values were requested in the input BCP 47 language tag that led to this locale, the key-value pairs that were requested and are supported for this locale are included in `locale`.\n`calendar`\n\n`numberingSystem`\n\n    The values requested using the Unicode extension keys `\"ca\"` and `\"nu\"` or filled in as default values.\n`timeZone`\n\n    The value provided for this property in the `options` argument; [`undefined`][2] (representing the runtime's default time zone) if none was provided. Warning: Applications should not rely on [`undefined`][2] being returned, as future versions may return a [`String`][3] value identifying the runtime\u2019s default time zone instead.\n`hour12`\n\n    The value provided for this property in the `options` argument or filled in as a default.\n`weekday`\n\n`era`\n\n`year`\n\n`month`\n\n`day`\n\n`hour`\n\n`minute`\n\n`second`\n\n`timeZoneName`\n\n    The values resulting from format matching between the corresponding properties in the `options` argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.DateTimeFormat.prototype.resolvedOptions' in that\nspecification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][5] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][6]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.DateTimeFormat`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#sec-12.3.3\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.DateTimeFormat"], "type": "method"},
{"name": "Intl.DateTimeFormat.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat/intl.datetimeformat.prototype", "content": "## Summary\n\nThe **`Intl.DateTimeFormat.prototype`** property represents the prototype\nobject for the [`Intl.DateTimeFormat`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Intl.DateTimeFormat.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nSee [`DateTimeFormat`][1] for a description of `Intl.DateTimeFormat`\ninstances.\n\n[`Intl.DateTimeFormat`][1] instances inherit from\n`Intl.DateTimeFormat.prototype`. Modifications to the prototype object are\ninherited by all [`Intl.DateTimeFormat`][1] instances.\n\n## Properties\n\n`Intl.DateTimeFormat.prototype.constructor`\n\n     A reference to [`Intl.DateTimeFormat`][1].\n[`Intl.DateTimeFormat.prototype.format`][2]\n\n     Getter; returns a function that formats a date according to the locale and formatting options of this [`DateTimeFormat`][1] object.\n\n## Methods\n\n[`Intl.DateTimeFormat.prototype.resolvedOptions()`][3]\n\n     Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.DateTimeFormat.prototype' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][5] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][6]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Intl.DateTimeFormat`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#sec-12.2.1\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Intl.DateTimeFormat"], "type": "property"},
{"name": "in operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/in", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/in_operator", "content": "## Summary\n\nThe `in` operator returns `true` if the specified property is in the specified\nobject.\n\n## Syntax\n\n    \n    \n    _prop_ in _objectName_ \n\n### Parameters\n\n`prop`\n\n     A string or numeric expression representing a property name or array index.\n\n`objectName`\n\n     Name of an object.\n\n## Description\n\nThe following examples show some uses of the `in` operator.\n\n    \n    \n    // Arrays\n    var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\");\n    0 in trees        // returns true\n    3 in trees        // returns true\n    6 in trees        // returns false\n    \"bay\" in trees    // returns false (you must specify the \n                      // index number, not the value at that index)\n    \"length\" in trees // returns true (length is an Array property)\n    \n    // Predefined objects\n    \"PI\" in Math          // returns true\n    \n    // Custom objects\n    var mycar = {make: \"Honda\", model: \"Accord\", year: 1998};\n    \"make\" in mycar  // returns true\n    \"model\" in mycar // returns true\n    \n\nYou must specify an object on the right side of the `in` operator. For\nexample, you can specify a string created with the `String` constructor, but\nyou cannot specify a string literal.\n\n    \n    \n    var color1 = new String(\"green\");\n    \"length\" in color1 // returns true\n    \n    var color2 = \"coral\";\n    // generates an error (color2 is not a String object)\n    \"length\" in color2\n    \n\n### Using `in` with deleted or undefined properties\n\nIf you delete a property with the [`delete][1]` operator, the `in` operator\nreturns `false` for that property.\n\n    \n    \n    var mycar = {make: \"Honda\", model: \"Accord\", year: 1998};\n    delete mycar.make;\n    \"make\" in mycar;  // returns false\n    \n    var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\");\n    delete trees[3];\n    3 in trees; // returns false\n    \n\nIf you set a property to [`undefined`][2] but do not delete it, the `in`\noperator returns true for that property.\n\n    \n    \n    var mycar = {make: \"Honda\", model: \"Accord\", year: 1998};\n    mycar.make = undefined;\n    \"make\" in mycar;  // returns true\n    \n    \n    \n    var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\");\n    trees[3] = undefined;\n    3 in trees; // returns true\n    \n\n### Inherited properties\n\nThe `in` operator returns `true` for properties in the prototype chain.\n\n    \n    \n    \"toString\" in {}; // returns true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.4\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [delete][1]\n  * [Object.prototype.hasOwnProperty][5]\n  * [Enumerability and ownership of properties][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.8.7\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-relational-operators\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n\n[6]: /en-US/docs/Enumerability_and_ownership_of_properties\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "typeof", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/typeof", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/typeof", "content": "## Summary\n\nThe `typeof` operator returns a string indicating the type of the unevaluated\noperand.\n\n## Syntax\n\nThe `typeof` operator is followed by its operand:\n\n    \n    \n    typeof _operand_\n\n### Parameters\n\n`_operand_` is an expression representing the object or [primitive][1] whose\ntype is to be returned.\n\n## Description\n\nThe following table summarizes the possible return values of `typeof`. For\nmore information about types and primitives, see also the [JavaScript data\nstructure][2] page.  \n  \n<table>  \n<tr>  \n<th>\n\nType\n\n</th>  \n<th>\n\nResult\n\n</th> </tr>  \n<tr>  \n<td>\n\nUndefined\n\n</td>  \n<td>\n\n`\"undefined\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nNull\n\n</td>  \n<td>\n\n`\"object\" `(see below)\n\n</td> </tr>  \n<tr>  \n<td>\n\nBoolean\n\n</td>  \n<td>\n\n`\"boolean\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nNumber\n\n</td>  \n<td>\n\n`\"number\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nString\n\n</td>  \n<td>\n\n`\"string\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nSymbol (new in ECMAScript 6)\n\n</td>  \n<td>\n\n`\"symbol\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nHost object (provided by the JS environment)\n\n</td>  \n<td>\n\n_Implementation-dependent_\n\n</td> </tr>  \n<tr>  \n<td>\n\nFunction object (implements [[Call]] in ECMA-262 terms)\n\n</td>  \n<td>\n\n`\"function\"`\n\n</td> </tr>  \n<tr>  \n<td>\n\nAny other object\n\n</td>  \n<td>\n\n`\"object\"`\n\n</td> </tr> </table>\n\n## Examples\n\n### Normal cases\n\n    \n    \n    // Numbers\n    typeof 37 === 'number';\n    typeof 3.14 === 'number';\n    typeof Math.LN2 === 'number';\n    typeof Infinity === 'number';\n    typeof NaN === 'number'; // Despite being \"Not-A-Number\"\n    typeof Number(1) === 'number'; // but never use this form!\n    \n    \n    // Strings\n    typeof \"\" === 'string';\n    typeof \"bla\" === 'string';\n    typeof (typeof 1) === 'string'; // typeof always return a string\n    typeof String(\"abc\") === 'string'; // but never use this form!\n    \n    \n    // Booleans\n    typeof true === 'boolean';\n    typeof false === 'boolean';\n    typeof Boolean(true) === 'boolean'; // but never use this form!\n    \n    \n    // Symbols\n    typeof Symbol() === 'symbol'\n    typeof Symbol('foo') === 'symbol'\n    typeof Symbol.iterator === 'symbol'\n    \n    \n    // Undefined\n    typeof undefined === 'undefined';\n    typeof blabla === 'undefined'; // an undefined variable\n    \n    \n    // Objects\n    typeof {a:1} === 'object';\n    \n    // use [Array.isArray][3] or Object.prototype.toString.call\n    // to differentiate regular objects from arrays\n    typeof [1, 2, 4] === 'object';\n    \n    typeof new Date() === 'object';\n    \n    \n    // The following is confusing. Don't use!\n    typeof new Boolean(true) === 'object'; \n    typeof new Number(1) === 'object'; \n    typeof new String(\"abc\") === 'object';\n    \n    \n    // Functions\n    typeof function(){} === 'function';\n    typeof Math.sin === 'function';\n    \n\n### `null`\n\n    \n    \n    // This stands since the beginning of JavaScript\n    typeof null === 'object';\n    \n\nIn the first implementation of JavaScript, JavaScript values were represented\nas a type tag and a value. The type tag for objects was 0. `null` was\nrepresented as the NULL pointer (0x00 in most platforms). Consequently, null\nhad 0 as type tag, hence the bogus `typeof` return value. ([reference][4])\n\nA fix was proposed for ECMAScript (via an opt-in), but\u00a0[was rejected][5]. It\nwould have resulted in `typeof null === 'null'`.\n\n### Regular expressions\n\nCallable regular expressions were a non-standard addition in some browsers.\n\n    \n    \n    typeof /s/ === 'function'; // Chrome 1-12 Non-conform to ECMAScript 5.1\n    typeof /s/ === 'object';   // Firefox 5+  Conform to ECMAScript 5.1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The typeof Operator' in that specification.][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The typeof Operator' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### IE host objects are objects not functions\n\nOn IE 6, 7, and 8 a lot of host objects are objects and not functions. For\nexample:\n\n    \n    \n    typeof alert === 'object'\n\n## See also\n\n  * [instanceof][8]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Data_structures\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n[4]: http://www.2ality.com/2013/10/typeof-null.html\n\n[5]: http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.3\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-typeof-operator\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "void operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/void", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/void_operator", "content": "## Summary\n\nThe `void` operator evaluates the given `_expression_` and then returns\n`undefined`.\n\n## Syntax\n\n    \n    \n    void _expression_\n\n## Description\n\nThis operator allows inserting expressions that produce side effects into\nplaces where an expression that evaluates to `undefined` is desired.\n\nThe `void` operator is often used merely to obtain the `undefined` primitive\nvalue, usually using \"`void(0)`\" (which is equivalent to \"`void 0`\"). In these\ncases, the global variable [`undefined`][1] can be used instead (assuming it\nhas not been assigned to a non-default value).\n\nWhen wrapping an entire script in an immediately-invoked function expression,\n`void` can be used to force the `function` keyword to be treated as an\nexpression instead of a declaration.\n\n## JavaScript URIs\n\nWhen a browser follows a `javascript:` URI, it evaluates the code in the URI\nand then replaces the contents of the page with the returned value, unless the\nreturned value is `undefined`. The `void` operator can be used to return\n`undefined`. For example:\n\n    \n    \n    <a href=\"javascript:void(0);\">\n      Click here to do nothing\n    </a>\n    \n    <a href=\"javascript:void(document.body.style.backgroundColor='green');\">\n      Click here for green background\n    </a>\n    \n\nNote, however, that the `javascript:` pseudo protocol is discouraged over\nother alternatives, such as unobtrusive event handlers.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The void Operator' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The void Operator' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`undefined][1]`\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-void-operator\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "delete operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/delete", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/delete_operator", "content": "## Summary\n\nThe `delete` operator removes a property from an object.\n\n## Syntax\n\n    \n    \n    delete _expression_ \n\nwhere _expression_ should evaluate to a property reference, e.g.:\n\n    \n    \n    delete _object.property_\n    delete _object_['_property_']\n    \n\n### Parameters\n\n`object`\n\n     The name of an object, or an expression evaluating to an object.\n`property`\n\n     The property to delete.\n\n### Returns\n\nThrows in [strict mode][1] if the property is an own non-configurable property\n(returns `false` in non-strict). Returns `true` in all other cases.\n\n## Description\n\nUnlike what common belief suggests, the `delete` operator has **nothing** to\ndo with directly freeing memory (it only does indirectly via breaking\nreferences. See the [memory management][2] page for more details).\n\nIf the `delete` operator succeeds, it removes the property from the object\nentirely. However, if a property with the same name exists on the object's\nprototype chain, the object will inherit that property from the prototype.\n\n`delete` is only effective on an object's properties. It has no effect on\nvariable or function names.  \nWhile sometimes mis-characterized as global variables, assignments that don't\nspecify an object (e.g. `x = 5`) are actually property assignments on the\nglobal object.\n\n`delete` can't remove certain properties of predefined objects (like Object,\nArray, Math etc). These are described in ECMAScript 5 and later as non-\nconfigurable.\n\n## Examples\n\n    \n    \n    x = 42;         // creates the property x on the global object\n    var y = 43;     // declares a new variable, y\n    myobj = {\n      h: 4,\n      k: 5\n    };\n    \n    // x is a property of the global object and can be deleted\n    delete x;       // returns true\n    \n    // delete doesn't affect variable names                \n    delete y;       // returns false \n    \n    // delete doesn't affect certain predefined properties\n    delete Math.PI; // returns false \n    \n    // user-defined properties can be deleted\n    delete myobj.h; // returns true \n    \n    // myobj is a property of the global object, not a variable,\n    // so it can be deleted\n    delete myobj;   // returns true\n\nIf the object inherits a property from a prototype, and doesn't have the\nproperty itself, the property can't be deleted by referencing the object. You\ncan, however, delete it directly on the prototype.\n\n    \n    \n    function Foo(){}\n    Foo.prototype.bar = 42;\n    var foo = new Foo();\n    \n    // returns true, but with no effect, \n    // since bar is an inherited property\n    delete foo.bar;           \n    \n    // logs 42, property still inherited\n    console.log(foo.bar);\n    \n    // deletes property on prototype\n    delete Foo.prototype.bar; \n    \n    // logs \"undefined\", property no longer inherited\n    console.log(foo.bar);           \n\n### Deleting array elements\n\nWhen you delete an array element, the array length is not affected. This holds\neven if you delete the last element of the array.\n\nWhen the `delete` operator removes an array element, that element is no longer\nin the array. In the following example, `trees[3]` is removed with `delete`.\n\n    \n    \n    var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"];\n    delete trees[3];\n    if (3 in trees) {\n        // this does not get executed\n    }\n\nIf you want an array element to exist but have an undefined value, use the\n`undefined` value instead of the `delete` operator. In the following example,\n`trees[3]` is assigned the value undefined, but the array element still\nexists:\n\n    \n    \n    var trees = [\"redwood\",\"bay\",\"cedar\",\"oak\",\"maple\"];\n    trees[3] = undefined;\n    if (3 in trees) {\n        // this gets executed\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The delete Operator' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The delete Operator' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Cross-browser issues\n\nAlthough ECMAScript makes iteration order of objects implementation-dependent,\nit may appear that all major browsers support an iteration order based on the\nearliest added property coming first (at least for properties not on the\nprototype). However, in the case of Internet Explorer, when one uses `delete`\non a property, some confusing behavior results, preventing other browsers from\nusing simple objects like object literals as ordered associative arrays. In\nExplorer, while the property _value_ is indeed set to undefined, if one later\nadds back a property with the same name, the property will be iterated in its\n_old_ position--not at the end of the iteration sequence as one might expect\nafter having deleted the property and then added it back.\n\nSo if you want to simulate an ordered associative array in a cross-browser\nenvironment, you are forced to either use two separate arrays (one for the\nkeys and the other for the values), or build an array of single-property\nobjects, etc.\n\n## See also\n\n  * [In depth analysis on delete][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[2]: /en-US/docs/Web/JavaScript/Memory_Management\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.1\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-delete-operator\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: http://perfectionkills.com/understanding-delete/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Spread operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/spread_operator", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **spread operator** allows an expression to be expanded in places where\nmultiple arguments (for function calls) or multiple elements (for array\nliterals) are expected.\n\n## Syntax\n\nFor function calls:\n\n    \n    \n    f(...iterableObj);\n    \n\nFor array literals:\n\n    \n    \n    [...iterableObj, 4, 5, 6]\n\n## Examples\n\n### A better apply\n\n**Example:** it is common to use [`Function.prototype.apply`][1] in cases where you want to use an array as arguments to a function.\n    \n    \n    function f(x, y, z) { }\n    var args = [0, 1, 2];\n    f.apply(null, args);\n\nWith ES6 spread you can now write the above as:\n\n    \n    \n    function f(x, y, z) { }\n    var args = [0, 1, 2];\n    f(...args);\n\nAny argument in the argument list can use the spread syntax and it can be used\nmultiple times.\n\n    \n    \n    function f(v, w, x, y, z) { }\n    var args = [0, 1];\n    f(-1, ...args, 2, ...[3]);\n\n### A more powerful array literal\n\n**Example:** Today if you have an array and want to create a new array with the existing one being part of it, the array literal syntax is no longer sufficient and you have to fall back to imperative code, using a combination of `push`, `splice`, `concat`, etc. With spread syntax this becomes much more succinct:\n    \n    \n    var parts = ['shoulder', 'knees'];\n    var lyrics = ['head', ...parts, 'and', 'toes'];\n\nJust like with spread for argument lists `...` can be used anywhere in the\narray literal and it can be used multiple times.\n\n### Apply for new\n\n**Example:** In ES5 it is not possible to compose `new` with `apply` (in ES5 terms `apply` does a [`[Call]]` and not a [`[Construct]]`). In ES6 the spread syntax naturally supports this:\n    \n    \n    var dateFields = readDateFields(database);\n    var d = new Date(...dateFields);\n\n### A better push\n\n**Example:** [`push`][2] is often used to push an array to the end of an existing array. In ES5 this is often done as:\n    \n    \n    var arr1 = [0, 1, 2];\n    var arr2 = [3, 4, 5];\n    // Append all items from arr2 onto arr1\n    Array.prototype.push.apply(arr1, arr2);\n\nIn ES6 with spread this becomes:\n\n    \n    \n    var arr1 = [0, 1, 2];\n    var arr2 = [3, 4, 5];\n    arr1.push(...arr2);\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array Initializer' in that specification.][3]  \n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Argument Lists' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n  * 12.2.4 Array Initializer\n  * 12.3.6 Argument Lists\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nSpread operation in array literals\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[v8 issue 3018][6]\n\n</td>  \n<td>\n\n[16][7] (16)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nSpread operation in function calls\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[v8 issue 3018][6]\n\n</td>  \n<td>\n\n[27][8] (27)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nSpread operation in array literals\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n16.0 (16)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nSpread operation in function calls\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n27.0 (27)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [Rest parameters][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array-initializer\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-argument-lists\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: https://code.google.com/p/v8/issues/detail?id=3018\n\n[7]: /en-US/Firefox/Releases/16\n\n[8]: /en-US/Firefox/Releases/27\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/rest_parameters\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "new operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/new", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/new_operator", "content": "## Summary\n\nThe `new` operator creates an instance of a user-defined object type or of one\nof the built-in object types that has a constructor function.\n\n## Syntax\n\n    \n    \n    new _constructor_[([_arguments_])]\n\n### Parameters\n\n`constructor`\n\n     A function that specifies the type of the object instance.\n\n`arguments`\n\n     A list of values that the `constructor` will be called with.\n\n## Description\n\nCreating a user-defined object requires two steps:\n\n  1. Define the object type by writing a function.\n  2. Create an instance of the object with `new`.\n\nTo define an object type, create a function for the object type that specifies\nits name and properties. An object can have a property that is itself another\nobject. See the examples below.\n\nWhen the code `new _foo_(...)` is executed, the following things happen:\n\n  1. A new object is created, inheriting from `_foo_.prototype`.\n  2. The constructor function `_foo_` is called with the specified arguments and [`this][1]` bound to the newly created object. `new _foo_` is equivalent to `new _foo_()`, i.e. if no argument list is specified, `_foo_` is called without arguments.\n  3. The object returned by the constructor function becomes the result of the whole `new` expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead. (Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)\n\nYou can always add a property to a previously defined object. For example, the\nstatement `car1.color = \"black\"` adds a property `color` to `car1`, and\nassigns it a value of \"`black`\". However, this does not affect any other\nobjects. To add the new property to all objects of the same type, you must add\nthe property to the definition of the `Car` object type.\n\nYou can add a shared property to a previously defined object type by using the\n[`Function.prototype][2]` property. This defines a property that is shared by\nall objects created with that function, rather than by just one instance of\nthe object type. The following code adds a color property with value `null` to\nall objects of type `car`, and then overwrites that value with the string\n\"`black`\" only in the instance object `car1`. For more information, see\n[prototype][2].\n\n    \n    \n     function Car() {}\n     car1 = new Car()\n     \n     alert(car1.color)           // undefined\n     \n     Car.prototype.color = null\n     alert(car1.color)           // null\n     \n     car1.color = \"black\"\n     alert(car1.color)           // black\n    \n\n## Examples\n\n### Example: Object type and object instance\n\nSuppose you want to create an object type for cars. You want this type of\nobject to be called `car`, and you want it to have properties for make, model,\nand year. To do this, you would write the following function:\n\n    \n    \n    function car(make, model, year) {\n       this.make = make;\n       this.model = model;\n       this.year = year;\n    }\n    \n\nNow you can create an object called `mycar` as follows:\n\n    \n    \n    var mycar = new car(\"Eagle\", \"Talon TSi\", 1993);\n    \n\nThis statement creates `mycar` and assigns it the specified values for its\nproperties. Then the value of `mycar.make` is the string \"Eagle\", `mycar.year`\nis the integer 1993, and so on.\n\nYou can create any number of `car` objects by calls to `new`. For example:\n\n    \n    \n    var kenscar = new car(\"Nissan\", \"300ZX\", 1992);\n    \n\n### Example: Object property that is itself another object\n\nSuppose you define an object called `person` as follows:\n\n    \n    \n    function person(name, age, sex) {\n       this.name = name;\n       this.age = age;\n       this.sex = sex;\n    }\n    \n\nAnd then instantiate two new `person` objects as follows:\n\n    \n    \n    var rand = new person(\"Rand McNally\", 33, \"M\");\n    var ken = new person(\"Ken Jones\", 39, \"M\");\n    \n\nThen you can rewrite the definition of `car` to include an `owner` property\nthat takes a person object, as follows:\n\n    \n    \n    function car(make, model, year, owner) {\n       this.make = make;\n       this.model = model;\n       this.year = year;\n       this.owner = owner;\n    }\n    \n\nTo instantiate the new objects, you then use the following:\n\n    \n    \n    var car1 = new car(\"Eagle\", \"Talon TSi\", 1993, rand);\n    var car2 = new car(\"Nissan\", \"300ZX\", 1992, ken);\n    \n\nInstead of passing a literal string or integer value when creating the new\nobjects, the above statements pass the objects `rand` and `ken` as the\nparameters for the owners. To find out the name of the owner of `car2`, you\ncan access the following property:\n\n    \n    \n    car2.owner.name\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The new Operator' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The new Operator' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.2\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-new-operator\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Property Accessors", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/property_accessors", "content": "## Summary\n\nProperty accessors provide access to an object's properties by using the dot\nnotation or the bracket notation.\n\n## Syntax\n\n    \n    \n    object.property\n    object[\"property\"]\n    \n\n## Description\n\nOne can think of an object as an _associative array_ (a.k.a. _map_,\n_dictionary_, _hash_, _lookup table_). The _keys_ in this array are the names\nof the object's properties. It's typical when speaking of an object's\nproperties to make a distinction between properties and methods. However, the\nproperty/method distinction is little more than a convention. A method is\nsimply a property that can be called, for example if it has a reference to a\n[Function][1] instance as its value.\n\nThere are two ways to access properties: dot notation and bracket notation.\n\n### Dot notation\n\n    \n    \n    get = object.property;\n    object.property = set;\n    \n\n`property` must be a valid JavaScript identifier, i.e. a sequence of\nalphanumerical characters, also including the underscore (\"`_`\") and dollar\nsign (\"`$`\"), that cannot start with a number. For example, `object.$1` is\nvalid, while `object.1` is not.\n\n#### Example:\n\n    \n    \n    document.createElement('pre');\n    \n\nHere, the method named \"createElement\" is retrieved from `document` and is\ncalled.\n\n### Bracket notation\n\n    \n    \n    get = object[property_name];\n    object[property_name] = set;\n    \n\n`property_name` is a string. The string does not have to be a valid\nidentifier; it can have any value, e.g. \"1foo\", \"!bar!\", or even \" \" (a\nspace).\n\n#### Example:\n\n    \n    \n    document['createElement']('pre');\n    \n\nThis does the exact same thing as the previous example.\n\n### Property names\n\nProperty names must be strings. This means that non-string objects cannot be\nused as keys in the object. Any non-string object, including a number, is\ntypecasted into a string via the [toString][2] method.\n\n#### Examples:\n\n    \n    \n    var object = {};\n    object['1'] = 'value';\n    alert(object[1]);\n    \n\nThis outputs \"value\", since 1 is typecasted into '1'.\n\n    \n    \n    var foo = {unique_prop: 1}, bar = {unique_prop: 2}, object = {};\n    object[foo] = 'value';\n    alert(object[bar]);\n    \n\nThis also outputs \"value\", since both foo and bar are converted to the same\nstring. In the [SpiderMonkey][3] JavaScript engine, this string would be\n\"['object Object']\".\n\n### Method binding\n\nA method is not bound to the object that it is a method of. Specifically,\n`this` is not fixed in a method, i.e., `this` does not necessarily refer to an\nobject containing the method. `this` is instead \"passed\" by the function call.\nSee [method binding][4].\n\n### Note on `eval`\n\nJavaScript novices often make the mistake of using [eval][5] where the bracket\nnotation can be used instead. For example, the following syntax is often seen\nin many scripts.\n\n    \n    \n    x = eval('document.forms.form_name.elements.' + strFormControl + '.value');\n    \n\n`eval` is slow and should be avoided whenever possible. Also, `strFormControl`\nwould have to hold an identifier, which is not required for names and IDs of\nform controls. It is better to use bracket notation instead:\n\n    \n    \n    x = document.forms[\"form_name\"].elements[strFormControl].value;\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][6]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Object`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/this#Method_binding\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[6]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-property-accessors\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "TypedArray.prototype.subarray()", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.subarray()", "content": "## Summary\n\nThe `subarray()` method returns a new _TypedArray_ on the same\n[`ArrayBuffer`][1] store and with the same element types as for this\n_TypedArray_ object. The `begin` offset is **inclusive** and the `end` offset\nis **exclusive**. _TypedArray_ is one of the [typed array types][2].\n\n## Syntax\n\n    \n    \n    typedarray.subarray([begin [,end]])\n    \n\n### Parameters\n\nbegin Optional\n\n     Element to begin at. The offset is inclusive.\nend Optional\n\n     Element to end at. The offset is exclusive. If not specified, all elements from the one specified by `begin` to the end of the array are included in the new view.\n\n## Description\n\nThe range specified by `begin` and `end` is clamped to the valid index range\nfor the current array; if the computed length of the new array would be\nnegative, it's clamped to zero. If either `begin` or `end` is negative, it\nrefers to an index from the end of the array instead of from the beginning.\n\nAlso note that this is creating a new view on the existing buffer; changes to\nthe new object's contents will impact the original object and vice versa.\n\n## Examples\n\n### Using the `subarray` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var uint8 = new Uint8Array(buffer);\n    uint8.set([1,2,3]);\n    \n    console.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\n    \n    var sub = uint8.subarray(0,4);\n    \n    console.log(sub);   // Uint8Array [ 1, 2, 3, 0 ]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.subarray' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][5] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][6]\n  * [`TypedArray`][7]\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-%typedarray%.prototype.subarray\n\n[5]: /en-US/Firefox/Releases/4\n\n[6]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "method"},
{"name": "TypedArray.prototype.set()", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.set()", "content": "## Summary\n\nThe **`set()`** method stores multiple values in the typed array, reading\ninput values from a specified array.\n\n## Syntax\n\n    \n    \n    typedarr.set(array [,offset])\n    typedarr.set(typedarray [,offset])\n    \n\n### Parameters\n\narray\n\n     The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.\ntypedarray\n\n     If the source array is a typed array, the two arrays may share the same underlying [`ArrayBuffer`][1]; the browser will intelligently copy the source range of the buffer to the destination range.\noffset Optional\n\n     The offset into the target array at which to begin writing values from the source `array`. If you omit this value, 0 is assumed (that is, the source `array` will overwrite values in the target array starting at index 0).\n\n### Errors thrown\n\n[`RangeError`][2]\n\n     Thrown if the `offset` is set such as it would store beyond the end of the typed array.\n\n## Examples\n\n### Using the `set` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var uint8 = new Uint8Array(buffer);\n    \n    uint8.set([1,2,3], 3);\n    \n    console.log(uint8); // Uint8Array [ 0, 0, 0, 1, 2, 3, 0, 0 ]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.set' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][6] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][7]\n  * [`TypedArray`][8]\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-%typedarray%.prototype.set-array-offset\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/4\n\n[7]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "method"},
{"name": "TypedArray.prototype.move()", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.move()", "content": "**Obsolete since Gecko 34 (Firefox 34 / Thunderbird 34 / SeaMonkey 2.31)**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n## Summary\n\nThe **`move()`** method used to copy the sequence of array elements within the\narray to the position starting at `target`. However, this non-standard method\nhas been replaced with the standard [`TypedArray.prototype.copyWithin()`][1]\nmethod. _TypedArray_ is one of the [typed array types][2] here.\n\n## Syntax\n\n    \n    \n    typedarray.move(start, end, target)\n    \n\n### Parameters\n\nstart\n\n     Source start index position where to start copying elements from.\nend\n\n     Source end index position where to end copying elements from.\ntarget\n\n     Target start index position where to copy the elements to.\n\n## Examples\n\n### Using the `move` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var uint8 = new Uint8Array(buffer);\n    uint8.set([1,2,3]);\n    console.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\n    uint8.move(0,3,3);\n    console.log(uint8); // Uint8Array [ 1, 2, 3, 1, 2, 3, 0, 0 ]\n    \n\n## Specifications\n\nNot part of any standard. Superseded by\n[`TypedArray.prototype.copyWithin()`][1].\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported  \n(16 - 34 Aurora/Nightly only)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported  \n(16-34 Aurora/Nightly only)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][4]\n  * [`TypedArray`][5]\n  * [`ArrayBuffer`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "method"},
{"name": "TypedArray.prototype.copyWithin()", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.copywithin()", "content": "## Summary\n\nThe `**copyWithin()**` method copies the sequence of array elements within the\narray to the position starting at `target`. The copy is taken from the index\npositions of the second and third arguments `start` and `end`. The `end`\nargument is optional and defaults to the length of the array. This method has\nthe same algorithm as [`Array.prototype.copyWithin`][1]_._ _TypedArray_ is one\nof the [typed array types][2] here.\n\n## Syntax\n\n    \n    \n    typedarray.copyWithin(target, start[, end = this.length])\n\n### Parameters\n\n`target`\n\n     Target start index position where to copy the elements to.\n`start`\n\n     Source start index position where to start copying elements from.\n`end Optional`\n\n     Optional. Source end index position where to end copying elements from.\n\n## Description\n\nSee [`Array.prototype.copyWithin`][1] for more details.\n\nThis method replaces the experimental [`TypedArray.prototype.move()`][3].\n\n## Examples\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var uint8 = new Uint8Array(buffer);\n    uint8.set([1,2,3]);\n    console.log(uint8); // Uint8Array [ 1, 2, 3, 0, 0, 0, 0, 0 ]\n    uint8.copyWithin(3,0,3);\n    console.log(uint8); // Uint8Array [ 1, 2, 3, 1, 2, 3, 0, 0 ]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.copyWithin' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][5] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`TypedArray`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-%typedarray%.prototype.copywithin\n\n[5]: /en-US/Firefox/Releases/34\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "method"},
{"name": "TypedArray.prototype.length", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.length", "content": "## Summary\n\nThe **`length`** accessor property represents the length (in elements) of a\ntyped array.\n\n## Syntax\n\n    \n    \n    typedarray.length\n\n## Description\n\nThe `length` property is an accessor property whose set accessor function is\n`undefined`, meaning that you can only read this property. The value is\nestablished when a _TypedArray_ is constructed and cannot be changed. If the\n_TypedArray_ is not specifying an `byteOffset` or a `length`, the length of\nthe referenced [`ArrayBuffer`][1] will be returned. _TypedArray_ is one of the\n[TypedArray objects][2].\n\n## Examples\n\n### Using the `length` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    \n    var uint8 = new Uint8Array(buffer);\n    uint8.length; // 8 (matches the length of the buffer)\n    \n    var uint8 = new Uint8Array(buffer, 1, 5);\n    uint8.length; // 5 (as specified when constructing the Uint8Array)\n    \n    var uint8 = new Uint8Array(buffer, 2);\n    uint8.length; // 6 (due to the offset of the constructed Uint8Array)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.length' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][4] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][5]\n  * [`TypedArray`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-%typedarray%.prototype.length\n\n[4]: /en-US/Firefox/Releases/4\n\n[5]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "TypedArray.prototype.buffer", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.buffer", "content": "## Summary\n\nThe **`buffer`** accessor property represents the [`ArrayBuffer`][1]\nreferenced by a _TypedArray_ at construction time.\n\n## Syntax\n\n    \n    \n    typedArray.buffer\n\n## Description\n\nThe `buffer` property is an accessor property whose set accessor function is\n`undefined`, meaning that you can only read this property. The value is\nestablished when the _TypedArray_ is constructed and cannot be changed.\n_TypedArray_ is one of the [TypedArray objects][2].\n\n## Examples\n\n### Using the `buffer` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var uint16 = new Uint16Array(buffer);\n    uint16.buffer; // ArrayBuffer { byteLength: 8 }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.buffer' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][4] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][5]\n  * [`TypedArray`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-%typedarray%.prototype.buffer\n\n[4]: /en-US/Firefox/Releases/4\n\n[5]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "TypedArray.prototype.byteOffset", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.byteoffset", "content": "## Summary\n\nThe **`byteOffset`** accessor property represents the offset (in bytes) of a\ntyped array from the start of its [`ArrayBuffer`][1].\n\n## Syntax\n\n    \n    \n    typedarray.byteOffset\n\n## Description\n\nThe `byteOffset` property is an accessor property whose set accessor function\nis `undefined`, meaning that you can only read this property. The value is\nestablished when a _TypedArray_ is constructed and cannot be changed._\nTypedArray_ is one of the [TypedArray objects][2].\n\n## Examples\n\n### Using the `byteOffset` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    \n    var uint8 = new Uint8Array(buffer);\n    uint8.byteOffset; // 0 (no offset specified)\n    \n    var uint8 = new Uint8Array(buffer, 3);\n    uint8.byteOffset; // 3 (as specified when constructing Uint8Array)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.byteOffset' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][4] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][5]\n  * [`TypedArray`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-%typedarray%.prototype.byteoffset\n\n[4]: /en-US/Firefox/Releases/4\n\n[5]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "TypedArray.prototype.byteLength", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype.bytelength", "content": "## Summary\n\nThe **`byteLength`** accessor property represents the length (in bytes) of a\ntyped array from the start of its [`ArrayBuffer`][1].\n\n## Syntax\n\n    \n    \n    typedarray.byteLength\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function\nis `undefined`, meaning that you can only read this property. The value is\nestablished when a _TypedArray_ is constructed and cannot be changed. If the\n_TypedArray_ is not specifying an `byteOffset` or a `length`, the `length` of\nthe referenced `ArrayBuffer` will be returned. _TypedArray_ is one of the\n[TypedArray objects][2].\n\n## Examples\n\n### Using the `byteLength` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    \n    var uint8 = new Uint8Array(buffer);\n    uint8.byteLength; // 8 (matches the byteLength of the buffer)\n    \n    var uint8 = new Uint8Array(buffer, 1, 5);\n    uint8.byteLength; // 5 (as specified when constructing the Uint8Array)\n    \n    var uint8 = new Uint8Array(buffer, 2);\n    uint8.byteLength; // 6 (due to the offset of the constructed Uint8Array)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.prototype.byteLength' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][4] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][5]\n  * [`TypedArray`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-%typedarray%.prototype.bytelength\n\n[4]: /en-US/Firefox/Releases/4\n\n[5]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "Transitioning to strict mode", "parent": "/javascript/javascript_reference/strict_mode", "url": "/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode", "parsed_url": "/javascript/javascript_reference/strict_mode/transitioning_to_strict_mode", "content": "ECMAScript 5 introduced [strict mode][1] which is now implemented in all major\nbrowsers (including IE10). While making web browsers interpret code as strict\nis easy (just add `\"use strict\";` at the top of your source code),\ntransitioning an existing code base to strict mode requires a bit more work.\n\nThis article aims at providing guidance for developers.\n\n## Gradual transition\n\nStrict mode has been designed so that the transition to it can be made\ngradually. It is possible to change each file individually and even to\ntransition code to strict mode down to the function granularity.\n\n## Differences from non-strict to strict\n\n### Syntax errors\n\nWhen adding `\"use strict\";`, the following cases will throw a\n[`SyntaxError`][2] before the script is executing:\n\n  * Octal syntax `var n = 023;`\n  * [`with`][3] statement\n  * Using [`delete][4]` on a variable name `delete myVariable`;\n  * Using [`eval`][5] or [`arguments`][6] as variable or function argument name\n  * Using one of the newly [reserved keywords][7] (in prevision for ECMAScript 6): `implements`, `interface`, `let`, `package`, `private`, `protected`, `public`, `static`, and `yield`\n  * Declaring function in blocks `if(a<b){ function f(){} }`\n  * Obvious errors \n    * Declaring twice the same name for a property name in an object literal `{a: 1, b: 3, a: 7}` This is no longer the case in ECMAScript 6 ([bug\u00a01041128][8]).\n    * Declaring two function arguments with the same name `function f(a, b, b){}`\n\nThese errors are good, because they reveal plain errors or bad practices. They\noccur before the code is running.\n\n### New runtime errors\n\nJavaScript used to silently fail in contexts where what was done was an error.\nStrict mode throws in such cases. If your code base contains such cases,\ntesting will be necessary to be sure nothing is broken. Once again, it can\nhappen at the function granularity level.\n\n#### Setting a value to an undeclared variable\n\n    \n    \n    function f(x){\n      \"use strict\";\n      var a = 12;\n      b = a + x*35; // error!\n    }\n    f();\n    \n\nThis used to change a value on the global object which is rarely the expected\neffect. If you really want to set a value to the global object, pass it as an\nargument and explicitly assign it as a property:\n\n    \n    \n    var global = this; // in the top-level context, \"this\" always\n                       // refers to the global object\n    function f(){\n      \"use strict\";\n      var a = 12;\n      global.b = a + x*35;\n    }\n    f();\n    \n\n#### Trying to delete a non-configurable property\n\n    \n    \n    \"use strict\";\n    delete Object.prototype; // error!\n    \n\nIn non-strict, this would silently fail, in contradiction with the user\nexpectation.\n\n#### Poisoned arguments and function properties\n\nAccessing `arguments.callee`, `arguments.caller`, `anyFunction.caller`, or\n`anyFunction.arguments` throws an error in strict mode. The only legitimate\nuse case would be to reuse a function as in:\n\n    \n    \n    // example taken from vanillajs: http://vanilla-js.com/\n    var s = document.getElementById('thing').style;\n    s.opacity = 1;\n    (function(){ \n      if((s.opacity-=.1) < 0)\n        s.display=\"none\";\n      else\n        setTimeout(arguments.callee, 40);\n    })();\n\nwhich can be rewritten as:\n\n    \n    \n    \"use strict\";\n    var s = document.getElementById('thing').style;\n    s.opacity = 1;\n    (function fadeOut(){ // name the function\n      if((s.opacity-=.1) < 0)\n        s.display=\"none\";\n      else\n        setTimeout(fadeOut, 40); // use the name of the function\n    })();\n\n### Semantic differences\n\nThese differences are very subtle differences. It's possible that a test suite\ndoesn't catch this kind of subtle difference. Careful review of your code base\nwill probably be necessary to be sure these differences don't affect the\nsemantics of your code. Fortunately, this careful review can be done gradually\ndown the function granularity.\n\n#### `this` in function calls\n\nIn function calls like `f()`, the `this` value was the global object. In\nstrict mode, it is now `undefined`. When a function was called with\n[`call][9]` or [`apply][10]`, if the value was a primitive value, this one was\nboxed into an object (or the global object for `undefined` and `null`). In\nstrict mode, the value is passed directly without conversion or replacement.\n\n#### `arguments` doesn't alias named function arguments\n\nIn non-strict mode, modifying a value in the `arguments` object modifies the\ncorresponding named argument. This made optimizations complicated for\nJavaScript engine and made code harder to read/understand. In strict mode, the\n`arguments` object is created and initialized with the same values than the\nnamed arguments, but changes to either the `arguments` object or the named\narguments aren't reflected in one another.\n\n#### Change to `eval`\n\nIn strict mode code, `eval` doesn't create a new variable in the scope from\nwhich it was called. Also, of course, in strict mode, the string is evaluated\nwith strict mode rules. Thorough testing will need to be performed to make\nsure nothing breaks. Not using eval if you don't really need it may be another\npragmatic solution.\n\n## Strictness-neutral code\n\nA potential \"downside\" of moving strict code to strict mode is that the\nsemantics may be different in legacy browsers which do not implement strict\nmode. In some rare occasions (like bad concatenation or minification), your\ncode also may not run in the mode you wrote and tested it in. Here are the\nrules to make your code strictness-neutral:\n\n  1. Write your code as strict and make sure no strict-only errors (from the above \"New runtime errors\" section) are thrown.\n  2. Stay away from semantic differences \n    1. `eval`: use it only if you know what you're doing\n    2. `arguments`: always access function arguments via their name or perform a copy of the arguments object using:  \n`var args = Array.prototype.slice.call(arguments)`  \nas the first line of your function\n\n    3. `this`: only use\u00a0`this` when it refers to an object you created.\n\n## See also\n\n  * [Strict mode][11]\n\n[1]: /en-US/docs/JavaScript/Strict_mode\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords\n\n[8]: https://bugzilla.mozilla.org/show_bug.cgi?id=1041128\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Strict_mode\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Strict mode"], "type": "others"},
{"name": "TypedArray.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.prototype", "content": "## Summary\n\nThe `**TypedArray**`**`.prototype`** property represents the prototype for\n[`TypedArray`][1] constructors.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `TypedArray.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`TypedArray`][1] instances inherit from [`TypedArray.prototype`][2]. You can\nuse the constructor's prototype object to add properties or methods to all\n_TypedArray_ instances, where _TypedArray_ is one of the [typed array\ntypes][3].\n\nSee also the description about _[TypedArray_][4] for more information about\ninheritance.\n\n## Properties\n\n`TypedArray.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is one the corresponding [typed array type][3] functions by default.\n[`TypedArray.prototype.buffer`][5] Read only\n\n     Returns the [`ArrayBuffer`][6] referenced by the typed array. Fixed at construction time and thus **read only**.\n[`TypedArray.prototype.byteLength`][7] Read only\n\n     Returns the length (in bytes) of the typed array from the start of its [`ArrayBuffer`][6]. Fixed at construction time and thus **read only.**\n[`TypedArray.prototype.byteOffset`][8] Read only\n\n     Returns the offset (in bytes) of the typed array from the start of its [`ArrayBuffer`][6]. Fixed at construction time and thus **read only.**\n[`TypedArray.prototype.length`][9] Read only\n\n     Returns the number of elements hold in the typed array. Fixed at construction time and thus **read only.**\n\n## Methods\n\n[`TypedArray.prototype.copyWithin()`][10]\n\n     See [`Array.prototype.copyWithin()`][11].\n[`TypedArray.prototype.move()`][12] _ _ Unimplemented\n\n     Former non-standard version of [`TypedArray.prototype.copyWithin()`][10].\n[`TypedArray.prototype.set()`][13]\n\n     Stores multiple values in the typed array, reading input values from a specified array.\n[`TypedArray.prototype.subarray()`][14]\n\n     Returns a new TypedArray from the given start and end element index.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray prototype' in that specification.][15]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][16].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][17] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][18]\n  * [`TypedArray`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Description\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[15]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-%typedarrayprototype%-object\n\n[16]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[17]: /en-US/Firefox/Releases/4\n\n[18]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "TypedArray.name", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.name", "content": "## Summary\n\nThe `**_TypedArray_.name**` property represents a string value of the typed\narray constructor name.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `TypedArray.name`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    TypedArray.name;\n\n## Description\n\nTypedArray objects differ from each other in the number of bytes per element\nand in the way the bytes are interpreted. The `name` property describes of\nwhat data type the array consists. The first part can be `Int` for \"integer\"\nor `Uint` for an \"unsigned integer\", also `Float` for \"floating point\" is\nused. The second part is a number describing the bit-size of the array.\nFinally, the object type is `Array`, with `ClampedArray` as a special case.\nPlease see [`Uint8ClampedArray`][1] for more details.\n\n## Examples\n\n    \n    \n    Int8Array.name;         // \"Int6Array\"\n    Uint8Array.name;        // \"Uint8Array\n    Uint8ClampedArray.name; // \"Uint8ClampedArray\"\n    Int16Array.name;        // \"Int16Array\"\n    Uint16Array.name;       // \"Uint16Array\"\n    Int32Array.name;        // \"Int32Array\"\n    Uint32Array.name;       // \"Uint32Array\"\n    Float32Array.name;      // \"Float32Array\"\n    Float64Array.name;      // \"Float64Array\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.name' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][3] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][4]\n  * [`TypedArray`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-typedarray-constructors\n\n[3]: /en-US/Firefox/Releases/4\n\n[4]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "TypedArray.BYTES_PER_ELEMENT", "parent": "/javascript/javascript_reference/standard_built-in_objects/typedarray", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typedarray/typedarray.bytes_per_element", "content": "## Summary\n\nThe `**TypedArray.BYTES_PER_ELEMENT**` property represents the size in bytes\nof each element in an typed array.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `TypedArray.BYTES_PER_ELEMENT`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    TypedArray.BYTES_PER_ELEMENT;\n\n## Description\n\nTypedArray objects differ from each other in the number of bytes per element\nand in the way the bytes are interpreted. The `BYTES_PER_ELEMENT` constant\ncontains the number of bytes each element in the given TypedArray has.\n\n## Examples\n\n    \n    \n    Int8Array.BYTES_PER_ELEMENT;         // 1\n    Uint8Array.BYTES_PER_ELEMENT;        // 1\n    Uint8ClampedArray.BYTES_PER_ELEMENT; // 1\n    Int16Array.BYTES_PER_ELEMENT;        // 2\n    Uint16Array.BYTES_PER_ELEMENT;       // 2\n    Int32Array.BYTES_PER_ELEMENT;        // 4\n    Uint32Array.BYTES_PER_ELEMENT;       // 4\n    Float32Array.BYTES_PER_ELEMENT;      // 4\n    Float64Array.BYTES_PER_ELEMENT;      // 8\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][1]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][3] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][4]\n  * [`TypedArray`][5]\n\n[1]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-typedarray.bytes_per_element\n\n[3]: /en-US/Firefox/Releases/4\n\n[4]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypedArray"], "type": "property"},
{"name": "Additional examples for Object.defineProperty", "parent": "/javascript/javascript_reference/standard_built-in_objects/object/object.defineproperty()", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty/Additional_examples", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object/object.defineproperty()/additional_examples_for_object.defineproperty", "content": "This page provides additional examples for [`Object.defineProperty()`][1].\n\n## Using binary flags instead of a property descriptor object\n\nIf you have to define many properties through the\n[`Object.defineProperty()`][1] method, you can use the same descriptor object\nfor each property, redefining it from time to time through [binary flags][2].\n\n    \n    \n    var oDesc = {};\n    function setProp (nMask, oObj, sKey, vVal_fGet, fSet) {\n      if (nMask & 8) {\n        // accessor descriptor\n        if (vVal_fGet) {\n          oDesc.get = vVal_fGet;\n        } else {\n          delete oDesc.get;\n        }\n        if (fSet) {\n          oDesc.set = fSet;\n        } else {\n          delete oDesc.set;\n        }\n        delete oDesc.value;\n        delete oDesc.writable;\n      } else {\n        // data descriptor\n        if (arguments.length > 3) {\n          oDesc.value = vVal_fGet;\n        } else {\n          delete oDesc.value;\n        }\n        oDesc.writable = Boolean(nMask & 4);\n        delete oDesc.get;\n        delete oDesc.set;\n      }\n      oDesc.enumerable = Boolean(nMask & 1);\n      oDesc.configurable = Boolean(nMask & 2);\n      Object.defineProperty(oObj, sKey, oDesc);\n      return oObj;\n    }\n    \n    /*\n    * :: function setProp ::\n    *\n    * nMask is a bitmask:\n    *  flag 0x1: property is enumerable,\n    *  flag 0x2: property is configurable,\n    *  flag 0x4: property is writable,\n    *  flag 0x8: property is accessor descriptor.\n    * oObj is the object on which to define the property;\n    * sKey is the name of the property to be defined or modified;\n    * vVal_fGet is the value to assign to a data descriptor or the getter function to assign to an accessor descriptor (depending on the bitmask);\n    * fSet is the setter function to assign to an accessor descriptor;\n    *\n    * Bitmask possible values:\n    *\n    *  0  : readonly data descriptor - not configurable, not enumerable (0000).\n    *  1  : readonly data descriptor - not configurable, enumerable (0001).\n    *  2  : readonly data descriptor - configurable, not enumerable (0010).\n    *  3  : readonly data descriptor - configurable, enumerable (0011).\n    *  4  : writable data descriptor - not configurable, not enumerable (0100).\n    *  5  : writable data descriptor - not configurable, enumerable (0101).\n    *  6  : writable data descriptor - configurable, not enumerable (0110).\n    *  7  : writable data descriptor - configurable, enumerable (0111).\n    *  8  : accessor descriptor - not configurable, not enumerable (1000).\n    *  9  : accessor descriptor - not configurable, enumerable (1001).\n    *  10 : accessor descriptor - configurable, not enumerable (1010).\n    *  11 : accessor descriptor - configurable, enumerable (1011).\n    *\n    *  Note: If the flag 0x8 is setted to \"accessor descriptor\" the flag 0x4 (writable)\n    *  will be ignored. If not, the fSet argument will be ignored.\n    */\n    \n    // creating a new empty object\n    var myObj = {};\n    \n    // adding a writable data descriptor - not configurable, not enumerable\n    setProp(4, myObj, 'myNumber', 25);\n    \n    // adding a readonly data descriptor - not configurable, enumerable\n    setProp(1, myObj, 'myString', 'Hello world!');\n    \n    // adding an accessor descriptor - not configurable, enumerable\n    setProp(9, myObj, 'myArray', function() {\n      for (var iBit = 0, iFlag = 1, aBoolArr = [false];\n        iFlag < this.myNumber + 1 || (this.myNumber & iFlag);\n        iFlag = iFlag << 1\n      ) {\n        aBoolArr[iBit++] = Boolean(this.myNumber & iFlag);\n      }\n      return aBoolArr;\n    }, function(aNewMask) {\n      for (var nNew = 0, iBit = 0; iBit < aNewMask.length; iBit++) {\n        nNew |= Boolean(aNewMask[iBit]) << iBit;\n      }\n      this.myNumber = nNew;\n    });\n    \n    // adding a writable data descriptor (undefined value) - configurable, enumerable\n    setProp(7, myObj, 'myUndefined');\n    \n    // adding an accessor descriptor (only getter) - configurable, enumerable\n    setProp(11, myObj, 'myDate', function() { return new Date(); });\n    \n    // adding an accessor descriptor (only setter) - not configurable, not enumerable\n    setProp(8, myObj, 'myAlert', null, function(sTxt) { alert(sTxt); });\n    \n    myObj.myAlert = myObj.myDate.toLocaleString() + '\\n\\n' + myObj.myString +\n      '\\nThe number ' + myObj.myNumber + ' represents the following bitmask: ' +\n      myObj.myArray.join(', ') + '.';\n    \n    // listing the enumerable properties\n    var sList = 'Here are the enumerable properties of myObj object:\\n';\n    for (var sProp in myObj) {\n      sList += '\\nmyObj.' + sProp + ' => ' + myObj[sProp] + ';'\n    }\n    \n    alert(sList);\n    \n\n## Create a new non-native `Object.setProperty()` method\n\nYou can do the same thing with a descriptor object obtained through an\nanonymous constructor and an [`Object`][3]'s custom method named\n`setProperty()`:\n\n    \n    \n    // creating a new Object method named Object.setProperty()\n    \n    new (function() {\n      var oDesc = this;\n      Object.setProperty = function(nMask, oObj, sKey, vVal_fGet, fSet) {\n        if (nMask & 8) {\n          // accessor descriptor\n          if (vVal_fGet) {\n            oDesc.get = vVal_fGet;\n          } else {\n            delete oDesc.get;\n          }\n          if (fSet) {\n            oDesc.set = fSet;\n          } else {\n            delete oDesc.set;\n          }\n          delete oDesc.value;\n          delete oDesc.writable;\n        } else {\n          // data descriptor\n          if (arguments.length > 3) {\n            oDesc.value = vVal_fGet;\n          } else {\n            delete oDesc.value;\n          }\n          oDesc.writable = Boolean(nMask & 4);\n          delete oDesc.get;\n          delete oDesc.set;\n        }\n        oDesc.enumerable = Boolean(nMask & 1);\n        oDesc.configurable = Boolean(nMask & 2);\n        Object.defineProperty(oObj, sKey, oDesc);\n        return oObj;\n      };\n    })();\n    \n    // creating a new empty object\n    var myObj = {};\n    \n    // adding a writable data descriptor - not configurable, not enumerable\n    Object.setProperty(4, myObj, 'myNumber', 25);\n    \n    // adding a readonly data descriptor - not configurable, enumerable\n    Object.setProperty(1, myObj, 'myString', 'Hello world!');\n    \n    // etc. etc.\n    \n\n**Note:** The `Object.setProperty()` method could be also a proposal for a possible new JavaScript native method (see [ECMAScript bug 335][4]). \n\n### Syntax\n\n    \n    \n    Object.setProperty(bitmask, obj, prop[, value/getter[, setter]])\n\n### Parameters\n\n`bitmask`\n\n    The descriptor bitmask (see below).\n`obj`\n\n    The object on which to define the property.\n`prop`\n\n    The name of the property to be defined or modified.\n`value/getter`\n\n    Optional. The value to assign to a data descriptor or the getter function to assign to an accessor descriptor (depends on the bitmask).\n`setter`\n\n    Optional. The setter function to assign to an accessor descriptor. If the flag `0x8` is setted to _data descriptor_ this argument will be ignored.\n\n### Description\n\nThe non-native `Object.setProperty()` method works like the native\n`Object.defineProperty()` method, except for the descriptor object which is\nreplaced with a descriptor bitmask. The `bitmask` argument has the following\nstructure:\n\nflag `0x1`\n\n    The property is enumerable.\nflag `0x2`\n\n    The property is configurable.\nflag `0x4`\n\n    The property is writable.\nflag `0x8`\n\n    The property is an accessor descriptor.\n\nSo, the descriptor bitmask can have these possible numeric values:\n\n  * **`0`**: The bitmask represents a readonly _data_ descriptor\u00a0\u2014 not configurable, not enumerable (`0000`).\n  * **`1`**: The bitmask represents a readonly _data_ descriptor\u00a0\u2014 not configurable, enumerable (`0001`).\n  * **`2`**: The bitmask represents a readonly _data_ descriptor\u00a0\u2014 configurable, not enumerable (`0010`).\n  * **`3`**: The bitmask represents a readonly _data_ descriptor\u00a0\u2014 configurable, enumerable (`0011`).\n  * **`4`**: The bitmask represents a writable _data_ descriptor\u00a0\u2014 not configurable, not enumerable (`0100`).\n  * **`5`**: The bitmask represents a writable _data_ descriptor\u00a0\u2014 not configurable, enumerable (`0101`).\n  * **`6`**: The bitmask represents a writable _data_ descriptor\u00a0\u2014 configurable, not enumerable (`0110`).\n  * **`7`**: The bitmask represents a writable _data_ descriptor\u00a0\u2014 configurable, enumerable (`0111`).\n  * **`8`**: The bitmask represents an _accessor_ descriptor\u00a0\u2014 not configurable, not enumerable (`1000`).\n  * **`9`**: The bitmask represents an _accessor_ descriptor\u00a0\u2014 not configurable, enumerable (`1001`).\n  * **`10`**: The bitmask represents an _accessor_ descriptor\u00a0\u2014 configurable, not enumerable (`1010`).\n  * **`11`**: The bitmask represents an _accessor_ descriptor\u00a0\u2014 configurable, enumerable (`1011`).\n\n**Note:** If the flag `0x8` is set to _accessor descriptor_ the flag `0x4` (_writable_) will be ignored. If not, the `setter` argument will be ignored. \n\n## HTMLSelectElement.selectedIndex implementation\n\nYou can use the `Object.defineProperty()` method with native objects also. The\nfollowing example shows how to implement the [`HTMLSelectElement`][5]'s\n[`selectedIndex`][6] property in radio button groups.\n\n    \n    \n    <!doctype html>\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>Radio group selectedIndex example</title>\n    <script type=\"text/javascript\">\n    Object.defineProperty(NodeList.prototype, 'selectedIndex', {\n      get: function() {\n        var nIndex = this.length - 1;\n        while (nIndex > -1 && !this[nIndex].checked) {\n          nIndex--;\n        }\n        return nIndex;\n      },\n    \n      set: function(nNewIndex) {\n        if (isNaN(nNewIndex)) {\n          return;\n        }\n        var nOldIndex = this.selectedIndex;\n        if (nOldIndex > -1) {\n          this[nOldIndex].checked = false;\n        }\n        if (nNewIndex > -1) {\n          this[nNewIndex].checked = true;\n        }\n      },\n    \n      enumerable: true,\n      configurable: false\n    });\n    \n    // try it!\n    function checkForm() {\n      var nSelectedIndex = document.myForm.myRadioGroup.selectedIndex;\n      if (nSelectedIndex < 0) {\n        alert('Select a gadget!!');\n        return false;\n      }\n      alert('Congratulations!! You selected the ' + document.myForm.myRadioGroup[nSelectedIndex].value + '.');\n      return true;\n    }\n    </script>\n    </head>\n    \n    <body>\n      <form name=\"myForm\" onsubmit=\"return(checkForm());\">\n        <fieldset><legend>Select a gadget</legend>\n          <p><input type=\"radio\" name=\"myRadioGroup\" id=\"ourShirt\" value=\"shirt\" /> <label for=\"ourShirt\">shirt</label><br />\n          <input type=\"radio\" name=\"myRadioGroup\" id=\"ourPants\" value=\"pants\" /> <label for=\"ourPants\">pants</label><br />\n          <input type=\"radio\" name=\"myRadioGroup\" id=\"ourBelt\" value=\"belt\" /> <label for=\"ourBelt\">belt</label><br />\n          <input type=\"radio\" name=\"myRadioGroup\" id=\"ourShoes\" value=\"shoes\" /> <label for=\"ourShoes\">shoes</label></p>\n          <p><span style=\"cursor:pointer;text-decoration:underline;color:#0000ff;\" onclick=\"document.myForm.myRadioGroup.selectedIndex=2;\">Select our favorite gadget ;-)</span></p>\n          <p><input type=\"submit\" value=\"Order!\" />\n        </fieldset>\n      </form>\n    </body>\n    </html>\n    \n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OperatorsSigned_32-bit_integers\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: https://bugs.ecmascript.org/show_bug.cgi?id=335\n\n[5]: /en-US/docs/Web/API/HTMLSelectElement\n\n[6]: /en-US/docs/Web/API/HTMLSelectElement.selectedIndex\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Object", "Object.defineProperty()"], "type": "property"},
{"name": "Grouping operator", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Grouping", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/grouping_operator", "content": "## Summary\n\nThe grouping operator `( )` controls the precedence of evaluation in\nexpressions.\n\n## Syntax\n\n    \n    \n     ( )\n\n## Description\n\nThe grouping operator consists of a pair of paratheses around an expression or\nsub-expression to override the normal [operator precedence][1] so that\nexpressions with lower precedence can be evaluated before an expression with\nhigher priority.\n\n## Examples\n\nOverriding multiplication and division first, then addition and subtraction to\nevaulate addition first.\n\n    \n    \n    var a = 1;\n    var b = 2;\n    var c = 3;\n    \n    // default precedence\n    a + b * c     // 7\n    // evaluated by default like this\n    a + (b * c)   // 7\n    \n    // now overriding precedence \n    // addition before multiplication   \n    (a + b) * c   // 9\n    \n    // which is equivalent to\n    a * c + b * c // 9\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The Grouping Operator' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The Grouping Operator' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Operator precedence][1]\n  * [`delete`][4]\n  * [`typeof`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.6\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-grouping-operator\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Array comprehensions", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/array_comprehensions", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 7) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **array comprehension** syntax is a JavaScript expression which allows you\nto quickly assemble a new array based on an existing one. Comprehensions exist\nin many programming languages and the upcoming ECMAScript 7 standard defines\narray comprehensions for JavaScript.\n\nSee below for differences to the old array comprehension syntax in\nSpiderMonkey, based on proposals for ECMAScript 4.\n\n## Syntax\n\n    \n    \n    [for (x of iterable) x]\n    [for (x of iterable) if (condition) x]\n    [for (x of iterable) for (y of iterable) x + y]\n    \n\n## Description\n\nInside array comprehensions, these two kinds of components are allowed:\n\n  * [for...of][1] and\n  * [if][2]\n\nThe for-of iteration is always the first component. Multipe for-of iterations\nor if statements are allowed.\n\n## Examples\n\n### Simple array comprehensions\n\n    \n    \n    [for (i of [ 1, 2, 3 ]) i*i ]; \n    // [ 1, 4, 9 ]\n    \n    var abc = [ \"A\", \"B\", \"C\" ];\n    [for (letters of abc) letters.toLowerCase()];\n    // [ \"a\", \"b\", \"c\" ]\n\n### Array comprehensions with if statement\n\n    \n    \n    var years = [ 1954, 1974, 1990, 2006, 2010, 2014 ];\n    [for (year of years) if (year > 2000) year];\n    // [ 2006, 2010, 2014 ]\n    [for (year of years) if (year > 2000) if(year < 2010) year];\n    // [ 2006], the same as below:\n    [for (year of years) if (year > 2000 && year < 2010) year];\n    // [ 2006] \n    \n\n### Array comprehensions compared to `map` and `filter`\n\nAn easy way to understand array comprehension syntax, is to compare it with\nthe Array [`map`][3] and [`filter`][4] methods:\n\n    \n    \n    var numbers = [ 1, 2, 3 ];\n    \n    numbers.map(function (i) { return i * i });\n    [for (i of numbers) i*i ];\n    // both is [ 1, 4, 9 ]\n    \n    numbers.filter(function (i) { return i < 3 });\n    [for (i of numbers) if (i < 3) i];\n    // both is [ 1, 2 ]\n    \n\n### Array comprehensions with two arrays\n\nUsing two for-of iterations to work with two arrays:\n\n    \n    \n    var numbers = [ 1, 2, 3 ];\n    var letters = [ \"a\", \"b\", \"c\" ];\n    \n    var cross = [for (i of numbers) for (j of letters) i+j];\n    // [ \"1a\", \"1b\", \"1c\", \"2a\", \"2b\", \"2c\", \"3a\", \"3b\", \"3c\" ]\n    \n    var grid = [for (i of numbers) [for (j of letters) i+j]];\n    // [\n    //  [\"1a\", \"1b\", \"1c\"],\n    //  [\"2a\", \"2b\", \"2c\"],\n    //  [\"3a\", \"3b\", \"3c\"]\n    // ]\n    \n    [for (i of numbers) if (i > 1) for (j of letters) if(j > \"a\") i+j]\n    // [\"2b\", \"2c\", \"3b\", \"3c\"], the same as below:\n    \n    [for (i of numbers) for (j of letters) if (i > 1) if(j > \"a\") i+j]\n    // [\"2b\", \"2c\", \"3b\", \"3c\"]\n    \n    [for (i of numbers) if (i > 1) [for (j of letters) if(j > \"a\") i+j]]\n    // [[\"2b\", \"2c\"], [\"3b\", \"3c\"]], not the same as below:\n    \n    [for (i of numbers) [for (j of letters) if (i > 1) if(j > \"a\") i+j]]\n    // [[], [\"2b\", \"2c\"], [\"3b\", \"3c\"]]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nProposed for ECMAScript 7\n\n</td>  \n<td>\n\nNo draft available yet\n\n</td>  \n<td>\n\nWas initially in the ECMAScript 6 draft, but got removed in revision 27\n(August 2014). Please see older revisions of ES 6 for specification semantics.\nAn updated version will be back in a new\u00a0 ES 7 draft.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[30][5] (30)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n30.0 (30)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### SpiderMonkey-specific implementation notes\n\n  * [`let`][6] as an identifier is not supported as `let` is currently only available to JS version 1.7 and XUL scripts tags.\n  * Destructuring in comprehensions is not supported yet ([bug\u00a0980828][7]).\n\n### Differences to the older JS1.7/JS1.8 comprehensions\n\n  * ES7 comprehensions create one scope per \"for\" node instead of the comprehension as a whole. \n    * Old: [`()=>x for (x of [0, 1, 2])][1]() // 2`\n    * New: [`for (x of [0, 1, 2]) ()=>x][1]() // 1, each iteration creates a fresh binding for x. `\n  * ES7 comprehensions start with \"for\" instead of the assignment expression. \n    * Old: [`i * 2 for (i of numbers)]`\n    * New: [`for (i of numbers) `i * 2`]`\n  * ES7 comprehensions can have multiple `if` and `for` components.\n  * ES7 comprehensions only work with [`for...of][1]` and not with [`for...in][8]` iterations.\n\n## See also\n\n  * [`for...of`][1]\n  * [Generator comprehensions][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n[5]: /en-US/Firefox/Releases/30\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=980828\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Object initializer", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/object_initializer", "content": "## Summary\n\nObjects can be initialized using [`new Object()`][1],` [Object.create()][2]`,\nor using the _literal_ notation (_initializer_ notation). An object\ninitializer is a list of zero or more pairs of property names and associated\nvalues of an object, enclosed in curly braces (`{}`).\n\n## Syntax\n\n    \n    \n    var o = {};\n    var o = { a: \"foo\", b: 42, c: {} };\n    \n    var a = \"foo\", b = 42, c = {};\n    var o = { a: a, b: b, c: c };\n    \n    var o = {\n      property: function ([parameters]) {},\n      get property() {},\n      set property(value) {},\n    };\n    \n\n### New notations in ECMAScript 6\n\nPlease see the compatibility table for support for these notations. In non-\nsupporting environments, these notations will lead to syntax errors.\n\n    \n    \n    // Shorthand property names (ES6)\n    var a = \"foo\", b = 42, c = {};\n    var o = { a, b, c };\n    \n    // Shorthand method names (ES6)\n    var o = {\n      property([parameters]) {},\n      get property() {},\n      set property(value) {},\n      * generator() {}\n    };\n    \n    // Computed property names (ES6)\n    var prop = \"foo\";\n    var o = {\n      [prop]: \"hey\",\n      [\"b\" + \"ar\"]: \"there\",\n    };\n\n## Description\n\nAn object initializer is an expression that describes the initialization of an\n[`Object`][1]. Objects consist of _properties_, which are used to describe an\nobject. Values of object properties can either contain [primitive][3] data\ntypes or other objects.\n\n### Creating objects\n\nAn empty object with no properties can be created like this:\n\n    \n    \n    var object = {};\n\nHowever, the advantage of the _literal_ or _initializer_ notation is, that you\nare able to quickly create objects with properties inside the curly braces.\nYou simply notate a list of key: value pairs delimited by comma. The following\ncode creates an object with three properties and the keys are \"foo\", \"age\" and\n\"baz\". The values of these keys are a string \"bar\", a number 42 and the third\nproperty has another object as its value.\n\n    \n    \n    var object = {\n      foo: \"bar\",\n      age: 42,\n      baz: { myProp: 12 },\n    }\n\n### Accessing properties\n\nOnce you have created an object, you might want to read or change them. Object\nproperties can be accessed by using the dot notation or the bracket notation.\nSee [property accessors][4] for detailed information.\n\n    \n    \n    object.foo; // \"bar\"\n    object[\"age\"]; // 42\n    \n    object.foo = \"baz\";\n    \n\n### Property definitions\n\nWe have already learned how to notate properties using the initializer syntax.\nOftentimes, there are variables in your code that you would like to put into\nan object. You will see code like this:\n\n    \n    \n    var a = \"foo\", \n        b = 42,\n        c = {};\n    \n    var o = { \n      a: a,\n      b: b,\n      c: c\n    };\n\nWith ECMAScript 6, there is a shorter notation available to achieve the same:\n\n    \n    \n    var a = \"foo\", \n        b = 42, \n        c = {};\n    \n    // Shorthand property names (ES6)\n    var o = { a, b, c };\n\n#### Duplicate property names\n\nWhen using the same name for your properties, the second property will\noverwrite the first.\n\n    \n    \n    var a = {x: 1, x: 2};\n    console.log(a); // { x: 2}\n    \n\nIn ECMAScript 5 strict mode code, duplicate property names were considered a\n[`SyntaxError`][5].\u00a0 With the introduction of computed property names making\nduplication possible at runtime, ECMAScript 6 has removed this restriction.\n\n    \n    \n    function haveES6DuplicatePropertySemantics(){\n      \"use strict\";\n      try {\n        ({ prop: 1, prop: 2 });\n    \n        // No error thrown, duplicate property names allowed in strict mode\n        return true;\n      } catch (e) {\n        // Error thrown, duplicates prohibited in strict mode\n        return false;\n      }\n    }\n\n### Method definitions\n\nA property of an object can also refer to a [function][6] or a [getter][7] or\n[setter][8] method.\n\n    \n    \n    var o = {\n      property: function ([parameters]) {},\n      get property() {},\n      set property(value) {},\n    };\n\nIn ECMAScript 6, a shorthand notation is available, so that the keyword\n\"function\" is no longer necessary.\n\n    \n    \n    // Shorthand method names (ES6)\n    var o = {\n      property([parameters]) {},\n      get property() {},\n      set property(value) {},\n      * generator() {}\n    };\n\nFor more information and examples about methods, see [method definitions][9].\n\n### Computed property names\n\nStarting with ECMAScript 6, the object initializer syntax also supports\ncomputed property names. That allows you to put an expression in brackets\n[`]`, that will be computed as the property name. This is symmetrically to the\nbracket notation of the [property accessor][4] syntax, which you might have\nused to read and set properties already. Now you can use the same syntax in\nobject literals, too:\n\n    \n    \n    // Computed property names (ES6)\n    var i = 0;\n    var a = {\n      [\"foo\" + ++i]: i,\n      [\"foo\" + ++i]: i,\n      [\"foo\" + ++i]: i\n    };\n    \n    console.log(a.foo1); // 1\n    console.log(a.foo2); // 2\n    console.log(a.foo3); // 3\n    \n    var param = 'size';\n    var config = {\n      [param]: 12,\n      [\"mobile\" + param.charAt(0).toUpperCase() + param.slice(1)]: 4\n    };\n    \n    console.log(config); // { size: 12, mobileSize: 4 }\n\n### Prototype mutation\n\nA property definition of the form `__proto__: value` or `\"__proto__\": value`\ndoes not create a property with the name `__proto__`.\u00a0 Instead, if the\nprovided value is an object or [`null`][10], it changes the [`[Prototype]]` of\nthe created object to that value.\u00a0 (If the value is not an object or null, the\nobject is not changed.)\n\n    \n    \n    var obj1 = {};\n    assert(Object.getPrototypeOf(obj1) === Object.prototype);\n    \n    var obj2 = { __proto__: null };\n    assert(Object.getPrototypeOf(obj2) === null);\n    \n    var protoObj = {};\n    var obj3 = { \"__proto__\": protoObj };\n    assert(Object.getPrototypeOf(obj3) === protoObj);\n    \n    var obj4 = { __proto__: \"not an object or null\" };\n    assert(Object.getPrototypeOf(obj4) === Object.prototype);\n    assert(!obj4.hasOwnProperty(\"__proto__\"));\n    \n\nOnly a single prototype mutation is permitted in an object literal: multiple\nprototype mutations are a syntax error.\n\nProperty definitions that do not use \"colon\" notation are not prototype\nmutations: they are property definitions that behave identically to similar\ndefinitions using any other name.\n\n    \n    \n    var __proto__ = \"variable\";\n    \n    var obj1 = { __proto__ };\n    assert(Object.getPrototypeOf(obj1) === Object.prototype);\n    assert(obj1.hasOwnProperty(\"__proto__\"));\n    assert(obj1.__proto__ === \"variable\");\n    \n    var obj2 = { __proto__() { return \"hello\"; } };\n    assert(obj2.__proto__() === \"hello\");\n    \n    var obj3 = { [\"__prot\" + \"o__\"]: 17 };\n    assert(obj3.__proto__ === 17);\n    \n\n## Object literal notation vs JSON\n\nThe object literal notation is not the same as the **J**ava**S**cript\n**O**bject **N**otation ([JSON][11]). Although they look similar, there are\ndifferences between them:\n\n  * JSON permits _only_ property definition using `\"property\": value` syntax.\u00a0 The property name must be double-quoted, and the definition cannot be a shorthand.\n  * In JSON the values can only be strings, numbers, arrays, `true`, `false`, `null`, or another (JSON) object.\n  * A function value (see \"Methods\" above) can not be assigned to a value in JSON.\n  * Objects like [`Date`][12] will be a string after [`JSON.parse()`][13].\n  * [`JSON.parse()`][13] will reject computed property names and an error will be thrown.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\ninitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object Initializer' in that specification.][14]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n[Getter][7] and [setter][8] added.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object Initializer' in that specification.][15]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nShorthand method/property names and computed property names added.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][16].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1.0 (1.7 or earlier)\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][17] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[33][18] (33)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand method names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[34][17] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\nComputed property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand property names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n33.0 (33)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nShorthand method names\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Property accessors][4]\n  * [`get][7]` / [`set][8]`\n  * [Method definitions][9]\n  * [Lexical grammar][19]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n[3]: /en-US/docs/Glossary/primitive\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Functions\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Functions/get\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Functions/set\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[11]: /en-US/docs/Glossary/JSON\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n\n[14]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\n\n[15]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-initializer\n\n[16]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[17]: /en-US/Firefox/Releases/34\n\n[18]: /en-US/Firefox/Releases/33\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "function expression", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/function", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/function_expression", "content": "## Summary\n\nThe `function` keyword can be used to define a function inside an expression.\n\n## Syntax\n\n    \n    \n    function [_name_]([_param1_[, _param2[_, ..., _paramN_]]]) {\n       _statements_\n    }\n\n### Parameters\n\n`name`\n\n     The function name. Can be omitted, in which case the function is _anonymous_. The name is only local to the function body.\n`paramN`\n\n     The name of an argument to be passed to the function. A function can have up to 255 arguments.\n`statements`\n\n     The statements which comprise the body of the function.\n\n## Description\n\nA function expression is very similar to and has almost the same syntax as a\nfunction statement (see [function statement][1] for details). The main\ndifference between a function expression and a function statement is the\n_function name,_ which can be omitted in function expressions to create\n_anonymous_ functions. See also [functions and function scope][2] for more\ninformation.\n\n## Examples\n\nThe following example defines an unnamed function and assigns it to `x`. The\nfunction returns the square of its argument:\n\n    \n    \n    var x = function(y) {\n       return y * y;\n    };\n    \n\n### Named function expression\n\nIf you want to refer to the current function inside the function body, you\nneed to create a named function expression. This name is then local only to\nthe function body (scope). This also avoids using the non-standard\n[arguments.callee][3] property.\n\n    \n    \n    var math = {\n      'factorial': function factorial(n) {\n        if (n <= 1)\n          return 1;\n        return n * factorial(n - 1);\n      }\n    };\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.5\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function definition' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function definitions' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Functions and function scope][2]\n  * [`Function`][6]\n  * [`function statement`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/callee\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-13\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-definitions\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "this", "parent": "/javascript/javascript_reference/expressions_and_operators", "url": "/en-US/docs/Web/JavaScript/Reference/Operators/this", "parsed_url": "/javascript/javascript_reference/expressions_and_operators/this", "content": "## Summary\n\nA function's `this` keyword behaves a little differently in JavaScript\ncompared to other languages. It also has some differences between [strict\nmode][1] and non-strict mode.\n\nIn most cases, the value of `this` is determined by how a function is called.\nIt can't be set by assignment during execution, and it may be different each\ntime the function is called. ES5 introduced the [`bind][2]` method to set the\nvalue of a function's `this` regardless of how it's called.\n\n## Syntax\n\n    \n    \n     this\n\n## Global context\n\nIn the global execution context (outside of any function), `this` refers to\nthe global object, whether in strict mode or not.\n\n    \n    \n    console.log(this.document === document); // true\n    \n    // In web browsers, the window object is also the global object:\n    console.log(this === window); // true\n    \n    this.a = 37;\n    console.log(window.a); // 37\n    \n\n## Function context\n\nInside a function, the value of `this` depends on how the function is called.\n\n### Simple call\n\n    \n    \n    function f1(){\n      return this;\n    }\n    \n    f1() === window; // global object\n    \n\nIn this case, the value of `this` is not set by the call. Since the code is\nnot in strict mode, the value of `this` must always be an object so it\ndefaults to the global object.\n\n    \n    \n    function f2(){\n      \"use strict\"; // see strict mode\n      return this;\n    }\n    \n    f2() === undefined;\n    \n\nIn strict mode, the value of `this` remains at whatever it's set to when\nentering the execution context. If it's not defined, it remains undefined. It\ncan also be set to any value, such as `null` or `42` or `\"I am not this\"`.\n\n**Note:** In the second example, `this` should be [`undefined`][3], because `f2` was called without providing any base (e.g. `window.f2()`). This feature wasn't implemented in some browsers when they first started to support [strict mode][1]. As a result, they incorrectly returned the `window` object.\n\n### As an object method\n\nWhen a function is called as a method of an object, its `this` is set to the\nobject the method is called on.\n\nIn the following example, when `o.f()` is invoked, inside the function `this`\nis bound to the `o` object.\n\n    \n    \n    var o = {\n      prop: 37,\n      f: function() {\n        return this.prop;\n      }\n    };\n    \n    console.log(o.f()); // logs 37\n    \n\nNote that this behavior is not at all affected by how or where the function\nwas defined. In the previous example, we defined the function inline as the\n`f` member during the definition of `o`. However, we could have just as easily\ndefined the function first and later attached it to `o.f`. Doing so results in\nthe same behavior:\n\n    \n    \n    var o = {prop: 37};\n    \n    function independent() {\n      return this.prop;\n    }\n    \n    o.f = independent;\n    \n    console.log(o.f()); // logs 37\n    \n\nThis demonstrates that it matters only that the function was invoked from the\n`f` member of `o`.\n\nSimilarly, the `this` binding is only affected by the most immediate member\nreference. In the following example, when we invoke the function, we call it\nas a method `g` of the object `o.b`. This time during execution, `this` inside\nthe function will refer to `o.b`. The fact that the object is itself a member\nof `o` has no consequence; the most immediate reference is all that matters.\n\n    \n    \n    o.b = {g: independent, prop: 42};\n    console.log(o.b.g()); // logs 42\n    \n\n#### `this` on the object's prototype chain\n\nThe same notion holds true for methods defined somewhere on the object's\nprototype chain. If the method is on an object's prototype chain, `this`\nrefers to the object the method was called on, as if the method was on the\nobject.\n\n    \n    \n    var o = {f:function(){ return this.a + this.b; }};\n    var p = Object.create(o);\n    p.a = 1;\n    p.b = 4;\n    \n    console.log(p.f()); // 5\n    \n\nIn this example, the object assigned to the variable `p` doesn't have its own\n`f` property, it inherits it from its prototype. But it doesn't matter that\nthe lookup for `f` eventually finds a member with that name on `o`; the lookup\nbegan as a reference to `p.f`, so `this` inside the function takes the value\nof the object referred to as `p`. That is, since `f` is called as a method of\n`p`, its `this` refers to `p`. This is an interesting feature of JavaScript's\nprototype inheritance.\n\n#### `this` with a getter or setter\n\nAgain, the same notion holds true when a function is invoked from a getter or\na setter. A function used as getter or setter has its `this` bound to the\nobject from which the property is being set or gotten.\n\n    \n    \n    function modulus(){\n      return Math.sqrt(this.re * this.re + this.im * this.im);\n    }\n    \n    var o = {\n      re: 1,\n      im: -1,\n      get phase(){\n        return Math.atan2(this.im, this.re);\n      }\n    };\n    \n    Object.defineProperty(o, 'modulus', {\n        get: modulus, enumerable:true, configurable:true});\n    \n    console.log(o.phase, o.modulus); // logs -0.78 1.4142\n    \n\n### As a constructor\n\nWhen a function is used as a constructor (with the [`new][4]` keyword), its\n`this` is bound to new object being constructed.\n\nNote: while the default for a constructor is to return the object referenced\nby `this`, it can instead return some other object (if the return value isn't\nan object, then the `this` object is returned).\n\n    \n    \n    /*\n     * Constructors work like this:\n     *\n     * function MyConstructor(){\n     *   // Actual function body code goes here.  \n     *   // Create properties on |this| as\n     *   // desired by assigning to them.  E.g.,\n     *   this.fum = \"nom\";\n     *   // et cetera...\n     *\n     *   // If the function has a return statement that\n     *   // returns an object, that object will be the\n     *   // result of the |new| expression.  Otherwise,\n     *   // the result of the expression is the object\n     *   // currently bound to |this|\n     *   // (i.e., the common case most usually seen).\n     * }\n     */\n    \n    function C(){\n      this.a = 37;\n    }\n    \n    var o = new C();\n    console.log(o.a); // logs 37\n    \n    \n    function C2(){\n      this.a = 37;\n      return {a:38};\n    }\n    \n    o = new C2();\n    console.log(o.a); // logs 38\n    \n\nIn the last example (`C2`), because an object was returned during\nconstruction, the new object that `this` was bound to simply gets discarded.\n(This essentially makes the statement \"`this.a = 37;`\" dead code. It's not\nexactly dead, because it gets executed, but it can be eliminated with no\noutside effects.)\n\n### `call` and `apply`\n\nWhere a function uses the `this` keyword in its body, its value can be bound\nto a particular object in the call using the [`call][5]` or [`apply][6]`\nmethods that all functions inherit from `Function.prototype`.\n\n    \n    \n    function add(c, d){\n      return this.a + this.b + c + d;\n    }\n    \n    var o = {a:1, b:3};\n    \n    // The first parameter is the object to use as\n    // 'this', subsequent parameters are passed as \n    // arguments in the function call\n    add.call(o, 5, 7); // 1 + 3 + 5 + 7 = 16\n    \n    // The first parameter is the object to use as\n    // 'this', the second is an array whose\n    // members are used as the arguments in the function call\n    add.apply(o, [10, 20]); // 1 + 3 + 10 + 20 = 34\n    \n\nNote that with `call` and `apply`, if the value passed as `this` is not an\nobject, an attempt will be made to convert it to an object using the internal\n`ToObject` operation. So if the value passed is a primitive like `7` or\n`'foo'`, it will be converted to an Object using the related constructor, so\nthe primitive number\u00a0`7` is converted to an object as if by `new Number(7)`\nand the string\u00a0`'foo'`\u00a0to an object as if by `new String('foo'), e.g.`\n\n    \n    \n    function bar() {\n      console.log(Object.prototype.toString.call(this));\n    }\n    \n    bar.call(7); // [object Number]\n    \n\n### The `bind` method\n\nECMAScript 5 introduced [`Function.prototype.bind][2]`. Calling\n`f.bind(someObject)` creates a new function with the same body and scope as\n`f`, but where `this` occurs in the original function, in the new function it\nis permanently bound to the first argument of `bind`, regardless of how the\nfunction is being used.\n\n    \n    \n    function f(){\n      return this.a;\n    }\n    \n    var g = f.bind({a:\"azerty\"});\n    console.log(g()); // azerty\n    \n    var o = {a:37, f:f, g:g};\n    console.log(o.f(), o.g()); // 37, azerty\n    \n\n### As a DOM event handler\n\nWhen a function is used as an event handler, its `this` is set to the element\nthe event fired from (some browsers do not follow this convention for\nlisteners added dynamically with methods other than `addEventListener`).\n\n    \n    \n    // When called as a listener, turns the related element blue\n    function bluify(e){\n      // Always true\n      console.log(this === e.currentTarget); \n      // true when currentTarget and target are the same object\n      console.log(this === e.target);\n      this.style.backgroundColor = '#A5D9F3';\n    }\n    \n    // Get a list of every element in the document\n    var elements = document.getElementsByTagName('*');\n    \n    // Add bluify as a click listener so when the\n    // element is clicked on, it turns blue\n    for(var i=0 ; i<elements.length ; i++){\n      elements[i].addEventListener('click', bluify, false);\n    }\n\n### In an in\u2013line event handler\n\nWhen code is called from an in\u2013line handler, its `this` is set to the DOM\nelement on which the listener is placed:\n\n    \n    \n    <button onclick=\"alert(this.tagName.toLowerCase());\">\n      Show this\n    </button>\n    \n\nThe above alert shows `button`. Note however that only the outer code has its\n`this` set this way:\n\n    \n    \n    <button onclick=\"alert((function(){return this}()));\">\n      Show inner this\n    </button>\n    \n\nIn this case, the inner function's `this` isn't set so it returns the\nglobal/window object (i.e. the default object in non\u2013strict mode where `this`\nisn't set by the call).\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'The this keyword' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'The this keyword' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [Strict mode][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[7]: http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.1\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-this-keyword\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Expressions and operators"], "type": "expression"},
{"name": "Expressions and operators", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Operators", "parsed_url": "/javascript/javascript_reference/expressions_and_operators", "content": "This chapter documents all the JavaScript language operators, expressions and\nkeywords.\n\n## Expressions and operators by category\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Primary expressions\n\nBasic keywords and general expressions in JavaScript.\n\n[`this`][1]\n\n     The `this` keyword refers to the function's execution context.\n[`function`][2]\n\n     The `function` keyword defines a function expression.\n[`[]`][3]\n\n     Array initializer/literal syntax.\n[`{}`][4]\n\n     Object initializer/literal syntax.\n[`/ab+c/i`][5]\n\n     Regular expression literal syntax.\n_ _ [`[for (x of y) x]`][6]\n\n     Array comprehensions.\n_ _ [`(for (x of y) y)`][7]\n\n     Generator comprehensions.\n[`( )`][8]\n\n     Grouping operator.\n\n### Left-hand-side expressions\n\nLeft values are the destination of an assignment.\n\n[Property accessors][9]\n\n     Member operators provide access to a property or method of an object  \n(`object.property` and `object[\"property\"]`).\n\n[`new`][10]\n\n     The `new` operator creates an instance of a constructor.\n_ _ [`super`][11]\n\n     The `super` keyword calls the parent constructor.\n_ _ [`...obj`][12]\n\n     The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.\n\n### Increment and decrement\n\nPostfix/prefix increment and postfix/prefix decrement operators.\n\n[`A++`][13]\n\n     Postfix increment operator.\n[`A--`][14]\n\n     Postfix decrement operator.\n[`++A`][13]\n\n     Prefix increment operator.\n[`\\--A`][14]\n\n     Prefix decrement operator.\n\n### Unary operators\n\nA unary operation is operation with only one operand.\n\n[`delete`][15]\n\n     The `delete` operator deletes a property from an object.\n[`void`][16]\n\n     The `void` operator discards an expression's return value.\n[`typeof`][17]\n\n     The `typeof` operator determines the type of a given object.\n[`+`][18]\n\n     The unary plus operator converts its operand to Number type.\n[`-`][19]\n\n     The unary negation operator converts its operand to Number type and then negates it.\n[`~`][20]\n\n     Bitwise NOT operator.\n[`!`][21]\n\n     Logical NOT operator.\n\n### Arithmetic operators\n\nArithmetic operators take numerical values (either literals or variables) as\ntheir operands and return a single numerical value.\n\n[`+`][22]\n\n     Addition operator.\n[`-`][23]\n\n     Subtraction operator.\n[`/`][24]\n\n     Division operator.\n[`*`][25]\n\n     Multiplication operator.\n[`%`][26]\n\n     Remainder operator.\n\n### Relational operators\n\nA comparison operator compares its operands and returns a `Boolean` value\nbased on whether the comparison is true.\n\n[`in`][27]\n\n     The `in` operator determines whether an object has a given property.\n[`instanceof`][28]\n\n     The `instanceof` operator determines whether an object is an instance of another object.\n`<`\n\n     Less than operator.\n`>`\n\n     Greater than operator.\n`<[=`][29]\n\n     Less than or equal operator.\n`>[=`][30]\n\n     Greater than or equal operator.\n\n### Equality operators\n\nThe result of evaluating an equality operator is always of type `Boolean`\nbased on whether the comparison is true.\n\n[`==`][31]\n\n     Equality operator.\n[`!=`][32]\n\n     Inequality operator.\n[`===`][33]\n\n     Identity operator.\n[`!==`][34]\n\n     Nonidentity operator.\n\n### Bitwise shift operators\n\nOperations to shift all bits of the operand.\n\n`<<`\n\n     Bitwise left shift operator.\n`>>`\n\n     Bitwise right shift operator.\n`>>>`\n\n     Bitwise unsigned right shift operator.\n\n### Binary bitwise operators\n\nBitwise operators treat their operands as a set of 32 bits (zeros and ones)\nand return standard JavaScript numerical values.\n\n`&`\n\n     Bitwise AND.\n[`|`][35]\n\n     Bitwise OR.\n[`^`][36]\n\n     Bitwise XOR.\n\n### Binary logical operators\n\nLogical operators are typically used with boolean (logical) values, and when\nthey are, they return a boolean value.\n\n`&&`\n\n     Logical AND.\n[`||`][37]\n\n     Logical OR.\n\n### Conditional (ternary) operator\n\n[`(condition ? ifTrue : ifFalse)`][38]\n\n    \n\nThe conditional operator returns one of two values based on the logical value\nof the condition.\n\n### Assignment operators\n\nAn assignment operator assigns a value to its left operand based on the value\nof its right operand.\n\n[`=`][39]\n\n     Assignment operator.\n[`*=`][40]\n\n     Multiplication assignment.\n[`/=`][41]\n\n     Division assignment.\n[`%=`][42]\n\n     Remainder assignment.\n[`+=`][43]\n\n     Addition assignment.\n[`-=`][44]\n\n     Subtraction assignment\n`<<[=`][45]\n\n     Left shift assignment.\n`>>[=`][46]\n\n     Right shift assignment.\n`>>>[=`][47]\n\n     Unsigned right shift assignment.\n`&[=`][48]\n\n     Bitwise AND assignment.\n[`^=`][49]\n\n     Bitwise XOR assignment.\n[`|=`][50]\n\n     Bitwise OR assignment.\n_ _ [`[a, b] = [1, 2]`][51]  \n_ _ [`{a, b} = {a:1, b:2}`][51]\n\n    \n\nDestructuring assignment allows you to assign the properties of an array or\nobject to variables using syntax that looks similar to array or object\nliterals.\n\n### Comma operator\n\n[`,`][52]\n\n    \n\nThe comma operator allows multiple expressions to be evaluated in a single\nstatement and returns the result of the last expression.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Expressions' in that specification.][53]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ECMAScript Language: Expressions' in that\nspecification.][54]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew: Spread operator, destructuring assignment, `super` keyword, Array\ncomprehensions, Generator comprehensions\n\n</td> </tr> </table>\n\n## See also\n\n  * [Operator precedence][55]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/Generator_comprehensions\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/Grouping\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Operators/super\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Increment\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Decrement\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Operators/delete\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_plus\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Unary_negation\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_NOT\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_NOT\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Addition\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Subtraction\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Division\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Multiplication\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Operators/Arithmetic_Operators#Remainder\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Less_than_or_equal_operator\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Greater_than_or_equal_operator\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Inequality\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Nonidentity\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_OR\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Assignment\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Multiplication_assignment\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Division_assignment\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Remainder_assignment\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Addition_assignment\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Subtraction_assignment\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Left_shift_assignment\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Right_shift_assignment\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Unsigned_right_shift_assignment\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_AND_assignment\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_OR_assignment\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Operators/Comma_Operator\n\n[53]: http://www.ecma-international.org/ecma-262/5.1/#sec-11\n\n[54]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-expressions\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "label", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/label", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/label", "content": "## Summary\n\nThe **labeled statement** can be used with [`break`][1] or [`continue`][2]\nstatements. It is prefixing a statement with an identifier which you can refer\nto.\n\n## Syntax\n\n    \n    \n    _label_ :\n       _statement_\n    \n\n`label`\n\n     Any JavaScript identifier that is not a reserved word.\n`statement`\n\n     Statements. `break` can be used with any labeled statement, and `continue` can be used with looping labeled statements.\n\n## Description\n\nYou can use a label to identify a loop, and then use the `break` or `continue`\nstatements to indicate whether a program should interrupt the loop or continue\nits execution.\n\nNote that JavaScript has **NO**\u00a0`goto` statement, you can only use labels with\n`break` or `continue`.\n\n### Avoid using labels\n\nLabels are not very commonly used in JavaScript since they make programs\nharder to read and understand. As much as possible, avoid using labels and,\ndepending on the cases, prefer\u00a0[calling functions][3]\u00a0or\u00a0[throwing][4]\u00a0an\nerror.\n\n## Examples\n\n### Using a labeled `continue` with `for` loops\n\n    \n    \n    var i, j;\n    \n    loop1:\n    for (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"\n       loop2:\n       for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"\n          if (i == 1 && j == 1) {\n             continue loop1;\n          }\n          console.log(\"i = \" + i + \", j = \" + j);\n       }\n    }\n    \n    // Output is:\n    //   \"i = 0, j = 0\"\n    //   \"i = 0, j = 1\"\n    //   \"i = 0, j = 2\"\n    //   \"i = 1, j = 0\"\n    //   \"i = 2, j = 0\"\n    //   \"i = 2, j = 1\"\n    //   \"i = 2, j = 2\"\n    // Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\"\n    \n\n### Using a labeled `continue` statement\n\nGiven an array of items and an array of tests, this example counts the number\nof items that passes all the tests.\n\n    \n    \n    var itemsPassed = 0;\n    var i, j;\n    \n    top:\n    for (i = 0; i < items.length; i++){\n      for (j = 0; j < tests.length; j++)\n        if (!tests[j].pass(items[i]))\n          continue top;\n      itemsPassed++;\n    }\n\n### Using a labeled\u00a0`break`\u00a0with\u00a0`for`\u00a0loops\n\n    \n    \n    var i, j;\n    \n    loop1:\n    for (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"\n       loop2:\n       for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"\n          if (i == 1 && j == 1) {\n             break loop1;\n          }\n          console.log(\"i = \" + i + \", j = \" + j);\n       }\n    }\n    \n    // Output is:\n    //   \"i = 0, j = 0\"\n    //   \"i = 0, j = 1\"\n    //   \"i = 0, j = 2\"\n    //   \"i = 1, j = 0\"\n    // Notice the difference with the previous continue example\n\n### Using a labeled `break` statement\n\nGiven an array of items and an array of tests, this example determines whether\nall items pass all tests.\n\n    \n    \n    var allPass = true;\n    var i, j;\n    \n    top:\n    for (i = 0; items.length; i++)\n      for (j = 0; j < tests.length; i++)\n        if (!tests[j].pass(items[i])){\n          allPass = false;\n          break top;\n        }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Labelled statement' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Labelled statement' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`break`][1]\n  * [`continue`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.12\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-labelled-statements\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "import", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/import", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/import", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **import statement**\u00a0is used to import functions exported from an external\nmodule, another script.\n\nNote: This feature is not implemented in any browsers natively at this point.\nIt is implemented in many transpilers, such as the [Traceur Compiler][1]\u00a0and\n[ES6 Module Transpiler][2].\n\n## Syntax\n\n    \n    \n    import _name_ from \"_module-name_\";\n    import { _member _} from \"_module-name_\";\n    import {_member_ as _alias _} from \"_module-name_\";\n    import { _member1 , member2_ } from \"_module-name_\";\n    import { _member1 , member2_ as _alias2_ , _[...]_ } from \"_module-name_\";\n    import _name_ , { _member_ [ , _[...]_ ] } from \"_module-name_\";\n    import \"_module-name_\" as _name_;\n\nname\n\n     Name of the object that will receive the imported values.\n\n`member, memberN`\n\n     Name of the exported members to be imported.\n`alias, aliasN`\n\n     Name of the object that will receive the imported property\n`module-name`\n\n     The name of the module to import. This is a file name.\n\n## Description\n\nThe\u00a0`name`\u00a0parameter is the name of the object that will receive the exported\nmembers. The\u00a0`member` parameters specify individual members, while the\u00a0`name`\nparameter imports all of them. name may also be a function if the module\nexports a single default parameter rather than a series of members. Below are\nexamples to clarify the syntax.\n\nImport an entire module's contents. This inserts\u00a0`myModule`\u00a0into the current\nscope, containing all the exported bindings.\n\n    \n    \n    import myModule from \"my-module.js\";\n    import \"my-module.js\" as myModule; // equivalent\n\nImport a single member of a module. This inserts\u00a0`myMember` into the current\nscope.\n\n    \n    \n    import {myMember} from \"my-module.js\";\n\nImport multiple members of a module. This inserts both\u00a0`foo` and\u00a0`bar` into\nthe current scope.\n\n    \n    \n    import {foo, bar} from \"my-module.js\";\n\nImport an entire module's contents, with some also being explicitly named.\nThis inserts\u00a0`myModule`,\u00a0`foo`, and\u00a0`bar` into the current scope. Note that\n`foo` and\u00a0`myModule.foo` are the same, as are\u00a0`bar` and\u00a0`myModule.bar`.\n\n    \n    \n    import MyModule, {foo, bar} from \"my-module.js\";\n\nImport a member with a more convenient alias. This inserts\u00a0`shortName` into\nthe current scope.\n\n    \n    \n    import {reallyReallyLongModuleMemberName as shortName} from \"my-module.js\";\n\nImport an entire module for side effects only, without importing any bindings.\n\n    \n    \n    import \"my-module.js\";\n\n## Examples\n\nImporting a secondary file to assist in processing a AJAX JSON request.\n\n    \n    \n    // file.js\n    function getJSON(url, callback) {\n      let xhr = new XMLHttpRequest();\n      xhr.onload = function () { callback(this.responseText) };\n      xhr.open(\"GET\", url, true);\n      xhr.send();\n    }\n    \n    export function getUsefulContents(url, callback) {\n      getJSON(url, data => callback(JSON.parse(data)));\n    }\n    \n    // main.js\n    import {getUsefulContents} from \"file.js\";\n    getUsefulContents(\"http://www.example.com\", data => {\n      doSomethingUseful(data);\n    });\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Imports' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported[1]\n\n</td>  \n<td>\n\nNot\u00a0supported[2]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] Partial support is behind a command line flag:\u00a0`\\--harmony-modules`. See\n[this V8 bug][4].  \n[2] See\u00a0[this Firefox bug][5].\n\n### Firefox-specific notes\n\nThe `import` and `export` statements were formerly an ancient feature in\nNetscape, but it never gained popularity in that time and have been removed in\nFirefox 3.5 ([bug\u00a0447713][6]).\n\n## See also\n\n  * [`export`][7]\n\n[1]: https://github.com/google/traceur-compiler\n\n[2]: https://github.com/esnext/es6-module-transpiler\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-imports\n\n[4]: https://code.google.com/p/v8/issues/detail?id=1569\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=568953\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=447713\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "export", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/export", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/export", "content": "## Summary\n\nThe **export statement** is used to allow a signed script to provide\nproperties, functions, and objects to other signed or unsigned scripts. It is\nan ancient Netscape 4 feature that has been removed in Firefox 3.5 ([bug\n447713][1]). In the future, a new export declaration will be specified by\nECMAScript 6 modules.\n\n## Syntax\n\n    \n    \n    Example 1:\n    export _name1_, _name2_, ..., _nameN_;\n    \n    Example 2:\n    export *; \n\n`_nameN_`\n\n     Property, function, or object to be exported.\n\n## Description\n\nTypically, information in a signed script is available only to scripts signed\nby the same principals. By exporting properties, functions, or objects, a\nsigned script makes this information available to any script (signed or\nunsigned). The receiving script uses the companion import statement to access\nthe information.\n\nExample 1 shows the syntax for exporting specified properties, functions, and\nobjects.\n\nExample 2 shows the syntax for exporting all the properties, functions, and\nobjects from the script.\n\n## Specifications\n\nPrior to ECMAScript Edition 6, no import/export or module functionality has\nbeen defined in ECMA-262 standards.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][2].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported  \n(Netscape 4  \nuntil  \n[Firefox 3.5][3])\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`import`][4]\n\n[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=447713\n\n[2]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[3]: /en-US/Firefox/Releases/3.5\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "throw", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/throw", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/throw", "content": "## Summary\n\nThe **`throw` statement** throws a user-defined exception. Execution of the\ncurrent function will stop (the statements after `throw` won't be executed),\nand control will be passed to the first [`catch`][1] block in the call stack.\nIf no `catch` block exists among caller functions, the program will terminate.\n\n## Syntax\n\n    \n    \n    throw _expression_; \n\n`expression`\n\n     The expression to throw.\n\n## Description\n\nUse the `throw` statement to throw an exception. When you throw an exception,\n`expression` specifies the value of the exception. Each of the following\nthrows an exception:\n\n    \n    \n    throw \"Error2\"; // generates an exception with a string value\n    throw 42;       // generates an exception with the value 42\n    throw true;     // generates an exception with the value true\n\nAlso note that the `throw` statement is affected by [automatic semicolon\ninsertion (ASI)][2] as no line terminator between the `throw` keyword and the\nexpression is allowed.\n\n## Examples\n\n### Example: Throw an object\n\nYou can specify an object when you throw an exception. You can then reference\nthe object's properties in the `catch` block. The following example creates an\nobject `myUserException` of type `UserException` and uses it in a `throw`\nstatement.\n\n    \n    \n    function UserException(message) {\n       this.message = message;\n       this.name = \"UserException\";\n    }\n    function getMonthName(mo) {\n       mo = mo-1; // Adjust month number for array index (1=Jan, 12=Dec)\n       var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\",\n          \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n       if (months[mo]\u00a0!== undefined) {\n          return months[mo];\n       } else {\n          throw new UserException(\"InvalidMonthNo\");\n       }\n    }\n    \n    try {\n       // statements to try\n       var myMonth = 15; // 15 is out of bound to raise the exception\n       monthName = getMonthName(myMonth);\n    } catch (e) {\n       monthName = \"unknown\";\n       logMyErrors(e.message, e.name); // pass exception object to err handler\n    }\n    \n\n### Example: Another example of throwing an object\n\nThe following example tests an input string for a U.S. zip code. If the zip\ncode uses an invalid format, the throw statement throws an exception by\ncreating an object of type `ZipCodeFormatException`.\n\n    \n    \n    /*\n     * Creates a ZipCode object.\n     *\n     * Accepted formats for a zip code are:\n     *    12345\n     *    12345-6789\n     *    123456789\n     *    12345 6789\n     *\n     * If the argument passed to the ZipCode constructor does not\n     * conform to one of these patterns, an exception is thrown.\n     */\n    \n    function ZipCode(zip) {\n       zip = new String(zip);\n       pattern = /[0-9]{5}([- ]?[0-9]{4})?/;\n       if (pattern.test(zip)) {\n          // zip code value will be the first match in the string\n          this.value = zip.match(pattern)[0];\n          this.valueOf = function() {\n             return this.value\n          };\n          this.toString = function() {\n             return String(this.value)\n          };\n       } else {\n          throw new ZipCodeFormatException(zip);\n       }\n    }\n    \n    function ZipCodeFormatException(value) {\n       this.value = value;\n       this.message = \"does not conform to the expected format for a zip code\";\n       this.toString = function() {\n          return this.value + this.message\n       };\n    }\n    \n    /*\n     * This could be in a script that validates address data\n     * for US addresses.\n     */\n    \n    var ZIPCODE_INVALID = -1;\n    var ZIPCODE_UNKNOWN_ERROR = -2;\n    \n    function verifyZipCode(z) {\n       try {\n          z = new ZipCode(z);\n       } catch (e) {\n          if (e instanceof ZipCodeFormatException) {\n             return ZIPCODE_INVALID;\n          } else {\n             return ZIPCODE_UNKNOWN_ERROR;\n          }\n       }\n       return z;\n    }\n    \n    a = verifyZipCode(95060);         // returns 95060\n    b = verifyZipCode(9560);          // returns -1\n    c = verifyZipCode(\"a\");           // returns -1\n    d = verifyZipCode(\"95060\");       // returns 95060\n    e = verifyZipCode(\"95060 1234\");  // returns 95060 1234\n    \n\n### Example: Rethrow an exception\n\nYou can use `throw` to rethrow an exception after you catch it. The following\nexample catches an exception with a numeric value and rethrows it if the value\nis over 50. The rethrown exception propagates up to the enclosing function or\nto the top level so that the user sees it.\n\n    \n    \n    try {\n       throw n; // throws an exception with a numeric value\n    } catch (e) {\n       if (e <= 50) {\n          // statements to handle exceptions 1-50\n       } else {\n          // cannot handle this exception, so rethrow\n          throw e;\n       }\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.4\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'throw statement' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'throw statement' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`try...catch`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Automatic_semicolon_insertion\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.13\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-throw-statement\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "switch", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/switch", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/switch", "content": "## Summary\n\nThe **switch statement** evaluates an expression, matching the expression's\nvalue to a case clause, and executes statements associated with that case.\n\n## Syntax\n\n    \n    \n    switch (expression) {\n      case value1:\n        //Statements executed when the result of expression matches value1\n        [break;]\n      case value2:\n        //Statements executed the result of expression matches value2\n        [break;]\n      ...\n      case valueN:\n        //Statements executed when the result of expression matches valueN\n        [break;]\n      default:\n        //Statements executed when none of the values match the value of the expression\n        [break;]\n    }\n\n`expression`\n\n     An expression matched against each case clause.\n`case expressionN`\n\n     A case clause used to match against `expression`.\n`statementsN`\n\n     Statements that are executed if `expression` matches the associated case clause.\n`statements_def`\n\n     Statements that are executed if `expression` does not match any case clause.\n\n## Description\n\nIf a match is found, the program executes the associated statements. If\nmultiple cases match the provided value, the first case that matches is\nselected, even if the cases are not equal to each other.\n\nThe program first looks for a `case` clause whose expression evaluates to the\nsame value as the input expression (using [strict comparison][1], `===)` and\nthen transfers control to that clause, executing the associated statements. If\nno matching `case` clause is found, the program looks for the optional\n`default` clause, and if found, transfers control to that clause, executing\nthe associated statements. If no `default` clause is found, the program\ncontinues execution at the statement following the end of `switch`. By\nconvention, the `default` clause is the last clause, but it does not need to\nbe so.\n\nThe optional [`break][2]` statement associated with each case label ensures\nthat the program breaks out of switch once the matched statement is executed\nand continues execution at the statement following switch. If `break` is\nomitted, the program continues execution at the next statement in the `switch`\nstatement.\n\n## Examples\n\n### Example: Using `switch`\n\nIn the following example, if `expr`\u00a0evaluates to \"Bananas\", the program\nmatches the value with case \"Bananas\" and executes the associated statement.\nWhen `break` is encountered, the program breaks out of `switch` and executes\nthe statement following `switch`. If `break` were omitted, the statement for\ncase \"Cherries\" would also be executed.\n\n    \n    \n    switch (expr) {\n      case \"Oranges\":\n        console.log(\"Oranges are $0.59 a pound.\");\n        break;\n      case \"Apples\":\n        console.log(\"Apples are $0.32 a pound.\");\n        break;\n      case \"Bananas\":\n        console.log(\"Bananas are $0.48 a pound.\");\n        break;\n      case \"Cherries\":\n        console.log(\"Cherries are $3.00 a pound.\");\n        break;\n      case \"Mangoes\":\n      case \"Papayas\":\n        console.log(\"Mangoes and papayas are $2.79 a pound.\");\n        break;\n      default:\n        console.log(\"Sorry, we are out of \" + expr + \".\");\n    }\n    \n    console.log(\"Is there anything else you'd like?\");\n    \n\n### Example: What happens if I forgot a break?\n\nIf you forget a break then script will run from the case where criteria is\nmet, and will run the case after that regardless if criteria was met. See\nexample here:\n\n    \n    \n    var foo = 0;\n    switch (foo) {\n    \u00a0\u00a0 \u00a0case -1:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log('negative 1');\n            break;\n    \u00a0\u00a0 \u00a0case 0: // foo is 0 so criteria met here so this block will run\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(0)\n     \u00a0\u00a0\u00a0 \u00a0  // NOTE: the forgotten break would have been here\n    \u00a0\u00a0 \u00a0case 1: // no break statement in 'case 0:' so this case will run as well\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(1);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0break; // it encounters this break so will not continue into 'case 2:'\n    \u00a0\u00a0 \u00a0case 2:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(2);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0break;\n    \u00a0\u00a0 \u00a0default:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log('default');\n    }\n\n### Example: Methods for multi-criteria case\n\nIf you would like one case segment to meet multiple criteria there are two\nmethods/tricks. Method one is the recommended way, method two is a \"hacky\"\nway. The two methods below aim to alert \"yes\" when variable `foo` is 0, 1, 2,\nor 3.\n\nSources for these techniques are here:\n\n  1. [Multiple Criteria Single Case Switch Statement (Stack Overflow)][3]\n  2. [Switch statement multiple cases in JavaScript (Stack Overflow)][4]\n\n#### Method one\n\nThis method takes advantage of the fact that if there is no break below a case\nstatement it will continue to execute the next case statement regardless if\nthe case meets the criteria. See the section title \"What happens if I forgot a\nbreak?\"\n\n    \n    \n    var foo = 1;\n    switch (foo) {\n    \u00a0\u00a0 \u00a0case 0:\n    \u00a0\u00a0 \u00a0case 1:\n    \u00a0\u00a0 \u00a0case 2:\n    \u00a0\u00a0 \u00a0case 3:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('yes');\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0break;\n    \u00a0\u00a0 \u00a0default:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('not');\n    }\n\n#### Method two\n\nThis is the \"hacky\" method; on line 2, where you would usually find\n`switch(foo)`, we instead put an invariant `true`, and place conditional logic\n(instead of constants) into the case statements:\n\n    \n    \n    var foo = 1;\n    switch (true) { // invariant TRUE instead of variable foo\n    \u00a0\u00a0 \u00a0case foo >= 0 && foo <= 3:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('yes');\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0break;\n    \u00a0\u00a0 \u00a0default:\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('not');\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.2\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'switch statement' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'switch statement' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`if...else`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[3]: http://stackoverflow.com/questions/21808543/multple-cripteria-single-case-switch-statement\n\n[4]: http://stackoverflow.com/questions/13207927/switch-statement-multiple-cases-in-javascript\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.11\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-switch-statement\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "if...else", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/if...else", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/if...else", "content": "## Summary\n\nThe **if statement** executes a statement if a specified condition is true. If\nthe condition is false, another statement can be executed.\n\n## Syntax\n\n    \n    \n    if (_condition_)\n       _statement1_\n    [else\n       _statement2_]\n    \n\n`condition`\n\n     An expression that evaluates to true or false.\n\n`statement1`\n\n     Statement that is executed if `condition` evaluates to true. Can be any statement, including further nested `if` statements. To execute multiple statements, use a [block][1] statement ({ ... }) to group those statements, to execute no statements, use an [empty][2] statement.\n\n`statement2`\n\n     Statement that is executed if `condition` evaluates to false and the `else` clause exists. Can be any statement, including block statements and further nested `if` statements.\n\n## Description\n\nMultiple `if...else` statements can be nested to create an `else if` clause.\nNote that there is no `elseif` (in one word) keyword in JavaScript.\n\n    \n    \n    if (_condition1_)\n       _statement1_\n    else if (_condition2_)\n       _statement2_\n    else if (_condition3_)\n       _statement3_\n    ...\n    else\n       _statementN_\n    \n\nTo see how this works, this is how it would look like if the nesting were\nproperly indented:\n\n    \n    \n    if (_condition1_)\n       _statement1_\n    else\n       if (_condition2_)\n          _statement2_\n       else\n          if (_condition3_)\n    ...\n    \n\nTo execute multiple statements within a clause, use a block statement (`{ ...\n}`) to group those statements. In general, it is a good practice to always use\nblock statements, especially in code involving nested `if` statements:\n\n    \n    \n    if (_condition_) {\n       _statements1_\n    } else {\n       _statements2_\n    }\n    \n\nDo not confuse the primitive boolean values `true` and `false` with the true\nand false values of the [Boolean][3] object. Any value that is not\n`undefined`, `null`, `0`, `NaN`, or the empty string (`\"\"`), and any object,\nincluding a Boolean object whose value is false, evaluates to true when passed\nto a conditional statement. For example:\n\n    \n    \n    var b = new Boolean(false);\n    if (b) // this condition evaluates to true\n    \n\n## Examples\n\n### Example: Using `if...else`\n\n    \n    \n    if (cipher_char === from_char) {\n       result = result + to_char;\n       x++;\n    } else {\n       result = result + clear_char;\n    }\n    \n\n### Example: Using `else if`\n\nNote that there is no `elseif` syntax in JavaScript. However, you can write it\nwith a space between `else` and `if`:\n\n    \n    \n    if (x > 5) {\n    \n    } else if (x > 50) {\n    \n    } else {\n    \n    }\n\n### Example: Assignment within the conditional expression\n\nIt is advisable to not use simple assignments in a conditional expression,\nbecause the assignment can be confused with equality when glancing over the\ncode. For example, do not use the following code:\n\n    \n    \n    if (x = y) {\n       /* do the right thing */\n    }\n    \n\nIf you need to use an assignment in a conditional expression, a common\npractice is to put additional parentheses around the assignment. For example:\n\n    \n    \n    if ((x = y)) {\n       /* do the right thing */\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'if statement' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'if statement' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`block`][1]\n  * [`switch`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.5\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-if-statement\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "empty", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/Empty", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/empty", "content": "## Summary\n\nAn **empty statement** is used to provide no statement, although the\nJavaScript syntax would expect one.\n\n## Syntax\n\n    \n    \n    ;\n    \n\n## Description\n\nThe empty statement is a semicolon (;) indicating that no statement will be\nexecuted, even if JavaScript syntax requires one. The opposite behavior, where\nyou want multiple statements, but JavaScript only allows a single one, is\npossible using a[ block statement][1]; it combines several statements into a\nsingle one.\n\n## Examples\n\nThe empty statement is sometimes used with loop statements. See the following\nexample with an empty loop body:\n\n    \n    \n    var arr = [1, 2, 3];\n    \n    // Assign all array values to 0\n    for (i = 0; i < arr.length; arr[i++] = 0) /* empty statement */ ;\n    \n    console.log(arr)\n    // [0, 0, 0]\n    \n\n**Note:** It is a good idea to comment the intentional use of the empty statement, as it is not really obvious to distinguish between a normal semicolon. In the following example the usage is probably not intentional:\n    \n    \n    if (condition);       // Caution, this \"if\" does nothing!\n       killTheUniverse()  // So this gets always executed!!!\n    \n\nAnother Example: An [`if...else`][2] statement without curly braces (`{}`). If\n`three` is `true`, nothing will happen, `four` does not matter, and also the\n`launchRocket()` function in the `else` case will not be executed.\n\n    \n    \n    if (one)\n      doOne();\n    else if (two)\n      doTwo();\n    else if (three)\n      ; // nothing here\n    else if (four)\n      doFour();\n    else\n      launchRocket();\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Empty statement' in that specification.][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Empty statement' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Block statement`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.3\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-empty-statement\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "with", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/with", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/with", "content": "Use of the `with` statement is not recommended, as it may be the source of\nconfusing bugs and compatibility issues. See the \"Ambiguity Con\" paragraph in\nthe \"Description\" section below for details.\n\n## Summary\n\nThe **with statement** extends the scope chain for a statement.\n\n## Syntax\n\n    \n    \n    with (expression) {\n      _statement_\n    }\n    \n\n`expression`\n\n     Adds the given expression to the scope chain used when evaluating the statement. The parentheses around the expression are required.\n`statement`\n\n     Any statement. To execute multiple statements, use a [block][1] statement ({ ... }) to group those statements.\n\n## Description\n\nJavaScript looks up an unqualified name by searching a scope chain associated\nwith the execution context of the script or function containing that\nunqualified name. The 'with' statement adds the given object to the head of\nthis scope chain during the evaluation of its statement body. If an\nunqualified name used in the body matches a property in the scope chain, then\nthe name is bound to the property and the object containing the property.\nOtherwise a [`ReferenceError`][2] is thrown.\n\nUsing `with` is not recommended, and is forbidden in ECMAScript 5 [strict\nmode][3]. The recommended alternative is to assign the object whose properties\nyou want to access to a temporary variable.\n\n### Performance pro & contra\n\n**Pro:** The `with` statement can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. The scope chain change required by 'with' is not computationally expensive. Use of 'with' will relieve the interpreter of parsing repeated object references. Note, however, that in many cases this benefit can be achieved by using a temporary variable to store a reference to the desired object.\n\n**Contra:** The `with` statement forces the specified object to be searched first for all name lookups. Therefore all identifiers that aren't members of the specified object will be found more slowly in a 'with' block. Where performance is important, 'with' should only be used to encompass code blocks that access members of the specified object.\n\n### Ambiguity contra\n\n**Contra:** The `with` statement makes it hard for a human reader or JavaScript compiler to decide whether an unqualified name will be found along the scope chain, and if so, in which object. So given this example:\n    \n    \n    function f(x, o) {\n      with (o) \n        print(x);\n    }\n\nOnly when `f` is called is `x` either found or not, and if found, either in\n`o` or (if no such property exists) in `f`'s activation object, where `x`\nnames the first formal argument. If you forget to define `x` in the object you\npass as the second argument, or if there's some similar bug or confusion, you\nwon't get an error -- just unexpected results.\n\n**Contra: **Code using `with` may not be forward compatible, especially when used with something else than a plain object. Consider this example:\n    \n    \n    function f(foo, values) {\n        with (foo) {\n            console.log(values)\n        }\n    }\n    \n\nIf you call `f([1,2,3], obj)` in an ECMAScript 5 environment, then the\n`values` reference inside the `with` statement will resolve to `obj`. However,\nECMAScript 6 introduces a `values` property on [`Array.prototype][4]` (so that\nit will be available on every array). So, in a JavaScript environment that\nsupports ECMAScript 6, the `values` reference inside the `with` statement will\nresolve to [`1,2,3].values`.\n\n## Examples\n\n### Example: Using `with`\n\nThe following `with` statement specifies that the [`Math`][5] object is the\ndefault object. The statements following the `with` statement refer to the\n[`PI`][6] property and the [`cos`][7] and [`sin`][8] methods, without\nspecifying an object. JavaScript assumes the `Math` object for these\nreferences.\n\n    \n    \n    var a, x, y;\n    var r = 10;\n    \n    with (Math) {\n      a = PI * r * r;\n      x = r * cos(PI);\n      y = r * sin(PI / 2);\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'with statement' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nNow forbidden in strict mode.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'with statement' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`block`][1]\n  * [Strict mode][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.10\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-with-statement\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "continue", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/continue", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/continue", "content": "## Summary\n\nThe **continue statement** terminates execution of the statements in the\ncurrent iteration of the current or labeled loop, and continues execution of\nthe loop with the next iteration.\n\n## Syntax\n\n    \n    \n    continue [ label ];\n\n`label`\n\n     Identifier associated with the label of the statement.\n\n## Description\n\nIn contrast to the [`break`][1] statement, `continue` does not terminate the\nexecution of the loop entirely: instead,\n\n  * In a [`while`][2] loop, it jumps back to the condition.\n  * In a [`for`][3] loop, it jumps to the update expression.\n\nThe `continue` statement can include an optional label that allows the program\nto jump to the next iteration of a labeled loop statement instead of the\ncurrent loop. In this case, the `continue` statement needs to be nested within\nthis labeled statement.\n\n## Examples\n\n### Example: Using `continue` with `while`\n\nThe following example shows a [`while`][2] loop that has a `continue`\nstatement that executes when the value of `i` is 3. Thus, `n` takes on the\nvalues 1, 3, 7, and 12.\n\n    \n    \n    i = 0;\n    n = 0;\n    while (i < 5) {\n       i++;\n       if (i === 3) {\n          continue;\n       }\n       n += i;\n    }\n    \n\n### Example: Using `continue` with a label\n\nIn the following example, a statement labeled `checkiandj` contains a\nstatement labeled `checkj`. If `continue` is encountered, the program\ncontinues at the top of the `checkj` statement. Each time `continue` is\nencountered, `checkj` reiterates until its condition returns false. When false\nis returned, the remainder of the `checkiandj` statement is completed.\n\nIf `continue` had a label of `checkiandj`, the program would continue at the\ntop of the `checkiandj` statement.\n\nSee also [`label`][4].\n\n    \n    \n    var i = 0, \n        j = 8;\n    \n    checkiandj: while (i < 4) {\n       console.log(\"i: \" + i);\n       i += 1;\n    \n       checkj: while (j > 4) {\n          console.log(\"j: \"+ j);\n          j -= 1;\n          if ((j % 2) == 0)\n             continue checkj;\n          console.log(j + \" is odd.\");\n       }\n       console.log(\"i = \" + i);\n       console.log(\"j = \" + j);\n    }\n    \n\nOutput:\n\n    \n    \n    \"i: 0\"\n    \n    // start checkj\n    \"j: 8\"\n    \"7 is odd.\"\n    \"j: 7\"\n    \"j: 6\"\n    \"5 is odd.\"\n    \"j: 5\"\n    // end checkj\n    \n    \"i = 1\" \n    \"j = 4\" \n    \n    \"i: 1\"\n    \"i = 2\" \n    \"j = 4\"\n    \n    \"i: 2\"\n    \"i = 3\"\n    \"j = 4\"\n    \n    \"i: 3\"\n    \"i = 4\"\n    \"j = 4\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Unlabeled version.\n\n</td> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nLabeled version added.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Continue statement' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Continue statement' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`break`][1]\n  * [`label`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.7\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-continue-statement\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "break", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/break", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/break", "content": "## Summary\n\nThe **break statement** terminates the current loop, [`switch`][1], or\n[`label`][2] statement and transfers program control to the statement\nfollowing the terminated statement.\n\n## Syntax\n\n    \n    \n    break [label];\n\n`label`\n\n     Optional. Identifier associated with the label of the statement.\u00a0 If the statement is not a loop or [`switch`][1], this is required.\n\n## Description\n\nThe `break` statement includes an optional label that allows the program to\nbreak out of a labeled statement. The `break` statement needs to be nested\nwithin this labeled statement. The labeled statement can be any [`block`][3]\nstatement; it does not have to be preceded by a loop statement.\n\n## Example\n\nThe following function has a `break` statement that terminates the\n[`while`][4] loop when `i` is 3, and then returns the value 3 * `x`.\n\n    \n    \n    function testBreak(x) {\n       var i = 0;\n    \n       while (i < 6) {\n          if (i == 3) {\n             break;\n          }\n          i += 1;\n       }\n       return i * x;\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Unlabeled version.\n\n</td> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nLabeled version added.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Break statement' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Break statement' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`continue`][7]\n  * [`label`][2]\n  * [`switch`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.8\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-break-statement\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "block", "parent": "/javascript/javascript_reference/statements_and_declarations", "url": "/en-US/docs/Web/JavaScript/Reference/Statements/block", "parsed_url": "/javascript/javascript_reference/statements_and_declarations/block", "content": "## Summary\n\nA** block statement** (or **compound statement** in other languages) is used\nto group zero or more statements. The block is delimited by a pair of curly\nbrackets.\n\n## Syntax\n\n    \n    \n    {\n      statement_1;\n      statement_2;\n      ...\n      statement_n;\n    }\n    \n\n`statement_1`, `statement_2`, `statement_n`\n\n     Statements grouped within the block statement.\n\n## Description\n\nThis statement is commonly used with control flow statements (e.g. `if`,\n`for`, `while`). For example:\n\n    \n    \n    while (x < 10) {\n      x++;\n    }\n    \n\nNote that the block statement does not end with a semicolon.\n\nThe block statement is often called **compound statement** in other languages.\nIt allows you to use multiple statements where JavaScript expects only one\nstatement. Combining statements into blocks is a common practice in\nJavaScript. The opposite behavior is possible using an [empty statement][1],\nwhere you provide no statement, although one is required.\n\n### No block scope\n\n**Important**: Variables declared with `var` do **not** have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example:\n    \n    \n    var x = 1;\n    {\n      var x = 2;\n    }\n    console.log(x); // logs 2\n    \n\nThis logs 2 because the `var x` statement within the block is in the same\nscope as the `var x` statement before the block. In C or Java, the equivalent\ncode would have outputted 1.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Block statement' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Block statement' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`while`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-12.1\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-block\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Statements and declarations"], "type": "statement"},
{"name": "Statements and declarations", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Statements", "parsed_url": "/javascript/javascript_reference/statements_and_declarations", "content": "JavaScript applications consist of statements with an appropriate syntax. A\nsingle statement may span multiple lines. Multiple statements may occur on a\nsingle line if each statement is separated by a semicolon. This isn't a\nkeyword, but a group of keywords.\n\n## Statements and declarations by category\n\nFor an alphabetical listing see the sidebar on the left.\n\n### Control flow\n\n[`Block`][1]\n\n     A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.\n[`break`][2]\n\n     Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.\n[`continue`][3]\n\n     Terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.\n[`Empty`][4]\n\n     An empty statement is used to provide no statement, although the JavaScript syntax would expect one.\n[`if...else`][5]\n\n     Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.\n[`switch`][6]\n\n     Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.\n[`throw`][7]\n\n     Throws a user-defined exception.\n[`try...catch`][8]\n\n     Marks a block of statements to try, and specifies a response, should an exception be thrown.\n\n### Declarations\n\n[`var`][9]\n\n     Declares a variable, optionally initializing it to a value.\n_ _ [`let`][10]\n\n     Declares a block scope local variable, optionally initializing it to a value.\n_ _ [`const`][11]\n\n     Declares a read-only named constant.\n\n### Functions\n\n[`function`][12]\n\n     Declares a function with the specified parameters.\n_ _ [`function*`][13]\n\n     Generators functions enable writing [iterators][14] more easily.\n[`return`][15]\n\n     Specifies the value to be returned by a function.\n_ _ [`yield`][16]\n\n     See\u00a0[New_in_JavaScript 1.7][17]\u00a0&\u00a0[Iterators and generators][18]\n\n### Iterations\n\n[`do...while][19]`\n\n     Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.\n[`for`][20]\n\n     Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.\n_ _ _ _ [`for each...in`][21]\n\n     Iterates a specified variable over all values of object's properties. For each distinct property, a specified statement is executed.\n[`for...in`][22]\n\n     Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.\n_ _ [`for...of`][23]\n\n     Iterates over iterable objects (including [arrays][24], array-like objects, [iterators and generators][25]), invoking a custom iteration hook with statements to be executed for the value of each distinct property.\n[`while`][26]\n\n     Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.\n\n### Others\n\n[`debugger`][27]\n\n     Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.\n_ _ [`export`][28]\n\n     Used to export functions to make them available for imports in external modules, another scripts.\n_ _ [`import`][29]\n\n     Used to import functions exported from an external module, another script.\n[`label`][30]\n\n     Provides a statement with an identifier that you can refer to using a `break` or `continue` statement.\n\n_ _ [`with`][31]\n\n     Extends the scope chain for a statement.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Statements' in that specification.][32]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ECMAScript Language: Statements and Declarations' in that\nspecification.][33]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew: function*, let, for...of, yield\n\n</td> </tr> </table>\n\n## See also\n\n  * [Operators][34]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/block\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/break\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Statements/continue\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/Empty\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Statements/switch\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Statements/var\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Statements/let\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Statements/const\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n*\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Statements/yield\n\n[17]: https://developer.mozilla.org/en/JavaScript/New_in_JavaScript/1.7\n\n[18]:\nhttps://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Statements/do...while\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Statements/for\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[24]: https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Reference/Global_Objects/Array\n\n[25]: https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Iterators_and_Generators\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Statements/while\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Statements/debugger\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Statements/export\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Statements/import\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Statements/label\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Statements/with\n\n[32]: http://www.ecma-international.org/ecma-262/5.1/#sec-12\n\n[33]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-statements-and-declarations\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Operators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "Arguments object", "parent": "/javascript/javascript_reference/functions", "url": "/en-US/docs/Web/JavaScript/Reference/Functions/arguments", "parsed_url": "/javascript/javascript_reference/functions/arguments_object", "content": "## Summary\n\nThe **`arguments`** object is an `Array`-like object corresponding to the\narguments passed to a function.\n\n### Syntax\n\n    \n    \n    arguments\n\n## Description\n\nThe `arguments` object is a local variable available within all functions;\n`arguments` as a property of `Function` can no longer be used.\n\nYou can refer to a function's arguments within the function by using the\n`arguments` object. This object contains an entry for each argument passed to\nthe function, the first entry's index starting at 0. For example, if a\nfunction is passed three arguments, you can refer to the argument as follows:\n\n    \n    \n    arguments[0]\n    arguments[1]\n    arguments[2]\n    \n\nThe arguments can also be set:\n\n    \n    \n    arguments[1] = 'new value';\n\nThe `arguments` object is not an [`Array`][1]. It is similar to an `Array`,\nbut does not have any `Array` properties except [`length][2]`. For example, it\ndoes not have the [`pop][3]` method. However it can be converted to a real\n`Array`:\n\n    \n    \n    var args = Array.prototype.slice.call(arguments);\n\nYou should not slice on arguments because it prevents optimizations in\nJavaScript engines (V8 for example).\n\nIf [Array generics][4] are available, one can use the following instead:\n\n    \n    \n    var args = Array.slice(arguments);\n\nThe `arguments` object is available only within a function body. Attempting to\naccess the `arguments` object outside a function declaration results in an\nerror.\n\nYou can use the `arguments` object if you call a function with more arguments\nthan it is formally declared to accept. This technique is useful for functions\nthat can be passed a variable number of arguments. You can use\n[`arguments.length][5]` to determine the number of arguments passed to the\nfunction, and then process each argument by using the `arguments` object. (To\ndetermine the number of arguments declared when a function was defined, use\nthe [`Function.length][6]` property.)\n\n## Properties\n\n[`arguments.callee][7]`\n\n     Reference to the currently executing function.\n[`arguments.caller][8]` _ _\n\n     Reference to the function that invoked the currently executing function.\n[`arguments.length][2]`\n\n     Reference to the number of arguments passed to the function.\n\n## Examples\n\n### Example: Defining a function that concatenates several strings\n\nThis example defines a function that concatenates several strings. The only\nformal argument for the function is a string that specifies the characters\nthat separate the items to concatenate. The function is defined as follows:\n\n    \n    \n    function myConcat(separator) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      return args.join(separator);\n    }\n\nYou can pass any number of arguments to this function, and it creates a list\nusing each argument as an item in the list.\n\n    \n    \n    // returns \"red, orange, blue\"\n    myConcat(\", \", \"red\", \"orange\", \"blue\");\n    \n    // returns \"elephant; giraffe; lion; cheetah\"\n    myConcat(\"; \", \"elephant\", \"giraffe\", \"lion\", \"cheetah\");\n    \n    // returns \"sage. basil. oregano. pepper. parsley\"\n    myConcat(\". \", \"sage\", \"basil\", \"oregano\", \"pepper\", \"parsley\");\n\n### Example: Defining a function that creates HTML lists\n\nThis example defines a function that creates a string containing HTML for a\nlist. The only formal argument for the function is a string that is \"`u`\" if\nthe list is to be unordered (bulleted), or \"`o`\" if the list is to be ordered\n(numbered). The function is defined as follows:\n\n    \n    \n    function list(type) {\n      var result = \"<\" + type + \"l><li>\";\n      var args = Array.prototype.slice.call(arguments, 1);\n      result += args.join(\"</li><li>\");\n      result += \"</li></\" + type + \"l>\"; // end list\n    \n      return result;\n    }\n\nYou can pass any number of arguments to this function, and it adds each\nargument as an item to a list of the type indicated. For example:\n\n    \n    \n    var listHTML = list(\"u\", \"One\", \"Two\", \"Three\");\n    \n    /* listHTML is:\n    \n    \"<ul><li>One</li><li>Two</li><li>Three</li></ul>\"\n    \n    */\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Arguments Object' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Arguments Exotic Objects' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][11].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Function`][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments/length\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_generic_methods\n\n[5]: /en-US/docs/JavaScript/Reference/Functions_and_function_scope/arguments/length\n\n[6]: /en-US/docs/JavaScript/Reference/Global_Objects/Function/length\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments/callee\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments/caller\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-10.6\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arguments-exotic-objects\n\n[11]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Functions"], "type": "others"},
{"name": "Intl.NumberFormat", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.numberformat", "content": "## Summary\n\nThe **`Intl.NumberFormat`** object is a constructor for objects that enable\nlanguage sensitive number formatting.\n\n## Syntax\n\n    \n    \n    new Intl.NumberFormat([locales[, options]])\n    Intl.NumberFormat.call(this[, locales[, options]])\n    \n\n### Parameters\n\n`locales`\n\n    \n\nOptional. A string with a BCP 47 language tag, or an array of such strings.\nFor the general form and interpretation of the `locales` argument, see the\n[Intl page][1]. The following Unicode extension key is allowed:\n\n`nu`\n\n    The numbering system to be used. Possible values include: `\"arab\"`, `\"arabext\"`, `\"bali\"`, `\"beng\"`, `\"deva\"`, `\"fullwide\"`, `\"gujr\"`, `\"guru\"`, `\"hanidec\"`, `\"khmr\"`, `\"knda\"`, `\"laoo\"`, `\"latn\"`, `\"limb\"`, `\"mlym\"`, `\"mong\"`, `\"mymr\"`, `\"orya\"`, `\"tamldec\"`, `\"telu\"`, `\"thai\"`, `\"tibt\"`.\n`options`\n\n    \n\nOptional. An object with some or all of the following properties:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n`style`\n\n    The formatting style to use. Possible values are `\"decimal\"` for plain number formatting, `\"currency\"` for currency formatting, and `\"percent\"` for percent formatting; the default is `\"decimal\"`.\n`currency`\n\n    The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as `\"USD\"` for the US dollar, `\"EUR\"` for the euro, or `\"CNY\"` for the Chinese RMB\u00a0\u2014 see the [Current currency & funds code list][3]. There is no default value; if the `style` is `\"currency\"`, the `currency` property must be provided.\n`currencyDisplay`\n\n    How to display the currency in currency formatting. Possible values are `\"symbol\"` to use a localized currency symbol such as \u20ac, `\"code\"` to use the ISO currency code, `\"name\"` to use a localized currency name such as `\"dollar\"`; the default is `\"symbol\"`.\n`useGrouping`\n\n    Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. Possible values are `true` and `false`; the default is `true`.\n\nThe following properties fall into two groups: `minimumIntegerDigits`,\n`minimumFractionDigits`, and `maximumFractionDigits` in one group,\n`minimumSignificantDigits` and `maximumSignificantDigits` in the other. If at\nleast one property from the second group is defined, then the first group is\nignored.\n\n`minimumIntegerDigits`\n\n    The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n`minimumFractionDigits`\n\n    The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list][3] (2 if the list doesn't provide that information).\n`maximumFractionDigits`\n\n    The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of `minimumFractionDigits` and 3; the default for currency formatting is the larger of `minimumFractionDigits` and the number of minor unit digits provided by the [ISO 4217 currency code list][3] (2 if the list doesn't provide that information); the default for percent formatting is the larger of `minimumFractionDigits` and 0.\n`minimumSignificantDigits`\n\n    The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n`maximumSignificantDigits`\n\n    The maximum number of significant digits to use. Possible values are from 1 to 21; the default is `minimumSignificantDigits`.\n\n## Description\n\n### Properties\n\n[`Intl.NumberFormat.prototype`][4]\n\n    Allows the addition of properties to all objects.\n\n### Methods\n\n[`Intl.NumberFormat.supportedLocalesOf()`][5]\n\n    Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## `NumberFormat` instances\n\n### Properties\n\n`NumberFormat` instances inherit the following properties from their\nprototype:\n\n`Intl.NumberFormat.prototype.constructor`\n\n     A reference to `Intl.NumberFormat`.\n[`Intl.NumberFormat.prototype.format`][6]\n\n     Getter; returns a function that formats a number according to the locale and formatting options of this [`NumberFormat`][7] object.\n\n### Methods\n\n`NumberFormat` instances inherit the following methods from their prototype:\n\n[`Intl.NumberFormat.prototype.resolvedOptions()`][8]\n\n     Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Examples\n\n### Example: Basic usage\n\nIn basic use without specifying a locale, a formatted string in the default\nlocale and with default options is returned.\n\n    \n    \n    var number = 3500;\n    \n    console.log(new Intl.NumberFormat().format(number));\n    // \u2192 '3,500' if in US English locale\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized number formats. In\norder to get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var number = 123456.789;\n    \n    // German uses comma as decimal separator and period for thousands\n    console.log(new Intl.NumberFormat('de-DE').format(number));\n    // \u2192 123.456,789\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    console.log(new Intl.NumberFormat('ar-EG').format(number));\n    // \u2192 \u0661\u0662\u0663\u0664\u0665\u0666\u066b\u0667\u0668\u0669\n    \n    // India uses thousands/lakh/crore separators\n    console.log(new Intl.NumberFormat('en-IN').format(number));\n    // \u2192 1,23,456.789\n    \n    // the nu extension key requests a numbering system, e.g. Chinese decimal\n    console.log(new Intl.NumberFormat('zh-Hans-CN-u-nu-hanidec').format(number));\n    // \u2192 \u4e00\u4e8c\u4e09,\u56db\u4e94\u516d.\u4e03\u516b\u4e5d\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    console.log(new Intl.NumberFormat(['ban', 'id']).format(number));\n    // \u2192 123.456,789\n    \n\n### Example: Using `options`\n\nThe results can be customized using the `options` argument:\n\n    \n    \n    var number = 123456.789;\n    \n    // request a currency format\n    console.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(number));\n    // \u2192 123.456,79\u00a0\u20ac\n    \n    // the Japanese yen doesn't use a minor unit\n    console.log(new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(number));\n    // \u2192 \uffe5123,457\n    \n    // limit to three significant digits\n    console.log(new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(number));\n    // \u2192 1,23,000\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.NumberFormat' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][10] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][11]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * Introduction: [The ECMAScript Internationalization API][12]\n  * Constructors \n    * [`Intl.Collator`][13]\n    * [`Intl.DateTimeFormat`][14]\n    * [`Intl.NumberFormat`][7]\n  * Methods \n    * [`String.prototype.localeCompare()`][15]\n    * [`Number.prototype.toLocaleString()`][16]\n    * [`Date.prototype.toLocaleString()`][17]\n    * [`Date.prototype.toLocaleDateString()`][18]\n    * [`Date.prototype.toLocaleTimeString()`][19]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: http://www.currency-iso.org/en/home/tables/table-a1.html\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/supportedLocalesOf\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/format\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/resolvedOptions\n\n[9]: http://www.ecma-international.org/ecma-402/1.0/#sec-11.1\n\n[10]: /en-US/Firefox/Releases/29\n\n[11]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[12]: http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Intl.DateTimeFormat", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.datetimeformat", "content": "## Summary\n\nThe **`Intl.DateTimeFormat`** object is a constructor for objects that enable\nlanguage sensitive date and time formatting.\n\n## Syntax\n\n    \n    \n    new Intl.DateTimeFormat([locales[, options]])\n    Intl.DateTimeFormat.call(this[, locales[, options]])\n\n### Parameters\n\n`locales`\n\n    \n\nOptional. A string with a BCP 47 language tag, or an array of such strings.\nFor the general form and interpretation of the `locales` argument, see the\n[Intl page][1]. The following Unicode extension keys are allowed:\n\n`nu`\n\n    Numbering system. Possible values include: `\"arab\"`, `\"arabext\"`, `\"bali\"`, `\"beng\"`, `\"deva\"`, `\"fullwide\"`, `\"gujr\"`, `\"guru\"`, `\"hanidec\"`, `\"khmr\"`, `\"knda\"`, `\"laoo\"`, `\"latn\"`, `\"limb\"`, `\"mlym\"`, `\"mong\"`, `\"mymr\"`, `\"orya\"`, `\"tamldec\"`, `\"telu\"`, `\"thai\"`, `\"tibt\"`.\n`ca`\n\n    Calendar. Possible values include: `\"buddhist\"`, `\"chinese\"`, `\"coptic\"`, `\"ethioaa\"`, `\"ethiopic\"`, `\"gregory\"`, `\"hebrew\"`, `\"indian\"`, `\"islamic\"`, `\"islamicc\"`, `\"iso8601\"`, `\"japanese\"`, `\"persian\"`, `\"roc\"`.\n`options`\n\n    \n\nOptional. An object with some or all of the following properties:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n`timeZone`\n\n    The time zone to use. The only value implementations must recognize is `\"UTC\"`; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the [IANA time zone database][3], such as `\"Asia/Shanghai\"`, `\"Asia/Kolkata\"`, `\"America/New_York\"`.\n`hour12`\n\n    Whether to use 12-hour time (as opposed to 24-hour time). Possible values are `true` and `false`; the default is locale dependent.\n`formatMatcher`\n\n    The format matching algorithm to use. Possible values are `\"basic\"` and `\"best fit\"`; the default is `\"best fit\"`. See the following paragraphs for information about the use of this property.\n\nThe following properties describe the date-time components to use in formatted\noutput, and their desired representations. Implementations are required to\nsupport at least the following subsets:\n\n  * `weekday`, `year`, `month`, `day`, `hour`, `minute`, `second`\n  * `weekday`, `year`, `month`, `day`\n  * `year`, `month`, `day`\n  * `year`, `month`\n  * `month`, `day`\n  * `hour`, `minute`, `second`\n  * `hour`, `minute`\n\nImplementations may support other subsets, and requests will be negotiated\nagainst all available subset-representation combinations to find the best\nmatch. Two algorithms are available for this negotiation and selected by the\n`formatMatcher` property: A [fully specified `\"basic\"` algorithm][4] and an\nimplementation dependent `\"best fit\"` algorithm.\n\n`weekday`\n\n    The representation of the weekday. Possible values are `\"narrow\"`, `\"short\"`, `\"long\"`.\n`era`\n\n    The representation of the era. Possible values are `\"narrow\"`, `\"short\"`, `\"long\"`.\n`year`\n\n    The representation of the year. Possible values are `\"numeric\"`, `\"2-digit\"`.\n`month`\n\n    The representation of the month. Possible values are `\"numeric\"`, `\"2-digit\"`, `\"narrow\"`, `\"short\"`, `\"long\"`.\n`day`\n\n    The representation of the day. Possible values are `\"numeric\"`, `\"2-digit\"`.\n`hour`\n\n    The representation of the hour. Possible values are `\"numeric\"`, `\"2-digit\"`.\n`minute`\n\n    The representation of the minute. Possible values are `\"numeric\"`, `\"2-digit\"`.\n`second`\n\n    The representation of the second. Possible values are `\"numeric\"`, `\"2-digit\"`.\n`timeZoneName`\n\n    The representation of the time zone name. Possible values are `\"short\"`, `\"long\"`.\n\nThe default value for each date-time component property is [`undefined`][5],\nbut if all component properties are [`undefined`][5], then `year`, `month`,\nand `day` are assumed to be `\"numeric\"`.\n\n## Description\n\n### Properties\n\n[`Intl.DateTimeFormat.prototype`][6]\n\n    Allows the addition of properties to all objects.\n\n### Methods\n\n[`Intl.DateTimeFormat.supportedLocalesOf()`][7]\n\n    Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## `DateTimeFormat` instances\n\n### Properties\n\n`DateTimeFormat` instances inherit the following properties from their\nprototype:\n\n`Intl.DateTimeFormat.prototype.constructor`\n\n     A reference to `Intl.DateTimeFormat`.\n[`Intl.DateTimeFormat.prototype.format`][8]\n\n     Getter; returns a function that formats a date according to the locale and formatting options of this DateTimeFormat object.\n\n### Methods\n\n`DateTimeFormat` instances inherit the following methods from their prototype:\n\n[`Intl.DateTimeFormat.prototype.resolvedOptions()`][9]\n\n     Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\n## Examples\n\n### Example: Using `DateTimeFormat`\n\nIn basic use without specifying a locale, `DateTimeFormat` uses the default\nlocale and default options.\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // toLocaleString without arguments depends on the implementation,\n    // the default locale, and the default time zone\n    console.log(new Intl.DateTimeFormat().format(date));\n    // \u2192 \"12/19/2012\" if run in en-US locale with time zone America/Los_Angeles\n    \n\n### Example: Using `locales`\n\nThis example shows some of the variations in localized date and time formats.\nIn order to get the format of the language used in the user interface of your\napplication, make sure to specify that language (and possibly some fallback\nlanguages) using the `locales` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // formats below assume the local time zone of the locale;\n    // America/Los_Angeles for the US\n    \n    // US English uses month-day-year order\n    console.log(new Intl.DateTimeFormat('en-US').format(date));\n    // \u2192 \"12/19/2012\"\n    \n    // British English uses day-month-year order\n    console.log(new Intl.DateTimeFormat('en-GB').format(date));\n    // \u2192 \"20/12/2012\"\n    \n    // Korean uses year-month-day order\n    console.log(new Intl.DateTimeFormat('ko-KR').format(date));\n    // \u2192 \"2012. 12. 20.\"\n    \n    // Arabic in most Arabic speaking countries uses real Arabic digits\n    console.log(new Intl.DateTimeFormat('ar-EG').format(date));\n    // \u2192 \"\u0662\u0660\u200f/\u0661\u0662\u200f/\u0662\u0660\u0661\u0662\"\n    \n    // for Japanese, applications may want to use the Japanese calendar,\n    // where 2012 was the year 24 of the Heisei era\n    console.log(new Intl.DateTimeFormat('ja-JP-u-ca-japanese').format(date));\n    // \u2192 \"24/12/20\"\n    \n    // when requesting a language that may not be supported, such as\n    // Balinese, include a fallback language, in this case Indonesian\n    console.log(new Intl.DateTimeFormat(['ban', 'id']).format(date));\n    // \u2192 \"20/12/2012\"\n    \n\n### Example: Using `options`\n\nThe date and time formats can be customized using the `options` argument:\n\n    \n    \n    var date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0));\n    \n    // request a weekday along with a long date\n    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    console.log(new Intl.DateTimeFormat('de-DE', options).format(date));\n    // \u2192 \"Donnerstag, 20. Dezember 2012\"\n    \n    // an application may want to use UTC and make that visible\n    options.timeZone = 'UTC';\n    options.timeZoneName = 'short';\n    console.log(new Intl.DateTimeFormat('en-US', options).format(date));\n    // \u2192 \"Thursday, December 20, 2012, GMT\"\n    \n    // sometimes you want to be more precise\n    options = {\n      hour: 'numeric', minute: 'numeric', second: 'numeric',\n      timeZoneName: 'short'\n    };\n    console.log(new Intl.DateTimeFormat('en-AU', options).format(date));\n    // \u2192 \"2:00:00 pm AEDT\"\n    \n    // sometimes even the US needs 24-hour time\n    options = {\n      year: 'numeric', month: 'numeric', day: 'numeric',\n      hour: 'numeric', minute: 'numeric', second: 'numeric',\n      hour12: false\n    };\n    console.log(date.toLocaleString('en-US', options));\n    // \u2192 \"12/19/2012, 19:00:00\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.DateTimeFormat' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][11] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][12]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * Introduction: [The ECMAScript Internationalization API][13]\n  * Constructors \n    * [`Intl.Collator`][14]\n    * [`Intl.DateTimeFormat`][15]\n    * [`Intl.NumberFormat`][16]\n  * Methods \n    * [`String.prototype.localeCompare()`][17]\n    * [`Number.prototype.toLocaleString()`][18]\n    * [`Date.prototype.toLocaleString()`][19]\n    * [`Date.prototype.toLocaleDateString()`][20]\n    * [`Date.prototype.toLocaleTimeString()`][21]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: https://www.iana.org/time-zones\n\n[4]: http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/prototype\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/supportedLocalesOf\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/resolvedOptions\n\n[10]: http://www.ecma-international.org/ecma-402/1.0/#sec-12.1\n\n[11]: /en-US/Firefox/Releases/29\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[13]: http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Intl.Collator", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl.collator", "content": "## Summary\n\nThe **`Intl.Collator`** object is a constructor for collators, objects that\nenable language sensitive string comparison.\n\n## Syntax\n\n    \n    \n    new Intl.Collator([locales[, options]])\n    Intl.Collator.call(this[, locales[, options]])\n\n### Parameters\n\n`locales`\n\n    \n\nOptional. A string with a BCP 47 language tag, or an array of such strings.\nFor the general form and interpretation of the `locales` argument, see the\n[Intl page][1]. The following Unicode extension keys are allowed:\n\n`co`\n\n    Variant collations for certain locales. Possible values include: `\"big5han\"`, `\"dict\"`, `\"direct\"`, `\"ducet\"`, `\"gb2312\"`, `\"phonebk\"`, `\"phonetic\"`, `\"pinyin\"`, `\"reformed\"`, `\"searchjl\"`, `\"stroke\"`, `\"trad\"`, `\"unihan\"`. The `\"standard\"` and `\"search\"` values are ignored; they are replaced by the `options` property `usage` (see below).\n`kn`\n\n    Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are `\"true\"` and `\"false\"`. This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence.\n`kf`\n\n    Whether upper case or lower case should sort first. Possible values are `\"upper\"`, `\"lower\"`, or `\"false\"` (use the locale's default). This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence.\n`options`\n\n    \n\nOptional. An object with some or all of the following properties:\n\n`localeMatcher`\n\n    The locale matching algorithm to use. Possible values are `\"lookup\"` and `\"best fit\"`; the default is `\"best fit\"`. For information about this option, see the [Intl page][2].\n`usage`\n\n    Whether the comparison is for sorting or for searching for matching strings. Possible values are `\"sort\"` and `\"search\"`; the default is `\"sort\"`.\n`sensitivity`\n\n    \n\nWhich differences in the strings should lead to non-zero result values.\nPossible values are:\n\n  * `\"base\"`: Only strings that differ in base letters compare as unequal. Examples: `a \u2260 b`, `a = a\u0301`, `a = A`.\n  * `\"accent\"`: Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: `a \u2260 b`, `a \u2260 a\u0301`, `a = A`.\n  * `\"case\"`: Only strings that differ in base letters or case compare as unequal. Examples: `a \u2260 b`, `a = a\u0301`, `a \u2260 A`.\n  * `\"variant\"`: Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: `a \u2260 b`, `a \u2260 a\u0301`, `a \u2260 A`.\n\nThe default is `\"variant\"` for usage `\"sort\"`; it's locale dependent for usage\n`\"search\"`.\n\n`ignore\u00adPunctua\u00adtion`\n\n    Whether punctuation should be ignored. Possible values are `true` and `false`; the default is `false`.\n`numeric`\n\n    Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". Possible values are `true` and `false`; the default is `false`. This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence. Implementations are not required to support this property.\n`caseFirst`\n\n    Whether upper case or lower case should sort first. Possible values are `\"upper\"`, `\"lower\"`, or `\"false\"` (use the locale's default); the default is `\"false\"`. This option can be set through an `options` property or through a Unicode extension key; if both are provided, the `options` property takes precedence. Implementations are not required to support this property.\n\n## Description\n\n### Properties\n\n[`Intl.Collator.prototype`][3]\n\n    Allows the addition of properties to all objects.\n\n### Methods\n\n[`Intl.Collator.supportedLocalesOf()`][4]\n\n    Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.\n\n## `Collator` instances\n\n### Properties\n\n`Collator` instances inherit the following properties from their prototype:\n\n[`Intl.Collator.prototype.compare`][5]\n\n     Getter; returns a function that compares two strings according to the sort order of this Collator object.\n`Intl.Collator.protoype.constructor`\n\n     A reference to `Intl.Collator`.\n\n### Methods\n\n`Collator` instances inherit the following methods from their prototype:\n\n[`Intl.Collator.prototype.resolvedOptions()`][6]\n\n     Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.\n\n## Examples\n\n### Example: Using `Collator`\n\nThe following example demonstrates the different potential results for a\nstring occurring before, after, or at the same level as another:\n\n    \n    \n    console.log(new Intl.Collator().compare('a', 'c')); // \u2192 a negative value\n    console.log(new Intl.Collator().compare('c', 'a')); // \u2192 a positive value\n    console.log(new Intl.Collator().compare('a', 'a')); // \u2192 0\n    \n\nNote that the results shown in the code above can vary between browsers and\nbrowser versions. This is because the values are implementation-specific. That\nis, the specification requires only that the before and after values are\nnegative and positive.\n\n### Example: Using `locales`\n\nThe results provided by [`Collator.prototype.compare()`][5] vary between\nlanguages. In order to get the sort order of the language used in the user\ninterface of your application, make sure to specify that language (and\npossibly some fallback languages) using the `locales` argument:\n\n    \n    \n    // in German, \u00e4 sorts with a\n    console.log(new Intl.Collator('de').compare('\u00e4', 'z'));\n    // \u2192 a negative value\n    \n    // in Swedish, \u00e4 sorts after z\n    console.log(new Intl.Collator('sv').compare('\u00e4', 'z'));\n    // \u2192 a positive value\n    \n\n### Example: Using `options`\n\nThe results provided by [`Collator.prototype.compare()`][5] can be customized\nusing the `options` argument:\n\n    \n    \n    // in German, \u00e4 has a as the base letter\n    console.log(new Intl.Collator('de', { sensitivity: 'base' }).compare('\u00e4', 'a'));\n    // \u2192 0\n    \n    // in Swedish, \u00e4 and a are separate base letters\n    console.log(new Intl.Collator('sv', { sensitivity: 'base' }).compare('\u00e4', 'a'));\n    // \u2192 a positive value\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl.Collator' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][8] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][9]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * Introduction: [The ECMAScript Internationalization API][10]\n  * Constructors \n    * [`Intl.Collator`][11]\n    * [`Intl.DateTimeFormat`][12]\n    * [`Intl.NumberFormat`][13]\n  * Methods \n    * [`String.prototype.localeCompare()`][14]\n    * [`Number.prototype.toLocaleString()`][15]\n    * [`Date.prototype.toLocaleString()`][16]\n    * [`Date.prototype.toLocaleDateString()`][17]\n    * [`Date.prototype.toLocaleTimeString()`][18]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/prototype\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/supportedLocalesOf\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/compare\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator/resolvedOptions\n\n[7]: http://www.ecma-international.org/ecma-402/1.0/#sec-10.1\n\n[8]: /en-US/Firefox/Releases/29\n\n[9]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[10]: http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Generator", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/generator", "content": "## Summary\n\nLets you work with generators.\n\n## Syntax\n\n    \n    \n    function fibonacci(){\n    \tvar fn1 = 1;\n    \tvar fn2 = 1;\n    \t\twhile (1){\n    \t\t\tvar current = fn2;\n    \t\t\tfn2 = fn1;\n    \t\t\tfn1 = fn1 + current;\n    \t\t\tyield current;\n    \t\t}\n    \t}\n     \n    var it = fibonacci();\n    var it2 = (i * 2 for (i in it));\n    \n\n## Methods\n\n_For methods available on `Generator` instances, see [Methods of Generator\ninstances][1]._\n\n[next][2]\n\n     \u00a0\n\n[send][3]\n\n     \u00a0\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/prototype#Methods\n\n[2]: /en/JavaScript/Reference/Global%20Objects/Generator/next\n\n[3]: /en/JavaScript/Reference/Global%20Objects/Generator/send\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Iterator", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/iterator", "content": "The Iterator constructor is a SpiderMonkey-specific feature. For future-facing\nusages, consider using [for..of][1] loops and the [iterator protocol][2]\n\n## Summary\n\nThe Iterator function.\n\n## Properties\n\n## Methods\n\n`next ( )`\n\n     Returns an item .\n\n## Description\n\nAn overview of the usage is available on the [Iterators and Generators][3]\npage.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[2]: /en-US/docs/Web/JavaScript/Guide/The_Iterator_protocol\n\n[3]: /en-US/docs/JavaScript/Guide/Iterators_and_Generators\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Intl", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/intl", "content": "## Summary\n\nThe **`Intl`** object is the namespace for the ECMAScript Internationalization\nAPI, which provides language sensitive string comparison, number formatting,\nand date and time formatting. The constructors for [`Collator`][1],\n[`NumberFormat`][2], and [`DateTimeFormat`][3] objects are properties of the\n`Intl` object. This page documents these properties as well as functionality\ncommon to the internationalization constructors and other language sensitive\nfunctions.\n\n## Properties\n\n[`Intl.Collator`][1]\n\n    Constructor for collators, objects that enable language sensitive string comparison.\n[`Intl.DateTimeFormat`][3]\n\n    Constructor for objects that enable language sensitive date and time formatting.\n[`Intl.NumberFormat`][2]\n\n    Constructor for objects that enable language sensitive number formatting.\n\n## Locale identification and negotiation\n\nThe internationalization constructors as well as several language sensitive\nmethods of other constructors (listed under See also) use a common pattern for\nidentifying locales and determing the one they will actually use: they all\naccept `locales` and `options` arguments, and negotiate the requested\nlocale(s) against the locales they support using an algorithm specified in the\n`options.localeMatcher` property.\n\n### `locales` argument\n\nThe `locales` argument must be either a string holding a [BCP 47 language\ntag][4], or an array of such language tags. If the `locales` argument is not\nprovided or is undefined, the runtime's default locale is used.\n\nA BCP 47 language tag identifies a language or locale (the difference between\nthe two is fuzzy). In their most common form it can contain, in this order: a\nlanguage code, a script code, and a country code, all separated by hyphens.\nExamples:\n\n  * `\"hi\"`: Hindi.\n  * `\"de-AT\"`: German as used in Austria.\n  * `\"zh-Hans-CN\"`: Chinese written in simplified characters as used in China.\n\nThe subtags identifying languages, scripts, countries (regions), and (rarely\nused) variants in BCP 47 language tags can be found in the [IANA Language\nSubtag Registry][5].\n\nBCP 47 also allows for extensions, and one of them matters to the JavaScript\ninternationalization functions: the `\"u\"` (Unicode) extension. It can be used\nto request a customization of the locale-specific behavior of a\n[`Collator`][1], [`NumberFormat`][2], or [`DateTimeFormat`][3] object.\nExamples:\n\n  * `\"de-DE-u-co-phonebk\"`: Use the phonebook variant of the German sort order, which expands umlauted vowels to character pairs: \u00e4 \u2192 ae, \u00f6 \u2192 oe, \u00fc \u2192 ue.\n  * `\"th-TH-u-nu-thai\"`: Use Thai digits (\u0e50, \u0e51, \u0e52, \u0e53, \u0e54, \u0e55, \u0e56, \u0e57, \u0e58, \u0e59) in number formatting.\n  * `\"ja-JP-u-ca-japanese\"`: Use the Japanese calendar in date and time formatting, so that 2013 is expressed as the year 25 of the Heisei period, or \u5e73\u621025.\n\n### Locale negotiation\n\nThe `locales` argument, after stripping off all Unicode extensions, is\ninterpreted as a prioritized request from the application. The runtime\ncompares it against the locales it has available and picks the best one\navailable. Two matching algorithms exist: the `\"lookup\"` matcher follows the\nLookup algorithm specified in [BCP 47][6]; the `\"best fit\"` matcher lets the\nruntime provide a locale that's at least, but possibly more, suited for the\nrequest than the result of the Lookup algorithm. If the application doesn't\nprovide a `locales` argument, or the runtime doesn't have a locale that\nmatches the request, then the runtime's default locale is used. The matcher\ncan be selected using a property of the `options` argument (see below).\n\nIf the selected language tag had a Unicode extension substring, that extension\nis now used to customize the constructed object or the behavior of the\nfunction. Each constructor or function supports only a subset of the keys\ndefined for the Unicode extension, and the supported values often depend on\nthe language tag. For example, the `\"co\"` key (collation) is only supported by\n[`Collator`][1], and its `\"phonebk\"` value is only supported for German.\n\n### `options` argument\n\nThe `options` argument must be an object with properties that vary between\nconstructors and functions. If the `options` argument is not provided or is\nundefined, default values are used for all properties.\n\nOne property is supported by all language sensitive constructors and\nfunctions: The `localeMatcher` property, whose value must be a string\n`\"lookup\"` or `\"best fit\"` and which selects one of the locale matching\nalgorithms described above.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Internationalization API 1.0 (ECMA-402)  \nThe definition of 'Intl' in that specification.][7]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari (WebKit)\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n24\n\n</td>  \n<td>\n\n[29][8] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n15\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Phone\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n26\n\n</td>  \n<td>\n\nNot\u00a0supported  \n[bug\u00a0864843][9]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * Introduction: [The ECMAScript Internationalization API][10]\n  * Constructors \n    * [`Intl.Collator`][1]\n    * [`Intl.DateTimeFormat`][3]\n    * [`Intl.NumberFormat`][2]\n  * Methods \n    * [`String.prototype.localeCompare()`][11]\n    * [`Number.prototype.toLocaleString()`][12]\n    * [`Date.prototype.toLocaleString()`][13]\n    * [`Date.prototype.toLocaleDateString()`][14]\n    * [`Date.prototype.toLocaleTimeString()`][15]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[4]: http://tools.ietf.org/html/rfc5646\n\n[5]: http://www.iana.org/assignments/language-subtag-registry\n\n[6]: http://tools.ietf.org/html/rfc4647#section-3.4\n\n[7]: http://www.ecma-international.org/ecma-402/1.0/#sec-8\n\n[8]: /en-US/Firefox/Releases/29\n\n[9]: https://bugzilla.mozilla.org/show_bug.cgi?id=864843\n\n[10]: http://norbertlindenberg.com/2012/12/ecmascript-internationalization-api/index.html\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Proxy", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/proxy", "content": "## Introduction\n\nProxies are objects for which the programmer has to define the semantics in\nJavaScript. The default object semantics are implemented in the JavaScript\nengine, often written in lower-level languages like C++. Proxies let the\nprogrammer define most of the behavior of an object in JavaScript. They are\nsaid to provide a **meta-programming API**.\n\n**Note**: The SpiderMonkey Proxy implementation is a prototype and the Proxy API and semantics specifications are unstable. The SpiderMonkey implementation may not reflect the latest specification draft. It is subject to change anytime. It is provided as an experimental feature. **Do not rely on it for production code.**\n\nThis page describes the new API (called 'direct_proxies') which is part of\nFirefox 18. For the previous API (Firefox 17 and below), visit the [old proxy\nAPI][1] page\n\n## Terminology\n\ncatch-all mechanism (or \"intercession API\")\n\n     The technical term for this feature.\nproxy\n\n     The object whose accesses are being intercepted.\nhandler\n\n     Placeholder object which contains traps.\ntraps\n\n     The methods that provide property access. This is analogous to the concept of traps in operating systems.\ntarget\n\n     Object which the proxy virtualizes. It is often used as storage backend for the proxy. Invariants regarding object non-extensibility or non-configurable properties are verified against the target.\n\n## Proxy API\n\nProxies are new objects; it's not possible to \"proxyfy\" an existing object.\nHere is how to create a proxy\n\n    \n    \n    var p = new Proxy(target, handler);\n    \n\nWhere:\n\n  * `target` is an object (can be any sort of objects, including a native array, a function or even another proxy).\n  * `handler` is an object whose properties are functions which define the behavior of the proxy when an operation is performed on it.\n\n## Handler API\n\nAll traps are optional. If a trap has not been defined, the default behavior\nis to forward the operation to the target.  \n  \n<table>  \n<tr>  \n<th>\n\nJavaScript code\n\n</th>  \n<th>\n\nHandler method\n\n</th>  \n<th>\n\nDescription\n\n</th> </tr>  \n<tr>  \n<td>\n\n`Object.getOwnPropertyDescriptor(proxy, name)`\n\n</td>  \n<td>\n\n`**getOwnPropertyDescriptor**  \nfunction(target, name) -> PropertyDescriptor | undefined`\n\n</td>  \n<td>\n\nShould return a valid property descriptor object, or `undefined` to indicate\nthat no property named `name` exists in the emulated object.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Object.getOwnPropertyNames(proxy)`  \n``Object.getOwnPropertySymbols(proxy)``  \n```Object.keys(proxy)```\n\n</td>  \n<td>\n\n``**ownKeys**` function(target) -> [string | symbol]`\n\n</td>  \n<td>\n\nReturn an array of all own (non-inherited) property names of the emulated\nobject.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Object.defineProperty(proxy,name,pd)`\n\n</td>  \n<td>\n\n`**defineProperty** function(target, name, propertyDescriptor) -> any`\n\n</td>  \n<td>\n\nDefine a new property whose attributes are determined by the given\n`propertyDescriptor`. The return value of this method is ignored.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`delete proxy.name`\n\n</td>  \n<td>\n\n`**deleteProperty** function(target, name) -> boolean`\n\n</td>  \n<td>\n\nDelete the named property from the proxy. The boolean return value of this\nmethod should indicate whether or not the `name` property was successfully\ndeleted.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Object.preventExtensions(proxy)`\n\n</td>  \n<td>\n\n`**preventExtensions** function(target) -> boolean`\n\n</td>  \n<td>\n\nMakes the object non-extensible. The boolean indicates whether the operation\nwas successful\n\n</td> </tr>  \n<tr>  \n<td>\n\n`name in proxy`\n\n</td>  \n<td>\n\n`**has** function(target, name) -> boolean`\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n`proxy.name` (in the context of \"getting the value\")\n\n`receiver.name` (if `receiver` inherits from a proxy and does not override\n`name`)\n\n</td>  \n<td>\n\n`**get** function(target, name, receiver) -> any`\n\n</td>  \n<td>\n\n`receiver` is either the proxy or an object that inherits from the proxy.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`proxy.name = val` (in the context of \"setting the value\")\n\n`receiver.name = val` (if `receiver` inherits from a proxy and does not\noverride `name`)\n\n</td>  \n<td>\n\n`**set** function(target, name, val, receiver) -> boolean`\n\n</td>  \n<td>\n\n`receiver` is either the proxy or an object that inherits from the proxy.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`for(prop in proxy){...}`\n\n</td>  \n<td>\n\n`**enumerate** function(target) -> [String]`\n\n</td>  \n<td>\n\nThis trap is not currently implemented. [(Bug 783829)][2]\n\n</td> </tr>  \n<tr>  \n<td>\n\n`proxy(...args)  \nproxy.apply(thisValue, args)  \nproxy.call(thisValue, ...args)`\n\n</td>  \n<td>\n\n`**apply** function(target, thisValue, args) -> any`\n\n</td>  \n<td>\n\n`target `must be a function.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`new proxy(...args)`\n\n</td>  \n<td>\n\n`**construct** function(target, args) -> object`\n\n</td>  \n<td>\n\n`target `must be a function.\n\n</td> </tr> </table>\n\n## Invariants\n\nEven though proxies provide a lot of power to users, some operations are not\ntrapped in order to keep the language consistent:\n\n  * The double and triple equal (`==`, `===`) operator is not trapped. `p1 === p2` if and only if `p1` and `p2` refer to the same proxy.\n  * At present, `Object.getPrototypeOf(proxy)` unconditionally returns `Object.getPrototypeOf(target)`, because the ES6 getPrototypeOf trap is not yet implemented.\n  * `typeof proxy` unconditionally returns `typeof target`. In particular, `proxy` may be used as a function only if `target` is already a function.\n  * `Array.isArray(proxy)` unconditionally returns `Array.isArray(target)`.\n  * `Object.prototype.toString.call(proxy)` unconditionally returns `Object.prototype.toString.call(target)`, because ES6 Symbol.toStringTag is not yet implemented.\n\n## Examples\n\n### Very simple example\n\nAn object with `37` as its default value when the property name is not in the\nobject\n\n    \n    \n    var handler = {\n        get: function(target, name){\n            return name in target?\n                target[name] :\n                37;\n        }\n    };\n    \n    var p = new Proxy({}, handler);\n    p.a = 1;\n    p.b = undefined;\n    \n    console.log(p.a, p.b); // 1, undefined\n    console.log('c' in p, p.c); // false, 37\n    \n\n### No-op forwarding proxy\n\nIn this example, we are using a native JavaScript object to which our proxy\nwill forward all operations that are applied to it.\n\n    \n    \n    var target = {};\n    var p = new Proxy(target, {});\n    \n    p.a = 37; // operation forwarded to the proxy\n    \n    console.log(target.a); // 37. The operation has been properly forwarded\n    \n\n### Validation\n\nWith a `Proxy`, you can easily validate the passed value for an object.\n\n    \n    \n    let validator = {\n      set: function(obj, prop, value) {\n        if (prop === 'age') {\n          if (!Number.isInteger(value)) {\n            throw new TypeError('The age is not an integer');\n          }\n          if (value > 200) {\n            throw new RangeError('The age seems invalid');\n          }\n        }\n    \n        // The default behavior to store the value\n        obj[prop] = value;\n      }\n    };\n    \n    let person = new Proxy({}, validator);\n    \n    person.age = 100;\n    console.log(person.age); // 100\n    person.age = 'young'; // Throws an exception\n    person.age = 300; // Throws an exception\n    \n\n### Extending constructor\n\nA function proxy could easily extend a constructor with a new constructor.\n\n    \n    \n    function extend(sup,base){\n        var descriptor=Object.getOwnPropertyDescriptor(\n          base.prototype,\"constructor\"\n          );\n    \u00a0\u00a0 \u00a0base.prototype=Object.create(sup.prototype);\n    \u00a0\u00a0 \u00a0var handler={\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0construct:function(target,args){\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0var obj=Object.create(base.prototype);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0this.apply(target,obj,args);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return obj;\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0},\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0apply:function(target,that,args){\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0sup.apply(that,args);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0base.apply(that,args);\n    \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n    \u00a0\u00a0 \u00a0};\n    \u00a0\u00a0 \u00a0var proxy=new Proxy(base,handler);\n        descriptor.value=proxy;\n        Object.defineProperty(base.prototype,\"constructor\",descriptor);\n        return proxy;\n    }\n    \n    var Person=function(name){\n    \u00a0\u00a0 \u00a0this.name=name\n    \u00a0\u00a0 \u00a0};\n    \n    var Boy=extend(Person,function(name,age){\n    \u00a0\u00a0 \u00a0this.age=age;\n    \u00a0\u00a0 \u00a0});\n    \u00a0\u00a0 \u00a0\n    Boy.prototype.sex=\"M\";\n    \n    var Peter=new Boy(\"Peter\",13);\n    console.log(Peter.sex); // \"M\"\n    console.log(Peter.name); // \"Peter\"\n    console.log(Peter.age); // 13\n\n### Manipulating DOM nodes\n\nSometimes you want to toggle the attribute or class name of two different\nelements. Here's how:\n\n    \n    \n    let view = new Proxy({\n      selected: null\n    },\n    {\n      set: function(obj, prop, newval) {\n        let oldval = obj[prop];\n    \n        if (prop === 'selected') {\n          if (oldval) {\n            oldval.setAttribute('aria-selected', 'false');\n          }\n          if (newval) {\n            newval.setAttribute('aria-selected', 'true');\n          }\n        }\n    \n        // The default behavior to store the value\n        obj[prop] = newval;\n      }\n    });\n    \n    let i1 = view.selected = document.getElementById('item-1');\n    console.log(i1.getAttribute('aria-selected')); // 'true'\n    \n    let i2 = view.selected = document.getElementById('item-2');\n    console.log(i1.getAttribute('aria-selected')); // 'false'\n    console.log(i2.getAttribute('aria-selected')); // 'true'\n    \n\n### Value correction and an extra property\n\nThe `products` proxy object evaluates the passed value and convert it to an\narray if needed. The object also supports an extra property called\n`latestBrowser` both as a getter and a setter.\n\n    \n    \n    let products = new Proxy({\n      browsers: ['Internet Explorer', 'Netscape']\n    },\n    {\n      get: function(obj, prop) {\n        // An extra property\n        if (prop === 'latestBrowser') {\n          return obj.browsers[obj.browsers.length - 1];\n        }\n    \n        // The default behavior to return the value\n        return obj[prop];\n      },\n      set: function(obj, prop, value) {\n        // An extra property\n        if (prop === 'latestBrowser') {\n          obj.browsers.push(value);\n          return;\n        }\n    \n        // Convert the value if it is not an array\n        if (typeof value === 'string') {\n          value = [value];\n        }\n    \n        // The default behavior to store the value\n        obj[prop] = value;\n      }\n    });\n    \n    console.log(products.browsers); // ['Internet Explorer', 'Netscape']\n    products.browsers = 'Firefox'; // pass a string (by mistake)\n    console.log(products.browsers); // ['Firefox'] <- no problem, the value is an array\n    \n    products.latestBrowser = 'Chrome';\n    console.log(products.browsers); // ['Firefox', 'Chrome']\n    console.log(products.latestBrowser); // 'Chrome'\n    \n\n### Finding an array item object by its property\n\nThis proxy extends an array with some utility features. As you see, you can\nflexibly \"define\" properties without using [`Object.defineProperties`][3].\nThis example can be adapted to find a table row by its cell. In that case, the\ntarget will be [`table.rows`][4].\n\n    \n    \n    let products = new Proxy([\n      { name: 'Firefox', type: 'browser' },\n      { name: 'SeaMonkey', type: 'browser' },\n      { name: 'Thunderbird', type: 'mailer' }\n    ],\n    {\n      get: function(obj, prop) {\n        // The default behavior to return the value; prop is usually an integer\n        if (prop in obj) {\n          return obj[prop];\n        }\n    \n        // Get the number of products; an alias of products.length\n        if (prop === 'number') {\n          return obj.length;\n        }\n    \n        let result, types = {};\n    \n        for (let product of obj) {\n          if (product.name === prop) {\n            result = product;\n          }\n          if (types[product.type]) {\n            types[product.type].push(product);\n          } else {\n            types[product.type] = [product];\n          }\n        }\n    \n        // Get a product by name\n        if (result) {\n          return result;\n        }\n    \n        // Get products by type\n        if (prop in types) {\n          return types[prop];\n        }\n    \n        // Get product types\n        if (prop === 'types') {\n          return Object.keys(types);\n        }\n    \n        return undefined;\n      }\n    });\n    \n    console.log(products[0]); // { name: 'Firefox', type: 'browser' }\n    console.log(products['Firefox']); // { name: 'Firefox', type: 'browser' }\n    console.log(products['Chrome']); // undefined\n    console.log(products.browser); // [{ name: 'Firefox', type: 'browser' }, { name: 'SeaMonkey', type: 'browser' }]\n    console.log(products.types); // ['browser', 'mailer']\n    console.log(products.number); // 3\n    \n\n### A complete `traps` list example\n\nNow in order to create a complete sample `traps` list, for didactic purposes,\nwe will try to proxify a _non native_ object that is particularly suited to\nthis type of operation: the `docCookies` global object created by [the \"little\nframework\" published on the `document.cookie` page][5].\n\n    \n    \n    /*\n      var docCookies = ... get the \"docCookies\" object here:\u00a0 \n    \u00a0 https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\n    */\n    \n    var docCookies = new Proxy(docCookies, {\n    \u00a0 \"get\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return oTarget[sKey] || oTarget.getItem(sKey) || undefined;\n    \u00a0 },\n    \u00a0 \"set\": function (oTarget, sKey, vValue) {\n    \u00a0\u00a0\u00a0 if (sKey in oTarget) { return false; }\n    \u00a0\u00a0\u00a0 return oTarget.setItem(sKey, vValue);\n    \u00a0 },\n    \u00a0 \"deleteProperty\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 if (sKey in oTarget) { return false; }\n    \u00a0\u00a0\u00a0 return oTarget.removeItem(sKey);\n    \u00a0 },\n    \u00a0 \"enumerate\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return oTarget.keys();\n    \u00a0 },\n    \u00a0 \"iterate\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return oTarget.keys();\n    \u00a0 },\n    \u00a0 \"ownKeys\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return oTarget.keys();\n    \u00a0 },\n    \u00a0 \"has\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return sKey in oTarget || oTarget.hasItem(sKey);\n    \u00a0 },\n    \u00a0 \"hasOwn\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 return oTarget.hasItem(sKey);\n    \u00a0 },\n    \u00a0 \"defineProperty\": function (oTarget, sKey, oDesc) {\n    \u00a0\u00a0\u00a0 if (oDesc && \"value\" in oDesc) { oTarget.setItem(sKey, oDesc.value); }\n    \u00a0\u00a0\u00a0 return oTarget;\n    \u00a0 },\n    \u00a0 \"getPropertyNames\": function (oTarget) {\n    \u00a0\u00a0\u00a0 return Object.getPropertyNames(oTarget).concat(oTarget.keys());\n    \u00a0 },\n    \u00a0 \"getOwnPropertyNames\": function (oTarget) {\n    \u00a0\u00a0\u00a0 return Object.getOwnPropertyNames(oTarget).concat(oTarget.keys());\n    \u00a0 },\n    \u00a0 \"getPropertyDescriptor\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 var vValue = oTarget[sKey] || oTarget.getItem(sKey)\n    \u00a0\u00a0\u00a0 return vValue ? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"value\": vValue,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"writable\": true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"enumerable\": true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"configurable\": false\n    \u00a0\u00a0\u00a0 } : undefined;\n    \u00a0 },\n    \u00a0 \"getOwnPropertyDescriptor\": function (oTarget, sKey) {\n    \u00a0\u00a0\u00a0 var vValue = oTarget.getItem(sKey);\n    \u00a0\u00a0\u00a0 return vValue ? {\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"value\": vValue,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"writable\": true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"enumerable\": true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0 \"configurable\": false\n    \u00a0\u00a0\u00a0 } : undefined;\n    \u00a0 },\n    \u00a0 \"fix\":\u00a0 function (oTarget) {\n    \u00a0\u00a0\u00a0 return \"not implemented yet!\";\n    \u00a0 },\n    });\n    \n    /* Cookies test */\n    \n    alert(docCookies.my_cookie1 = \"First value\");\n    alert(docCookies.getItem(\"my_cookie1\"));\n    \n    docCookies.setItem(\"my_cookie1\", \"Changed value\");\n    alert(docCookies.my_cookie1);\n\n## See also\n\n  * [\"Proxies are awesome\" Brendan Eich presentation at JSConf][6] ([slides][7])\n  * [ECMAScript Harmony Proxy proposal page][8] and [ECMAScript Harmony proxy semantics page][9]\n  * [Tutorial on proxies][10]\n  * [Old Proxy API page][1]\n  * [`Object.watch`][11] is a non-standard feature but has been supported in Gecko for a long time.\n\n## Licensing note\n\nSome content (text, examples) in this page has been copied or adapted from the\n[ECMAScript wiki][12] which content is licensed [CC 2.0 BY-NC-SA][13]\n\n[1]: /en-US/docs/JavaScript/Old_Proxy_API\n\n[2]: https://bugzilla.mozilla.org/show_bug.cgi?id=783829\n\n[3]: /en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperties\n\n[4]: /en-US/docs/DOM/table.rows\n\n[5]: https://developer.mozilla.org/en-US/docs/DOM/document.cookie#A_little_framework.3A_a_complete_cookies_reader.2Fwriter_with_full_unicode_support\n\n[6]: http://jsconf.eu/2010/speaker/be_proxy_objects.html\n\n[7]: http://www.slideshare.net/BrendanEich/metaprog-5303821\n\n[8]: http://wiki.ecmascript.org/doku.php?id=harmony:proxies\n\n[9]: http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics\n\n[10]: http://soft.vub.ac.be/~tvcutsem/proxies/\n\n[11]: /en-US/docs/JavaScript/Reference/Global_Objects/Object/watch\n\n[12]: http://wiki.ecmascript.org/doku.php\n\n[13]: http://creativecommons.org/licenses/by-nc-sa/2.0/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Promise", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Promise`** object is used for deferred and asynchronous computations. A\n`Promise` is in one of the three states:\n\n  * _pending_: initial state, not fulfilled or rejected.\n  * _fulfilled_: successful operation\n  * _rejected_: failed operation.\n\nAnother term describing the state is _settled_: the Promise is either\nfulfilled or rejected, but not pending.\n\n## Syntax\n\n    \n    \n    new Promise(_executor_);\n    new Promise(function(resolve, reject) { ... });\n\n### Parameters\n\nexecutor\n\n     Function object with two arguments `resolve` and `reject`. The first argument fulfills the promise, the second argument rejects it. We can call these functions, once our operation is completed.\n\n## Description\n\nThe `**Promise**` interface represents a proxy for a value not necessarily\nknown when the promise is created. It allows you to associate handlers to an\nasynchronous action's eventual success or failure. This lets asynchronous\nmethods return values like synchronous methods: instead of the final value,\nthe asynchronous method returns a _promise_ of having a value at some point in\nthe future.\n\nA pending\u00a0promise can become either _fulfilled_ with a value, or _rejected_\nwith a reason. When either of these happens, the associated handlers queued up\nby a promise's `then` method are called. (If the promise has already been\nfulfilled or rejected when a corresponding handler is attached, the handler\nwill be called, so there is no race condition between an asynchronous\noperation completing and its handlers being attached.)\n\nAs the `Promise.prototype.then` and `Promise.prototype.catch` methods return\npromises, they can be chained\u2014an operation called _composition_.\n\n![][1]\n\n## Properties\n\n`Promise.length`\n\n     Length property whose value is 1 (number of constructor arguments).\n[`Promise.prototype`][2]\n\n     Represents the prototype for the `Promise` constructor.\n\n## Methods\n\n[`Promise.all(iterable)`][3]\n\n     Returns a promise that resolves when all of the promises in the iterable argument have resolved.\n[`Promise.race(iterable)`][4]\n\n     Returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.\n\n[`Promise.reject(reason)`][5]\n\n     Returns a `Promise` object that is rejected with the given reason.\n\n[`Promise.resolve(value)`][6]\n\n     Returns a `Promise` object that is resolved with the given value. If the value is a thenable (i.e. has a `then` method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.\n\n## `Promise` prototype\n\n### Properties\n\n`Promise.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Promise`][7] function by default.\n\n### Methods\n\n[`Promise.prototype.catch(onRejected)`][8]\n\n     Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.\n[`Promise.prototype.then(onFulfilled, onRejected)`][9]\n\n     Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler.\n\n## Examples\n\n### Creating a Promise\n\n    \n    \n    <button id=\"btn\">Make a promise!</button>\n    <div id=\"log\"></div>\n    \n\nThis small example shows the mechanism of a `Promise`. The `testPromise()`\nmethod is called each time the `<[button>`][10] is clicked. It creates a\npromise that will resolve, using `window.setTimeout`, to the string `'result'`\nafter `1s to 3s` (random).\n\nThe fulfillment of the promise is simply logged, via a fulfill callback set\nusing `p1.then`. A few logs shows how the synchronous part of the method is\ndecoupled of the asynchronous completion of the promise.\n\n    \n    \n    var promiseCount = 0;\n    function testPromise() {\n      var thisPromiseCount = ++promiseCount;\n    \n      var log = document.getElementById('log');\n      log.insertAdjacentHTML('beforeend', thisPromiseCount + \n          ') Started (<small>Sync code started</small>)<br/>');\n    \n      // We make a new promise: we promise the string 'result' (after waiting 3s)\n      var p1 = new Promise(\n        // The resolver function is called with the ability to resolve or \n        // reject the promise\n        function(resolve, reject) {       \n          log.insertAdjacentHTML('beforeend', thisPromiseCount + \n              ') Promise started (<small>Async code started</small>)<br/>');\n          // This only is an example to create asynchronism\n          window.setTimeout(\n            function() {\n              // We fulfill the promise !\n              resolve(thisPromiseCount)\n            }, Math.random() * 2000 + 1000);\n        });\n    \n      // We define what to do when the promise is fulfilled\n      p1.then(\n        // Just log the message and a value\n        function(val) {\n          log.insertAdjacentHTML('beforeend', val +\n              ') Promise fulfilled (<small>Async code terminated</small>)<br/>');\n        });\n    \n      log.insertAdjacentHTML('beforeend', thisPromiseCount + \n          ') Promise made (<small>Sync code terminated</small>)<br/>');\n    }\n    \n    \n    \n    if (\"Promise\" in window) {\n      btn = document.getElementById(\"btn\");\n       btn.addEventListener(\"click\",testPromise);\n    }\n    else {\n      log = document.getElementById('log');\n      log.innerHTML = \"Live example not available as your browser doesn't support the Promise interface.\";\n    }\n    \n\nThis example is executed when clicking the button. You need a browser\nsupporting `Promise`. By clicking several times the button in a short amount\nof time, you'll even see the different promise being fulfilled one after the\nother.\n\n### Loading an image with XHR\n\nAnother simple example using `Promise` and [`XMLHTTPRequest][11]` to load an\nimage is available at the MDN GitHub[ promise-test][12] repository. You can\nalso [see it in action][13]. Each step is commented and allows you to follow\nthe Promise and XHR architecture closely.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][14]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise' in that specification.][15]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][16].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][17] (24.0) as `Future`  \n[25.0][18] (25.0) as `Promise` behind a flag[1]  \n[29.0][19] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][20]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [Promises/A+ specification][21]\n  * [Jake Archibald: JavaScript Promises: There and Back Again][22]\n  * [Domenic Denicola: Callbacks, Promises, and Coroutines \u2013 Asynchronous Programming Patter in JavaScript][23]\n  * [Matt Greer: JavaScript Promises ... In Wicked Detail][24]\n  * [Forbes Lindesay: promisejs.org][25]\n\n[1]: https://mdn.mozillademos.org/files/8633/promises.png\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n\n[10]: /en-US/docs/Web/HTML/Element/button\n\n[11]: /en-US/docs/Web/API/XMLHttpRequest\n\n[12]: https://github.com/mdn/promises-test/blob/gh-pages/index.html\n\n[13]: http://mdn.github.io/promises-test/\n\n[14]: https://github.com/domenic/promises-unwrapping\n\n[15]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise-objects\n\n[16]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[17]: /en-US/Firefox/Releases/24\n\n[18]: /en-US/Firefox/Releases/25\n\n[19]: /en-US/Firefox/Releases/29\n\n[20]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n[21]: http://promisesaplus.com/\n\n[22]: http://www.html5rocks.com/en/tutorials/es6/promises/\n\n[23]: http://de.slideshare.net/domenicdenicola/callbacks-promises-and-coroutines-oh-my-the-evolution-of-asynchronicity-in-javascript\n\n[24]: http://www.mattgreer.org/articles/promises-in-wicked-detail/\n\n[25]: https://www.promisejs.org/\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "JSON", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/json", "content": "## Summary\n\nThe `JSON` object contains methods for parsing [JavaScript Object Notation][1]\n(JSON) and converting values to JSON. It can't be called or constructed, and\naside from its two method properties it has no interesting functionality of\nits own.\n\n## Description\n\n### JavaScript Object Notation\n\nJSON is a syntax for serializing objects, arrays, numbers, strings, booleans,\nand null. \u00a0It is based upon JavaScript syntax but is distinct from it: some\nJavaScript is not JSON, and some JSON is not JavaScript. See also [JSON: The\nJavaScript subset that isn't][2].  \n  \n<table> JavaScript and JSON differences  \n<tr>  \n<th>\n\nJavaScript type\n\n</th>  \n<th>\n\nJSON differences\n\n</th> </tr>  \n<tr>  \n<td>\n\nObjects and Arrays\n\n</td>  \n<td>\n\nProperty names must be double-quoted strings; trailing commas are forbidden.\n\n</td> </tr>  \n<tr>  \n<td>\n\nNumbers\n\n</td>  \n<td>\n\nLeading zeroes are prohibited; a decimal point must be followed by at least\none digit.\n\n</td> </tr>  \n<tr>  \n<td>\n\nStrings\n\n</td>  \n<td>\n\nOnly a limited sets of characters may be escaped; certain control characters\nare prohibited; the Unicode line separator (U+2028) and paragraph separator\n(U+2029) characters are permitted; strings must be double-quoted. See the\nfollowing example where [`JSON.parse`][3] works fine and a [`SyntaxError`][4]\nis thrown when evaluating the code as JavaScript:\n\n    \n    \n    var code = '\"\\u2028\\u2029\"';\n    JSON.parse(code); // works fine\n    eval(code); // fails\n\n</td> </tr> </table>\n\nThe full JSON syntax is as follows:\n\n    \n    \n    JSON = **null**\n        _or_ **true** _or_ **false**\n        _or_ JSONNumber\n        _or_ JSONString\n        _or_ JSONObject\n        _or_ JSONArray\n    \n    JSONNumber = **-** PositiveNumber\n              _or_ PositiveNumber\n    PositiveNumber = DecimalNumber\n                  or DecimalNumber **.** Digits\n                  or DecimalNumber **.** Digits ExponentPart\n                  or DecimalNumber ExponentPart\n    DecimalNumber = **0**\n                 _or_ OneToNine Digits\n    ExponentPart = **e** Exponent\n                _or_ **E** Exponent\n    Exponent = Digits\n            _or_ **+** Digits\n            _or_ **-** Digits\n    Digits = Digit\n          _or_ Digits Digit\n    Digit = **0** through **9**\n    OneToNine = **1** through **9**\n    \n    JSONString = **\"\"**\n              _or_ **\"** StringCharacters **\"**\n    StringCharacters = StringCharacter\n                    _or_ StringCharacters StringCharacter\n    StringCharacter = any character\n                      _except_ **\"** _or_ **\\** _or_ U+0000 through U+001F\n                   _or_ EscapeSequence\n    EscapeSequence = **\\\" **_or_ **\\/ **_or_ **\\\\ **_or_ **\\b **_or_ **\\f **_or_ **\\n **_or_ **\\r **_or_ **\\t**\n                  _or_ **\\u** HexDigit HexDigit HexDigit HexDigit\n    HexDigit = **0** through **9**\n            _or_ **A** through **F**\n            _or_ **a** through **f**\n    \n    JSONObject = **{** **}**\n              _or_ **{** Members **}**\n    Members = JSONString **:** JSON\n           _or_ Members **,** JSONString **:** JSON\n    \n    JSONArray = **[** **]**\n             _or_ **[** ArrayElements **]**\n    ArrayElements = JSON\n                 _or_ ArrayElements **,** JSON\n\nInsignificant whitespace may be present anywhere except within a JSONNumber\n(numbers must contain no whitespace) or JSONString (where it is interpreted as\nthe corresponding character in the string, or would cause an error). The tab\ncharacter (U+0009), carriage return (U+000D), line feed (U+000A), and space\n(U+0020) characters are the only valid whitespace characters.\n\n## Methods\n\n[`JSON.parse()`][3]\n\n     Parse a string as JSON, optionally transform the produced value and its properties, and return the value.\n[`JSON.stringify()`][5]\n\n     Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.\n\n## Polyfill\n\nThe `JSON` object is not supported in older browsers. You can work around this\nby inserting the following code at the beginning of your scripts, allowing use\nof JSON object in implementations which do not natively support it (like\nInternet Explorer 6).\n\nThe following algorithm is an imitation of the native JSON object:\n\n    \n    \n    if (!window.JSON) {\n      window.JSON = {\n        parse: function (sJSON) { return eval(\"(\" + sJSON + \")\"); },\n        stringify: function (vContent) {\n          if (vContent instanceof Object) {\n            var sOutput = \"\";\n            if (vContent.constructor === Array) {\n              for (var nId = 0; nId < vContent.length; sOutput += this.stringify(vContent[nId]) + \",\", nId++);\n                return \"[\" + sOutput.substr(0, sOutput.length - 1) + \"]\";\n            }\n            if (vContent.toString !== Object.prototype.toString) { \n              return \"\\\"\" + vContent.toString().replace(/\"/g, \"\\\\$&\") + \"\\\"\";\n            }\n            for (var sProp in vContent) { \n              sOutput += \"\\\"\" + sProp.replace(/\"/g, \"\\\\$&\") + \"\\\":\" + this.stringify(vContent[sProp]) + \",\";\n            }\n            return \"{\" + sOutput.substr(0, sOutput.length - 1) + \"}\";\n         }\n         return typeof vContent === \"string\" ? \"\\\"\" + vContent.replace(/\"/g, \"\\\\$&\") + \"\\\"\" : String(vContent);\n        }\n      };\n    }\n    \n\nMore complex well-known [polyfills][6] for the `JSON` object are [JSON2][7]\nand [JSON3][8].\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'JSON' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'JSON' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][11].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[3.5][12] (1.9.1)\n\n</td>  \n<td>\n\n8.0\n\n</td>  \n<td>\n\n10.5\n\n</td>  \n<td>\n\n4.0\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n1.0 (1.0)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\nBased on [Kangax's compat table][13].\n\n## See also\n\n  * [Using native JSON][14]\n  * [`Date.prototype.toJSON()`][15]\n\n[1]: http://json.org/\n\n[2]: http://timelessrepo.com/json-isnt-a-javascript-subset\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n[6]: http://remysharp.com/2010/10/08/what-is-a-polyfill/\n\n[7]: https://github.com/douglascrockford/JSON-js\n\n[8]: http://bestiejs.github.com/json3\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.12\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-json-object\n\n[11]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[12]: /en-US/Firefox/Releases/3.5\n\n[13]: http://kangax.github.com/es5-compat-table/\n\n[14]: /en-US/docs/Web/JavaScript/Guide/Using_native_JSON\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "DataView", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview", "content": "## Summary\n\nThe **`DataView`** view provides a low-level interface for reading data from\nand writing it to an [`ArrayBuffer`][1].\n\n## Syntax\n\n    \n    \n    new DataView(buffer [, byteOffset [, byteLength]])\n\n### Parameters\n\n`buffer`\n\n     An existing [`ArrayBuffer`][1] to use as the storage for the new `DataView` object.\n`byteOffset` Optional\n\n     The offset, in bytes, to the first byte in the specified buffer for the new view to reference. If not specified, the view of the buffer will start with the first byte.\n`byteLength` Optional\n\n     The number of elements in the byte array. If unspecified, length of the view will match the buffer's length.\n\n### Return value\n\nA new `DataView` object representing the specified data buffer.\n\n### Errors thrown\n\n`[`RangeError`][2]`\n\n     Thrown if the `byteOffset` and `byteLength` result in the specified view extending past the end of the buffer.\n\n## Description\n\n### Detect endianness\n\nYou'll probably need to detect the type of architecture your script is\nrunning, here is a little trick to check it. See [Endianness][3] for more\ninformation.\n\n    \n    \n    var littleEndian = (function() {\n      var buffer = new ArrayBuffer(2);\n      new DataView(buffer).setInt16(0, 256, true);\n      return new Int16Array(buffer)[0] === 256;\n    })();\n    console.log(littleEndian); // true or false\n    \n\n## Properties\n\nDataView.length\n\n     The `DataView` constructor's length property whose value is 3.\n[`DataView.prototype`][4]\n\n     Allows the addition of properties to all `DataView` objects.\n\n## `DataView` instances\n\nAll `DataView` instances inherit from [`DataView.prototype`][4].\n\n### Properties\n\nDataView.prototype.constructor\n\n     Specifies the function that creates an object's prototype. The initial value is the standard built-in `DataView` constructor.\n[`DataView.prototype.buffer`][5] Read only\n\n     The [`ArrayBuffer`][1] referenced by this view. Fixed at construction time and thus **read only.**\n[`DataView.prototype.byteLength`][6] Read only\n\n     The length (in bytes) of this view from the start of its [`ArrayBuffer`][1]. Fixed at construction time and thus **read only.**\n[`DataView.prototype.byteOffset`][7] Read only\n\n     The offset (in bytes) of this view from the start of its [`ArrayBuffer`][1]. Fixed at construction time and thus **read only.**\n\n### Methods\n\n### Read\n\n[`DataView.prototype.getInt8()`][8]\n\n     Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint8()`][9]\n\n     Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.\n[`DataView.prototype.getInt16()`][10]\n\n     Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint16()`][11]\n\n     Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.\n[`DataView.prototype.getInt32()`][12]\n\n     Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint32()`][13]\n\n     Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.\n[`DataView.prototype.getFloat32()`][14]\n\n     Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.\n[`DataView.prototype.getFloat64()`][15]\n\n     Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.\n\n### Write\n\n[`DataView.prototype.setInt8()`][16]\n\n     Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint8()`][17]\n\n     Stores an unsigned 8-bit integer (unsigned byte) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setInt16()`][18]\n\n     Stores a signed 16-bit integer (short) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint16()`][19]\n\n     Stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setInt32()`][20]\n\n     Stores a signed 32-bit integer (long) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint32()`][21]\n\n     Stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setFloat32()`][22]\n\n     Stores a signed 32-bit float (float) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setFloat64()`][23]\n\n     Stores a signed 64-bit float (double) value at the specified byte offset from the start of the view.\n\n## Example\n\n    \n    \n    // Example needed\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][24]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView' in that specification.][25]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][26] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [jDataView][27]: JavaScript library that polyfills and extends the\n\n`DataView` API to all browsers and Node.js.\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: /en-US/docs/Glossary/Endianness\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\n\n[24]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[25]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview-constructor\n\n[26]: /en-US/Firefox/Releases/15\n\n[27]: https://github.com/jDataView/jDataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "ArrayBuffer", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer", "content": "## Summary\n\nThe **`ArrayBuffer`** object is used to represent a generic, fixed-length raw\nbinary data buffer. You can not directly manipulate the contents of an\n`ArrayBuffer`; instead, you create one of the [typed array objects][1] or a\n[`DataView`][2] object which represents the buffer in a specific format, and\nuse that to read and write the contents of the buffer.\n\n## Syntax\n\n    \n    \n    new ArrayBuffer(length)\n    \n\n### Parameters\n\nlength\n\n     The size, in bytes, of the array buffer to create.\n\n### Return value\n\nA new `ArrayBuffer` object of the specified size. Its contents are initialized\nto 0.\n\n## Description\n\nThe `ArrayBuffer` constructor creates a new `ArrayBuffer` of the given length\nin bytes.\n\n### Getting an array buffer from existing data\n\n  * [From a Base64 string][3]\n  * [From a local file][4]\n\n## Properties\n\nArrayBuffer.length\n\n     The `ArrayBuffer` constructor's length property whose value is 1.\n[`ArrayBuffer.prototype`][5]\n\n     Allows the addition of properties to all `ArrayBuffer` objects.\n\n## Methods\n\n[`ArrayBuffer.isView(arg)`][6]\n\n     Returns `true` if `arg` is a view one of the ArrayBuffer views, such as [typed array objects][1] or a [`DataView`][2]. Returns `false` otherwise.\n\n## `ArrayBuffer` instances\n\nAll `ArrayBuffer` instances inherit from [`ArrayBuffer.prototype`][5].\n\n### Properties\n\nArrayBuffer.prototype.constructor\n\n     Specifies the function that creates an object's prototype. The initial value is the standard built-in `ArrayBuffer` constructor.\n[`ArrayBuffer.prototype.byteLength`][7] Read only\n\n     The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. **Read only.**\n\n### Methods\n\n[`ArrayBuffer.prototype.slice()`][8]\n\n     Returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive. If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## Example\n\nIn this example, we create a 8-byte buffer with a [`Int32Array`][9] view\nreferring to the buffer:\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var view   = new Int32Array(buffer);\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][10]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ArrayBuffer' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][12] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][13]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[3]: /en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Appendix.3A_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer\n\n[4]: /en-US/docs/Web/API/FileReader#readAsArrayBuffer()\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[10]: https://www.khronos.org/registry/typedarray/specs/latest/#5\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer-constructor\n\n[12]: /en-US/Firefox/Releases/4\n\n[13]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "WeakSet", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`WeakSet`** object lets you store weakly held _objects_ in a collection.\n\n## Syntax\n\n    \n    \n     new WeakSet([iterable]);\n\n### Parameters\n\niterable\n\n     If an [iterable object ][1]is passed, all of its elements will be added to the new `WeakSet`.\n\n## Description\n\n`WeakSet` objects are collections of objects. An object in the `WeakSet` may\nonly occur once; it is unique in the `WeakSet`'s collection.\n\nThe main differences to the [`Set`][2] object are:\n\n  * In contrast to `Sets`, `WeakSets` are **collections of objects only** and not of arbitrary values of any type.\n  * The `WeakSet` is _weak_: References to objects in the collection are held weakly. If there is no other reference to an object stored in the `WeakSet`, they can be garbage collected. That also means that there is no list of current objects stored in the collection. `WeakSets` are not enumerable.\n\n## Properties\n\n`WeakSet.length`\n\n     The value of the `length` property is 1.\n[`WeakSet.prototype`][3]\n\n     Represents the prototype for the `Set` constructor. Allows the addition of properties to all `WeakSet` objects.\n\n## `WeakSet` instances\n\nAll `WeakSet` instances inherit from [`WeakSet.prototype`][3].\n\n### Properties\n\n`WeakSet.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`WeakSet`][4] function by default.\n\n### Methods\n\n[`WeakSet.prototype.add(value)`][5]\n\n     Appends a new element with the given value to the `WeakSet` object.\n[`WeakSet.prototype.clear()`][6]\n\n     Removes all elements from the `WeakSet` object.\n[`WeakSet.prototype.delete(value)`][7]\n\n     Removes the element associated to the `value`. `WeakSet.prototype.has(value)` will return `false` afterwards.\n[`WeakSet.prototype.has(value)`][8]\n\n     Returns a boolean asserting whether an element is present with the given value in the `WeakSet` object or not.\n\n## Examples\n\n### Example: Using the `WeakSet` object\n\n    \n    \n    var ws = new WeakSet();\n    var obj = {};\n    var foo = {};\n    \n    ws.add(window);\n    ws.add(obj);\n    \n    ws.has(window); // true\n    ws.has(foo);    // false, foo has not been added to the set\n    \n    ws.delete(window); // removes window from the set\n    ws.has(window);    // false, window has been removed\n    \n    ws.clear(); // empty the whole WeakSet\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet' in that specification.][9]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][10] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`new WeakSet(iterable)`\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[34][10] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`new WeakMap(iterable)`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Map`][11]\n  * [`Set`][2]\n  * [`WeakMap`][12]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has\n\n[9]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset-objects\n\n[10]: /en-US/Firefox/Releases/34\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "WeakMap", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`WeakMap`** object is a collection of key/value pairs in which the keys\nare objects and the values can be arbitrary values.\n\n## Syntax\n\n    \n    \n    new WeakMap([iterable])\n    \n\n### Parameters\n\n`iterable`\n\n     Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). Each key-value pair will be added to the new Map.\n\n## Description\n\nKeys of WeakMaps are of the type `Object` only. [Primitive data types][1] as\nkeys are not allowed (e.g. a [`Symbol`][2] can't be a `WeakMap` key).\n\n### Why _Weak_Map?\n\nThe experienced JavaScript programmer will notice that this API could be\nimplemented in JavaScript with two arrays (one for keys, one for values)\nshared by the four API methods. Such an implementation would have two main\ninconveniences. The first one is an O(n) search (n being the number of keys in\nthe map). The second one is a memory leak issue. With manually written maps,\nthe array of keys would keep references to key objects, preventing them from\nbeing garbage collected. In native WeakMaps, references to key objects are\nheld \"weakly\", which means that they do not prevent garbage collection in case\nthere would be no other reference to the object.\n\nBecause of references being weak, WeakMap keys are not enumerable (i.e. there\nis no method giving you a list of the keys). If they were, the list would\ndepend on the state of garbage collection, introducing non-determinism. If you\nwant to have a list of keys, you should maintain it yourself.\n\n## Properties\n\n`WeakMap.length`\n\n     The value of the `length` property is 1.\n[`WeakMap.prototype`][3]\n\n     Represents the prototype for the `WeakMap` constructor. Allows the addition of properties to all `WeakMap` objects.\n\n## `WeakMap` instances\n\nAll `WeakMap` instances inherit from [`WeakMap.prototype`][3].\n\n### Properties\n\n`WeakMap.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`WeakMap`][4] function by default.\n\n### Methods\n\n[`WeakMap.prototype.clear()`][5]\n\n     Removes all key/value pairs from the `WeakMap` object.\n[`WeakMap.prototype.delete(key)`][6]\n\n     Removes any value associated to the `key`. `WeakMap.prototype.has(key)` will return `false` afterwards.\n[`WeakMap.prototype.get(key)`][7]\n\n     Returns the value associated to the `key`, or `undefined` if there is none.\n[`WeakMap.prototype.has(key)`][8]\n\n     Returns a Boolean asserting whether a value has been associated to the `key` in the `WeakMap` object or not.\n[`WeakMap.prototype.set(key, value)`][9]\n\n     Sets the value for the `key` in the `WeakMap` object. Returns the `WeakMap` object.\n\n## Examples\n\n### Example: Using `WeakMap`\n\n    \n    \n    var wm1 = new WeakMap(),\n        wm2 = new WeakMap(),\n        wm3 = new WeakMap();\n    var o1 = {},\n        o2 = function(){},\n        o3 = window;\n    \n    wm1.set(o1, 37);\n    wm1.set(o2, \"azerty\");\n    wm2.set(o1, o2); // a value can be anything, including an object or a function\n    wm2.set(o3, undefined);\n    wm2.set(wm1, wm2); // keys and values can be any objects. Even WeakMaps!\n    \n    wm1.get(o2); // \"azerty\"\n    wm2.get(o2); // undefined, because there is no value for o2 on wm2\n    wm2.get(o3); // undefined, because that is the set value\n    \n    wm1.has(o2); // true\n    wm2.has(o2); // false\n    wm2.has(o3); // true (even if the value itself is 'undefined')\n    \n    wm3.set(o1, 37);\n    wm3.get(o1); // 37\n    wm3.clear();\n    wm3.get(o1); // undefined, because wm3 was cleared and there is no value for o1 anymore\n    \n    wm1.has(o1);   // true\n    wm1.delete(o1);\n    wm1.has(o1);   // false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][11] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`new WeakMap(iterable)`\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`clear()`\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[20.0][12] (20.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n35\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`new WeakMap(iterable)`\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\n`clear()`\n\n</td>  \n<td>\n\n35\n\n</td>  \n<td>\n\n20.0 (20.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [WeakMap bug at Mozilla][13]\n  * [Hiding Implementation Details with ECMAScript 6 WeakMaps][14]\n  * [`Map`][15]\n  * [`Set`][16]\n  * [`WeakSet`][17]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap-objects\n\n[11]: /en-US/Firefox/Releases/6\n\n[12]: /en-US/Firefox/Releases/20\n\n[13]: https://bugzilla.mozilla.org/show_bug.cgi?id=547941\n\n[14]: http://fitzgeraldnick.com/weblog/53/\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Set", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Set`** object lets you store _unique_ values of any type, whether\n[primitive values][1] or object references.\n\n## Syntax\n\n    \n    \n     new Set([iterable]);\n\n### Parameters\n\niterable\n\n     If an [iterable object ][2]is passed, all of its elements will be added to the new Set.\n\n## Description\n\n`Set` objects are collections of values, you can iterate its elements in\ninsertion order. A value in the `Set` may only occur once; it is unique in the\n`Set`'s collection.\n\n### Value equality\n\nBecause each value in the Set has to be unique, the value equality will be\nchecked and is not based on the same algorithm as the one used in the ===\noperator. Specifically, for `Set`s, `+0` (which is strictly equal to `-0`) and\n`-0` are different values. However, this has been changed in the latest\nECMAScript 6 specification. Starting with Gecko 29.0 (Firefox 29 / Thunderbird\n29 / SeaMonkey 2.26) ([bug\u00a0952870][3]) and a [recent nightly Chrome][4], `+0`\nand `-0` are treated as the same value in `Set` objects. Also, `NaN` and\n`undefined` can also be stored in a Set. NaN is considered the same as NaN\n(even though NaN !== NaN).\n\n## Properties\n\n`Set.length`\n\n     The value of the `length` property is 1.\n[`Set.prototype`][5]\n\n     Represents the prototype for the `Set` constructor. Allows the addition of properties to all `Set` objects.\n\n## `Set` instances\n\nAll `Set` instances inherit from [`Set.prototype`][5].\n\n### Properties\n\n`Set.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Set`][6] function by default.\n[`Set.prototype.size`][7]\n\n     Returns the number of values in the `Set` object.\n\n### Methods\n\n[`Set.prototype.add(value)`][8]\n\n     Appends a new element with the given value to the `Set` object. Returns the `Set` object.\n[`Set.prototype.clear()`][9]\n\n     Removes all elements from the `Set` object.\n[`Set.prototype.delete(value)`][10]\n\n     Removes the element associated to the `value`. `Set.prototype.has(value)` will return `false` afterwards.\n[`Set.prototype.entries()`][11]\n\n     Returns a new `Iterator` object that contains** an array of [`value, value]`** for each element in the `Set` object, in insertion order. This is kept similar to the `Map` object, so that each entry has the same value for its _key_ and _value_ here.\n[`Set.prototype.forEach(callbackFn[, thisArg])`][12]\n\n     Calls `callbackFn` once for each value present in the `Set` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.\n[`Set.prototype.has(value)`][13]\n\n     Returns a boolean asserting whether an element is present with the given value in the `Set` object or not.\n[`Set.prototype.keys()`][14]\n\n     Is the same function as the **`values()`** function and returns a new `Iterator` object that contains the values for each element in the `Set` object in insertion order.\n[`Set.prototype.values()`][15]\n\n     Returns a new `Iterator` object that contains the **values** for each element in the `Set` object in insertion order.\n\n## Examples\n\n### Example: Using the `Set` object\n\n    \n    \n    var mySet = new Set();\n    \n    mySet.add(1);\n    mySet.add(5);\n    mySet.add(\"some text\");\n    \n    mySet.has(1); // true\n    mySet.has(3); // false, 3 has not been added to the set\n    mySet.has(5);              // true\n    mySet.has(Math.sqrt(25));  // true\n    mySet.has(\"Some Text\".toLowerCase()); // true\n    \n    mySet.size; // 3\n    \n    mySet.delete(5); // removes 5 from the set\n    mySet.has(5);    // false, 5 has been removed\n    \n    mySet.size; // 2, we just removed one value\n    \n\n### Example: Iterating Sets\n\n    \n    \n    // iterate over items in set\n    // logs the items in the order: 1, \"some text\" \n    for (let item of mySet) console.log(item);\n    \n    // logs the items in the order: 1, \"some text\" \n    for (let item of mySet.keys()) console.log(item);\n     \n    // logs the items in the order: 1, \"some text\" \n    for (let item of mySet.values()) console.log(item);\n    \n    // logs the items in the order: 1, \"some text\" \n    //(key and value are the same here)\n    for (let [key, value] of mySet.entries()) console.log(key);\n    \n    // convert set to plain Array\n    var myArr = [v for (v of mySet)]; // [1, \"some text\"]\n    \n    // the following will also work if run in an HTML document\n    mySet.add(document.body);\n    mySet.has(document.querySelector(\"body\")); // true\n    \n    // converting between Set and Array\n    mySet2 = new Set([1,2,3,4]);\n    mySet2.size; // 4\n    [...mySet2]; // [1,2,3,4]\n    \n    // intersect can be simulated via \u00a0\n    var intersection = new Set([x for (x of set1) if (set2.has(x))]);\n    \n    // Iterate set entries with forEach\n    mySet.forEach(function(value) {\n      console.log(value);\n    });\n    \n    // 1\n    // 2\n    // 3\n    // 4\n\n### Example: Relation with `Array` objects\n\n    \n    \n    var myArray = [\"value1\", \"value2\", \"value3\"];\n    \n    // Use the regular Set constructor to transform an Array into a Set\n    var mySet = new Set(myArray);\n    \n    mySet.has(\"value1\"); // returns true\n    \n    // Use the spread operator to transform a set into an Array.\n    alert(uneval([...mySet])); // Will show you exactly the same Array as myArray\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set' in that specification.][16]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[13][17] (13)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nConstructor argument: `new Set(iterable)`\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13][17] (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\niterable\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[17][18] (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.clear()`\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[19][19] (19)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.keys(), Set.values(), Set.entries()`\n\n</td>  \n<td>\n\n37\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[24][20] (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.forEach()`\n\n</td>  \n<td>\n\n36\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[25][21] (25)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nValue equality for -0 and 0\n\n</td>  \n<td>\n\n34\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[29][22] (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nConstructor argument: `new Set(iterable)`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\niterable\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n17.0 (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.clear()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n19.0 (19)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.keys(), Set.values(), Set.entries()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n37\u00a0[1]  \n38\n\n</td>  \n<td>\n\n24.0 (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Set.forEach()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\u00a0[1]  \n38\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nValue equality for -0 and 0\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34\u00a0[1]  \n38\n\n</td>  \n<td>\n\n29.0 (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] The feature is available behind a preference. In `chrome://flags`,\nactivate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [`Map`][23]\n  * [`WeakMap`][24]\n  * [`WeakSet`][25]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=952870\n\n[4]: https://code.google.com/p/v8/issues/detail?id=3069\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\n\n[16]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set-objects\n\n[17]: /en-US/Firefox/Releases/13\n\n[18]: /en-US/Firefox/Releases/17\n\n[19]: /en-US/Firefox/Releases/19\n\n[20]: /en-US/Firefox/Releases/24\n\n[21]: /en-US/Firefox/Releases/25\n\n[22]: /en-US/Firefox/Releases/29\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Map", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **`Map`** object is a simple key/value map. Any value (both objects and\n[primitive values][1]) may be used as either a key or a value.\n\n## Syntax\n\n    \n    \n    new Map([iterable])\n    \n\n### Parameters\n\n`iterable`\n\n     Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). Each key-value pair will be added to the new Map.\n\n## Description\n\nA Map object can iterate its elements in insertion order - a `for..of` loop\nwill return an array of [`key, value]` for each iteration.\n\n### Key equality\n\nKey equality is based on the \"same-value\" algorithm: `NaN` is considered the\nsame as `NaN` (even though `NaN !== NaN`) and all other values are considered\nequal according to the semantics of the === operator. In earlier versions of\nthe ECMAScript 6 draft `-0` and `+0` were considered distinct (even though `-0\n=== +0`), this has been changed in later versions and has been adapted in\nGecko 29 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26) ([bug\u00a0952870][2]) and\na [recent nightly Chrome][3].\n\n### Objects and maps compared\n\n[`Objects`][4] are similar to `Maps`\u00a0in that both let you set keys to values,\nretrieve those values, delete keys, and detect whether something is stored at\na key. Because of this, `Objects`\u00a0have been used as `Maps`\u00a0historically;\nhowever, there are important differences between `Objects`\u00a0and `Maps`\u00a0that\nmake using a `Map` better.\n\n  * An `Object` has a prototype, so there are default keys in the map. However, this can be bypassed using `map = Object.create(null)`.\n  * The keys of an `Object` are [`Strings`][5], where they can be any value for a `Map`.\n  * You can get the size of a `Map` easily while you have to manually keep track of size for an `Object`.\n\nUse maps over objects when keys are unknown until run time, and when all keys\nare the same type and all values are the same type.\n\nUse objects when there is logic that operates on individual elements.\n\n## Properties\n\n`Map.length`\n\n     The value of the `length` property is 1.\n[`Map.prototype`][6]\n\n     Represents the prototype for the `Map` constructor. Allows the addition of properties to all `Map` objects.\n\n## `Map` instances\n\nAll `Map` instances inherit from [`Map.prototype`][6].\n\n### Properties\n\n`Map.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Map`][7] function by default.\n[`Map.prototype.size`][8]\n\n     Returns the number of key/value pairs in the `Map` object.\n\n### Methods\n\n[`Map.prototype.clear()`][9]\n\n     Removes all key/value pairs from the `Map` object.\n[`Map.prototype.delete(key)`][10]\n\n     Removes any value associated to the `key`. `Map.prototype.has(key)` will return `false` afterwards.\n[`Map.prototype.entries()`][11]\n\n     Returns returns a new `Iterator` object that contains** an array of [`key, value]`** for each element in the `Map` object in insertion order.\n[`Map.prototype.forEach(callbackFn[, thisArg])`][12]\n\n     Calls callbackFn once for each key-value pair present in the `Map` object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback.\n[`Map.prototype.get(key)`][13]\n\n     Returns the value associated to the `key`, or `undefined` if there is none.\n[`Map.prototype.has(key)`][14]\n\n     Returns a boolean asserting whether a value has been associated to the `key` in the `Map` object or not.\n[`Map.prototype.keys()`][15]\n\n     Returns a new `Iterator` object that contains the **keys** for each element in the `Map` object in insertion order.\n[`Map.prototype.set(key, value)`][16]\n\n     Sets the value for the `key` in the `Map` object. Returns the `Map` object.\n[`Map.prototype.values()`][17]\n\n     Returns a new `Iterator` object that contains the **values** for each element in the `Map` object in insertion order.\n\n## Examples\n\n### Example: Using the `Map` object\n\n    \n    \n    var myMap = new Map();\n    \n    var keyObj = {},\n        keyFunc = function () {},\n        keyString = \"a string\";\n    \n    // setting the values\n    myMap.set(keyString, \"value associated with 'a string'\");\n    myMap.set(keyObj, \"value associated with keyObj\");\n    myMap.set(keyFunc, \"value associated with keyFunc\");\n    \n    myMap.size; // 3\n    \n    // getting the values\n    myMap.get(keyString);    // \"value associated with 'a string'\"\n    myMap.get(keyObj);       // \"value associated with keyObj\"\n    myMap.get(keyFunc);      // \"value associated with keyFunc\"\n    \n    myMap.get(\"a string\");   // \"value associated with 'a string'\"\n                             // because keyString === 'a string'\n    myMap.get({});           // undefined, because keyObj !== {}\n    myMap.get(function() {}) // undefined, because keyFunc !== function () {}\n    \n\n### Example: Using `NaN` as `Map` keys\n\n`NaN` can also be used as a key. Even though every `NaN` is not equal to\nitself (`NaN !== NaN` is true), the following example works, because `NaN`s\nare indistinguishable from each other:\n\n    \n    \n    var myMap = new Map();\n    myMap.set(NaN, \"not a number\");\n    \n    myMap.get(NaN); // \"not a number\"\n    \n    var otherNaN = Number(\"foo\");\n    myMap.get(otherNaN); // \"not a number\"\n    \n\n### Example: Iterating `Maps` with `for..of`\n\nMaps can be iterated using a `for..of` loop:\n\n    \n    \n    var myMap = new Map();\n    myMap.set(0, \"zero\");\n    myMap.set(1, \"one\");\n    for (var [key, value] of myMap) {\n      alert(key + \" = \" + value);\n    }\n    // Will show 2 alerts; first with \"0 = zero\" and second with \"1 = one\"\n    \n    for (var key of myMap.keys()) {\n      alert(key);\n    }\n    // Will show 2 alerts; first with \"0\" and second with \"1\"\n    \n    for (var value of myMap.values()) {\n      alert(value);\n    }\n    // Will show 2 alerts; first with \"zero\" and second with \"one\"\n    \n    for (var [key, value] of myMap.entries()) {\n      alert(key + \" = \" + value);\n    }\n    // Will show 2 alerts; first with \"0 = zero\" and second with \"1 = one\"\n    \n    myMap.forEach(function(value, key, myMap) {\n      alert(key + \" = \" + value);\n    })\n    // Will show 2 alerts; first with \"0 = zero\" and second with \"1 = one\"\n    \n\n### Example: Relation with `Array` objects\n\n    \n    \n    var kvArray = [[\"key1\", \"value1\"], [\"key2\", \"value2\"]];\n    \n    // Use the regular Map constructor to transform a 2D key-value Array into a map\n    var myMap = new Map(kvArray);\n    \n    myMap.get(\"key1\"); // returns \"value1\"\n    \n    // Use the spread operator to transform a map into a 2D key-value Array.\n    alert(uneval([...myMap])); // Will show you exactly the same Array as kvArray\n    \n    // Or use the spread operator on the keys or values iterator to get \n    // an array of only the keys or values\n    alert(uneval([...myMap.keys()])); // Will show [\"key1\", \"key2\"]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map' in that specification.][18]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[13][19] (13)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nConstructor argument: `new Map(iterable)`\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13][19] (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\niterable\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[17][20] (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.clear()`\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[19][21] (19)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.keys(), Map.values(), Map.entries()`\n\n</td>  \n<td>\n\n37\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[20][22] (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.forEach()`\n\n</td>  \n<td>\n\n36\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[25][23] (25)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr>  \n<tr>  \n<td>\n\nKey equality for -0 and 0\n\n</td>  \n<td>\n\n34\u00a0[1]  \n38\n\n</td>  \n<td>\n\n[29][24] (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nConstructor argument: `new Map(iterable)`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\niterable\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n17.0 (17)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.clear()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n31\u00a0[1]  \n38\n\n</td>  \n<td>\n\n19.0 (19)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.keys(), Map.values(), Map.entries()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n37\u00a0[1]  \n38\n\n</td>  \n<td>\n\n20.0 (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\n`Map.forEach()`\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n36\u00a0[1]  \n38\n\n</td>  \n<td>\n\n25.0 (25)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr>  \n<tr>  \n<td>\n\nKey equality for -0 and 0\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34\u00a0[1]  \n38\n\n</td>  \n<td>\n\n29.0 (29)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] The feature is available behind a preference. In `chrome://flags`,\nactivate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [Map and Set bug at Mozilla][25]\n  * [ECMAScript Harmony proposal][26]\n  * [`Set`][27]\n  * [`WeakMap`][28]\n  * [`WeakSet`][29]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: https://bugzilla.mozilla.org/show_bug.cgi?id=952870\n\n[3]: https://code.google.com/p/v8/issues/detail?id=3069\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n\n[18]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map-objects\n\n[19]: /en-US/Firefox/Releases/13\n\n[20]: /en-US/Firefox/Releases/17\n\n[21]: /en-US/Firefox/Releases/19\n\n[22]: /en-US/Firefox/Releases/20\n\n[23]: /en-US/Firefox/Releases/25\n\n[24]: /en-US/Firefox/Releases/29\n\n[25]: https://bugzilla.mozilla.org/show_bug.cgi?id=697479\n\n[26]: http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "ParallelArray", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/parallelarray", "content": "**Obsolete**  \nThis feature is obsolete. Although it may still work in some browsers, its use\nis discouraged since it could be removed at any time. Try to avoid using it.\n\n**Note:** This object was implemented in Firefox 17 and has been removed from Gecko\u00a029 in favor of ParallelJS (PJS) currently available in the Nightly channel ([bug\u00a0944074][1]).\n\n## Summary\n\nThe goal of ParallelArray is to enable data-parallelism in web applications.\nThe higher-order functions available on ParallelArray attempt to execute in\nparallel, though they may fall back to sequential execution if necessary. To\nensure that your code executes in parallel, it is suggested that the functions\nshould be limited to the [parallelizable subset of JS that Firefox\nsupports][2].\n\n## Syntax\n\n    \n    \n    new ParallelArray()\n    new ParallelArray([element0, element1, ...])\n    new ParallelArray(arrayLength, elementalFunction)\n\n## `ParallelArray` instances\n\n### Properties\n\nlength\n\n     Reflects the number of elements in the `ParallelArray`.\n\n### Methods\n\nmap\n\nreduce\n\nscan\n\nscatter\n\nfilter\n\nflatten\n\npartition\n\nget\n\n## Examples\n\n### Example: Using map in parallel\n\n    \n    \n    var p = new ParallelArray([0, 1, 2, 3, 4]);\n    var m = p.map(function (v) {\n      return v + 1;\n    });\n\n## See also\n\n  * [Ecmascript ParallelArray strawman][3]\n\n[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=944074\n\n[2]: http://smallcultfollowing.com/babysteps/blog/2013/04/30/parallelizable-javascript-subset/\n\n[3]: http://wiki.ecmascript.org/doku.php?id=strawman:data_parallelism\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Uint32Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/uint32array", "content": "## Summary\n\nThe **`Uint32Array`** typed array represents an array of 32-bit unsigned\nintegers in the platform byte order. If control over byte order is needed, use\n[`DataView`][1] instead. The contents are initialized to `0`. Once\nestablished, you can reference elements in the array using the object's\nmethods, or using standard array index syntax (that is, using bracket\nnotation).\n\n## Syntax\n\n    \n    \n    Uint32Array(length);\n    Uint32Array(typedArray);\n    Uint32Array(object);\n    Uint32Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Uint32Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `4` in the case of an `Uint32Array`.\nUint32Array.length\n\n     Length property whose value is 3.\n[`Uint32Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Uint32Array` type: \"Uint32Array\".\n[`Uint32Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nUint32Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nUint32Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Uint32Array` prototype\n\nAll `Uint32Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Uint32Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Uint32Array` constructor by default.\n[`Uint32Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Uint32Array` Fixed at construction time and thus **read only**.\n[`Uint32Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Uint32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Uint32Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Uint32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Uint32Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Uint32Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Uint32Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Uint32Array.prototype.copyWithin()`][14].\n[`Uint32Array.prototype.set()`][17]\n\n     Stores multiple values in the `Uint32Array`, reading input values from a specified array.\n[`Uint32Array.prototype.subarray()`][18]\n\n     Returns a new `Uint32Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var uint32 = new Uint32Array(2);\n    uint32[0] = 42;\n    console.log(uint32[0]); // 42\n    console.log(uint32.length); // 2\n    console.log(uint32.BYTES_PER_ELEMENT); // 4\n    \n    // From an array\n    var arr = new Uint32Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Uint32Array([21, 31]);\n    var y = new Uint32Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(16);\n    var z = Uint32Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Int32Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/int32array", "content": "## Summary\n\nThe **`Int32Array`** typed array represents an array of twos-complement 32-bit\nsigned integers in the platform byte order. If control over byte order is\nneeded, use [`DataView`][1] instead. The contents are initialized to `0`. Once\nestablished, you can reference elements in the array using the object's\nmethods, or using standard array index syntax (that is, using bracket\nnotation).\n\n## Syntax\n\n    \n    \n    Int32Array(length);\n    Int32Array(typedArray);\n    Int32Array(object);\n    Int32Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Int32Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `4` in the case of an `Int32Array`.\nInt32Array.length\n\n     Length property whose value is 3.\n[`Int32Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Int32Array` type: \"Int32Array\".\n[`Int32Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nInt32Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nInt32Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Int32Array` prototype\n\nAll `Int32Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Int32Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Int32Array` constructor by default.\n[`Int32Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Int32Array` Fixed at construction time and thus **read only**.\n[`Int32Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Int32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Int32Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Int32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Int32Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Int32Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Int32Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Int32Array.prototype.copyWithin()`][14].\n[`Int32Array.prototype.set()`][17]\n\n     Stores multiple values in the `Int32Array`, reading input values from a specified array.\n[`Int32Array.prototype.subarray()`][18]\n\n     Returns a new `Int32Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var int32 = new Int32Array(2);\n    int32[0] = 42;\n    console.log(int32[0]); // 42\n    console.log(int32.length); // 2\n    console.log(int32.BYTES_PER_ELEMENT); // 4\n    \n    // From an array\n    var arr = new Int32Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Int32Array([21, 31]);\n    var y = new Int32Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(16);\n    var z = Int32Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Uint16Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/uint16array", "content": "## Summary\n\nThe **`Uint16Array`** typed array represents an array of 16-bit unsigned\nintegers in the platform byte order. If control over byte order is needed, use\n[`DataView`][1] instead. The contents are initialized to `0`. Once\nestablished, you can reference elements in the array using the object's\nmethods, or using standard array index syntax (that is, using bracket\nnotation).\n\n## Syntax\n\n    \n    \n    Uint16Array(length);\n    Uint16Array(typedArray);\n    Uint16Array(object);\n    Uint16Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Uint16Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `2` in the case of an `Uint16Array`.\nUint16Array.length\n\n     Length property whose value is 3.\n[`Uint16Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Uint16Array` type: \"Uint16Array\".\n[`Uint16Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nUint16Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nUint16Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Uint16Array` prototype\n\nAll `Uint16Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Uint16Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Uint16Array` constructor by default.\n[`Uint16Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Uint16Array` Fixed at construction time and thus **read only**.\n[`Uint16Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Uint16Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Uint16Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Uint16Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Uint16Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Uint16Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Uint16Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Uint16Array.prototype.copyWithin()`][14].\n[`Uint16Array.prototype.set()`][17]\n\n     Stores multiple values in the `Uint16Array`, reading input values from a specified array.\n[`Uint16Array.prototype.subarray()`][18]\n\n     Returns a new `Uint16Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var uint16 = new Uint16Array(2);\n    uint16[0] = 42;\n    console.log(uint16[0]); // 42\n    console.log(uint16.length); // 2\n    console.log(uint16.BYTES_PER_ELEMENT); // 2\n    \n    // From an array\n    var arr = new Uint16Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Uint16Array([21, 31]);\n    var y = new Uint16Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(8);\n    var z = Uint16Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Int16Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/int16array", "content": "## Summary\n\nThe **`Int16Array`** typed array represents an array of twos-complement 16-bit\nsigned integers in the platform byte order. If control over byte order is\nneeded, use [`DataView`][1] instead. The contents are initialized to `0`. Once\nestablished, you can reference elements in the array using the object's\nmethods, or using standard array index syntax (that is, using bracket\nnotation).\n\n## Syntax\n\n    \n    \n    Int16Array(length);\n    Int16Array(typedArray);\n    Int16Array(object);\n    Int16Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Int16Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `2` in the case of an `Int16Array`.\nInt16Array.length\n\n     Length property whose value is 3.\n[`Int16Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Int16Array` type: \"Int16Array\".\n[`Int16Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nInt16Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nInt16Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Int16Array` prototype\n\nAll `Int16Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Int16Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Int16Array` constructor by default.\n[`Int16Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Int16Array` Fixed at construction time and thus **read only**.\n[`Int16Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Int16Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Int16Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Int16Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Int16Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Int16Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Int16Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Int16Array.prototype.copyWithin()`][14].\n[`Int16Array.prototype.set()`][17]\n\n     Stores multiple values in the `Int16Array`, reading input values from a specified array.\n[`Int16Array.prototype.subarray()`][18]\n\n     Returns a new `Int16Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var int16 = new Int16Array(2);\n    int16[0] = 42;\n    console.log(int16[0]); // 42\n    console.log(int16.length); // 2\n    console.log(int16.BYTES_PER_ELEMENT); // 2\n    \n    // From an array\n    var arr = new Int16Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Int16Array([21, 31]);\n    var y = new Int16Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(8);\n    var z = Int16Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Uint8ClampedArray", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/uint8clampedarray", "content": "## Summary\n\nThe **`Uint8ClampedArray`** typed array represents an array of 8-bit unsigned\nintegers clamped to 0-255. The contents are initialized to `0`. Once\nestablished, you can reference elements in the array using the object's\nmethods, or using standard array index syntax (that is, using bracket\nnotation).\n\n## Syntax\n\n    \n    \n    Uint8ClampedArray(length);\n    Uint8ClampedArray(typedArray);\n    Uint8ClampedArray(object);\n    Uint8ClampedArray(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][1]_.\n\n## Properties\n\n[`Uint8ClampedArray.BYTES_PER_ELEMENT`][2]\n\n     Returns a number value of the element size. `1` in the case of an `Uint8ClampedArray`.\nUint8ClampedArray.length\n\n     Length property whose value is 3.\n[`Uint8ClampedArray.name`][3]\n\n     Returns the string value of the constructor name. In the case of the `Uint8ClampedArray` type: \"Uint8ClampedArray\".\n[`Uint8ClampedArray.prototype`][4]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nUint8ClampedArray.from()\n\n     See [`Array.from()`][5]. Not implemented, see [bug\u00a0896608][6].\nUint8ClampedArray.of()\n\n     See [`Array.of()`][7]. Not implemented, see [bug\u00a0896608][6].\n\n## `Uint8ClampedArray` prototype\n\nAll `Uint8ClampedArray` objects inherit from [`%TypedArray%.prototype`][4].\n\n### Properties\n\n`Uint8ClampedArray.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Uint8ClampedArray` constructor by default.\n[`Uint8ClampedArray.prototype.buffer`][8] Read only\n\n     Returns the [`ArrayBuffer`][9] referenced by the `Uint8ClampedArray` Fixed at construction time and thus **read only**.\n[`Uint8ClampedArray.prototype.byteLength`][10] Read only\n\n     Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Uint8ClampedArray.prototype.byteOffset`][11] Read only\n\n     Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Uint8ClampedArray.prototype.length`][12] Read only\n\n     Returns the number of elements hold in the `UintClamped8Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Uint8ClampedArray.prototype.copyWithin()`][13]\n\n     See [`Array.prototype.copyWithin()`][14].\n[`Uint8ClampedArray.prototype.move()`][15] _ _ Unimplemented\n\n     Former non-standard version of [`Uint8ClampedArray.prototype.copyWithin()`][13].\n[`Uint8ClampedArray.prototype.set()`][16]\n\n     Stores multiple values in the `Uint8ClampedArray`, reading input values from a specified array.\n[`Uint8ClampedArray.prototype.subarray()`][17]\n\n     Returns a new `Uint8ClampedArray` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var uintc8 = new Uint8ClampedArray(2);\n    uintc8[0] = 42;\n    uintc8[1] = 1337;\n    console.log(uintc8[0]); // 42\n    console.log(uintc8[1]); // 255 (clamped)\n    console.log(uintc8.length); // 2\n    console.log(uintc8.BYTES_PER_ELEMENT); // 1\n    \n    // From an array\n    var arr = new Uint8ClampedArray([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Uint8ClampedArray([21, 31]);\n    var y = new Uint8ClampedArray(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(8);\n    var z = new Uint8ClampedArray(buffer, 1, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][18]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][19]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][20].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][21] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][22]\n  * [`ArrayBuffer`][9]\n  * [`DataView`][23]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[18]: https://www.khronos.org/registry/typedarray/specs/latest/#7.1\n\n[19]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[20]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[21]: /en-US/Firefox/Releases/4\n\n[22]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Float64Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/float64array", "content": "## Summary\n\nThe **`Float64Array`** typed array represents an array of 64-bit floating\npoint numbers (corresponding to the C `double` data type) in the platform byte\norder. If control over byte order is needed, use [`DataView`][1] instead. The\ncontents are initialized to `0`. Once established, you can reference elements\nin the array using the object's methods, or using standard array index syntax\n(that is, using bracket notation).\n\n## Syntax\n\n    \n    \n    Float64Array(length);\n    Float64Array(typedArray);\n    Float64Array(object);\n    Float64Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Float64Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `8` in the case of an `Float64Array`.\nFloat64Array.length\n\n     Length property whose value is 3.\n[`Float64Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Float64Array` type: \"Float64Array\".\n[`Float64Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nFloat64Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nFloat64Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Float64Array` prototype\n\nAll `Float64Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Float64Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Float64Array` constructor by default.\n[`Float64Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Float64Array` Fixed at construction time and thus **read only**.\n[`Float64Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Float64Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Float64Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Float64Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Float64Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Float64Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Float64Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Float64Array.prototype.copyWithin()`][14].\n[`Float64Array.prototype.set()`][17]\n\n     Stores multiple values in the `Float64Array`, reading input values from a specified array.\n[`Float64Array.prototype.subarray()`][18]\n\n     Returns a new `Float64Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var float64 = new Float64Array(2);\n    float64[0] = 42;\n    console.log(float64[0]); // 42\n    console.log(float64.length); // 2\n    console.log(float64.BYTES_PER_ELEMENT); // 8\n    \n    // From an array\n    var arr = new Float64Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Float64Array([21, 31]);\n    var y = new Float64Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(32);\n    var z = Float64Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Float32Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/float32array", "content": "## Summary\n\nThe **`Float32Array`** typed array represents an array of 32-bit floating\npoint numbers (corresponding to the C `float` data type) in the platform byte\norder. If control over byte order is needed, use [`DataView`][1] instead. The\ncontents are initialized to `0`. Once established, you can reference elements\nin the array using the object's methods, or using standard array index syntax\n(that is, using bracket notation).\n\n## Syntax\n\n    \n    \n    Float32Array(length);\n    Float32Array(typedArray);\n    Float32Array(object);\n    Float32Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][2]_.\n\n## Properties\n\n[`Float32Array.BYTES_PER_ELEMENT`][3]\n\n     Returns a number value of the element size. `4` in the case of an `Float32Array`.\nFloat32Array.length\n\n     Length property whose value is 3.\n[`Float32Array.name`][4]\n\n     Returns the string value of the constructor name. In the case of the `Float32Array` type: \"Float32Array\".\n[`Float32Array.prototype`][5]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nFloat32Array.from()\n\n     See [`Array.from()`][6]. Not implemented, see [bug\u00a0896608][7].\nFloat32Array.of()\n\n     See [`Array.of()`][8]. Not implemented, see [bug\u00a0896608][7].\n\n## `Float32Array` prototype\n\nAll `Float32Array` objects inherit from [`%TypedArray%.prototype`][5].\n\n### Properties\n\n`Float32Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Float32Array` constructor by default.\n[`Float32Array.prototype.buffer`][9] Read only\n\n     Returns the [`ArrayBuffer`][10] referenced by the `Float32Array` Fixed at construction time and thus **read only**.\n[`Float32Array.prototype.byteLength`][11] Read only\n\n     Returns the length (in bytes) of the `Float32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Float32Array.prototype.byteOffset`][12] Read only\n\n     Returns the offset (in bytes) of the `Float32Array` from the start of its [`ArrayBuffer`][10]. Fixed at construction time and thus **read only.**\n[`Float32Array.prototype.length`][13] Read only\n\n     Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Float32Array.prototype.copyWithin()`][14]\n\n     See [`Array.prototype.copyWithin()`][15].\n[`Float32Array.prototype.move()`][16] _ _ Unimplemented\n\n     Former non-standard version of [`Float32Array.prototype.copyWithin()`][14].\n[`Float32Array.prototype.set()`][17]\n\n     Stores multiple values in the `Float32Array`, reading input values from a specified array.\n[`Float32Array.prototype.subarray()`][18]\n\n     Returns a new `Float32Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var float32 = new Float32Array(2);\n    float32[0] = 42;\n    console.log(float32[0]); // 42\n    console.log(float32.length); // 2\n    console.log(float32.BYTES_PER_ELEMENT); // 4\n    \n    // From an array\n    var arr = new Float32Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Float32Array([21, 31]);\n    var y = new Float32Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(16);\n    var z = Float32Array(buffer, 0, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][19]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][20]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][21].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][22] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][23]\n  * [`ArrayBuffer`][10]\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[19]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[20]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[21]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[22]: /en-US/Firefox/Releases/4\n\n[23]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Uint8Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/uint8array", "content": "## Summary\n\nThe **`Uint8Array`** typed array represents an array of 8-bit unsigned\nintegers. The contents are initialized to `0`. Once established, you can\nreference elements in the array using the object's methods, or using standard\narray index syntax (that is, using bracket notation).\n\n## Syntax\n\n    \n    \n    Uint8Array(length);\n    Uint8Array(typedArray);\n    Uint8Array(object);\n    Uint8Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][1]_.\n\n## Properties\n\n[`Uint8Array.BYTES_PER_ELEMENT`][2]\n\n     Returns a number value of the element size. `1` in the case of an `Uint8Array`.\nUint8Array.length\n\n     Length property whose value is 3.\n[`Uint8Array.name`][3]\n\n     Returns the string value of the constructor name. In the case of the `Uint8Array` type: \"Uint8Array\".\n[`Uint8Array.prototype`][4]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nUint8Array.from()\n\n     See [`Array.from()`][5]. Not implemented, see [bug\u00a0896608][6].\nUint8Array.of()\n\n     See [`Array.of()`][7]. Not implemented, see [bug\u00a0896608][6].\n\n## `Uint8Array` prototype\n\nAll `Uint8Array` objects inherit from [`%TypedArray%.prototype`][4].\n\n### Properties\n\n`Uint8Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Uint8Array` constructor by default.\n[`Uint8Array.prototype.buffer`][8] Read only\n\n     Returns the [`ArrayBuffer`][9] referenced by the `Uint8Array` Fixed at construction time and thus **read only**.\n[`Uint8Array.prototype.byteLength`][10] Read only\n\n     Returns the length (in bytes) of the `Uint8Array` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Uint8Array.prototype.byteOffset`][11] Read only\n\n     Returns the offset (in bytes) of the `Uint8Array` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Uint8Array.prototype.length`][12] Read only\n\n     Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Uint8Array.prototype.copyWithin()`][13]\n\n     See [`Array.prototype.copyWithin()`][14].\n[`Uint8Array.prototype.move()`][15] _ _ Unimplemented\n\n     Former non-standard version of [`Uint8Array.prototype.copyWithin()`][13].\n[`Uint8Array.prototype.set()`][16]\n\n     Stores multiple values in the `Uint8Array`, reading input values from a specified array.\n[`Uint8Array.prototype.subarray()`][17]\n\n     Returns a new `Uint8Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var uint8 = new Uint8Array(2);\n    uint8[0] = 42;\n    console.log(uint8[0]); // 42\n    console.log(uint8.length); // 2\n    console.log(uint8.BYTES_PER_ELEMENT); // 1\n    \n    // From an array\n    var arr = new Uint8Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Uint8Array([21, 31]);\n    var y = new Uint8Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(8);\n    var z = Uint8Array(buffer, 1, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][18]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][19]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][20].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][21] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][22]\n  * [`ArrayBuffer`][9]\n  * [`DataView`][23]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[18]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[19]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[20]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[21]: /en-US/Firefox/Releases/4\n\n[22]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Int8Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/int8array", "content": "## Summary\n\nThe **`Int8Array`** typed array represents an array of twos-complement 8-bit\nsigned integers. The contents are initialized to `0`. Once established, you\ncan reference elements in the array using the object's methods, or using\nstandard array index syntax (that is, using bracket notation).\n\n## Syntax\n\n    \n    \n    Int8Array(length);\n    Int8Array(typedArray);\n    Int8Array(object);\n    Int8Array(buffer [, byteOffset [, length]]);\n\nFor more information about the constructor syntax and the parameters, see\n_[TypedArray][1]_.\n\n## Properties\n\n[`Int8Array.BYTES_PER_ELEMENT`][2]\n\n     Returns a number value of the element size. `1` in the case of an `Int8Array`.\nInt8Array.length\n\n     Length property whose value is 3.\n[`Int8Array.name`][3]\n\n     Returns the string value of the constructor name. In the case of the `Int8Array` type: \"Int8Array\".\n[`Int8Array.prototype`][4]\n\n     Prototype for the _TypedArray_ objects.\n\n## Methods\n\nInt8Array.from()\n\n     See [`Array.from()`][5]. Not implemented, see [bug\u00a0896608][6].\nInt8Array.of()\n\n     See [`Array.of()`][7]. Not implemented, see [bug\u00a0896608][6].\n\n## `Int8Array` prototype\n\nAll `Int8Array` objects inherit from [`%TypedArray%.prototype`][4].\n\n### Properties\n\n`Int8Array.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the `Int8Array` constructor by default.\n[`Int8Array.prototype.buffer`][8] Read only\n\n     Returns the [`ArrayBuffer`][9] referenced by the `Int8Array` Fixed at construction time and thus **read only**.\n[`Int8Array.prototype.byteLength`][10] Read only\n\n     Returns the length (in bytes) of the `Int8Array` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Int8Array.prototype.byteOffset`][11] Read only\n\n     Returns the offset (in bytes) of the `Int8Array` from the start of its [`ArrayBuffer`][9]. Fixed at construction time and thus **read only.**\n[`Int8Array.prototype.length`][12] Read only\n\n     Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus **read only.**\n\n### Methods\n\n[`Int8Array.prototype.copyWithin()`][13]\n\n     See [`Array.prototype.copyWithin()`][14].\n[`Int8Array.prototype.move()`][15] _ _ Unimplemented\n\n     Former non-standard version of [`Int8Array.prototype.copyWithin()`][13].\n[`Int8Array.prototype.set()`][16]\n\n     Stores multiple values in the `Int8Array`, reading input values from a specified array.\n[`Int8Array.prototype.subarray()`][17]\n\n     Returns a new `Int8Array` from the given start and end element index.\n\n## Examples\n\n    \n    \n    // From a length\n    var int8 = new Int8Array(2);\n    int8[0] = 42;\n    console.log(int8[0]); // 42\n    console.log(int8.length); // 2\n    console.log(int8.BYTES_PER_ELEMENT); // 1\n    \n    // From an array\n    var arr = new Int8Array([21,31]);\n    console.log(arr[1]); // 31\n    \n    // From another TypedArray\n    var x = new Int8Array([21, 31]);\n    var y = new Int8Array(x);\n    console.log(y[0]); // 21\n    \n    // From an ArrayBuffer\n    var buffer = new ArrayBuffer(8);\n    var z = Int8Array(buffer, 1, 4);\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][18]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypedArray constructors' in that specification.][19]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][20].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][21] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][22]\n  * [`ArrayBuffer`][9]\n  * [`DataView`][23]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray#Syntax\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/prototype\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=896608\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/move\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray\n\n[18]: https://www.khronos.org/registry/typedarray/specs/latest/#7\n\n[19]: http://people.mozilla.org/~jorendorff/es6-draft.html#table-45\n\n[20]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[21]: /en-US/Firefox/Releases/4\n\n[22]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Array", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/array", "content": "## Summary\n\nThe JavaScript **`Array`** global object is a constructor for arrays, which\nare high-level, list-like objects.\n\n## Syntax\n\n    \n    \n    [element0, element1, ..., elementN]\n    new Array(element0, element1[, ...[, elementN]])\n    new Array(arrayLength)\n\n`element_N_`\n\n    A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the `Array` constructor and that argument is a number. (See below.) Note that this special case only applies to JavaScript arrays created with the `Array` constructor, not array literals created with the bracket syntax.\n`arrayLength`\n\n    If the only argument passed to the `Array` constructor is an integer between 0 and 232-1 (inclusive), this returns a new JavaScript array with length set to that number. If the argument is any other number, a [`RangeError`][1] exception is thrown.\n\n## Description\n\nArrays are list-like objects whose prototype has methods to perform traversal\nand mutation operations. Neither the length of a JavaScript array nor the\ntypes of its elements are fixed. Since an array's size length grow or shrink\nat any time, JavaScript arrays are not guaranteed to be dense. In general,\nthese are convenient characteristics; but if these features are not desirable\nfor your particular use, you might consider using typed arrays.\n\nSome people think that [you shouldn't use an array as an associative\narray][2]. In any case, you can use plain [`objects`][3] instead, although\ndoing so comes with its own caveats. See the post [Lightweight JavaScript\ndictionaries with arbitrary keys][4] as an example.\n\n### Accessing array elements\n\nJavaScript arrays are zero-indexed: the first element of an array is at index\n`0`, and the last element is at the index equal to the value of the array's\n[`length`][5] property minus 1.\n\n    \n    \n    var arr = ['this is the first element', 'this is the second element'];\n    console.log(arr[0]);              // prints 'this is the first element'\n    console.log(arr[1]);              // prints 'this is the second element'\n    console.log(arr[arr.length - 1]); // prints 'this is the second element'\n    \n\nArray elements are object properties in the same way that `toString` is a\nproperty, but trying to access an element of an array as follows throws a\nsyntax error, because the property name is not valid:\n\n    \n    \n    console.log(arr.0);\n    \n\nThere is nothing special about JavaScript arrays and the properties that cause\nthis. JavaScript properties that begin with a digit cannot be referenced with\ndot notation; and must be accessed using bracket notation. For example, if you\nhad an object with a property named `'3d'`, it can only be referenced using\nbracket notation. E.g.:\n\n    \n    \n    var years = [1950, 1960, 1970, 1980, 1990, 2000, 2010];\n    console.log(years.0);   // a syntax error\n    console.log(years[0]);  // works properly\n    \n    \n    \n    renderer.3d.setTexture(model, 'character.png');     // a syntax error\n    renderer['3d'].setTexture(model, 'character.png');  // works properly\n    \n\nNote that in the `3d` example, `'3d'` had to be quoted. It's possible to quote\nthe JavaScript array indexes as well (e.g., `years['2']` instead of\n`years[2]`), although it's not necessary. The 2 in `years[2]` is coerced into\na string by the JavaScript engine through an implicit `toString` conversion.\nIt is for this reason that `'2'` and `'02'` would refer to two different slots\non the `years` object and the following example could be `true`:\n\n    \n    \n    console.log(years['2'] != years['02']);\n    \n\nSimilarly, object properties which happen to be reserved words(!) can only be\naccessed as string literals in bracket notation:\n\n    \n    \n    var promise = {\n      'var'  : 'text',\n      'array': [1, 2, 3, 4]\n    };\n    \n    console.log(promise['array']);\n    \n\n### Relationship between `length` and numerical properties\n\nA JavaScript array's [`length`][5] property and numerical properties are\nconnected. Several of the built-in array methods (e.g., [`join`][6],\n[`slice`][7], [`indexOf`][8], etc.) take into account the value of an array's\n[`length`][5] property when they're called. Other methods (e.g., [`push`][9],\n[`splice`][10], etc.) also result in updates to an array's [`length`][5]\nproperty.\n\n    \n    \n    var fruits = [];\n    fruits.push('banana', 'apple', 'peach');\n    \n    console.log(fruits.length); // 3\n    \n\nWhen setting a property on a JavaScript array when the property is a valid\narray index and that index is outside the current bounds of the array, the\nengine will update the array's [`length`][5] property accordingly:\n\n    \n    \n    fruits[5] = 'mango';\n    console.log(fruits[5]); // 'mango'\n    console.log(Object.keys(fruits));  // ['0', '1', '2', '5']\n    console.log(fruits.length); // 6\n    \n\nIncreasing the [`length`][5].\n\n    \n    \n    fruits.length = 10;\n    console.log(Object.keys(fruits)); // ['0', '1', '2', '5']\n    console.log(fruits.length); // 10\n    \n\nDecreasing the [`length`][5] property does, however, delete elements.\n\n    \n    \n    fruits.length = 2;\n    console.log(Object.keys(fruits)); // ['0', '1']\n    console.log(fruits.length); // 2\n    \n\nThis is explained further on the [`Array.length`][5] page.\n\n### Creating an array using the result of a match\n\nThe result of a match between a regular expression and a string can create a\nJavaScript array. This array has properties and elements which provide\ninformation about the match. Such an array is returned by [`RegExp.exec`][11],\n[`String.match`][12], and [`String.replace`][13]. To help explain these\nproperties and elements, look at the following example and then refer to the\ntable below:\n\n    \n    \n    // Match one d followed by one or more b's followed by one d\n    // Remember matched b's and the following d\n    // Ignore case\n    \n    var myRe = /d(b+)(d)/i;\n    var myArray = myRe.exec('cdbBdbsbz');\n    \n\nThe properties and elements returned from this match are as follows:  \n  \n<table>  \n<tr>  \n<td>\n\nProperty/Element\n\n</td>  \n<td>\n\nDescription\n\n</td>  \n<td>\n\nExample\n\n</td> </tr>  \n<tr>  \n<td>\n\n`input`\n\n</td>  \n<td>\n\nA read-only property that reflects the original string against which the\nregular expression was matched.\n\n</td>  \n<td>\n\ncdbBdbsbz\n\n</td> </tr>  \n<tr>  \n<td>\n\n`index`\n\n</td>  \n<td>\n\nA read-only property that is the zero-based index of the match in the string.\n\n</td>  \n<td>\n\n1\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`0]`\n\n</td>  \n<td>\n\nA read-only element that specifies the last matched characters.\n\n</td>  \n<td>\n\ndbBd\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`1], ...[n]`\n\n</td>  \n<td>\n\nRead-only elements that specify the parenthesized substring matches, if\nincluded in the regular expression. The number of possible parenthesized\nsubstrings is unlimited.\n\n</td>  \n<td>\n\n[1]: bB\n\n[2]: d\n\n</td> </tr> </table>\n\n## Properties\n\n_For properties available on `Array` instances, see [Properties of Array\ninstances][14]._\n\n[`Array.length`][5]\n\n    The `Array` constructor's length property whose value is 1.\n[`Array.prototype`][15]\n\n    Allows the addition of properties to all array objects.\n\nProperties inherited from [`Function`][16]:\n\n[`arity`][17], [`caller`][18], [`constructor`][19], [`length`][20],\n[`name`][21]\n\n## Methods\n\n_For methods available on `Array` instances, see [Methods of Array\ninstances][22]._\n\n[`Array.from()`][23] _ _\n\n    Creates a new `Array` instance from an array-like or iterable object.\n[`Array.isArray()`][24]\n\n    Returns true if a variable is an array, if not false.\n[`Array.of()`][25] _ _\n\n    Creates a new `Array` instance with a variable number of arguments, regardless of number or type of the arguments.\n\n## `Array` instances\n\nAll `Array` instances inherit from [`Array.prototype`][15]. The prototype\nobject of the `Array` constructor can be modified to affect all `Array`\ninstances.\n\n### Properties\n\n`Array.prototype.constructor`\n\n     Specifies the function that creates an object's prototype.\n[`Array.prototype.length`][5]\n\n     Reflects the number of elements in an array.\n\nMethods inherited from [`Object`][26]:\n\n[`__defineGetter__`][27], [`__defineSetter__`][28], [`hasOwnProperty`][29],\n[`isPrototypeOf`][30], [`__lookupGetter__`][31], [`__lookupSetter__`][32],\n[`__noSuchMethod__`][33], [`propertyIsEnumerable`][34], [`toSource`][35],\n[`toLocaleString`][36], [`toString`][37], [`unwatch`][38], [`valueOf`][39],\n[`watch`][40]\n\n### Methods\n\n#### Mutator methods\n\nThese methods modify the array:\n\n[`Array.prototype.copyWithin()`][41] _ _\n\n     Copies a sequence of array elements within the array.\n[`Array.prototype.fill()`][42] _ _\n\n     Fills all the elements of an array from a start index to an end index with a static value.\n[`Array.prototype.pop()`][43]\n\n     Removes the last element from an array and returns that element.\n[`Array.prototype.push()`][9]\n\n     Adds one or more elements to the end of an array and returns the new length of the array.\n[`Array.prototype.reverse()`][44]\n\n     Reverses the order of the elements of an array\u00a0\u2014 the first becomes the last, and the last becomes the first.\n[`Array.prototype.shift()`][45]\n\n     Removes the first element from an array and returns that element.\n[`Array.prototype.sort()`][46]\n\n     Sorts the elements of an array in place and returns the array.\n[`Array.prototype.splice()`][10]\n\n     Adds and/or removes elements from an array.\n[`Array.prototype.unshift()`][47]\n\n     Adds one or more elements to the front of an array and returns the new length of the array.\n\n#### Accessor methods\n\nThese methods do not modify the array and return some representation of the\narray.\n\n[`Array.prototype.concat()`][48]\n\n     Returns a new array comprised of this array joined with other array(s) and/or value(s).\n[`Array.prototype.contains()`][49] _ _\n\n     Determines whether an array contains a certain element, returning `true` or `false` as appropriate.\n[`Array.prototype.join()`][6]\n\n     Joins all elements of an array into a string.\n[`Array.prototype.slice()`][7]\n\n     Extracts a section of an array and returns a new array.\n[`Array.prototype.toSource()`][50] _ _\n\n     Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the [`Object.prototype.toSource()`][51] method.\n[`Array.prototype.toString()`][52]\n\n     Returns a string representing the array and its elements. Overrides the [`Object.prototype.toString()`][53] method.\n[`Array.prototype.toLocaleString()`][54]\n\n     Returns a localized string representing the array and its elements. Overrides the [`Object.prototype.toLocaleString()`][55] method.\n[`Array.prototype.indexOf()`][8]\n\n     Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n[`Array.prototype.lastIndexOf()`][56]\n\n     Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n\n#### Iteration methods\n\nSeveral methods take as arguments functions to be called back while processing\nthe array. When these methods are called, the `length` of the array is\nsampled, and any element added beyond this length from within the callback is\nnot visited. Other changes to the array (setting the value of or deleting an\nelement) may affect the results of the operation if the method visits the\nchanged element afterwards. While the specific behavior of these methods in\nsuch cases is well-defined, you should not rely upon it so as not to confuse\nothers who might read your code. If you must mutate the array, copy into a new\narray instead.\n\n[`Array.prototype.forEach()`][57]\n\n     Calls a function for each element in the array.\n[`Array.prototype.entries()`][58] _ _\n\n     Returns a new `Array Iterator` object that contains the key/value pairs for each index in the array.\n[`Array.prototype.every()`][59]\n\n     Returns true if every element in this array satisfies the provided testing function.\n[`Array.prototype.some()`][60]\n\n     Returns true if at least one element in this array satisfies the provided testing function.\n[`Array.prototype.filter()`][61]\n\n     Creates a new array with all of the elements of this array for which the provided filtering function returns true.\n[`Array.prototype.find()`][62] _ _\n\n     Returns the found value in the array, if an element in the array satisfies the provided testing function or `undefined` if not found.\n[`Array.prototype.findIndex()`][63] _ _\n\n     Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.\n[`Array.prototype.keys()`][64] _ _\n\n     Returns a new `Array Iterator` that contains the keys for each index in the array.\n[`Array.prototype.map()`][65]\n\n     Creates a new array with the results of calling a provided function on every element in this array.\n[`Array.prototype.reduce()`][66]\n\n     Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.\n[`Array.prototype.reduceRight()`][67]\n\n     Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.\n\n## `Array` generic methods\n\nSometimes you would like to apply array methods to strings or other array-like\nobjects (such as function [arguments][68]). By doing this, you treat a string\nas an array of characters (or otherwise treat a non-array as an array). For\nexample, in order to check that every character in the variable str is a\nletter, you would write:\n\n    \n    \n    function isLetter(character) {\n      return character >= 'a' && character <= 'z';\n    }\n    \n    if (Array.prototype.every.call(str, isLetter)) {\n      console.log(\"The string '\" + str + \"' contains only letters!\");\n    }\n    \n\nThis notation is rather wasteful and JavaScript 1.6 introduced a generic\nshorthand:\n\n    \n    \n    if (Array.every(isLetter, str)) {\n      console.log(\"The string '\" + str + \"' contains only letters!\");\n    }\n    \n\n[Generics][69] are also available on [`String`][70].\n\nThese are currently not part of ECMAScript standards (though the ES6\n[`Array.from()`][71] can be used to achieve this). The following is a shim to\nallow its use in all browsers:\n\n    \n    \n    // Assumes Array extras already present (one may use polyfills for these as well)\n    (function() {\n      'use strict';\n    \n      var i,\n        // We could also build the array of methods with the following, but the\n        //   getOwnPropertyNames() method is non-shimable:\n        // Object.getOwnPropertyNames(Array).filter(function(methodName) {\n        //   return typeof Array[methodName] === 'function'\n        // });\n        methods = [\n          'join', 'reverse', 'sort', 'push', 'pop', 'shift', 'unshift',\n          'splice', 'concat', 'slice', 'indexOf', 'lastIndexOf',\n          'forEach', 'map', 'reduce', 'reduceRight', 'filter',\n          'some', 'every'\n        ],\n        methodCount = methods.length,\n        assignArrayGeneric = function(methodName) {\n          if (!Array[methodName]) {\n            var method = Array.prototype[methodName];\n            if (typeof method === 'function') {\n              Array[methodName] = function() {\n                return method.call.apply(method, arguments);\n              };\n            }\n          }\n        };\n    \n      for (i = 0; i < methodCount; i++) {\n        assignArrayGeneric(methods[i]);\n      }\n    }());\n    \n\n## Examples\n\n### Example: Creating an array\n\nThe following example creates an array, `msgArray`, with a length of 0, then\nassigns values to `msgArray[0]` and `msgArray[99]`, changing the length of the\narray to 100.\n\n    \n    \n    var msgArray = [];\n    msgArray[0] = 'Hello';\n    msgArray[99] = 'world';\n    \n    if (msgArray.length === 100) {\n      console.log('The length is 100.');\n    }\n    \n\n### Example: Creating a two-dimensional array\n\nThe following creates a chess board as a two dimensional array of strings. The\nfirst move is made by copying the 'p' in (6,4) to (4,4). The old position\n(6,4) is made blank.\n\n    \n    \n    var board = [ \n      ['R','N','B','Q','K','B','N','R'],\n      ['P','P','P','P','P','P','P','P'],\n      [' ',' ',' ',' ',' ',' ',' ',' '],\n      [' ',' ',' ',' ',' ',' ',' ',' '],\n      [' ',' ',' ',' ',' ',' ',' ',' '],\n      [' ',' ',' ',' ',' ',' ',' ',' '],\n      ['p','p','p','p','p','p','p','p'],\n      ['r','n','b','q','k','b','n','r'] ];\n    \n    console.log(board.join('\\n') + '\\n\\n');\n    \n    // Move King's Pawn forward 2\n    board[4][4] = board[6][4];\n    board[6][4] = ' ';\n    console.log(board.join('\\n'));\n    \n\nHere is the output:\n\n    \n    \n    R,N,B,Q,K,B,N,R\n    P,P,P,P,P,P,P,P\n     , , , , , , , \n     , , , , , , , \n     , , , , , , , \n     , , , , , , , \n    p,p,p,p,p,p,p,p\n    r,n,b,q,k,b,n,r\n    \n    R,N,B,Q,K,B,N,R\n    P,P,P,P,P,P,P,P\n     , , , , , , , \n     , , , , , , , \n     , , , ,p, , , \n     , , , , , , , \n    p,p,p,p, ,p,p,p\n    r,n,b,q,k,b,n,r\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Array' in that specification.][72]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nNew methods added: [`Array.isArray`][24], [`indexOf`][8], [`lastIndexOf`][56],\n[`every`][59], [`some`][60], [`forEach`][57], [`map`][65], [`filter`][61],\n[`reduce`][66], [`reduceRight`][67]\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Array' in that specification.][73]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew methods added: [`Array.from`][23], [`Array.of`][25], [`find`][62],\n[`findIndex`][63], [`fill`][42], [`copyWithin`][41]\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][74].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript Guide: \u201cIndexing object properties\u201d][75]\n  * [JavaScript Guide: \u201cPredefined Core Objects: `Array` Object\u201d][76]\n  * [Array comprehensions][77]\n  * [Polyfill for JavaScript 1.8.5 Array Generics and ECMAScript 5 Array Extras][78]\n  * [Typed Arrays][79]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[2]: http://www.andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: http://www.less-broken.com/blog/2010/12/lightweight-javascript-dictionaries.html\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Properties\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[22]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype#Methods\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n\n[26]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[27]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[35]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToSource\n\n[36]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[37]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToString\n\n[38]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[39]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[40]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/contains\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[69]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_generic_methods\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[71]: https://github.com/monolithed/ECMAScript-6\n\n[72]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4\n\n[73]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-array-objects\n\n[74]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[75]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Indexing_object_properties\n\n[76]: /en-US/docs/Web/JavaScript/Guide/Predefined_Core_Objects#Array_Object\n\n[77]: /en-US/docs/Web/JavaScript/Reference/Operators/Array_comprehensions\n\n[78]: https://github.com/plusdude/array-generics\n\n[79]: /en-US/docs/JavaScript_typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "RegExp", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/regexp", "content": "## Summary\n\nThe `**RegExp**` constructor creates a regular expression object for matching\ntext with a pattern.\n\nFor an introduction on what\u00a0 regular expressions are, read the [Regular\nExpressions chapter in the JavaScript Guide][1].\n\n## Constructor\n\nLiteral and constructor notations are possible:\n\n    \n    \n    /_pattern_/_flags;\n    _\n    new RegExp(_pattern_ _[, flags]_);\n    \n\n### Parameters\n\n`pattern`\n\n     The text of the regular expression.\n`flags`\n\n    \n\nIf specified, flags can have any combination of the following values:\n\n`g`\n\n     global match\n`i`\n\n     ignore case\n`m`\n\n     multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of _each_ line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)\n`y`\n\n     sticky; matches only from the index indicated by the `lastIndex` property of this regular expression in the target string (and does not attempt to match from any later indexes).\n\n## Description\n\nThere are 2 ways to create a RegExp object: a literal notation and a\nconstructor. To indicate strings, the parameters to the literal notation do\nnot use quotation marks while the parameters to the constructor function do\nuse quotation marks. So the following expressions create the same regular\nexpression:\n\n    \n    \n    /ab+c/i;\n    new RegExp(\"ab+c\", \"i\");\n    \n\nThe literal notation provides compilation of the regular expression when the\nexpression is evaluated. Use literal notation when the regular expression will\nremain constant. For example, if you use literal notation to construct a\nregular expression used in a loop, the regular expression won't be recompiled\non each iteration.\n\nThe constructor of the regular expression object, for example, `new\nRegExp(\"ab+c\")`, provides runtime compilation of the regular expression. Use\nthe constructor function when you know the regular expression pattern will be\nchanging, or you don't know the pattern and are getting it from another\nsource, such as user input.\n\nWhen using the constructor function, the normal string escape rules (preceding\nspecial characters with \\ when included in a string) are necessary. For\nexample, the following are equivalent:\n\n    \n    \n    var re = /\\w+/;\n    var re = new RegExp(\"\\\\w+\");\n    \n\n## Special characters meaning in regular expressions\n\n  * Character Classes\n  * Character Sets\n  * Boundaries\n  * Grouping and back references\n  * Quantifiers  \n<table>  \n<tr>  \n<th>\n\nCharacter Classes\n\n</th> </tr>  \n<tr>  \n<th>\n\nCharacter\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\n`.`\n\n</td>  \n<td>\n\n(The dot, the decimal point) matches any single character _except_ the newline\ncharacters: `\\n` `\\r` `\\u2028` or `\\u2029`.\n\nNote that the `m` multiline flag doesn't change the dot behavior. So to match\na pattern across multiple lines the character set [`^]` can be used (if you\ndon't mean an old version of IE, of course), it will match any character\nincluding newlines.\n\nFor example, `/.y/` matches \"my\" and \"ay\", but not \"yes\", in \"yes make my\nday\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\d`\n\n</td>  \n<td>\n\nMatches a digit character in the basic Latin alphabet. Equivalent to [`0-9]`.\n\nFor example, `/\\d/` or `/[0-9]/` matches '2' in \"B2 is the suite number.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\D`\n\n</td>  \n<td>\n\nMatches any character that is not a digit in the basic Latin alphabet.\nEquivalent to [`^0-9]`.\n\nFor example, `/\\D/` or `/[^0-9]/` matches 'B' in \"B2 is the suite number.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\w`\n\n</td>  \n<td>\n\nMatches any alphanumeric character from the basic Latin alphabet, including\nthe underscore. Equivalent to [`A-Za-z0-9_]`.\n\nFor example, `/\\w/` matches 'a' in \"apple,\" '5' in \"$5.28,\" and '3' in \"3D.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\W`\n\n</td>  \n<td>\n\nMatches any character that is not a word character from the basic Latin\nalphabet. Equivalent to [`^A-Za-z0-9_]`.\n\nFor example, `/\\W/` or `/[^A-Za-z0-9_]/` matches '%' in \"50%.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\s`\n\n</td>  \n<td>\n\nMatches a single white space character, including space, tab, form feed, line\nfeed and other Unicode spaces. Equivalent to [`\n\\f\\n\\r\\t\\v\u200b\\u00a0\\u1680\u200b\\u180e\\u2000\u200b\\u2001\\u2002\u200b\\u2003\\u2004\u200b\n\\u2005\\u2006\u200b\\u2007\\u2008\u200b\\u2009\\u200a\u200b\\u2028\\u2029\u200b\u200b\\u202f\\u205f\u200b \\u3000]`.\n\nFor example, `/\\s\\w*/` matches ' bar' in \"foo bar.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\S`\n\n</td>  \n<td>\n\nMatches a single character other than white space. Equivalent to `[`^\n\\f\\n\\r\\t\\v\u200b\\u00a0\\u1680\u200b\\u180e\\u2000\u200b\\u2001\\u2002\u200b\\u2003\\u2004\u200b\n\\u2005\\u2006\u200b\\u2007\\u2008\u200b\\u2009\\u200a\u200b\\u2028\\u2029\u200b\\u202f\\u205f\u200b\\u3000]``.\n\nFor example, `/\\S\\w*/` matches 'foo' in \"foo bar.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\t`\n\n</td>  \n<td>\n\nMatches a tab.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\r`\n\n</td>  \n<td>\n\nMatches a carriage return.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\n`\n\n</td>  \n<td>\n\nMatches a linefeed.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\v`\n\n</td>  \n<td>\n\nMatches a vertical tab.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\f`\n\n</td>  \n<td>\n\nMatches a form-feed.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`\\b]`\n\n</td>  \n<td>\n\nMatches a backspace. (Not to be confused with `\\b`)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\0`\n\n</td>  \n<td>\n\nMatches a NUL character. Do not follow this with another digit.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\c_X_`\n\n</td>  \n<td>\n\nWhere `_X_` is a letter from A - Z. Matches a control character in a string.\n\nFor example, `/\\cM/` matches control-M in a string.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\x_hh_`\n\n</td>  \n<td>\n\nMatches the character with the code `_hh_` (two hexadecimal digits)\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\u_hhhh_`\n\n</td>  \n<td>\n\nMatches the character with the Unicode value `_hhhh_` (four hexadecimal\ndigits).\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\`\n\n</td>  \n<td>\n\nFor characters that are usually treated literally, indicates that the next\ncharacter is special and not to be interpreted literally.\n\nFor example, `/b/` matches the character 'b'. By placing a backslash in front\nof b, that is by using `/\\b/`, the character becomes special to mean match a\nword boundary.\n\n_or_\n\nFor characters that are usually treated specially, indicates that the next\ncharacter is not special and should be interpreted literally.\n\nFor example, * is a special character that means 0 or more occurrences of the\npreceding character should be matched; for example, `/a*/` means match 0 or\nmore \"a\"s. To match `*` literally, precede it with a backslash; for example,\n`/a\\\\*/` matches 'a*'.\n\n</td> </tr>  \n<tr>  \n<th>\n\nCharacter Sets\n\n</th> </tr>  \n<tr>  \n<th>\n\nCharacter\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\n[`xyz]`\n\n</td>  \n<td>\n\nA character set. Matches any one of the enclosed characters. You can specify a\nrange of characters by using a hyphen.\n\nFor example, [`abcd]` is the same as [`a-d]`. They match the 'b' in \"brisket\"\nand the 'c' in \"chop\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n[`^xyz]`\n\n</td>  \n<td>\n\nA negated or complemented character set. That is, it matches anything that is\nnot enclosed in the brackets. You can specify a range of characters by using a\nhyphen.\n\nFor example, [`^abc]` is the same as [`^a-c]`. They initially match 'o' in\n\"bacon\" and 'h' in \"chop.\"\n\n</td> </tr>  \n<tr>  \n<th>\n\nBoundaries\n\n</th> </tr>  \n<tr>  \n<th>\n\nCharacter\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\n`^`\n\n</td>  \n<td>\n\nMatches beginning of input. If the multiline flag is set to true, also matches\nimmediately after a line break character.\n\nFor example, `/^A/` does not match the 'A' in \"an A\", but does match the first\n'A' in \"An A.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`$`\n\n</td>  \n<td>\n\nMatches end of input. If the multiline flag is set to true, also matches\nimmediately before a line break character.\n\nFor example, `/t$/` does not match the 't' in \"eater\", but does match it in\n\"eat\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\b`\n\n</td>  \n<td>\n\nMatches a zero-width word boundary, such as between a letter and a space. (Not\nto be confused with [`\\b]`)\n\nFor example, `/\\bno/` matches the 'no' in \"at noon\"; `/ly\\b/` matches the 'ly'\nin \"possibly yesterday.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\B`\n\n</td>  \n<td>\n\nMatches a zero-width non-word boundary, such as between two letters or between\ntwo spaces.\n\nFor example, `/\\Bon/` matches 'on' in \"at noon\", and `/ye\\B/` matches 'ye' in\n\"possibly yesterday.\"\n\n</td> </tr>  \n<tr>  \n<th>\n\nGrouping and back references\n\n</th> </tr>  \n<tr>  \n<th>\n\nCharacter\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\n`(_x_)`\n\n</td>  \n<td>\n\nMatches `_x_` and remembers the match. These are called capturing parentheses.\n\nFor example, `/(foo)/` matches and remembers 'foo' in \"foo bar.\" The matched\nsubstring can be recalled from the resulting array's elements [`1], ..., [n]`\nor from the predefined `RegExp` object's properties `$1, ..., $9`.\n\nCapturing groups have a performance penalty. If you don't need the matched\nsubstring to be recalled, prefer non-capturing parentheses (see below).\n\n</td> </tr>  \n<tr>  \n<td>\n\n`\\_n_`\n\n</td>  \n<td>\n\nWhere `_n_` is a positive integer. A back reference to the last substring\nmatching the n parenthetical in the regular expression (counting left\nparentheses).\n\nFor example, `/apple(,)\\sorange\\1/` matches 'apple, orange,' in \"apple,\norange, cherry, peach.\" A more complete example follows this table.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`(?:_x_)`\n\n</td>  \n<td>\n\nMatches `_x_` but does not remember the match. These are called non-capturing\nparentheses. The matched substring can not be recalled from the resulting\narray's elements [`1], ..., [n]` or from the predefined `RegExp` object's\nproperties `$1, ..., $9`.\n\n</td> </tr>  \n<tr>  \n<th>\n\nQuantifiers\n\n</th> </tr>  \n<tr>  \n<th>\n\nCharacter\n\n</th>  \n<th>\n\nMeaning\n\n</th> </tr>  \n<tr>  \n<td>\n\n`_x_*`\n\n</td>  \n<td>\n\nMatches the preceding item _x_ 0 or more times.\n\nFor example, `/bo*/` matches 'boooo' in \"A ghost booooed\" and 'b' in \"A bird\nwarbled\", but nothing in \"A goat grunted\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_+`\n\n</td>  \n<td>\n\nMatches the preceding item _x_ 1 or more times. Equivalent to `{1,}`.\n\nFor example, `/a+/` matches the 'a' in \"candy\" and all the a's in\n\"caaaaaaandy\".\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_*?`  \n`_x_+?`\n\n</td>  \n<td>\n\nMatches the preceding item _x_ like `*` and `+` from above, however the match\nis the smallest possible match.\n\nFor example, `/\".*?\"/` matches '\"foo\"' in '\"foo\" \"bar\"' and does not match\n'\"foo\" \"bar\"' as without the `?` behind the `*`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_?`\n\n</td>  \n<td>\n\nMatches the preceding item _x_ 0 or 1 time.\n\nFor example, `/e?le?/` matches the 'el' in \"angel\" and the 'le' in \"angle.\"\n\nIf used immediately after any of the quantifiers `*`, `+`, `?`, or `{}`, makes\nthe quantifier non-greedy (matching the minimum number of times), as opposed\nto the default, which is greedy (matching the maximum number of times).\n\nAlso used in lookahead assertions, described under `(?=)`, `(?!)`, and `(?:)`\nin this table.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_(?=_y_)`\n\n</td>  \n<td>\n\nMatches `_x_` only if `_x_` is followed by `_y_`. For example,\n`/Jack(?=Sprat)/` matches 'Jack' only if it is followed by 'Sprat'.\n`/Jack(?=Sprat|Frost)/` matches 'Jack' only if it is followed by 'Sprat' or\n'Frost'. However, neither 'Sprat' nor 'Frost' is part of the match results.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_(?!_y_)`\n\n</td>  \n<td>\n\nMatches `_x_` only if `_x_` is not followed by `_y_`. For example,\n`/\\d+(?!\\\\.)/` matches a number only if it is not followed by a decimal point.\n\n`/\\d+(?!\\\\.)/.exec(\"3.141\")` matches 141 but not 3.141.\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_|_y_`\n\n</td>  \n<td>\n\nMatches either `_x_` or `_y_`.\n\nFor example, `/green|red/` matches 'green' in \"green apple\" and 'red' in \"red\napple.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_{_n_}`\n\n</td>  \n<td>\n\nWhere `_n_` is a positive integer. Matches exactly `_n_` occurrences of the\npreceding item _x_.\n\nFor example, `/a{2}/` doesn't match the 'a' in \"candy,\" but it matches all of\nthe a's in \"caandy,\" and the first two a's in \"caaandy.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_{_n_,}`\n\n</td>  \n<td>\n\nWhere `_n_` is a positive integer. Matches at least `_n_` occurrences of the\npreceding item _x_.\n\nFor example, `/a{2,}/` doesn't match the 'a' in \"candy\", but matches all of\nthe a's in \"caandy\" and in \"caaaaaaandy.\"\n\n</td> </tr>  \n<tr>  \n<td>\n\n`_x_{_n_,_m_}`\n\n</td>  \n<td>\n\nWhere `_n_` and `_m_` are positive integers. Matches at least `_n_` and at\nmost `_m_` occurrences of the preceding item _x_.\n\nFor example, `/a{1,3}/` matches nothing in \"cndy\", the 'a' in \"candy,\" the two\na's in \"caandy,\" and the first three a's in \"caaaaaaandy\". Notice that when\nmatching \"caaaaaaandy\", the match is \"aaa\", even though the original string\nhad more a's in it.\n\n</td> </tr> </table>\n\n### Properties\n\n_For properties available on `RegExp` instances, see [Properties of RegExp\ninstances][2]._\n\n[`RegExp.prototype`][3]\n\n     Allows the addition of properties to all objects.\nRegExp.length\n\n     The value of `RegExp.length` is 2.\n\nProperties inherited from [`Function`][4]:\n\n[`arity`][5], [`caller`][6], [`constructor`][7], [`length`][8], [`name`][9]\n\n### Methods\n\n_For methods available on `RegExp` instances, see [Methods of RegExp\ninstances][10]._\n\nThe global `RegExp` object has no methods of its own, however, it does inherit\nsome methods through the prototype chain.\n\nMethods inherited from [`Function`][4]:\n\n[`apply`][11], [`call`][12], [`toSource`][13], [`toString`][14]\n\n## `RegExp` prototype objects and instances\n\n### Properties\n\nSee also [Deprecated RegExp Properties][15]\n\nNote that several of the `RegExp` properties have both long and short (Perl-\nlike) names. Both names always refer to the same value. Perl is the\nprogramming language from which JavaScript modeled its regular expressions.\n\n`RegExp.prototype.``constructor`\n\n     Specifies the function that creates an object's prototype.\n[`RegExp.prototype.global`][16]\n\n     Whether to test the regular expression against all possible matches in a string, or only against the first.\n[`RegExp.prototype.ignoreCase`][17]\n\n     Whether to ignore case while attempting a match in a string.\n[`RegExp.prototype.lastIndex`][18]\n\n     The index at which to start the next match.\n[`RegExp.prototype.multiline`][19]\n\n     Whether or not to search in strings across multiple lines.\n[`RegExp.prototype.source`][20]\n\n     The text of the pattern.\n[`RegExp.prototype.sticky`][21] _ _\n\n     Whether or not the search is sticky.\n\nProperties inherited from [`Object`][22]:\n\n[`__parent__`][23], [`__proto__`][24]\n\n### Methods\n\nSee also [Deprecated RegExp Methods][25]\n\n[`RegExp.prototype.exec()`][26]\n\n     Executes a search for a match in its string parameter.\n[`RegExp.prototype.test()`][27]\n\n     Tests for a match in its string parameter.\n[`RegExp.prototype.toSource()`][28] _ _\n\n     Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method.\n[`RegExp.prototype.toString()`][29]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][30] method.\n\nMethods inherited from [`Object`][22]:\n\n[`__defineGetter__`][31], [`__defineSetter__`][32], [`hasOwnProperty`][33],\n[`isPrototypeOf`][34], [`__lookupGetter__`][35], [`__lookupSetter__`][36],\n[`__noSuchMethod__`][37], [`propertyIsEnumerable`][38],\n[`toLocaleString`][39], [`unwatch`][40], [`valueOf`][41], [`watch`][42]\n\n## Examples\n\n### Example: Using a regular expression to change data format\n\nThe following script uses the [`replace`][43] method of the [`String`][44]\ninstance to match a name in the format _first last_ and output it in the\nformat _last_, _first_. In the replacement text, the script uses `$1` and `$2`\nto indicate the results of the corresponding matching parentheses in the\nregular expression pattern.\n\n    \n    \n    var re = /(\\w+)\\s(\\w+)/;\n    var str = \"John Smith\";\n    var newstr = str.replace(re, \"$2, $1\");\n    console.log(newstr);\n\nThis displays \"Smith, John\".\n\n### Example: Using regular expression on multiple lines\n\n    \n    \n    var s = \"Please yes\\nmake my day!\";\n    s.match(/yes.*day/);\n    // Returns null\n    s.match(/yes[^]*day/);\n    // Returns 'yes\\nmake my day'\n    \n\n### Example: Using a regular expression with the \"sticky\" flag\n\nThis example demonstrates how one could use the sticky flag on regular\nexpressions to match individual lines of multiline input.\n\n    \n    \n    var text = \"First line\\nSecond line\";\n    var regex = /(\\S+) line\\n?/y;\n    \n    var match = regex.exec(text);\n    console.log(match[1]);  // prints \"First\"\n    console.log(regex.lastIndex); // prints 11\n    \n    var match2 = regex.exec(text);\n    console.log(match2[1]); // prints \"Second\"\n    console.log(regex.lastIndex); // prints \"22\"\n    \n    var match3 = regex.exec(text);\n    console.log(match3 === null); // prints \"true\"\n\nOne can test at run-time whether the sticky flag is supported, using `try { \u2026\n} catch { \u2026 }`. For this, either an `eval(\u2026)` expression or the `RegExp(regex-\nstring, flags-string)` syntax must be used (since the `/regex/flags` notation\nis processed at compile-time, so throws an exception before the `catch` block\nis encountered). For example:\n\n    \n    \n    var supports_sticky;\n    try { RegExp('','y'); supports_sticky = true; }\n    catch(e) { supports_sticky = false; }\n    alert(supports_sticky); // alerts \"true\"\n\n### Example: Regular expression and Unicode characters\n\nAs mentioned above, `\\w` or `\\W` only matches ASCII based characters; for\nexample, 'a' to 'z', 'A' to 'Z', 0 to 9 and '_'. To match characters from\nother languages such as Cyrillic or Hebrew, use `\\uhhhh`., where \"hhhh\" is the\ncharacter's Unicode value in hexadecimal. This example demonstrates how one\ncan separate out Unicode characters from a word.\n\n    \n    \n    var text = \"\u041e\u0431\u0440\u0430\u0437\u0435\u0446 text \u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435\";\n    var regex = /[\\u0400-\\u04FF]+/g;\n    \n    var match = regex.exec(text);\n    console.log(match[0]);  // prints \"\u041e\u0431\u0440\u0430\u0437\u0435\u0446\"\n    console.log(regex.lastIndex);  // prints \"7\"\n    \n    var match2 = regex.exec(text);\n    console.log(match2[0]);  // prints \"\u043d\u0430\" [did not print \"text\"]\n    console.log(regex.lastIndex);  // prints \"15\"\n    \n    // and so on\n\nHere's an external resource for getting the complete Unicode block range for\ndifferent scripts: [Regexp-unicode-block][45]\n\n### Example: Extracting subdomain name from URL\n\n    \n    \n    var url = \"http://xxx.domain.com\";\n    console.log(/[^.]+/.exec(url)[0].substr(7)); // prints \"xxx\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RegExp' in that specification.][46]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RegExp' in that specification.][47]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][48].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nSticky flag (\"y\")\n\n</td>  \n<td>\n\n39 (behind flag)\n\n</td>  \n<td>\n\n[3.0][49] (1.9) ES4-Style [bug\u00a0773687][50]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr>  \n<tr>  \n<td>\n\nSticky flag (\"y\")\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n[3.0][49] (1.9) ES4-Style [bug\u00a0773687][50]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [Regular Expressions][1] chapter in the [JavaScript Guide][51]\n  * [String.prototype.match()][52]\n  * [String.prototype.replace()][43]\n\n[1]: /en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype#Properties\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype\n\n[4]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/prototype#Methods\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Properties\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\n\n[22]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Deprecated_and_obsolete_features#RegExp_Methods\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toSource\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[35]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[36]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[37]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[38]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[39]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[40]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[41]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[42]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[45]: http://kourge.net/projects/regexp-unicode-block\n\n[46]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.10\n\n[47]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-regexp-regular-expression-objects\n\n[48]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[49]: /en-US/Firefox/Releases/3\n\n[50]: https://bugzilla.mozilla.org/show_bug.cgi?id=773687\n\n[51]: /en-US/docs/Web/JavaScript/Guide\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "String", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/String", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/string", "content": "## Summary\n\nThe **`String`** global object is a constructor for strings, or a sequence of\ncharacters.\n\n## Syntax\n\nString literals take the forms:\n\n    \n    \n    'string text'\n    \"string text\"\n    \"\u4e2d\u6587 espa\u00f1ol English \u0939\u093f\u0928\u094d\u0926\u0940 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 portugu\u00eas \u09ac\u09be\u0982\u09b2\u09be \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u65e5\u672c\u8a9e \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \ud55c\uad6d\uc5b4\"\n\nBeside regular, printable characters, special characters can be encoded using\nescape notation:  \n  \n<table>  \n<tr>  \n<th>\n\nCode\n\n</th>  \n<th>\n\nOutput\n\n</th> </tr>  \n<tr>  \n<td>\n\n\\0\n\n</td>  \n<td>\n\nthe NUL character\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\'\n\n</td>  \n<td>\n\nsingle quote\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\\"\n\n</td>  \n<td>\n\ndouble quote\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\\\\\\n\n</td>  \n<td>\n\nbackslash\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\n\n\n</td>  \n<td>\n\nnew line\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\r\n\n</td>  \n<td>\n\ncarriage return\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\v\n\n</td>  \n<td>\n\nvertical tab\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\t\n\n</td>  \n<td>\n\ntab\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\b\n\n</td>  \n<td>\n\nbackspace\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\f\n\n</td>  \n<td>\n\nform feed\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\uXXXX\n\n</td>  \n<td>\n\nunicode codepoint\n\n</td> </tr>  \n<tr>  \n<td>\n\n\\xXX\n\n</td>  \n<td>\n\nthe Latin-1 character\n\n</td> </tr> </table>\n\nOr, using the `String` global object directly:\n\n    \n    \n    String(thing)\n    new String(thing)\n\n### Parameters\n\n`thing`\n\n     Anything to be converted to a string.\n\n## Description\n\nStrings are useful for holding data that can be represented in text form. Some\nof the most-used operations on strings are to check their [`length`][1], to\nbuild and concatenate them using the [\\+ and += string operators][2], checking\nfor the existence or location of substrings with the [`indexOf`][3] method, or\nextracting substrings with the [`substring`][4] method.\n\n### Character access\n\nThere are two ways to access an individual character in a string. The first is\nthe [`charAt`][5] method:\n\n    \n    \n    return 'cat'.charAt(1); // returns \"a\"\n    \n\nThe other way (introduced in ECMAScript 5) is to treat the string as an array-\nlike object, where individual characters correspond to a numerical index:\n\n    \n    \n    return 'cat'[1]; // returns \"a\"\n    \n\nFor character access using bracket notation, attempting to delete or assign a\nvalue to these properties will not succeed. The properties involved are\nneither writable nor configurable. (See [`Object.defineProperty`][6] for more\ninformation.)\n\n### Comparing strings\n\nC developers have the `strcmp()` function for comparing strings. In\nJavaScript, you just use the [less-than and greater-than operators][7]:\n\n    \n    \n    var a = \"a\";\n    var b = \"b\";\n    if (a < b) // true\n      print(a + \" is less than \" + b);\n    else if (a > b)\n      print(a + \" is greater than \" + b);\n    else\n      print(a + \" and \" + b + \" are equal.\");\n    \n\nA similar result can be achieved using the [`localeCompare`][8] method\ninherited by `String` instances.\n\n### Distinction between string primitives and `String` objects\n\nNote that JavaScript distinguishes between `String` objects and primitive\nstring values. (The same is true of [`Boolean`][9] and [`Numbers`][10].)\n\nString literals (denoted by double or single quotes) and strings returned from\n`String` calls in a non-constructor context (i.e., without using the [`new`\nkeyword][11]) are primitive strings. JavaScript automatically converts\nprimitives to `String` objects, so that it's possible to use `String` object\nmethods for primitive strings. In contexts where a method is to be invoked on\na primitive string or a property lookup occurs, JavaScript will automatically\nwrap the string primitive and call the method or perform the property lookup.\n\n    \n    \n    var s_prim = \"foo\";\n    var s_obj = new String(s_prim);\n    \n    console.log(typeof s_prim); // Logs \"string\"\n    console.log(typeof s_obj);  // Logs \"object\"\n    \n\nString primitives and `String` objects also give different results when using\n[`eval`][12]. Primitives passed to `eval` are treated as source code; `String`\nobjects are treated as all other objects are, by returning the object. For\nexample:\n\n    \n    \n    s1 = \"2 + 2\";               // creates a string primitive\n    s2 = new String(\"2 + 2\");   // creates a String object\n    console.log(eval(s1));      // returns the number 4\n    console.log(eval(s2));      // returns the string \"2 + 2\"\n    \n\nFor these reasons, code may break when it encounters `String` objects when it\nexpects a primitive string instead, although generally authors need not worry\nabout the distinction.\n\nA `String` object can always be converted to its primitive counterpart with\nthe [`valueOf`][13] method.\n\n    \n    \n    console.log(eval(s2.valueOf())); // returns the number 4\n    \n\n**Note:** For another possible approach to strings in JavaScript, please read the article about [`StringView` \u2013 a C-like representation of strings based on typed arrays][14].\n\n## Properties\n\n_For properties available on `String` instances, see [Properties of String\ninstances][15]._\n\n[`String.prototype`][16]\n\n     Allows the addition of properties to a String object.\n\nProperties inherited from [`Function`][17]:\n\n[`arity`][18], [`caller`][19], [`constructor`][20], [`length`][21],\n[`name`][22]\n\n## Methods\n\n_For methods available on `String` instances, see [Methods of String\ninstances][23]._\n\n[`String.fromCharCode()`][24]\n\n     Returns a string created by using the specified sequence of Unicode values.\n[`String.fromCodePoint()`][25] _ _\n\n     Returns a string created by using the specified sequence of code points.\n[`String.raw()`][26] _ _\n\n     Returns a string created from a raw template string.\n\nMethods inherited from [`Function`][17]:\n\n[`apply`][27], [`call`][28], [`toSource`][29], [`toString`][30]\n\n## `String` generic methods\n\nThe `String `instance methods are also available in Firefox as of JavaScript\n1.6 (though not part of the ECMAScript standard) on the String object for\napplying String methods to any object:\n\n    \n    \n    var num = 15;\n    alert(String.replace(num, /5/, '2'));\n    \n\n[Generics][31] are also available on\u00a0[`Array`][32] methods.\n\nThe following is a shim to provide support to non-supporting browsers:\n\n    \n    \n    /*globals define*/\n    // Assumes all supplied String instance methods already present\n    // (one may use shims for these if not available)\n    (function () {\n        'use strict';\n    \n        var i,\n            // We could also build the array of methods with the following, but the\n            //   getOwnPropertyNames() method is non-shimable:\n            // Object.getOwnPropertyNames(String).filter(function (methodName)\n            //  {return typeof String[methodName] === 'function'});\n            methods = [\n                'quote', 'substring', 'toLowerCase', 'toUpperCase', 'charAt',\n                'charCodeAt', 'indexOf', 'lastIndexOf', 'startsWith', 'endsWith',\n                'trim', 'trimLeft', 'trimRight', 'toLocaleLowerCase',\n                'toLocaleUpperCase', 'localeCompare', 'match', 'search',\n                'replace', 'split', 'substr', 'concat', 'slice'\n            ],\n            methodCount = methods.length,\n            assignStringGeneric = function (methodName) {\n                var method = String.prototype[methodName];\n                String[methodName] = function (arg1) {\n                    return method.apply(arg1, Array.prototype.slice.call(arguments, 1));\n                };\n            };\n    \n        for (i = 0; i < methodCount; i++) {\n            assignStringGeneric(methods[i]);\n        }\n    }());\n\n## `String` instances\n\n### Properties\n\n`String.prototype.constructor`\n\n     Specifies the function that creates an object's prototype.\n[`String.prototype.length`][1]\n\n     Reflects the length of the string.\n_N_\n\n     Used to access the character in the _N_th position where _N_ is a positive integer between 0 and one less than the value of [`length`][1]. These properties are read-only.\n\nProperties inherited from [`Object`][33]:\n\n[`__parent__`][34], [`__proto__`][35]\n\n### Methods\n\n### Methods unrelated to HTML\n\n[`String.prototype.charAt()`][5]\n\n     Returns the character at the specified index.\n[`String.prototype.charCodeAt()`][36]\n\n     Returns a number indicating the Unicode value of the character at the given index.\n[`String.prototype.codePointAt()`][37] _ _\n\n     Returns a non-negative integer that is the UTF-16 encoded code point value at the given position.\n[`String.prototype.concat()`][38]\n\n     Combines the text of two strings and returns a new string.\n[`String.prototype.contains()`][39] _ _\n\n     Determines whether one string may be found within another string.\n[`String.prototype.endsWith()`][40] _ _\n\n     Determines whether a string ends with the characters of another string.\n[`String.prototype.indexOf()`][3]\n\n     Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.\n[`String.prototype.lastIndexOf()`][41]\n\n     Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.\n[`String.prototype.localeCompare()`][8]\n\n     Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\n[`String.prototype.match()`][42]\n\n     Used to match a regular expression against a string.\n[`String.prototype.normalize()`][43] _ _\n\n     Returns the Unicode Normalization Form of the calling string value.\n[`String.prototype.quote()`][44] _ _\n\n     Wraps the string in double quotes (\"`\"`\").\n[`String.prototype.repeat()`][45] _ _\n\n     Returns a string consisting of the elements of the object repeated the given times.\n[`String.prototype.replace()`][46]\n\n     Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.\n[`String.prototype.search()`][47]\n\n     Executes the search for a match between a regular expression and a specified string.\n[`String.prototype.slice()`][48]\n\n     Extracts a section of a string and returns a new string.\n[`String.prototype.split()`][49]\n\n     Splits a String object into an array of strings by separating the string into substrings.\n[`String.prototype.startsWith()`][50] _ _\n\n     Determines whether a string begins with the characters of another string.\n[`String.prototype.substr()`][51]\n\n     Returns the characters in a string beginning at the specified location through the specified number of characters.\n[`String.prototype.substring()`][4]\n\n     Returns the characters in a string between two indexes into the string.\n[`String.prototype.toLocaleLowerCase()`][52]\n\n     The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as [`toLowerCase`][53].\n[`String.prototype.toLocaleUpperCase()`][54]\n\n     The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as [`toUpperCase`][55].\n[`String.prototype.toLowerCase()`][53]\n\n     Returns the calling string value converted to lower case.\n[`String.prototype.toSource()`][56] _ _\n\n     Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource`][57] method.\n[`String.prototype.toString()`][58]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString`][59] method.\n[`String.prototype.toUpperCase()`][55]\n\n     Returns the calling string value converted to uppercase.\n[`String.prototype.trim()`][60]\n\n     Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard.\n[`String.prototype.trimLeft()`][61] _ _\n\n     Trims whitespace from the left side of the string.\n[`String.prototype.trimRight()`][62] _ _\n\n     Trims whitespace from the right side of the string.\n[`String.prototype.valueOf()`][13]\n\n     Returns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf`][63] method.\n\n### HTML wrapper methods\n\nThese methods are of limited use, as they provide only a subset of the\navailable HTML tags and attributes.\n\n[`String.prototype.anchor()`][64]\n\n     `<[a name=\"name\">][65]` (hypertext target)\n[`String.prototype.big()`][66]\n\n     `<[big>`][67]\n[`String.prototype.blink()`][68]\n\n     `<[blink>`][69]\n[`String.prototype.bold()`][70]\n\n     `<[b>`][71]\n[`String.prototype.fixed()`][72]\n\n     `<[tt>`][73]\n[`String.prototype.fontcolor()`][74]\n\n     `<[font color=\"_color_\">`][75]\n[`String.prototype.fontsize()`][76]\n\n     `<[font size=\"_size_\">`][77]\n[`String.prototype.italics()`][78]\n\n     `<[i>`][79]\n[`String.prototype.link()`][80]\n\n     `<[a href=\"_url_\">`][81] (link to URL)\n[`String.prototype.small()`][82]\n\n     `<[small>`][83]\n[`String.prototype.strike()`][84]\n\n     `<[strike>`][85]\n[`String.prototype.sub()`][86]\n\n     `<[sub>`][87]\n[`String.prototype.sup()`][88]\n\n     `<[sup>`][89]\n\nMethods inherited from [`Object`][33]:\n\n[`__defineGetter__`][90], [`__defineSetter__`][91], [`hasOwnProperty`][92],\n[`isPrototypeOf`][93], [`__lookupGetter__`][94], [`__lookupSetter__`][95],\n[`__noSuchMethod__`][96], [`propertyIsEnumerable`][97],\n[`toLocaleString`][98], [`unwatch`][99], [`watch`][100]\n\n## Examples\n\n### String conversion\n\nIt's possible to use `String` as a \"safer\" [`toString`][58] alternative, as\nalthough it still normally calls the underlying `toString`, it also works for\n`null` and `undefined`. For example:\n\n    \n    \n    var outputStrings = [];\n    for (let i = 0, n = inputValues.length; i < n; ++i) {\n      outputStrings.push(String(inputValues[i]));\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'String' in that specification.][101]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'String' in that specification.][102]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n0.2\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [DOMString][103]\n  * [`StringView` \u2013 a C-like representation of strings based on typed arrays][14]\n  * [Binary strings][104]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/String_Operators\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf\n\n[14]: /en-US/docs/Web/JavaScript/Typed_arrays/StringView\n\n[15]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Properties\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[22]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype#Methods\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw\n\n[27]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Array_generic_methods\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[35]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/contains\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/quote\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toSource\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimLeft\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimRight\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor\n\n[65]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-name\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/big\n\n[67]: /en-US/docs/Web/HTML/Element/big\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/blink\n\n[69]: /en-US/docs/Web/HTML/Element/blink\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/bold\n\n[71]: /en-US/docs/Web/HTML/Element/b\n\n[72]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fixed\n\n[73]: /en-US/docs/Web/HTML/Element/tt\n\n[74]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontcolor\n\n[75]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-color\n\n[76]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fontsize\n\n[77]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font#attr-size\n\n[78]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/italics\n\n[79]: /en-US/docs/Web/HTML/Element/i\n\n[80]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link\n\n[81]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-href\n\n[82]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/small\n\n[83]: /en-US/docs/Web/HTML/Element/small\n\n[84]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/strike\n\n[85]: /en-US/docs/Web/HTML/Element/strike\n\n[86]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sub\n\n[87]: /en-US/docs/Web/HTML/Element/sub\n\n[88]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String/sup\n\n[89]: /en-US/docs/Web/HTML/Element/sup\n\n[90]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[91]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[92]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[93]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[94]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[95]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[96]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[97]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[98]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[99]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[100]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[101]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.5\n\n[102]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string-objects\n\n[103]: /en-US/docs/Web/API/DOMString\n\n[104]: https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Date", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/date", "content": "## Summary\n\nCreates a JavaScript\u00a0**`Date`** instance that represents a single moment in\ntime. Date objects are based on a time value that is the number of\nmilliseconds since 1 January, 1970 UTC.\n\n## Constructor\n\n    \n    \n    new Date();\n    new Date(value);\n    new Date(dateString);\n    new Date(year, month, day, hour, minute, second, millisecond);\n\n**Note:**\u00a0Note that JavaScript `Date` objects can only be instantiated by calling JavaScript `Date` as a constructor: calling it as a regular function (i.e. without the [new][1] operator) will return a string rather than a `Date` object; unlike other JavaScript object types, JavaScript `Date` objects have no literal syntax.\n\n### Date constructor parameters\n\nNote: Where Date is called as a constructor with more than one argument, if\nvalues are greater than their logical range (e.g. 13 is provided as the month\nvalue or 70 for the minute value), the adjacent value will be adjusted. E.g.\n`new Date(2013,12,1)` is equivalent to `new Date(2014,0,1)`, both create a\ndate for 2014-01-01 (note that the month is 0-based).\u00a0 Similarly for other\nvalues: `new Date(2013,2,1,0,70)` is equivalent to new `Date(2013,2,1,1,10)`\nwhich both create a date for `2013-03-01T01:10:00`.\n\n_`value`_\n\n     Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch).\n\n_`dateString`_\n\n     String value representing a date. The string should be in a format recognized by the [`Date.parse()`][2] method ([IETF-compliant RFC 2822 timestamps][3] and also a [version of ISO8601][4]).\n\n_`year`_\n\n     Integer value representing the year. Values from 0 to 99 map to the years 1900 to 1999. See the example below.\n\n_`month`_\n\n     Integer value representing the month, beginning with 0 for January to 11 for December.\n\n_`day`_\n\n     Integer value representing the day of the month.\n\n_`hour`_\n\n     Integer value representing the hour of the day.\n\n_`minute`_\n\n     Integer value representing the minute segment of a time.\n\n_`second`_\n\n     Integer value representing the second segment of a time.\n\n_`millisecond`_\n\n     Integer value representing the millisecond segment of a time.\n\n## Description\n\n  * If no arguments are provided, the constructor creates a JavaScript `Date` object for the current date and time according to system settings.\n  * If at least two arguments are supplied, missing arguments are either set to 1 (if day is missing) or 0 for all others.\n  * The JavaScript\u00a0date is\u00a0 based on a time value that is milliseconds since midnight 01 January, 1970 UTC. A day holds 86,400,000 milliseconds. The JavaScript Date object range is -100,000,000 days to 100,000,000 days relative to 01 January, 1970 UTC.\n  * The JavaScript `Date` object provides uniform behavior across platforms. The time value can be passed between systems to represent the same moment in time and if used to create a local date object, will reflect the local equivalent of the time.\n  * The JavaScript\u00a0`Date` object supports a number of UTC (universal) methods, as well as local time methods. UTC, also known as Greenwich Mean Time (GMT), refers to the time as set by the World Time Standard. The local time is the time known to the computer where JavaScript is executed.\n  * Invoking JavaScript\u00a0`Date` as a function (i.e., without the [new][1] operator) will return a string representing the current date and time.\n\n## Properties\n\n_For properties available on `Date` instances, see [Properties of Date\ninstances][5]._\n\n[`Date.prototype`][6]\n\n     Allows the addition of properties to a JavaScript\u00a0`Date` object.\nDate.length\n\n     The value of `Date.length` is 7. This is the number of arguments handled by the constructor.\n\nProperties inherited from [`Function`][7]:\n\n[`arity`][8], [`caller`][9], [`constructor`][10], [`length`][11], [`name`][12]\n\n## Methods\n\n_For methods available on `Date` instances, see [Methods of Date\ninstances][13]._\n\n[`Date.now()`][14]\n\n     Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.\n[`Date.parse()`][2]\n\n     Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, local time.\n[`Date.UTC()`][15]\n\n     Accepts the same parameters as the longest form of the constructor (i.e. 2 to 7) and returns the number of milliseconds since 1 January, 1970, 00:00:00 UTC.\n\nMethods inherited from [`Function`][7]:\n\n[`apply`][16], [`call`][17], [`toSource`][18], [`toString`][19]\n\n## JavaScript\u00a0`Date` instances\n\nAll `Date` instances inherit from [`Date.prototype`][6]. The prototype object\nof the `Date` constructor can be modified to affect all `Date` instances.\n\n### Methods\n\n### Getter\n\n[`Date.prototype.getDate()`][20]\n\n     Returns the day of the month (1-31) for the specified date according to local time.\n[`Date.prototype.getDay()`][21]\n\n     Returns the day of the week (0-6) for the specified date according to local time.\n[`Date.prototype.getFullYear()`][22]\n\n     Returns the year (4 digits for 4-digit years) of the specified date according to local time.\n[`Date.prototype.getHours()`][23]\n\n     Returns the hour (0-23) in the specified date according to local time.\n[`Date.prototype.getMilliseconds()`][24]\n\n     Returns the milliseconds (0-999) in the specified date according to local time.\n[`Date.prototype.getMinutes()`][25]\n\n     Returns the minutes (0-59) in the specified date according to local time.\n[`Date.prototype.getMonth()`][26]\n\n     Returns the month (0-11) in the specified date according to local time.\n[`Date.prototype.getSeconds()`][27]\n\n     Returns the seconds (0-59) in the specified date according to local time.\n[`Date.prototype.getTime()`][28]\n\n     Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).\n[`Date.prototype.getTimezoneOffset()`][29]\n\n     Returns the time-zone offset in minutes for the current locale.\n[`Date.prototype.getUTCDate()`][30]\n\n     Returns the day (date) of the month (1-31) in the specified date according to universal time.\n[`Date.prototype.getUTCDay()`][31]\n\n     Returns the day of the week (0-6) in the specified date according to universal time.\n[`Date.prototype.getUTCFullYear()`][32]\n\n     Returns the year (4 digits for 4-digit years) in the specified date according to universal time.\n[`Date.prototype.getUTCHours()`][33]\n\n     Returns the hours (0-23) in the specified date according to universal time.\n[`Date.prototype.getUTCMilliseconds()`][34]\n\n     Returns the milliseconds (0-999) in the specified date according to universal time.\n[`Date.prototype.getUTCMinutes()`][35]\n\n     Returns the minutes (0-59) in the specified date according to universal time.\n[`Date.prototype.getUTCMonth()`][36]\n\n     Returns the month (0-11) in the specified date according to universal time.\n[`Date.prototype.getUTCSeconds()`][37]\n\n     Returns the seconds (0-59) in the specified date according to universal time.\n[`Date.prototype.getYear()`][38] _ _\n\n     Returns the year (usually 2-3 digits) in the specified date according to local time. Use [`getFullYear()`][22] instead.\n\n### Setter\n\n[`Date.prototype.setDate()`][39]\n\n     Sets the day of the month for a specified date according to local time.\n[`Date.prototype.setFullYear()`][40]\n\n     Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.\n[`Date.prototype.setHours()`][41]\n\n     Sets the hours for a specified date according to local time.\n[`Date.prototype.setMilliseconds()`][42]\n\n     Sets the milliseconds for a specified date according to local time.\n[`Date.prototype.setMinutes()`][43]\n\n     Sets the minutes for a specified date according to local time.\n[`Date.prototype.setMonth()`][44]\n\n     Sets the month for a specified date according to local time.\n[`Date.prototype.setSeconds()`][45]\n\n     Sets the seconds for a specified date according to local time.\n[`Date.prototype.setTime()`][46]\n\n     Sets the `Date` object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.\n[`Date.prototype.setUTCDate()`][47]\n\n     Sets the day of the month for a specified date according to universal time.\n[`Date.prototype.setUTCFullYear()`][48]\n\n     Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.\n[`Date.prototype.setUTCHours()`][49]\n\n     Sets the hour for a specified date according to universal time.\n[`Date.prototype.setUTCMilliseconds()`][50]\n\n     Sets the milliseconds for a specified date according to universal time.\n[`Date.prototype.setUTCMinutes()`][51]\n\n     Sets the minutes for a specified date according to universal time.\n[`Date.prototype.setUTCMonth()`][52]\n\n     Sets the month for a specified date according to universal time.\n[`Date.prototype.setUTCSeconds()`][53]\n\n     Sets the seconds for a specified date according to universal time.\n[`Date.prototype.setYear()`][54] _ _\n\n     Sets the year (usually 2-3 digits) for a specified date according to local time. Use [`setFullYear()`][40] instead.\n\n### Conversion getter\n\n[`Date.prototype.toDateString()`][55]\n\n     Returns the \"date\" portion of the Date as a human-readable string.\n[`Date.prototype.toISOString()`][56]\n\n     Converts a date to a string following the ISO 8601 Extended Format.\n[`Date.prototype.toJSON()`][57]\n\n     Returns a string representing the Date using [`toISOString()`][56]. Intended for use by [`JSON.stringify()`][58].\n[`Date.prototype.toGMTString()`][59] _ _\n\n     Returns a string representing the Date based on the GMT (UT) time zone. Use [`toUTCString()`][60] instead.\n[`Date.prototype.toLocaleDateString()`][61]\n\n     Returns a string with a locality sensitive representation of the date portion of this date based on system settings.\n[`Date.prototype.toLocaleFormat()`][62] _ _\n\n     Converts a date to a string, using a format string.\n[`Date.prototype.toLocaleString()`][63]\n\n     Returns a string with a locality sensitive representation of this date. Overrides the [`Object.prototype.toLocaleString()`][64] method.\n[`Date.prototype.toLocaleTimeString()`][65]\n\n     Returns a string with a locality sensitive representation of the time portion of this date based on system settings.\n[`Date.prototype.toSource()`][66] _ _\n\n     Returns a string representing the source for an equivalent `Date` object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][67] method.\n[`Date.prototype.toString()`][68]\n\n     Returns a string representing the specified `Date` object. Overrides the [`Object.prototype.toString()`][69] method.\n[`Date.prototype.toTimeString()`][70]\n\n     Returns the \"time\" portion of the Date as a human-readable string.\n[`Date.prototype.toUTCString()`][60]\n\n     Converts a date to a string using the UTC timezone.\n[`Date.prototype.valueOf()`][71]\n\n     Returns the primitive value of a `Date` object. Overrides the [`Object.prototype.valueOf()`][72] method.\n\nMethods inherited from [`Object`][73]:\n\n[`__defineGetter__`][74], [`__defineSetter__`][75], [`hasOwnProperty`][76],\n[`isPrototypeOf`][77], [`__lookupGetter__`][78], [`__lookupSetter__`][79],\n[`__noSuchMethod__`][80], [`propertyIsEnumerable`][81], [`unwatch`][82],\n[`watch`][83]\n\n## Examples\n\n### Example: Several ways to create a Date object\n\nThe following examples show several ways to create JavaScript\u00a0dates:\n\n    \n    \n    var today = new Date();\n    var birthday = new Date(\"December 17, 1995 03:24:00\");\n    var birthday = new Date(\"1995-12-17T03:24:00\");\n    var birthday = new Date(1995,11,17);\n    var birthday = new Date(1995,11,17,3,24,0);\n    \n\n### Example: Two digit years map to 1900 - 1999\n\nIn order to create and get dates between the years 0 and 99 the\n[`Date.prototype.setFullYear()`][40] and [`Date.prototype.getFullYear()`][22]\nmethods should be used.\n\n    \n    \n    var date = new Date(98, 1); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\n    \n    // Deprecated method, 98 maps to 1998 here as well\n    date.setYear(98);           // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT)\n    \n    date.setFullYear(98);       // Sat Feb 01 0098 00:00:00 GMT+0000 (BST)\n\n### Example: Calculating elapsed time\n\nThe following examples show how to determine the elapsed time between two\nJavaScript\u00a0dates:\n\n    \n    \n    // using Date objects\n    var start = Date.now();\n    \n    // the event to time goes here:\n    doSomethingForALongTime();\n    var end = Date.now();\n    var elapsed = end - start; // elapsed time in milliseconds\n    \n    \n    \n    // using built-in methods\n    var start = new Date();\n    \n    // the event to time goes here:\n    doSomethingForALongTime();\n    var end = new Date();\n    var elapsed = end.getTime() - start.getTime(); // elapsed time in milliseconds\n    \n    \n    \n    // to test a function and get back its return\n    function printElapsedTime (fTest) {\n    \tvar nStartTime = Date.now(), \n                vReturn = fTest(),\n                nEndTime = Date.now();\n    \n    \talert(\"Elapsed time: \" + String(nEndTime - nStartTime) + \" milliseconds\");\n    \treturn vReturn;\n    }\n    \n    yourFunctionReturn =\u00a0printElapsedTime(yourFunction);\n    \n\nNote: In browsers that support the [Web Performance API][84]'s high-resolution\ntime feature, [window.performance.now ][85]can provide more reliable and\nprecise measurements of elapsed time than `Date.now`.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Date' in that specification.][86]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Date' in that specification.][87]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Reports of browser compatibility\n\n  * [4/2012 ][88][gist from Yaffle about toISOString/fromISOString/Native Date.parse cross-browser issues][88]\n  * [3/14/2012 blog from danvk Comparing FF/IE/Chrome on Parsing Date Strings][89]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse\n\n[3]: http://tools.ietf.org/html/rfc2822#page-14\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype#Properties\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/prototype#Methods\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString\n\n[69]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[70]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString\n\n[71]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf\n\n[72]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[73]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[74]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[75]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[76]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[77]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[78]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[79]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[80]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[81]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[82]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[83]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[84]: /en-US/docs/DOM/window.performance\n\n[85]: /en-US/docs/DOM/window.performance.now\n\n[86]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9\n\n[87]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-date-objects\n\n[88]: https://gist.github.com/2312309\n\n[89]: http://dygraphs.com/date-formats.html\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Math", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/math", "content": "## Summary\n\n**Math** is a built-in object that has properties and methods for mathematical constants and functions. Not a function object.\n\n## Description\n\nUnlike the other global objects, `Math` is not a constructor. All properties\nand methods of `Math` are static. You refer to the constant pi as `Math.PI`\nand you call the sine function as `Math.sin(x)`, where `x` is the method's\nargument. Constants are defined with the full precision of real numbers in\nJavaScript.\n\n## Properties\n\n[`Math.E`][1]\n\n     Euler's constant and the base of natural logarithms, approximately 2.718.\n[`Math.LN2`][2]\n\n     Natural logarithm of 2, approximately 0.693.\n[`Math.LN10`][3]\n\n     Natural logarithm of 10, approximately 2.303.\n[`Math.LOG2E`][4]\n\n     Base 2 logarithm of E, approximately 1.443.\n[`Math.LOG10E`][5]\n\n     Base 10 logarithm of E, approximately 0.434.\n[`Math.PI`][6]\n\n     Ratio of the circumference of a circle to its diameter, approximately 3.14159.\n[`Math.SQRT1_2`][7]\n\n     Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.\n[`Math.SQRT2`][8]\n\n     Square root of 2, approximately 1.414.\n\nProperties inherited from [`Object`][9]:\n\n[`constructor`][10], [`__parent__`][11], [`__proto__`][12]\n\n## Methods\n\nNote that the trigonometric functions (sin, cos, tan, asin, acos, atan, atan2)\nexpect or return angles in radians. To convert radians to degrees, divide by\n(Math.PI / 180), and multiply by this to convert the other way.\n\nNote a lot of the math functions have a precision that's implementation-\ndependent. This means that different browsers can give a different result, and\neven the same JS engine on a different OS or architecture can give different\nresults.\n\n[`Math.abs(x)`][13]\n\n     Returns the absolute value of a number.\n[`Math.acos(x)`][14]\n\n     Returns the arccosine of a number.\n[`Math.acosh(x)`][15] _ _\n\n     Returns the hyperbolic arccosine of a number.\n[`Math.asin(x)`][16]\n\n     Returns the arcsine of a number.\n[`Math.asinh(x)`][17] _ _\n\n     Returns the hyperbolic arcsine of a number.\n[`Math.atan(x)`][18]\n\n     Returns the arctangent of a number.\n[`Math.atanh(x)`][19] _ _\n\n     Returns the hyperbolic arctangent of a number.\n[`Math.atan2(y, x)`][20]\n\n     Returns the arctangent of the quotient of its arguments.\n[`Math.cbrt(x)`][21] _ _\n\n     Returns the cube root of a number.\n[`Math.ceil(x)`][22]\n\n     Returns the smallest integer greater than or equal to a number.\n[`Math.clz32(x)`][23] _ _\n\n     Returns the number of leading zeroes of a 32-bit integer.\n[`Math.cos(x)`][24]\n\n     Returns the cosine of a number.\n[`Math.cosh(x)`][25] _ _\n\n     Returns the hyperbolic cosine of a number.\n[`Math.exp(x)`][26]\n\n     Returns Ex, where x is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm.\n[`Math.expm1(x)`][27] _ _\n\n     Returns subtracting 1 from exp(x).\n[`Math.floor(x)`][28]\n\n     Returns the largest integer less than or equal to a number.\n[`Math.fround(x)`][29] _ _\n\n     Returns the nearest [single precision][30] float representation of a number.\n[`Math.hypot([x[,y[,\u2026]]])`][31] _ _\n\n     Returns the square root of the sum of squares of its arguments.\n[`Math.imul(x)`][32] _ _\n\n     Returns the result of a 32-bit integer multiplication.\n[`Math.log(x)`][33]\n\n     Returns the natural logarithm (loge, also ln) of a number.\n[`Math.log1p(x)`][34] _ _\n\n     Returns the natural logarithm of 1 + x (loge, also ln) of a number.\n[`Math.log10(x)`][35] _ _\n\n     Returns the base 10 logarithm of x.\n[`Math.log2(x)`][36] _ _\n\n     Returns the base 2 logarithm of x.\n[`Math.max([x[,y[,\u2026]]])`][37]\n\n     Returns the largest of zero or more numbers.\n[`Math.min([x[,y[,\u2026]]])`][38]\n\n     Returns the smallest of zero or more numbers.\n[`Math.pow(x,y)`][39]\n\n     Returns base to the exponent power, that is, baseexponent.\n[`Math.random()`][40]\n\n     Returns a pseudo-random number between 0 and 1.\n[`Math.round(x)`][41]\n\n     Returns the value of a number rounded to the nearest integer.\n[`Math.sign(x)`][42] _ _\n\n     Returns the sign of the x, indicating whether x is positive, negative or zero.\n[`Math.sin(x)`][43]\n\n     Returns the sine of a number.\n[`Math.sinh(x)`][44] _ _\n\n     Returns the hyperbolic sine of a number.\n[`Math.sqrt(x)`][45]\n\n     Returns the positive square root of a number.\n[`Math.tan(x)`][46]\n\n     Returns the tangent of a number.\n[`Math.tanh(x)`][47] _ _\n\n     Returns the hyperbolic tangent of a number.\n`Math.toSource()` _ _\n\n     Returns the string `\"Math\"`.\n[`Math.trunc(x)`][48] _ _\n\n     Returns the integral part of the number x, removing any fractional digits.\n\nMethods inherited from [`Object`][9]:\n\n[`__defineGetter__`][49], [`__defineSetter__`][50], [`hasOwnProperty`][51],\n[`isPrototypeOf`][52], [`__lookupGetter__`][53], [`__lookupSetter__`][54],\n[`__noSuchMethod__`][55], [`propertyIsEnumerable`][56], [`toSource`][57],\n[`toLocaleString`][58], [`toString`][59], [`unwatch`][60], [`valueOf`][61],\n[`watch`][62]\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition. Implemented in JavaScript 1.1\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Math' in that specification.][63]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Math' in that specification.][64]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew methods `log10`, `log2()`, `log1p()`, `expm1()`, `cosh()`, `sinh()`,\n`tanh()`, `acosh()`, `asinh()`, `atanh()`, `hypot()`, `trunc()`, `sign()`,\n`imul()`, `fround()`, `cbrt()` and `clz32()` added.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][65].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * The [`Number`][66] global object\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Constructor\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround\n\n[30]: http://en.wikipedia.org/wiki/Single_precision\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot\n\n[32]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc\n\n[49]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[50]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[51]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[52]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[53]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[54]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[55]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[56]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[57]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToSource\n\n[58]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[59]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToString\n\n[60]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[61]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[62]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[63]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.8\n\n[64]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-math-object\n\n[65]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Number", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/number", "content": "## Summary\n\nThe **`Number`** JavaScript object is a wrapper object allowing you to work\nwith numerical values. A `Number` object is created using the `Number()`\nconstructor.\n\n## Constructor\n\n    \n    \n    new Number(value);\n\n### Parameters\n\n`value`\n\n     The numeric value of the object being created.\n\n## Description\n\nThe primary uses for the `Number` object are:\n\n  * If the argument cannot be converted into a number, it returns [`NaN`][1].\n  * In a non-constructor context (i.e., without the [`new`][2] operator), `Number` can be used to perform a type conversion.\n\n## Properties\n\n[`Number.EPSILON`][3] _ _\n\n     The smallest interval between two representable numbers.\n[`Number.MAX_SAFE_INTEGER`][4] _ _\n\n     The maximum safe integer in JavaScript (`253 \\- 1`).\n[`Number.MAX_VALUE`][5]\n\n     The largest positive representable number.\n[`Number.MIN_SAFE_INTEGER`][6] _ _\n\n     The minimum safe integer in JavaScript (`-(253 \\- 1)`).\n[`Number.MIN_VALUE`][7]\n\n     The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).\n[`Number.NaN`][8]\n\n     Special \"not a number\" value.\n[`Number.NEGATIVE_INFINITY`][9]\n\n     Special value representing negative infinity; returned on overflow.\n[`Number.POSITIVE_INFINITY`][10]\n\n     Special value representing infinity; returned on overflow.\n[`Number.prototype`][11]\n\n     Allows the addition of properties to a `Number` object.\n\nProperties inherited from [`Function`][12]:\n\n[`arity`][13], [`caller`][14], [`constructor`][15], [`length`][16],\n[`name`][17]\n\n## Methods\n\n_For methods available on `Number` instances, see [Methods of Number\ninstances][18]._\n\n[`Number.isNaN()`][19] _ _\n\n     Determine whether the passed value is NaN.\n[`Number.isFinite()`][20] _ _\n\n     Determine whether the type of and the passed value itself is a finite number.\n[`Number.isInteger()`][21] _ _\n\n     Determine whether the type of the passed value is \"number\" and the passed value is an integer.\n[`Number.isSafeInteger()`][22] _ _\n\n     Determine whether the type of the passed value is a safe integer (number between `-(253 \\- 1)` and `253 \\- 1`).\n<s>[`Number.toInteger()`][23] _ _</s>\n\n     <s>Used to evaluate the passed value and convert it to an integer (or [`Infinity`][24]), but has been removed.</s>\n[`Number.parseFloat()`][25] _ _\n\n     The value is the same as [`parseFloat`][26] of the global object.\n[`Number.parseInt()`][27] _ _\n\n     The value is the same as [`parseInt`][28] of the global object.\n\nMethods inherited from [`Function`][12]:\n\n[`apply`][29], [`call`][30], [`toSource`][31], [`toString`][32]\n\n## `Number` instances\n\nAll `Number` instances inherit from [`Number.prototype`][11]. The prototype\nobject of the `Number` constructor can be modified to affect all `Number`\ninstances.\n\n### Methods\n\n[`Number.prototype.toExponential()`][33]\n\n     Returns a string representing the number in exponential notation.\n[`Number.prototype.toFixed()`][34]\n\n     Returns a string representing the number in fixed-point notation.\n[`Number.prototype.toLocaleString()`][35]\n\n     Returns a string with a language sensitive representation of this number. Overrides the [`Object.prototype.toLocaleString()`][36] method.\n[`Number.prototype.toPrecision()`][37]\n\n     Returns a string representing the number to a specified precision in fixed-point or exponential notation.\n[`Number.prototype.toSource()`][38] _ _\n\n     Returns an object literal representing the specified [`Number`][39] object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][40] method.\n[`Number.prototype.toString()`][41]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][42] method.\n[`Number.prototype.valueOf()`][43]\n\n     Returns the primitive value of the specified object. Overrides the [`Object.prototype.valueOf()`][44] method.\n\nMethods inherited from [`Object`][45]:\n\n[`__defineGetter__`][46], [`__defineSetter__`][47], [`hasOwnProperty`][48],\n[`isPrototypeOf`][49], [`__lookupGetter__`][50], [`__lookupSetter__`][51],\n[`__noSuchMethod__`][52], [`propertyIsEnumerable`][53], [`unwatch`][54],\n[`watch`][55]\n\n## Examples\n\n### Example: Using the `Number` object to assign values to numeric variables\n\nThe following example uses the `Number` object's properties to assign values\nto several numeric variables:\n\n    \n    \n    var biggestNum = Number.MAX_VALUE;\n    var smallestNum = Number.MIN_VALUE;\n    var infiniteNum = Number.POSITIVE_INFINITY;\n    var negInfiniteNum = Number.NEGATIVE_INFINITY;\n    var notANum = Number.NaN;\n    \n\n### Example: Integer range for `Number`\n\nThe following example shows minimum and maximum integer values that can be\nrepresented as `Number` object (for details, refer to EcmaScript standard,\nchapter _8.5 The Number Type_):\n\n    \n    \n    var biggestInt = 9007199254740992;\n    var smallestInt = -9007199254740992;\n    \n\nWhen parsing data that has been serialized to JSON, integer values falling out\nof this range can be expected to become corrupted when JSON parser coerces\nthem to `Number` type. Using [`String`][56] instead is a possible workaround.\n\n### Example: Using `Number` to convert a `Date` object\n\nThe following example converts the [`Date`][57] object to a numerical value\nusing `Number` as a function:\n\n    \n    \n    var d = new Date('December 17, 1995 03:24:00');\n    print(Number(d));\n    \n\nThis displays \"819199440000\".\n\n### Example: Convert numeric strings to numbers\n\n    \n    \n    Number(\"123\")     // 123\n    Number(\"\")        // 0\n    Number(\"0x11\")    // 17\n    Number(\"0b11\")    // 3\n    Number(\"0o11\")    // 9\n    Number(\"foo\")     // NaN\n    Number(\"100a\")    // NaN\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Number' in that specification.][58]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Number' in that specification.][59]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNew methods and properties added: ([`EPSILON`][3], [`isFinite`][20],\n[`isInteger`][21], [`isNaN`][19], [`parseFloat`][25], [`parseInt`][27])\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`NaN`][1]\n  * The [`Math`][60] global object\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[15]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[18]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/prototype#Methods\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[45]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[46]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[47]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[48]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[49]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[50]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[51]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[52]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[53]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[54]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[55]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[58]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.7\n\n[59]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number-objects\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "URIError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/urierror", "content": "## Summary\n\nThe `**URIError**` object represents an error when a global URI handling\nfunction was used in a wrong way.\n\n## Syntax\n\n    \n    \n    new URIError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n     Optional. Human-readable description of the error\n`fileName` _ _\n\n     Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n     Optional. The line number of the code that caused the exception\n\n## Description\n\nA `URIError` is thrown when the global URI handling functions are passed a\nmalformed URI.\n\n## Properties\n\n[`URIError.prototype`][1]\n\n     Allows the addition of properties to a `URIError` object.\n\n## Methods\n\nThe global `URIError` contains no methods of its own, however, it does inherit\nsome methods through the prototype chain.\n\n## `URIError` instances\n\n### Properties\n\n`URIError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`URIError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`URIError`][3] should provide its own `message` property, in [SpiderMonkey][4], it inherits [`Error.prototype.message`][2].\n[`URIError.prototype.name`][5]\n\n     Error name. Inherited from [`Error`][6].\n[`URIError.prototype.fileName`][7]\n\n     Path to file that raised this error. Inherited from [`Error`][6].\n[`URIError.prototype.lineNumber`][8]\n\n     Line number in file that raised this error. Inherited from [`Error`][6].\n[`URIError.prototype.columnNumber`][9]\n\n     Column number in line that raised this error. Inherited from [`Error`][6].\n[`URIError.prototype.stack`][10]\n\n     Stack trace. Inherited from [`Error`][6].\n\n### Methods\n\nAlthough the [`URIError`][3] prototype object does not contain any methods of\nits own, [`URIError`][3] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'URIError' in that specification.][11]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'URIError' in that specification.][12]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][13].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][6]\n  * [`URIError.prototype`][1]\n  * [`decodeURI()`][14]\n  * [`decodeURIComponent()`][15]\n  * [`encodeURI()`][16]\n  * [`encodeURIComponent()`][17]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[4]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[11]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.6\n\n[12]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-urierror\n\n[13]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Promise.prototype.then()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.prototype.then()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**then()**` method returns a `Promise`. It takes two arguments, both are\ncallback functions for the success and failure cases of the `Promise`.\n\n## Syntax\n\n    \n    \n    p.then(onFulfilled, onRejected);\n    \n    p.then(function(value) {\n       // fulfillment\n      }, function(reason) {\n      // rejection\n    });\n    \n\n### Parameters\n\nonFulfilled\n\n     A [`Function`][1] called when the `Promise` is fulfilled. This function has one argument, the fulfillment `value`.\nonRejected\n\n     A [`Function`][1] called when the `Promise` is rejected. This function has one argument, the rejection `reason`.\n\n## Description\n\nAs the `then` and [`Promise.prototype.catch()`][2] methods return promises,\nthey can be chained \u2014 an operation called _composition_.\n\n## Examples\n\n### Using the `then` method\n\n    \n    \n    var p1 = new Promise(function(resolve, reject) {\n      resolve(\"Success!\");\n      // or\n      // reject (\"Error!\");\n    });\n    \n    p1.then(function(value) {\n      console.log(value); // Success!\n    }, function(reason) {\n      console.log(reason); // Error!\n    });\n    \n\n### Chaining\n\nBecause the `then` method returns a `Promise`, you can easily chain `then`\ncalls.\n\n    \n    \n    var p2 = new Promise(function(resolve, reject) {\n      resolve(1);\n    });\n    \n    p2.then(function(value) {\n      console.log(value); // 1\n      return value + 1;\n    }).then(function(value) {\n      console.log(value); // 2\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.prototype.then' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][5] (24.0) as `Future`  \n[25.0][6] (25.0) as `Promise` behind a flag[1]  \n[29.0][7] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][8]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [`Promise`][9]\n  * [`Promise.prototype.catch()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n\n[3]: https://github.com/domenic/promises-unwrapping\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.prototype.then\n\n[5]: /en-US/Firefox/Releases/24\n\n[6]: /en-US/Firefox/Releases/25\n\n[7]: /en-US/Firefox/Releases/29\n\n[8]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.prototype.catch()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.prototype.catch()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe **catch()** method returns a `Promise` and deals with rejected cases only.\nIt behaves the same as calling [`Promise.prototype.then(undefined,\nonRejected)`][1].\n\n## Syntax\n\n    \n    \n    p.catch(onRejected);\n    \n    p.catch(function(reason) {\n       // rejection\n    });\n    \n\n### Parameters\n\nonRejected\n\n     A [`Function`][2] called when the `Promise` is rejected. This function has one argument, the rejection `reason`.\n\n## Description\n\nThe `catch` method can be useful for error handling in your promise\ncomposition.\n\n## Examples\n\n### Using the `catch` method\n\n    \n    \n    var p1 = new Promise(function(resolve, reject) {\n      resolve(\"Success\");\n    });\n    \n    p1.then(function(value) {\n      console.log(value); // \"Success!\"\n      throw \"oh, no!\";\n    }).catch(function(e) {\n      console.log(e); // \"oh, no!\"\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.prototype.catch' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][5] (24.0) as `Future`  \n[25.0][6] (25.0) as `Promise` behind a flag[1]  \n[29.0][7] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][8]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [`Promise`][9]\n  * [`Promise.prototype.then()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[3]: https://github.com/domenic/promises-unwrapping\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.prototype.catch\n\n[5]: /en-US/Firefox/Releases/24\n\n[6]: /en-US/Firefox/Releases/25\n\n[7]: /en-US/Firefox/Releases/29\n\n[8]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.resolve()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.resolve()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Promise.resolve(value)**` method returns a `Promise` object that is\nresolved with the given value. If the value is a thenable (i.e. has a `then`\nmethod), the returned promise will \"follow\" that thenable, adopting its\neventual state; otherwise the returned promise will be fulfilled with the\nvalue.\n\n## Syntax\n\n    \n    \n    Promise.resolve(value);\n    Promise.resolve(promise);\n    Promise.resolve(thenable);\n    \n\n### Parameters\n\nvalue\n\n     Argument to be resolved by this `Promise`. Can also be a `Promise` or a thenable to resolve.\n\n## Description\n\nThe static `Promise.resolve` function returns a `Promise` that is resolved.\n\n## Examples\n\n### Using the static `Promise.resolve` method\n\n    \n    \n    Promise.resolve(\"Success\").then(function(value) {\n      console.log(value); // \"Success\"\n    }, function(value) {\n      // not called\n    });\n    \n\n### Resolving an array\n\n    \n    \n    var p = Promise.resolve([1,2,3]);\n    p.then(function(v) {\n      console.log(v[0]); // 1\n    });\n    \n\n### Resolving another `Promise`\n\n    \n    \n    var original = Promise.resolve(true);\n    var cast = Promise.resolve(original);\n    cast.then(function(v) {\n      console.log(v); // true\n    });\n    \n\n### Resolving thenables and throwing Errors\n\n    \n    \n    // Resolving a thenable object\n    var p1 = Promise.resolve({ \n      then: function(onFulfill, onReject) { onFulfill(\"fulfilled!\"); }\n    });\n    console.log(p1 instanceof Promise) // true, object casted to a Promise\n    \n    p1.then(function(v) {\n        console.log(v); // \"fulfilled!\"\n      }, function(e) {\n        // not called\n    });\n    \n    // Thenable throws before callback\n    // Promise rejects\n    var thenable = { then: function(resolve) {\n      throw new TypeError(\"Throwing\");\n      resolve(\"Resolving\");\n    }};\n    \n    var p2 = Promise.resolve(thenable);\n    p2.then(function(v) {\n      // not called\n    }, function(e) {\n      console.log(e); // TypeError: Throwing\n    });\n    \n    // Thenable throws after callback\n    // Promise resolves\n    var thenable = { then: function(resolve) {\n      resolve(\"Resolving\");\n      throw new TypeError(\"Throwing\");\n    }};\n    \n    var p3 = Promise.resolve(thenable);\n    p3.then(function(v) {\n      console.log(v); // \"Resolving\"\n    }, function(e) {\n      // not called\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.resolve' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][3] (24.0) as `Future`  \n[25.0][4] (25.0) as `Promise` behind a flag[1]  \n[29.0][5] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][6]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [`Promise`][7]\n\n[1]: https://github.com/domenic/promises-unwrapping\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.resolve\n\n[3]: /en-US/Firefox/Releases/24\n\n[4]: /en-US/Firefox/Releases/25\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.reject()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.reject()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Promise.reject(reason)**` method returns a `Promise` object that is\nrejected with the given reason.\n\n## Syntax\n\n    \n    \n    Promise.reject(reason);\n\n### Parameters\n\nreason\n\n     Reason why this `Promise` rejected.\n\n## Description\n\nThe static `Promise.reject` function returns a `Promise` that is rejected. For\ndebugging purposes, it is useful to make `reason` an `instanceof`\n[`Error`][1].\n\n## Examples\n\n### Using the static `Promise.reject` method\n\n    \n    \n    Promise.reject(\"Testing static reject\").then(function(reason) {\n      // not called\n    }, function(reason) {\n      console.log(reason); // \"Testing static reject\"\n    });\n    \n    Promise.reject(Error(\"fail\")).then(function(error) {\n      // not called\n    }, function(error) {\n      console.log(error); // Stacktrace\n    });\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.reject' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][4] (24.0) as `Future`  \n[25.0][5] (25.0) as `Promise` behind a flag[1]  \n[29.0][6] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][7]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [`Promise`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: https://github.com/domenic/promises-unwrapping\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.reject\n\n[4]: /en-US/Firefox/Releases/24\n\n[5]: /en-US/Firefox/Releases/25\n\n[6]: /en-US/Firefox/Releases/29\n\n[7]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.race()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.race()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Promise.race(iterable)**` method returns a promise that resolves or\nrejects as soon as one of the promises in the iterable resolves or rejects,\nwith the value or reason from that promise.\n\n## Syntax\n\n    \n    \n    Promise.race(iterable);\n\n### Parameters\n\niterable\n\n     An iterable object, such as an [`Array`][1]. See [iterable][2].\n\n## Description\n\nThe `race` function returns a `Promise` that is settled the same way as the\nfirst passed promise to settle. It resolves or rejects, whichever happens\nfirst.\n\n## Examples\n\n### Using `Promise.race` \u2013 examples with `setTimeout`\n\n    \n    \n    var p1 = new Promise(function(resolve, reject) { \n        setTimeout(resolve, 500, \"one\"); \n    });\n    var p2 = new Promise(function(resolve, reject) { \n        setTimeout(resolve, 100, \"two\"); \n    });\n    \n    Promise.race([p1, p2]).then(function(value) {\n      console.log(value); // \"two\"\n      // Both resolve, but p2 is faster\n    });\n    \n    var p3 = new Promise(function(resolve, reject) { \n        setTimeout(resolve, 100, \"three\");\n    });\n    var p4 = new Promise(function(resolve, reject) { \n        setTimeout(reject, 500, \"four\"); \n    });\n    \n    Promise.race([p3, p4]).then(function(value) {\n      console.log(value); // \"three\"\n      // p3 is faster, so it resolves\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n    }, function(reason) {\n      // Not called\n    });\n    \n    var p5 = new Promise(function(resolve, reject) { \n        setTimeout(resolve, 500, \"five\"); \n    });\n    var p6 = new Promise(function(resolve, reject) { \n        setTimeout(reject, 100, \"six\");\n    });\n    \n    Promise.race([p5, p6]).then(function(value) {\n      // Not called \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n    }, function(reason) {\n      console.log(reason); // \"six\"\n      // p6 is faster, so it rejects\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.race' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[29.0][5] (29.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n29.0 (29.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Promise`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Guide/iterable\n\n[3]: https://github.com/domenic/promises-unwrapping\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.race\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.all()", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.all()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Promise.all(iterable)**` method returns a promise that resolves when\nall of the promises in the iterable argument have resolved.\n\n## Syntax\n\n    \n    \n    Promise.all(iterable);\n\n### Parameters\n\niterable\n\n     An iterable object, such as an [`Array`][1]. See [iterable][2].\n\n## Description\n\nThe result is passed as an array of values from all the promises. If something\npassed in the iterable array is not a promise, it's converted to one by\n[`Promise.resolve`][3]. If any of the passed in promises rejects, the `all`\nPromise immediately rejects with the value of the promise that rejected,\ndiscarding all the other promises whether or not they have resolved.\n\n## Examples\n\n    \n    \n    var p = new Promise(function(resolve, reject) { resolve(3); });\n    Promise.all([true, p]).then(function(values) {\n      console.log(values); // [true, 3]\n    });\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[domenic/promises-unwrapping][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nStandardization work is taking place here.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.all' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[29.0][6] (29.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n29.0 (29.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Promise`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Guide/iterable\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\n\n[4]: https://github.com/domenic/promises-unwrapping\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.all\n\n[6]: /en-US/Firefox/Releases/29\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "method"},
{"name": "Promise.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/promise", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/promise/promise.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Promise**`**`.prototype`** property represents the prototype for the\n[`Promise`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Promise.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Promise`][1] instances inherit from [`Promise.prototype`][2]. You can use\nthe constructor's prototype object to add properties or methods to all\n`Promise` instances.\n\n## Properties\n\n`Promise.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Promise`][1] function by default.\n\n## Methods\n\n[`Promise.prototype.catch(onRejected)`][3]\n\n     Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.\n[`Promise.prototype.then(onFulfilled, onRejected)`][4]\n\n     Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Promise.prototype' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n32\n\n</td>  \n<td>\n\n[24.0][6] (24.0) as `Future`  \n[25.0][7] (25.0) as `Promise` behind a flag[1]  \n[29.0][8] (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n19\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th>  \n<th>\n\nChrome for Android\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n24.0 (24.0) as `Future`  \n25.0 (25.0) as `Promise` behind a flag[1]  \n29.0 (29.0) by default\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td>  \n<td>\n\n32\n\n</td> </tr> </table>\n\n[1] Gecko 24 has an experimental implementation of `Promise`, under the\ninitial name of `Future`. It got renamed to its final name in Gecko 25, but\ndisabled by default behind the flag `dom.promise.enabled`. [Bug 918806][9]\nenabled Promises by default in Gecko 29.\n\n## See also\n\n  * [`Promise`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-promise.prototype\n\n[6]: /en-US/Firefox/Releases/24\n\n[7]: /en-US/Firefox/Releases/25\n\n[8]: /en-US/Firefox/Releases/29\n\n[9]: https://bugzilla.mozilla.org/show_bug.cgi?id=918806\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Promise"], "type": "property"},
{"name": "TypeError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typeerror", "content": "## Summary\n\nThe `**TypeError**` object represents an error when a value is not of the\nexpected type.\n\n## Syntax\n\n    \n    \n    new TypeError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n     Optional. Human-readable description of the error\n`fileName` _ _\n\n     Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n     Optional. The line number of the code that caused the exception\n\n## Description\n\nA `TypeError` is thrown when an operand or argument passed to a function is\nincompatible with the type expected by that operator or function.\n\n## Properties\n\n[`TypeError.prototype`][1]\n\n     Allows the addition of properties to a `TypeError` object.\n\n## Methods\n\nThe global `TypeError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `TypeError` instances\n\n### Properties\n\n`TypeError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`TypeError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`TypeError`][3] should provide its own `message` property, in [SpiderMonkey][4], it inherits [`Error.prototype.message`][2].\n[`TypeError.prototype.name`][5]\n\n     Error name. Inherited from [`Error`][6].\n[`TypeError.prototype.fileName`][7]\n\n     Path to file that raised this error. Inherited from [`Error`][6].\n[`TypeError.prototype.lineNumber`][8]\n\n     Line number in file that raised this error. Inherited from [`Error`][6].\n[`TypeError.prototype.columnNumber`][9]\n\n     Column number in line that raised this error. Inherited from [`Error`][6].\n[`TypeError.prototype.stack`][10]\n\n     Stack trace. Inherited from [`Error`][6].\n\n### Methods\n\nAlthough the [`TypeError`][3] prototype object does not contain any methods of\nits own, [`TypeError`][3] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'TypeError' in that specification.][11]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'TypeError' in that specification.][12]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][13].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][6]\n  * [`TypeError.prototype`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[11]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.5\n\n[12]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-typeerror\n\n[13]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Map.prototype.values()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.values()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**values()**` method returns a new `**Iterator**` object that contains\nthe values for each element in the `Map` object in insertion order.\n\n## Syntax\n\n    \n    \n    _myMap_.values()\n\n## Examples\n\n### Example: Using `values()`\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"0\", \"foo\");\n    myMap.set(1, \"bar\");\n    myMap.set({}, \"baz\");\n    \n    var mapIter = myMap.values();\n    \n    console.log(mapIter.next().value); // \"foo\"\n    console.log(mapIter.next().value); // \"bar\"\n    console.log(mapIter.next().value); // \"baz\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.values' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[20][2] (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n20.0 (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Map.prototype.entries()`][3]\n  * [`Map.prototype.keys()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.values\n\n[2]: /en-US/Firefox/Releases/20\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.set()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.set()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**set()**` method adds a new element with a specified `key` and `value`\nto a `Map` object.\n\n## Syntax\n\n    \n    \n    _myMap_.set(key, value);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to add to the `Map` object.\nvalue\n\n     Required. The value of the element to add to the `Map` object.\n\n### Return value\n\nThe `Map` object.\n\n## Examples\n\n### Example: Using the `set` method\n\n    \n    \n    var myMap = new Map();\n    \n    // Add new elements to the map\n    myMap.set(\"bar\", \"foo\");\n    myMap.set(1, \"foobar\");\n    \n    // Update an element in the map\n    myMap.set(\"bar\", \"fuuu\");\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.set' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Firefox-specific notes\n\n  * Prior to Firefox 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30), `Map.prototype.set` returned `undefined` and was not chainable. This has been fixed ([bug\u00a01031632][3]). The behavior can be found in Chrome/v8 as well ([issue][4]).\n\n## See also\n\n  * [`Map`][5]\n  * [`Map.prototype.get()`][6]\n  * [`Map.prototype.has()`][7]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.set\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=1031632\n\n[4]: https://code.google.com/p/v8/issues/detail?id=3410\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.keys()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.keys()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**keys()**` method returns a new `**Iterator**` object that contains the\nkeys for each element in the `Map` object in insertion order.\n\n## Syntax\n\n    \n    \n    _myMap_.keys()\n\n## Examples\n\n### Example: Using `keys()`\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"0\", \"foo\");\n    myMap.set(1, \"bar\");\n    myMap.set({}, \"baz\");\n    \n    var mapIter = myMap.keys();\n    \n    console.log(mapIter.next().value); // \"0\"\n    console.log(mapIter.next().value); // 1\n    console.log(mapIter.next().value); // Object\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.keys' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[20][2] (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n20.0 (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Map.prototype.entries()`][3]\n  * [`Map.prototype.values()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.keys\n\n[2]: /en-US/Firefox/Releases/20\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.has()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.has()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**has()**` method returns a boolean indicating whether an element with\nthe specified key exists or not.\n\n## Syntax\n\n    \n    \n    _myMap_.has(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to test for presence in the `Map` object.\n\n### Return value\n\nBoolean\n\n     Returns `true` if an element with the specified key exists in the `Map` object; otherwise `false`.\n\n## Examples\n\n### Example: Using the `has` method\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"bar\", \"foo\");\n    \n    myMap.has(\"bar\");  // returns true\n    myMap.has(\"baz\");  // returns false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.has' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Map`][3]\n  * [`Map.prototype.set()`][4]\n  * [`Map.prototype.get()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.has\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.get()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.get()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**get()**` method returns a specified element from a `Map` object.\n\n## Syntax\n\n    \n    \n    _myMap_.get(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to return from the `Map` object.\n\n### Return value\n\nReturns the element associated with the specified key or `undefined` if the\nkey can't be found in the `Map` object.\n\n## Examples\n\n### Example: Using the `get` method\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"bar\", \"foo\");\n    \n    myMap.get(\"bar\");  // Returns \"foo\".\n    myMap.get(\"baz\");  // Returns undefined.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.get' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Chrome-specific notes\n\n  * The feature is available behind a preference. In `chrome://flags`, activate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [`Map`][3]\n  * [`Map.prototype.set()`][4]\n  * [`Map.prototype.has()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.get\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.forEach()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.foreach()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**forEach()**` method executes a provided function once per each\nkey/value pair in the `Map` object, in insertion order.\n\n## Syntax\n\n    \n    \n    _myMap_.forEach(_callback_[, _thisArg_])\n\n### Parameters\n\n`callback`\n\n     Function to execute for each element.\n`thisArg`\n\n     Value to use as `this` when executing `callback`.\n\n## Description\n\nThe `forEach` method executes the provided `callback`\u00a0once for each key of the\nmap which actually exist. It is not invoked for keys which have been deleted.\nHowever, it is executed for values which are present but have the value\n`undefined`.\n\n`callback` is invoked with **three arguments**:\n\n  * the **element value**\n  * the **element key**\n  * the **`Map` object being traversed**\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\nThe range of elements processed by `forEach` is set before the first\ninvocation of `callback`. Elements which are added to the `Map` object after\nthe call to `forEach` begins will not be visited by `callback`. If existing\nelements of the `Map` object are changed, or deleted, their value as passed to\n`callback` will be the value at the time `forEach` visits them; elements that\nare deleted are not visited.\n\n`forEach` executes the `callback` function once for each element in the `Map`\nobject; it does not return a value.\n\n## Examples\n\n### Printing the contents of a `Map` object\n\nThe following code logs a line for each element in an `Map` object:\n\n    \n    \n    function logMapElements(value, key, map) {\n        console.log(\"m[\" + key + \"] = \" + value);\n    }\n    Map([[\"foo\", 3], [\"bar\", {}], [\"baz\", undefined]]).forEach(logMapElements);\n    // logs:\n    // \"m[foo] = 3\"\n    // \"m[bar] = [object Object]\"\n    // \"m[baz] = undefined\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.forEach' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25.0][3] (25.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.foreach\n\n[3]: /en-US/Firefox/Releases/25\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.entries()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.entries()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**entries()**` method returns a new `**Iterator**` object that contains\nthe [`key, value]` pairs for each element in the `Map` object in insertion\norder.\n\n## Syntax\n\n    \n    \n    _myMap_.entries()\n\n## Examples\n\n### Example: Using `entries()`\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"0\", \"foo\");\n    myMap.set(1, \"bar\");\n    myMap.set({}, \"baz\");\n    \n    var mapIter = myMap.entries();\n    \n    console.log(mapIter.next().value); // [\"0\", \"foo\"]\n    console.log(mapIter.next().value); // [1, \"bar\"]\n    console.log(mapIter.next().value); // [Object, \"baz\"]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.entries' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[20][2] (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n20.0 (20)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Map.prototype.keys()`][3]\n  * [`Map.prototype.values()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.entries\n\n[2]: /en-US/Firefox/Releases/20\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.delete()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.delete()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**delete()**` method removes the specified element from a `Map` object.\n\n## Syntax\n\n    \n    \n    myMap.delete(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to remove from the `Map` object.\n\n### Return value\n\nReturns `true` if an element in the `Map` object has been removed\nsuccessfully.\n\n## Examples\n\n### Example: Using the `delete` method\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"bar\", \"foo\");\n    \n    myMap.delete(\"bar\"); // Returns true. Successfully removed.\n    myMap.has(\"bar\");    // Returns false. The \"bar\" element is no longer present.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.delete' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Map`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.delete\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.clear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.clear()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**clear()**` method removes all elements from a `Map` object.\n\n## Syntax\n\n    \n    \n    _myMap_.clear();\n\n## Examples\n\n### Example: The `clear` method\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"bar\", \"baz\");\n    myMap.set(1, \"foo\");\n    \n    myMap.size;       // 2\n    myMap.has(\"bar\"); // true\n    \n    myMap.clear();\n    \n    myMap.size;       // 0\n    myMap.has(\"bar\")  // false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.clear' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[19.0][2] (19.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n19.0 (19.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Map`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.clear\n\n[2]: /en-US/Firefox/Releases/19\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "Map.prototype.size", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.size", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**size**` accessor property returns the number of elements in a\n[`Map`][1] object.\n\n## Description\n\nThe value of `size` is an integer representing how many entries the `Map`\nobject has. A set accessor function for `size` is `undefined`; you can not\nchange this property.\n\n## Examples\n\n### Example: Using `size`\n\n    \n    \n    var myMap = new Map();\n    myMap.set(\"a\", \"alpha\");\n    myMap.set(\"b\", \"beta\");\n    myMap.set(\"g\", \"gamma\");\n    \n    myMap.size // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.size' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[19][3] (19)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n19.0 (19)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\n  * From Gecko 13 (Firefox 13 / Thunderbird 13 / SeaMonkey 2.10) to Gecko 18 (Firefox 18 / Thunderbird 18 / SeaMonkey 2.15 / Firefox OS 1.0.1 / Firefox OS 1.1) the size property was implemented as a **`Map.prototype.size()`** method, this has been changed to a property in later versions conform to the ECMAScript 6 specification ([bug\u00a0807001][4]).\n\n### See also\n\n  * [`Map`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-map.prototype.size\n\n[3]: /en-US/Firefox/Releases/19\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=807001\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "property"},
{"name": "Map.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Map**`**`.prototype`** property represents the prototype for the\n[`Map`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Map.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Map`][1] instances inherit from [`Map.prototype`][2]. You can use the\nconstructor's prototype object to add properties or methods to all `Map`\ninstances.\n\n## Properties\n\n`Map.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Map`][1] function by default.\n[`Map.prototype.size`][3]\n\n     Returns the number of key/value pairs in the `Map` object.\n\n## Methods\n\n[`Map.prototype.clear()`][4]\n\n     Removes all key/value pairs from the `Map` object.\n[`Map.prototype.delete(key)`][5]\n\n     Removes any value associated to the `key`. `Map.prototype.has(key)` will return `false` afterwards.\n[`Map.prototype.entries()`][6]\n\n     Returns returns a new `Iterator` object that contains** an array of [`key, value]`** for each element in the `Map` object in insertion order.\n[`Map.prototype.forEach(callbackFn[, thisArg])`][7]\n\n     Calls callbackFn once for each key-value pair present in the `Map` object, in insertion order. If a thisArg parameter is provided to forEach, it will be used as the this value for each callback.\n[`Map.prototype.get(key)`][8]\n\n     Returns the value associated to the `key`, or `undefined` if there is none.\n[`Map.prototype.has(key)`][9]\n\n     Returns a boolean asserting whether a value has been associated to the `key` in the `Map` object or not.\n[`Map.prototype.keys()`][10]\n\n     Returns a new `Iterator` object that contains the **keys** for each element in the `Map` object in insertion order.\n[`Map.prototype.set(key, value)`][11]\n\n     Sets the value for the `key` in the `Map` object. Returns the `Map` object.\n[`Map.prototype.values()`][12]\n\n     Returns a new `Iterator` object that contains the **values** for each element in the `Map` object in insertion order.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype' in that specification.][13]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13][14] (13)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Set.prototype`][15]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values\n\n[13]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype\n\n[14]: /en-US/Firefox/Releases/13\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "property"},
{"name": "Error.prototype.toString()", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.tostring()", "content": "## Summary\n\nThe `**toString()**` method returns a string representing the specified\n[`Error`][1] object.\n\n## Syntax\n\n    \n    \n    e.toString()\n\n## Description\n\nThe [`Error`][1] object overrides the [`Object.prototype.toString()`][2]\nmethod inherited by all objects. Its semantics are as follows (assuming\n[`Object`][3] and [`String`][4] have their original values):\n\n    \n    \n    Error.prototype.toString = function() {\n      'use strict';\n    \n      var obj = Object(this);\n      if (obj !== this) {\n        throw new TypeError();\n      }\n    \n      var name = this.name;\n      name = (name === undefined) ? 'Error' : String(name);\n    \n      var msg = this.message;\n      msg = (msg === undefined) ? '' : String(msg);\n    \n      if (name === '') {\n        return msg;\n      }\n      if (msg === '') {\n        return name;\n      }\n    \n      return name + ': ' + msg;\n    };\n    \n\n## Examples\n\n    \n    \n    var e = new Error('fatal error');\n    print(e.toString()); // 'Error: fatal error'\n    \n    e.name = undefined;\n    print(e.toString()); // 'Error: fatal error'\n    \n    e.name = '';\n    print(e.toString()); // 'fatal error'\n    \n    e.message = undefined;\n    print(e.toString()); // 'Error'\n    \n    e.name = 'hello';\n    print(e.toString()); // 'hello'\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Error.prototype.toString' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Error.prototype.toString' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.toSource()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4.4\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-error.prototype.tostring\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "method"},
{"name": "Error.prototype.toSource()", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.tosource()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**toSource()**` method returns code that could eval to the same error.\n\n## Syntax\n\n    \n    \n    e.toSource()\n\n## Description\n\nCalling the `toSource` method of an [`Error`][1] instance (including\n_[NativeErrors][2]_) will return a string containing the source code of the\nerror. This string can be evaluated to create an (approximately) equal object.\nNaturally, the string containing the source follows the structure of the\n[`Error`][1] constructor. For example:\n\n    \n    \n    (new _name_(_message_ ,_fileName_, _lineNumber_))\n    \n\nwhere these attributes correspond to the respective properties of the error\ninstance.\n\n**Note:** Be aware that the properties used by the `toSource` method in the creation of this string are mutable and may not accurately reflect the function used to create an error instance or the filename or line number where the actual error occurred.\n\n## Specifications\n\nNot part of any standard. Implemented in JavaScript 1.3.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][3].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.fileName`][4]\n  * [`Error.prototype.lineNumber`][5]\n  * [`Error.prototype.message`][6]\n  * [`Error.prototype.name`][7]\n  * [`Object.prototype.toSource()`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n\n[3]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "method"},
{"name": "Error.prototype.stack", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.stack", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe non-standard `**stack**` property of [`Error`][1] objects offer a trace of\nwhich functions were called, in what order, from which line and file, and with\nwhat arguments. The stack string proceeds from the most recent calls to\nearlier ones, leading back to the original global scope call.\n\n## Description\n\nEach step will be separated by a newline, with the first part of the line\nbeing the function name (if not a call from the global scope), then by an at\n(@) sign, the file location (except when the function is the error constructor\nas the error is being thrown), a colon, and, if there is a file location, the\nline number. (Note that the [`Error`][1] object also possesses the `fileName`,\n`lineNumber` and `columnNumber` properties for retrieving these from the error\nthrown (but only the error, and not its trace).)\n\nNote that this is the format used by Firefox. There is no standard formatting.\nHowever, Safari 6+ and Opera 12- uses a very similar format. Browsers using\nthe V8 JavaScript engine (such as Chrome, Opera 15+, Android Browser) and\nIE10+, on the other hand, uses a different format (see these MSDN\n[error.stack][2] docs).\n\n**Argument values in the stack**: Prior to Firefox 14 ([bug\u00a0744842][3]), the function name would be followed by the argument values converted to string in parentheses immediately before the at (`@`) sign. While an object (or array, etc.) would appear in the converted form `\"[object Object]\"`, and as such could not be evaluated back into the actual objects, scalar values could be retrieved (though it may be \u2014 it is still possible in Firefox 14 \u2014 easier to use `arguments.callee.caller.arguments`, as could the function name be retrieved by `arguments.callee.caller.name`). `\"undefined\"` is listed as `\"(void 0)\"`. Note that if string arguments were passed in with values such as `\"@\"`, `\"(\"`, `\")\"` (or if in file names), you could not easily rely on these for breaking the line into its component parts. Thus, in Firefox 14 and later this is less of an issue.\n\n## Example\n\nThe following HTML markup demonstrates the use of `stack` property.\n\n    \n    \n    <!DOCTYPE HTML>\n    <meta charset=\"UTF-8\">\n    <title>Stack Trace Example</title>\n    <body>\n    <script>\n    function trace() {\n      try {\n        throw new Error('myError');\n      }\n      catch(e) {\n        alert(e.stack);\n      }\n    }\n    function b() {\n      trace();\n    }\n    function a() {\n      b(3, 4, '\\n\\n', undefined, {});\n    }\n    a('first call, firstarg');\n    </script>\n    \n\nAssuming the above markup is saved as `C:\\example.html` on a Windows file\nsystem it produces an alert message box with the following text:\n\nStarting with Firefox 30 and later containing the column number ([bug\n762556][4]):\n\n    \n    \n    trace@file:///C:/example.html:9:17\n    b@file:///C:/example.html:16:13\n    a@file:///C:/example.html:19:13\n    @file:///C:/example.html:21:9\n\nFirefox 14 to Firefox 29:\n\n    \n    \n    trace@file:///C:/example.html:9\n    b@file:///C:/example.html:16\n    a@file:///C:/example.html:19\n    @file:///C:/example.html:21\n\nFirefox 13 and earlier would instead produce the following text:\n\n    \n    \n    Error(\"myError\")@:0\n    trace()@file:///C:/example.html:9\n    b(3,4,\"\\n\\n\",(void 0),[object Object])@file:///C:/example.html:16\n    a(\"first call, firstarg\")@file:///C:/example.html:19\n    @file:///C:/example.html:21\n\n### Stack of eval'ed code\n\nStarting with Firefox 30 (Firefox 30 / Thunderbird 30 / SeaMonkey 2.27 /\nFirefox OS 1.4), the error stack of code in `Function()` and `eval()` calls,\nnow produces stacks with more detailed information about the line and column\nnumbers inside these calls. Function calls are indicated with `\"> Function\"`\nand eval calls with `\"> eval\"`. See [bug\u00a0332176][5].\n\n    \n    \n    try {\n      new Function('throw new Error()')();\n    } catch (e) {\n      console.log(e.stack);\n    }\n    \n    // anonymous@file:///C:/example.html line 7 > Function:1:1\n    // @file:///C:/example.html:7:6\n    \n    \n    try {\n      eval(\"eval('FAIL')\");\n    } catch (x) {\n      console.log(x.stack);\n    }\n    \n    // @file:///C:/example.html line 7 > eval line 1 > eval:1:1\n    // @file:///C:/example.html line 7 > eval:1:1\n    // @file:///C:/example.html:7:6\n    \n\n## Specifications\n\nNot part of any specification. Non-standard.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n6\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nAndroid 4 (perhaps Android 3, but not Android 2)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n6\n\n</td> </tr> </table>\n\n## See also\n\n  * [Components.stack][7]\n  * External projects: [TraceKit][8] and [javascript-stacktrace][9]\n  * MSDN: [error.stack][2] docs\n  * [Overview of the V8 JavaScript stack trace API][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: http://msdn.microsoft.com/en-us/library/windows/apps/hh699850.aspx\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=744842\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=762556\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=332176\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Components.stack\n\n[8]: https://github.com/csnover/TraceKit/\n\n[9]: https://github.com/eriwen/javascript-stacktrace\n\n[10]: https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype", "content": "## Summary\n\nThe `**Error.prototype**` property represents the prototype for the\n[`Error`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Error.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`Error`][1] instances and instances of [non-generic errors][2] inherit\nfrom `Error.prototype`. As with all constructor functions, you can use the\nprototype of the constructor to add properties or methods to all instances\ncreated with that constructor.\n\n## Properties\n\n### Standard properties\n\n`Error.prototype.constructor`\n\n    Specifies the function that created an instance's prototype.\n[`Error.prototype.message`][3]\n\n    Error message.\n[`Error.prototype.name`][4]\n\n    Error name.\n\n### Vendor-specific extensions\n\n**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n#### Microsoft\n\n[`Error.prototype.description`][5]\n\n    Error description. Similar to [`message`][3].\n[`Error.prototype.number`][6]\n\n    Error number.\n\n#### Mozilla\n\n[`Error.prototype.fileName`][7]\n\n    Path to file that raised this error.\n[`Error.prototype.lineNumber`][8]\n\n    Line number in file that raised this error.\n[`Error.prototype.columnNumber`][9]\n\n    Column number in line that raised this error.\n[`Error.prototype.stack`][10]\n\n    Stack trace.\n\n## Methods\n\n[`Error.prototype.toSource()`][11] _ _\n\n    Returns a string containing the source of the specified [`Error`][1] object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][12] method.\n[`Error.prototype.toString()`][13]\n\n    Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][14] method.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Error' in that specification.][15]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Error' in that specification.][16]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][17].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][1]\n  * [`Object.prototype`][18]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/description\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/number\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[15]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.3.1\n\n[16]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-error.prototype\n\n[17]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype.stack", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.stack", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe non-standard `**stack**` property of [`Error`][1] objects offer a trace of\nwhich functions were called, in what order, from which line and file, and with\nwhat arguments. The stack string proceeds from the most recent calls to\nearlier ones, leading back to the original global scope call.\n\n## Description\n\nEach step will be separated by a newline, with the first part of the line\nbeing the function name (if not a call from the global scope), then by an at\n(@) sign, the file location (except when the function is the error constructor\nas the error is being thrown), a colon, and, if there is a file location, the\nline number. (Note that the [`Error`][1] object also possesses the `fileName`,\n`lineNumber` and `columnNumber` properties for retrieving these from the error\nthrown (but only the error, and not its trace).)\n\nNote that this is the format used by Firefox. There is no standard formatting.\nHowever, Safari 6+ and Opera 12- uses a very similar format. Browsers using\nthe V8 JavaScript engine (such as Chrome, Opera 15+, Android Browser) and\nIE10+, on the other hand, uses a different format (see these MSDN\n[error.stack][2] docs).\n\n**Argument values in the stack**: Prior to Firefox 14 ([bug\u00a0744842][3]), the function name would be followed by the argument values converted to string in parentheses immediately before the at (`@`) sign. While an object (or array, etc.) would appear in the converted form `\"[object Object]\"`, and as such could not be evaluated back into the actual objects, scalar values could be retrieved (though it may be \u2014 it is still possible in Firefox 14 \u2014 easier to use `arguments.callee.caller.arguments`, as could the function name be retrieved by `arguments.callee.caller.name`). `\"undefined\"` is listed as `\"(void 0)\"`. Note that if string arguments were passed in with values such as `\"@\"`, `\"(\"`, `\")\"` (or if in file names), you could not easily rely on these for breaking the line into its component parts. Thus, in Firefox 14 and later this is less of an issue.\n\n## Example\n\nThe following HTML markup demonstrates the use of `stack` property.\n\n    \n    \n    <!DOCTYPE HTML>\n    <meta charset=\"UTF-8\">\n    <title>Stack Trace Example</title>\n    <body>\n    <script>\n    function trace() {\n      try {\n        throw new Error('myError');\n      }\n      catch(e) {\n        alert(e.stack);\n      }\n    }\n    function b() {\n      trace();\n    }\n    function a() {\n      b(3, 4, '\\n\\n', undefined, {});\n    }\n    a('first call, firstarg');\n    </script>\n    \n\nAssuming the above markup is saved as `C:\\example.html` on a Windows file\nsystem it produces an alert message box with the following text:\n\nStarting with Firefox 30 and later containing the column number ([bug\n762556][4]):\n\n    \n    \n    trace@file:///C:/example.html:9:17\n    b@file:///C:/example.html:16:13\n    a@file:///C:/example.html:19:13\n    @file:///C:/example.html:21:9\n\nFirefox 14 to Firefox 29:\n\n    \n    \n    trace@file:///C:/example.html:9\n    b@file:///C:/example.html:16\n    a@file:///C:/example.html:19\n    @file:///C:/example.html:21\n\nFirefox 13 and earlier would instead produce the following text:\n\n    \n    \n    Error(\"myError\")@:0\n    trace()@file:///C:/example.html:9\n    b(3,4,\"\\n\\n\",(void 0),[object Object])@file:///C:/example.html:16\n    a(\"first call, firstarg\")@file:///C:/example.html:19\n    @file:///C:/example.html:21\n\n### Stack of eval'ed code\n\nStarting with Firefox 30 (Firefox 30 / Thunderbird 30 / SeaMonkey 2.27 /\nFirefox OS 1.4), the error stack of code in `Function()` and `eval()` calls,\nnow produces stacks with more detailed information about the line and column\nnumbers inside these calls. Function calls are indicated with `\"> Function\"`\nand eval calls with `\"> eval\"`. See [bug\u00a0332176][5].\n\n    \n    \n    try {\n      new Function('throw new Error()')();\n    } catch (e) {\n      console.log(e.stack);\n    }\n    \n    // anonymous@file:///C:/example.html line 7 > Function:1:1\n    // @file:///C:/example.html:7:6\n    \n    \n    try {\n      eval(\"eval('FAIL')\");\n    } catch (x) {\n      console.log(x.stack);\n    }\n    \n    // @file:///C:/example.html line 7 > eval line 1 > eval:1:1\n    // @file:///C:/example.html line 7 > eval:1:1\n    // @file:///C:/example.html:7:6\n    \n\n## Specifications\n\nNot part of any specification. Non-standard.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n6\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nAndroid 4 (perhaps Android 3, but not Android 2)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n6\n\n</td> </tr> </table>\n\n## See also\n\n  * [Components.stack][7]\n  * External projects: [TraceKit][8] and [javascript-stacktrace][9]\n  * MSDN: [error.stack][2] docs\n  * [Overview of the V8 JavaScript stack trace API][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: http://msdn.microsoft.com/en-us/library/windows/apps/hh699850.aspx\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=744842\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=762556\n\n[5]: https://bugzilla.mozilla.org/show_bug.cgi?id=332176\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Components.stack\n\n[8]: https://github.com/csnover/TraceKit/\n\n[9]: https://github.com/eriwen/javascript-stacktrace\n\n[10]: https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype.columnNumber", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.columnnumber", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**columnNumber**` property contains the column number in the line of the\nfile that raised this error.\n\n## Examples\n\n### Example: Using `columnNumber`\n\n    \n    \n    var e = new Error('Could not parse input');\n    throw e;\n    console.log(e.columnNumber) // 0\n    \n\n## Specifications\n\nNot part of any specification. Non-standard.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][1].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.stack`][2] _ _\n  * [`Error.prototype.lineNumber`][3] _ _\n  * [`Error.prototype.fileName`][4] _ _\n\n[1]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype.lineNumber", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.linenumber", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**lineNumber**` property contains the line number in the file that raised\nthis error.\n\n## Examples\n\n### Example: Using `lineNumber`\n\n    \n    \n    var e = new Error('Could not parse input');\n    throw e;\n    console.log(e.lineNumber) // 2\n    \n\n### Alternative example using error event\n\n    \n    \n    window.addEventListener(\"error\", function (e) {\n        console.log(e.lineno); //5\n    });\n    var e = new Error('Could not parse input');\n    throw e;\n    \n\nThis is standard and supported across Chrome, Firefox and likely more.\n\n\n\n## Specifications\n\nNot part of any specification. Non-standard.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nOn error object in handled errors\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.stack`][1] _ _\n  * [`Error.prototype.columnNumber`][2] _ _\n  * [`Error.prototype.fileName`][3] _ _\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype.fileName", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.filename", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**fileName**` property contains the path to the file that raised this\nerror.\n\n## Description\n\nThis non-standard property contains the path to the file that raised this\nerror. If called from a debugger context, the Firefox Developer Tools for\nexample, \"debugger eval code\" is returned.\n\n## Examples\n\n### Example: Using `fileName`\n\n    \n    \n    var e = new Error('Could not parse input');\n    throw e;\n    // e.fileName could look like \"file:///C:/example.html\"\n    \n\n## Specifications\n\nNot part of any specification. Non-standard.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][1].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.stack`][2] _ _\n  * [`Error.prototype.columnNumber`][3] _ _\n  * [`Error.prototype.lineNumber`][4] _ _\n\n[1]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "TypeError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/typeerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/typeerror/typeerror.prototype", "content": "## Summary\n\nThe `**TypeError.prototype**` property represents the prototype for the\n[`TypeError`][1] constructor.\n\n## Description\n\nAll [`TypeError`][1] instances inherit from `TypeError.prototype`. You can use\nthe prototype to add properties or methods to all instances.\n\n## Properties\n\n`TypeError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`TypeError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`TypeError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`TypeError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`TypeError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`TypeError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`TypeError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`TypeError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`TypeError`][1] prototype object does not contain any methods of\nits own, [`TypeError`][1] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "TypeError"], "type": "property"},
{"name": "Error.prototype.name", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.name", "content": "## Summary\n\nThe `**name**` property represents a name for the type of error. The initial\nvalue is \"Error\".\n\n## Description\n\nBy default, [`Error`][1] instances are given the name \"Error\". The `name`\nproperty, in addition to the [`message`][2] property, is used by the\n[`Error.prototype.toString()`][3] method to create a string representation of\nthe error.\n\n## Examples\n\n### Example: Throwing a custom error\n\n    \n    \n    var e = new Error('Malformed input'); // e.name is 'Error'\n    \n    e.name = 'ParseError';\n    throw e;\n    // e.toString() would return 'ParseError: Malformed input'\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Error.prototype.name' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Error.prototype.name' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.message`][2]\n  * [`Error.prototype.toString()`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-error.prototype.name\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "Error.prototype.message", "parent": "/javascript/javascript_reference/standard_built-in_objects/error", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error/error.prototype.message", "content": "## Summary\n\nThe `**message**` property is a human-readable description of the error.\n\n## Description\n\nThis property contains a brief description of the error if one is available or\nhas been set. [SpiderMonkey][1] makes extensive use of the `message` property\nfor exceptions. The `message` property combined with the [`name`][2] property\nis used by the [`Error.prototype.toString()`][3] method to create a string\nrepresentation of the Error.\n\nBy default, the `message` property is an empty string, but this behavior can\nbe overridden for an instance by specifying a message as the first argument to\nthe [`Error constructor`][4].\n\n## Examples\n\n### Example: Throwing a custom error\n\n    \n    \n    var e = new Error('Could not parse input'); // e.message is 'Could not parse input'\n    throw e;\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Error.prototype.message' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Error.prototype.message' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][7].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype.name`][2]\n  * [`Error.prototype.toString()`][3]\n\n[1]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.4.3\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-error.prototype.message\n\n[7]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Error"], "type": "property"},
{"name": "URIError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/urierror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/urierror/urierror.prototype", "content": "## Summary\n\nThe `**URIError.prototype**` property represents the prototype for the\n[`URIError`][1] constructor.\n\n## Description\n\nAll [`URIError`][1] instances inherit from `URIError.prototype`. You can use\nthe prototype to add properties or methods to all instances.\n\n## Properties\n\n`URIError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`URIError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`URIError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`URIError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`URIError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`URIError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`URIError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`URIError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`URIError`][1] prototype object does not contain any methods of\nits own, [`URIError`][1] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "URIError"], "type": "property"},
{"name": "Set.prototype.values()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.values()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**values()**` method returns a new `**Iterator**` object that contains\nthe values for each element in the `Set` object in insertion order.\n\nThe **`keys()`** method is an alias for this method (for similarity with\n[`Map`][1] objects); it behaves exactly the same and returns **values** of\n`Set` elements.\n\n## Syntax\n\n    \n    \n    _mySet_.values();\n    _mySet_.keys();\n    \n\n## Examples\n\n### Example: Using `values()`\n\n    \n    \n    var mySet = new Set();\n    mySet.add(\"foo\");\n    mySet.add(\"bar\");\n    mySet.add(\"baz\");\n    \n    var setIter = mySet.values();\n    \n    console.log(setIter.next().value); // \"foo\"\n    console.log(setIter.next().value); // \"bar\"\n    console.log(setIter.next().value); // \"baz\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.values' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[24][3] (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n24.0 (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Set.prototype.entries()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.values\n\n[3]: /en-US/Firefox/Releases/24\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype.has()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.has()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**has()**` method returns a boolean indicating whether an element with\nthe specified value exists in a `Set` object or not.\n\n## Syntax\n\n    \n    \n    _mySet_.has(value);\n\n### Parameters\n\nvalue\n\n     Required. The value to test for presence in the `Set` object.\n\n### Return value\n\nBoolean\n\n     Returns `true` if an element with the specified value exists in the `Set` object; otherwise `false`.\n\n## Examples\n\n### Example: Using the `has` method\n\n    \n    \n    var mySet = new Set();\n    mySet.add(\"foo\");\n    \n    mySet.has(\"foo\");  // returns true\n    mySet.has(\"bar\");  // returns false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.has' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Set`][3]\n  * [`Set.prototype.add()`][4]\n  * [`Set.prototype.delete()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.has\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype.delete()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.delete()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**delete()**` method removes the specified element from a `Set` object.\n\n## Syntax\n\n    \n    \n    _mySet_.delete(value);\n\n### Parameters\n\nvalue\n\n     Required. The value of the element to remove from the `Set` object.\n\n### Return value\n\nReturns `true` if an element in the `Set` object has been removed\nsuccessfully; otherwise `false`.\n\n## Examples\n\n### Example: Using the `delete` method\n\n    \n    \n    var mySet = new Set();\n    mySet.add(\"foo\");\n    \n    mySet.delete(\"bar\"); // Returns false. No \"bar\" element found to be deleted.\n    mySet.delete(\"foo\"); // Returns true.  Successfully removed.\n    \n    mySet.has(\"foo\");    // Returns false. The \"bar\" element is no longer present.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.delete' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Set`][3]\n  * [`Set.prototype.clear()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.delete\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype.clear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.clear()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**clear()**` method removes all elements from a `Set` object.\n\n## Syntax\n\n    \n    \n    _mySet_.clear();\n\n## Examples\n\n### Example: Using the `clear` method\n\n    \n    \n    var mySet = new Set();\n    mySet.add(1);\n    mySet.add(\"foo\");\n    \n    mySet.size;       // 2\n    mySet.has(\"foo\"); // true\n    \n    mySet.clear();\n    \n    mySet.size;       // 0\n    mySet.has(\"bar\")  // false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.clear' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[19.0][2] (19.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n19.0 (19.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Set`][3]\n  * [`Set.prototype.delete()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.clear\n\n[2]: /en-US/Firefox/Releases/19\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype.add()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.add()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**add()**` method appends a new element with a specified\u00a0`value` to the\nend of a `Set` object.\n\n## Syntax\n\n    \n    \n    _mySet_.add(value);\n\n### Parameters\n\nvalue\n\n     Required. The value of the element to add to the `Set` object.\n\n### Return value\n\nThe `Set` object.\n\n## Examples\n\n### Example: Using the `add` method\n\n    \n    \n    var mySet = new Set();\n    \n    mySet.add(1);\n    mySet.add(5).add(\"some text\"); // chainable\n    \n    console.log(mySet);\n    // Set [1, 5, \"some text\"]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.add' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13.0][2] (13.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Firefox-specific notes\n\n  * Prior to Firefox 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30), `Set.prototype.add` returned `undefined` and was not chainable. This has been fixed ([bug\u00a01031632][3]). The behavior can be found in Chrome/v8 as well ([issue][4]).\n\n## See also\n\n  * [`Set`][5]\n  * [`Set.prototype.delete()`][6]\n  * [`Set.prototype.has()`][7]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.add\n\n[2]: /en-US/Firefox/Releases/13\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=1031632\n\n[4]: https://code.google.com/p/v8/issues/detail?id=3410\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype.size", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.size", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**size**` accessor property returns the number of elements in a\n[`Set`][1] object.\n\n## Description\n\nThe value of `size` is an integer representing how many entries the `Set`\nobject has. A set accessor function for `size` is `undefined`; you can not\nchange this property.\n\n## Examples\n\n### Example: Using `size`\n\n    \n    \n    var mySet = new Set();\n    mySet.add(1);\n    mySet.add(5);\n    mySet.add(\"some text\")\n    \n    mySet.size; // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.size' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[19][3] (19)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n19.0 (19)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\n  * From Gecko 13 (Firefox 13 / Thunderbird 13 / SeaMonkey 2.10) to Gecko 18 (Firefox 18 / Thunderbird 18 / SeaMonkey 2.15 / Firefox OS 1.0.1 / Firefox OS 1.1) the size property was implemented as a **`Set.prototype.size()`** method, this has been changed to a property in later versions conform to the ECMAScript 6 specification ([bug\u00a0807001][4]).\n\n## See also\n\n  * [`Set`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-set.prototype.size\n\n[3]: /en-US/Firefox/Releases/19\n\n[4]: https://bugzilla.mozilla.org/show_bug.cgi?id=807001\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "property"},
{"name": "Set.prototype.forEach()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.foreach()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**forEach()**` method executes a provided function once per each value in\nthe `Set` object, in insertion order.\n\n## Syntax\n\n    \n    \n    _mySet_.forEach(_callback_[, _thisArg_])\n\n### Parameters\n\n`callback`\n\n     Function to execute for each element.\n`thisArg`\n\n     Value to use as `this` when executing `callback`.\n\n## Description\n\nThe `forEach` method executes the provided `callback`\u00a0once for each value\nwhich actually exists in the `Set` object. It is not invoked for values which\nhave been deleted. However, it is executed for values which are present but\nhave the value `undefined`.\n\n`callback` is invoked with **three arguments**:\n\n  * the **element value**\n  * the **element value**\n  * the **`Set` object being traversed**\n\nThe are no keys in Set objects. However, the first two arguments are both\n**values** contained in the Set, so that the callback function is consistent\nwith the forEach methods for [`Map`][1] and [`Array`][2].\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][3].\n\nThe range of elements processed by `forEach` is set before the first\ninvocation of `callback`. Elements which are added to the `Set` object after\nthe call to `forEach` begins, will not be visited by `callback`. If existing\nelements of the `Set` object are changed, or deleted, their value as passed to\n`callback` will be the value at the time `forEach` visits them; elements that\nare deleted are not visited.\n\n`forEach` executes the `callback` function once for each element in the `Set`\nobject; it does not return a value.\n\n## Examples\n\n### Printing the contents of a `Set` object\n\nThe following code logs a line for each element in an `Set` object:\n\n    \n    \n    function logSetElements(value1, value2, set) {\n        console.log(\"s[\" + value1 + \"] = \" + value2);\n    }\n    \n    new Set([\"foo\", \"bar\", undefined]).forEach(logSetElements);\n    \n    // logs:\n    // \"s[foo] = foo\"\n    // \"s[bar] = bar\"\n    // \"s[undefined] = undefined\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.forEach' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25.0][5] (25.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\nSee also\n\n  * [`Array.prototype.forEach()`][2]\n  * [`Map.prototype.forEach()`][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/foreach\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.foreach\n\n[5]: /en-US/Firefox/Releases/25\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "Set.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**Set**`**`.prototype`** property represents the prototype for the\n[`Set`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Set.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`Set`][1] instances inherit from [`Set.prototype`][2]. You can use the\nconstructor's prototype object to add properties or methods to all `Set`\ninstances.\n\n## Properties\n\n`Set.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Set`][1] function by default.\n[`Set.prototype.size`][3]\n\n     Returns the number of values in the `Set` object.\n\n## Methods\n\n[`Set.prototype.add(value)`][4]\n\n     Appends a new element with the given value to the `Set` object. Returns the `Set` object.\n[`Set.prototype.clear()`][5]\n\n     Removes all elements from the `Set` object.\n[`Set.prototype.delete(value)`][6]\n\n     Removes the element associated to the `value`. `Set.prototype.has(value)` will return `false` afterwards.\n[`Set.prototype.entries()`][7]\n\n     Returns a new `Iterator` object that contains** an array of [`value, value]`** for each element in the `Set` object, in insertion order. This is kept similar to the `Map` object, so that each entry has the same value for its _key_ and _value_ here.\n[`Set.prototype.forEach(callbackFn[, thisArg])`][8]\n\n     Calls `callbackFn` once for each value present in the `Set` object, in insertion order. If a `thisArg` parameter is provided to `forEach`, it will be used as the `this` value for each callback.\n[`Set.prototype.has(value)`][9]\n\n     Returns a boolean asserting whether an element is present with the given value in the `Set` object or not.\n[`Set.prototype.keys()`][10]\n\n     Is the same function as the **`values()`** function and returns a new `Iterator` object that contains the values for each element in the `Set` object in insertion order.\n[`Set.prototype.values()`][11]\n\n     Returns a new `Iterator` object that contains the **values** for each element in the `Set` object in insertion order.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype' in that specification.][12]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[13][13] (13)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n13.0 (13)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Map.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\n\n[12]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype\n\n[13]: /en-US/Firefox/Releases/13\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "property"},
{"name": "Set.prototype.entries()", "parent": "/javascript/javascript_reference/standard_built-in_objects/set", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/set/set.prototype.entries()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**entries()**` method returns a new `Iterator` object that contains** an\narray of [`value, value]`** for each element in the `Set` object, in insertion\norder. For `Set` objects there is no `key` like in `Map` objects. However, to\nkeep the API similar to the `Map` object, each _entry_ has the same value for\nits _key_ and _value_ here, so that an array [`value, value]` is returned.\n\n## Syntax\n\n    \n    \n    _mySet_.entries()\n\n## Examples\n\n### Example: Using `entries()`\n\n    \n    \n    var mySet = new Set();\n    mySet.add(\"foobar\");\n    mySet.add(1);\n    mySet.add(\"baz\");\n    \n    var setIter = mySet.entries();\n    \n    console.log(setIter.next().value); // [\"foobar\", \"foobar\"]\n    console.log(setIter.next().value); // [1, 1]\n    console.log(setIter.next().value); // [\"baz\", \"baz\"]\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Set.prototype.entries' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[24][2] (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n24.0 (24)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Set.prototype.keys()`][3]\n  * [`Set.prototype.values()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-set.prototype.entries\n\n[2]: /en-US/Firefox/Releases/24\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/keys\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Set"], "type": "method"},
{"name": "WeakMap.prototype.set()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype.set()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**set()**` method adds a new element with a specified `key` and `value`\nto a `WeakMap` object.\n\n## Syntax\n\n    \n    \n    _wm_.set(key, value);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to add to the `WeakMap` object.\nvalue\n\n     Required. The value of the element to add to the `WeakMap` object.\n\n### Return value\n\nThe `WeakMap` object.\n\n## Examples\n\n### Example: Using the `set` method\n\n    \n    \n    var wm = new WeakMap();\n    var obj = {};\n    \n    // Add new elements to the WeakMap\n    wm.set(obj, \"foo\").set(window, \"bar\"); // chainable\n    \n    // Update an element in the WeakMap\n    wm.set(obj, \"baz\");\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype.set' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][2] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n  \nFirefox-specific notes\n\n  * Prior to Firefox 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30), `WeakMap.prototype.set` returned `undefined` and was not chainable. This has been fixed ([bug\u00a01031632][3]). The behavior can be found in Chrome/v8 as well ([issue][4]).\n\n## See also\n\n  * [`WeakMap`][5]\n  * [`WeakMap.prototype.get()`][6]\n  * [`WeakMap.prototype.has()`][7]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype.set\n\n[2]: /en-US/Firefox/Releases/6\n\n[3]: https://bugzilla.mozilla.org/show_bug.cgi?id=1031632\n\n[4]: https://code.google.com/p/v8/issues/detail?id=3410\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "method"},
{"name": "WeakMap.prototype.has()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype.has()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**has()**` method returns a boolean indicating whether an element with\nthe specified key exists in the `WeakMap` object or not.\n\n## Syntax\n\n    \n    \n    _wm_.has(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to test for presence in the `WeakMap` object.\n\n### Return value\n\nBoolean\n\n     Returns `true` if an element with the specified key exists in the `WeakMap` object; otherwise `false`.\n\n## Examples\n\n### Example: Using the `has` method\n\n    \n    \n    var wm = new WeakMap();\n    wm.set(window, \"foo\");\n    \n    wm.has(window); // returns true\n    wm.has(\"baz\");  // returns false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype.has' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][2] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\nSee also\n\n  * [`WeakMap`][3]\n  * [`WeakMap.prototype.set()`][4]\n  * [`WeakMap.prototype.get()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype.has\n\n[2]: /en-US/Firefox/Releases/6\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "method"},
{"name": "WeakMap.prototype.get()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype.get()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**get()**` method returns a specified element from a `WeakMap` object.\n\n## Syntax\n\n    \n    \n    _wm_.get(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to return from the `WeakMap` object.\n\n### Return value\n\nReturns the element associated with the specified key or `undefined` if the\nkey can't be found in the `WeakMap` object.\n\n## Examples\n\n### Example: Using the `get` method\n\n    \n    \n    var wm = new WeakMap();\n    wm.set(window, \"foo\");\n    \n    wm.get(window); // Returns \"foo\".\n    wm.get(\"baz\");  // Returns undefined.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype.get' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][2] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\nSee also\n\n  * [`WeakMap`][3]\n  * [`WeakMap.set()`][4]\n  * [`WeakMap.has()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype.get\n\n[2]: /en-US/Firefox/Releases/6\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "method"},
{"name": "WeakMap.prototype.delete()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype.delete()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**delete()**` method removes the specified element from a `WeakMap`\nobject.\n\n## Syntax\n\n    \n    \n    _wm_.delete(key);\n\n### Parameters\n\nkey\n\n     Required. The key of the element to remove from the `WeakMap` object.\n\n### Return value\n\nReturns `true` if an element in the `WeakMap` object has been removed\nsuccessfully.\n\n## Examples\n\n### Example: Using the `delete` method\n\n    \n    \n    var wm = new WeakMap();\n    wm.set(window, \"foo\");\n    \n    wm.delete(window); // Returns true. Successfully removed.\n    \n    wm.has(window);    // Returns false. The window object is no longer in the WeakMap.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype.delete' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][2] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n  \nSee also\n\n  * [`WeakMap`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype.delete\n\n[2]: /en-US/Firefox/Releases/6\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "method"},
{"name": "WeakMap.prototype.clear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype.clear()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**clear()**` method removes all elements from a `WeakMap` object.\n\n## Syntax\n\n    \n    \n    _wm_.clear();\n\n## Examples\n\n### Example: The `clear` method\n\n    \n    \n    var wm = new WeakMap();\n    var obj = {};\n    \n    wm.set(obj, \"foo\");\n    wm.set(window, \"bar\");\n    \n    wm.has(obj); // true\n    wm.has(window); // true\n    \n    **wm.clear();**\n    \n    wm.has(obj)  // false\n    wm.has(window)  // false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype.clear' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[20.0][2] (20.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n20.0 (20.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n\n\nSee also\n\n  * [`WeakMap`][3]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype.clear\n\n[2]: /en-US/Firefox/Releases/20\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "method"},
{"name": "WeakMap.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakmap", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakmap/weakmap.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**WeakMap**`**`.prototype`** property represents the prototype for the\n[`WeakMap`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `WeakMap.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`WeakMap`][1] instances inherit from [`WeakMap.prototype`][2]. You can use\nthe constructor's prototype object to add properties or methods to all\n`WeakMap` instances.\n\n## Properties\n\n`WeakMap.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`WeakMap`][1] function by default.\n\n## Methods\n\n[`WeakMap.prototype.clear()`][3]\n\n     Removes all key/value pairs from the `WeakMap` object.\n[`WeakMap.prototype.delete(key)`][4]\n\n     Removes any value associated to the `key`. `WeakMap.prototype.has(key)` will return `false` afterwards.\n[`WeakMap.prototype.get(key)`][5]\n\n     Returns the value associated to the `key`, or `undefined` if there is none.\n[`WeakMap.prototype.has(key)`][6]\n\n     Returns a Boolean asserting whether a value has been associated to the `key` in the `WeakMap` object or not.\n[`WeakMap.prototype.set(key, value)`][7]\n\n     Sets the value for the `key` in the `WeakMap` object. Returns the `WeakMap` object.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakMap.prototype' in that specification.][8]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (SpiderMonkey)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[6.0][9] (6.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (SpiderMonkey)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n6.0 (6.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n### Chrome-specific notes\n\n  * The feature is available behind a preference. In `chrome://flags`, activate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [`Map.prototype`][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/clear\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set\n\n[8]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakmap.prototype\n\n[9]: /en-US/Firefox/Releases/6\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakMap"], "type": "property"},
{"name": "WeakSet.prototype.has()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakset", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset/weakset.prototype.has()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**has()**` method returns a boolean indicating whether an object exists\nin a `WeakSet` or not.\n\n## Syntax\n\n    \n    \n    _ws_.has(value);\n\n### Parameters\n\nvalue\n\n     Required. The object to test for presence in the `WeakSet`.\n\n### Return value\n\nBoolean\n\n     Returns `true` if an element with the specified value exists in the `WeakSet` object; otherwise `false`.\n\n## Examples\n\n### Example: Using the `has` method\n\n    \n    \n    var ws = new WeakSet();\n    var obj = {};\n    ws.add(window);\n    \n    mySet.has(window);  // returns true\n    mySet.has(obj);     // returns false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet.prototype.has' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][2] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### See also\n\n  * [`WeakSet`][3]\n  * [`WeakSet.prototype.add()`][4]\n  * [`WeakSet.prototype.delete()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset.prototype.has\n\n[2]: /en-US/Firefox/Releases/34\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakSet"], "type": "method"},
{"name": "WeakSet.prototype.delete()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakset", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset/weakset.prototype.delete()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**delete()**` method removes the specified element from a `WeakSet`\nobject.\n\n## Syntax\n\n    \n    \n    _ws_.delete(value);\n\n### Parameters\n\nvalue\n\n     Required. The object remove from the `WeakSet` object.\n\n### Return value\n\nReturns `true` if an element in the `WeakSet` object has been removed\nsuccessfully; otherwise `false`.\n\n## Examples\n\n### Example: Using the `delete` method\n\n    \n    \n    var ws = new WeakSet();\n    var obj = {};\n    \n    ws.add(window);\n    \n    ws.delete(obj);    // Returns false. No obj found to be deleted.\n    ws.delete(window); // Returns true.  Successfully removed.\n    \n    ws.has(window);    // Returns false. The window is no longer present in the WeakSet.\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet.prototype.delete' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][2] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### See also\n\n  * [`WeakSet`][3]\n  * [`WeakSet.prototype.clear()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset.prototype.delete\n\n[2]: /en-US/Firefox/Releases/34\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakSet"], "type": "method"},
{"name": "WeakSet.prototype.clear()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakset", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset/weakset.prototype.clear()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**clear()**` method removes all elements from a `WeakSet` object.\n\n## Syntax\n\n    \n    \n    _ws_.clear();\n\n## Examples\n\n### Example: Using the `clear` method\n\n    \n    \n    var ws = new WeakSet();\n    \n    ws.add(window);\n    ws.has(window);  // true\n    \n    ws.clear();\n    \n    ws.has(window); // false\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet.prototype.clear' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][2] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### Chrome-specific notes\n\n  * This feature is available behind a preference. In `chrome://flags`, activate the entry \u201cEnable Experimental JavaScript\u201d.\n\n## See also\n\n  * [`WeakSet`][3]\n  * [`WeakSet.prototype.delete()`][4]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset.prototype.clear\n\n[2]: /en-US/Firefox/Releases/34\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakSet"], "type": "method"},
{"name": "WeakSet.prototype.add()", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakset", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset/weakset.prototype.add()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**add()**` method appends a new object to the end of a `WeakSet` object.\n\n## Syntax\n\n    \n    \n    _ws_.add(value);\n\n### Parameters\n\nvalue\n\n     Required. The object to add to the `WeakSet` collection.\n\n## Examples\n\n### Example: Using the `add` method\n\n    \n    \n    var ws = new WeakSet();\n    \n    ws.add(window); // add the window object to the WeakSet\n    \n    ws.has(window); // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet.prototype.add' in that specification.][1]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][2] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### See also\n\n  * [`WeakSet`][3]\n  * [`WeakSet.prototype.delete()`][4]\n  * [`WeakSet.prototype.has()`][5]\n\n[1]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset.prototype.add\n\n[2]: /en-US/Firefox/Releases/34\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakSet"], "type": "method"},
{"name": "WeakSet.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/weakset", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/weakset/weakset.prototype", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**WeakSet**`**`.prototype`** property represents the prototype for the\n[`WeakSet`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `WeakSet.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n[`WeakSet`][1] instances inherit from [`WeakSet.prototype`][2]. You can use\nthe constructor's prototype object to add properties or methods to all\n`WeakSet` instances.\n\n## Properties\n\n`WeakSet.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`WeakSet`][1] function by default.\n\n## Methods\n\n[`WeakSet.prototype.add(value)`][3]\n\n     Appends a new element with the given value to the `WeakSet` object.\n[`WeakSet.prototype.clear()`][4]\n\n     Removes all elements from the `WeakSet` object.\n[`WeakSet.prototype.delete(value)`][5]\n\n     Removes the element associated to the `value`. `WeakSet.prototype.has(value)` will return `false` afterwards.\n[`WeakSet.prototype.has(value)`][6]\n\n     Returns a boolean asserting whether an element is present with the given value in the `WeakSet` object or not.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'WeakSet.prototype' in that specification.][7]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n36\n\n</td>  \n<td>\n\n[34][8] (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n23\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n34.0 (34)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n### See also\n\n  * [`Set.prototype`][9]\n  * [`WeakMap.prototype`][10]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/clear\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has\n\n[7]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-weakset.prototype\n\n[8]: /en-US/Firefox/Releases/34\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/prototype\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "WeakSet"], "type": "property"},
{"name": "ArrayBuffer.prototype.byteLength", "parent": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer/arraybuffer.prototype.bytelength", "content": "## Summary\n\nThe `**byteLength**` accessor property represents the length of an\n[`ArrayBuffer`][1] in bytes.\n\n## Syntax\n\n    \n    \n    arraybuffer.byteLength\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function\nis `undefined`, meaning that you can only read this property. The value is\nestablished when the array is constructed and cannot be changed. This property\nreturns 0 if this `ArrayBuffer` has been detached.\n\n## Examples\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    buffer.byteLength; // 8\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][2]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ArrayBuffer.prototype.byteLength' in that\nspecification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][4] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: https://www.khronos.org/registry/typedarray/specs/latest/#5\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-arraybuffer.prototype.bytelength\n\n[4]: /en-US/Firefox/Releases/4\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "ArrayBuffer"], "type": "property"},
{"name": "ArrayBuffer.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer/arraybuffer.prototype", "content": "## Summary\n\nThe **`ArrayBuffer.prototype`** property represents the prototype for the\n[`ArrayBuffer`][1] object.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `ArrayBuffer.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n`ArrayBuffer` instances inherit from `ArrayBuffer.prototype`. As with all\nconstructors, you can change the constructor's prototype object to make\nchanges to all `ArrayBuffer` instances.\n\n## Properties\n\nArrayBuffer.prototype.constructor\n\n     Specifies the function that creates an object's prototype. The initial value is the standard built-in `ArrayBuffer` constructor.\n[`ArrayBuffer.prototype.byteLength`][2] Read only\n\n     The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. **Read only.**\n\n## Methods\n\n[`ArrayBuffer.prototype.slice()`][3]\n\n     Returns a new `ArrayBuffer` whose contents are a copy of this `ArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive. If either `begin` or `end` is negative, it refers to an index from the end of the array, as opposed to from the beginning.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ArrayBuffer.prototype' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n7.0\n\n</td>  \n<td>\n\n[4.0][5] (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n4.0 (2)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n11.6\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer.prototype\n\n[5]: /en-US/Firefox/Releases/4\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "ArrayBuffer"], "type": "property"},
{"name": "ArrayBuffer.prototype.slice()", "parent": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer/arraybuffer.prototype.slice()", "content": "## Summary\n\nThe `**slice()**` method returns a new `ArrayBuffer` whose contents are a copy\nof this `ArrayBuffer`'s bytes from `begin`, inclusive, up to `end`, exclusive.\n\n## Syntax\n\n    \n    \n    arraybuffer.slice(begin[, end])\n\n### Parameters\n\n`begin`\n\n     Zero-based byte index at which to begin slicing.\n\n`end`\n\n     Byte index to end slicing. If end is unspecified, the new `ArrayBuffer` contains all bytes from begin to the end of this `ArrayBuffer`. The range specified by the begin and end values is clamped to the valid index range for the current array. If the computed length of the new `ArrayBuffer` would be negative, it is clamped to zero.\n\n### Return value\n\nA new `ArrayBuffer` object.\n\n## Description\n\nThe `slice` method copies up to, but not including, the byte indicated by the\n`end` parameter. If either `begin` or `end` is negative, it refers to an index\nfrom the end of the array, as opposed to from the beginning.\n\n## Examples\n\n    \n    \n    // Example needed\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Arrays Specification][1]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by EMCAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ArrayBuffer.prototype.slice' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[12][3] (12)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n6\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n12.0 (12)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n6.0\n\n</td> </tr> </table>\n\n## See also\n\n  * [`ArrayBuffer`][4]\n\n[1]: https://www.khronos.org/registry/typedarray/specs/latest/#5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer.prototype.slice\n\n[3]: /en-US/Firefox/Releases/12\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "ArrayBuffer"], "type": "method"},
{"name": "ArrayBuffer.isView()", "parent": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/arraybuffer/arraybuffer.isview()", "content": "## Summary\n\nThe `**ArrayBuffer.isView()**` method returns `true` if `arg` is a view one of\nthe `ArrayBuffer` views, such as [typed array objects][1] or a\n[`DataView`][2]; `false` otherwise.\n\n## Syntax\n\n    \n    \n    ArrayBuffer.isView(arg)\n\n### Parameters\n\n`arg`\n\n     The argument to be checked.\n\n## Examples\n\n    \n    \n    ArrayBuffer.isView();                    // false              \n    ArrayBuffer.isView([]);                  // false\n    ArrayBuffer.isView({});                  // false\n    ArrayBuffer.isView(null);                // false\n    ArrayBuffer.isView(undefined);           // false\n    ArrayBuffer.isView(new ArrayBuffer(10)); // false\n     \n    ArrayBuffer.isView(new Uint8Array());    // true\n    ArrayBuffer.isView(new Float32Array());  // true\n    ArrayBuffer.isView(new Int8Array(10).subarray(0, 3)); // true\n    \n    var buffer = new ArrayBuffer(2);\n    var dv = new DataView(buffer);\n    ArrayBuffer.isView(dv); // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ArrayBuffer.isView' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n[29][5] (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n29.0 (29)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [JavaScript typed arrays][6]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#5\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer.isview\n\n[5]: /en-US/Firefox/Releases/29\n\n[6]: /en-US/docs/Web/JavaScript/Typed_arrays\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "ArrayBuffer"], "type": "method"},
{"name": "DataView.prototype.setFloat64()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setfloat64()", "content": "## Summary\n\nThe `setFloat64()` method stores a signed 64-bit integer (double) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setFloat64(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 64-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setFloat64` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setFloat64(1, 3);\n    dataview.getFloat64(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setFloat64' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setfloat64\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setFloat32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setfloat32()", "content": "## Summary\n\nThe `setFloat32()` method stores a signed 32-bit integer (float) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setFloat32(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setFloat32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setFloat32(1, 3);\n    dataview.getFloat32(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setFloat32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setfloat32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setUint32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setuint32()", "content": "## Summary\n\nThe `setUint32()` method stores an unsigned 32-bit integer (unsigned long)\nvalue at the specified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setUint32(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setUint32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setUint32(1, 3);\n    dataview.getUint32(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setUint32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setuint32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setInt32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setint32()", "content": "## Summary\n\nThe `setInt32()` method stores a signed 32-bit integer (long) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setInt32(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setInt32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setInt32(1, 3);\n    dataview.getInt32(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setInt32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setint32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setUint16()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setuint16()", "content": "## Summary\n\nThe `setUint16()` method stores an unsigned 16-bit integer (unsigned short)\nvalue at the specified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setUint16(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 16-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setUint16` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setUint16(1, 3);\n    dataview.getUint16(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setUint16' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setuint16\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setInt16()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setint16()", "content": "## Summary\n\nThe `setInt16()` method stores a signed 16-bit integer (short) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setInt16(byteOffset, value [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\nlittleEndian\n\n     Optional Indicates whether the 16-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is written.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setInt16` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setInt16(1, 3);\n    dataview.getInt16(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setInt16' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][6] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setint16\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "Map.prototype.forEach()", "parent": "/javascript/javascript_reference/standard_built-in_objects/map", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/foreach", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/map/map.prototype.foreach()", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nThe `**forEach()**` method executes a provided function once per each\nkey/value pair in the `Map` object, in insertion order.\n\n## Syntax\n\n    \n    \n    _myMap_.forEach(_callback_[, _thisArg_])\n\n### Parameters\n\n`callback`\n\n     Function to execute for each element.\n`thisArg`\n\n     Value to use as `this` when executing `callback`.\n\n## Description\n\nThe `forEach` method executes the provided `callback`\u00a0once for each key of the\nmap which actually exist. It is not invoked for keys which have been deleted.\nHowever, it is executed for values which are present but have the value\n`undefined`.\n\n`callback` is invoked with **three arguments**:\n\n  * the **element value**\n  * the **element key**\n  * the **`Map` object being traversed**\n\nIf a `thisArg` parameter is provided to `forEach`, it will be passed to\n`callback` when invoked, for use as its `this` value.\u00a0 Otherwise, the value\n`undefined` will be passed for use as its `this` value.\u00a0 The `this` value\nultimately observable by `callback` is determined according to [the usual\nrules for determining the `this` seen by a function][1].\n\nThe range of elements processed by `forEach` is set before the first\ninvocation of `callback`. Elements which are added to the `Map` object after\nthe call to `forEach` begins will not be visited by `callback`. If existing\nelements of the `Map` object are changed, or deleted, their value as passed to\n`callback` will be the value at the time `forEach` visits them; elements that\nare deleted are not visited.\n\n`forEach` executes the `callback` function once for each element in the `Map`\nobject; it does not return a value.\n\n## Examples\n\n### Printing the contents of a `Map` object\n\nThe following code logs a line for each element in an `Map` object:\n\n    \n    \n    function logMapElements(value, key, map) {\n        console.log(\"m[\" + key + \"] = \" + value);\n    }\n    Map([[\"foo\", 3], [\"bar\", {}], [\"baz\", undefined]]).forEach(logMapElements);\n    // logs:\n    // \"m[foo] = 3\"\n    // \"m[bar] = [object Object]\"\n    // \"m[baz] = undefined\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Map.prototype.forEach' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[25.0][3] (25.0)\n\n</td>  \n<td>\n\n11\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\n7.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n25.0 (25.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\niOS 8\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Array.prototype.forEach()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-map.prototype.foreach\n\n[3]: /en-US/Firefox/Releases/25\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "Map"], "type": "method"},
{"name": "DataView.prototype.setUint8()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setuint8()", "content": "## Summary\n\nThe `setUint8()` method stores an unsigned 8-bit integer (byte) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setUint8(byteOffset, value)\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\n\n### Errors thrown\n\n[`RangeError`][2]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setUint8` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setUint8(1, 3);\n    dataview.getUint8(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setUint8' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][6] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setuint8\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getInt32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getint32()", "content": "## Summary\n\nThe `getInt32()` method gets a signed 32-bit integer (long) at the specified\nbyte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getInt32(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getInt32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getInt32(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getInt32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getint32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.setInt8()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.setint8()", "content": "## Summary\n\nThe `setInt8()` method stores a signed 8-bit integer (byte) value at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.setInt8(byteOffset, value)\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to store the data.\nvalue\n\n     The value to set.\n\n### Errors thrown\n\n[`RangeError`][2]\n\n     Thrown if the `byteOffset` is set such as it would store beyond the end of the view.\n\n## Examples\n\n### Using the `setInt8` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.setInt8(1, 3);\n    dataview.getInt8(1); // 3\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.setInt8' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][6] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.setint8\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getUint16()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getuint16()", "content": "## Summary\n\nThe `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at\nthe specified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getUint16(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 16-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getUint16` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getUint16(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getUint16' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getuint16\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getFloat64()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getfloat64()", "content": "## Summary\n\nThe `getFloat64()` method gets a signed 64-bit float (double) at the specified\nbyte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getFloat64(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 64-bit float is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getFloat64` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getFloat64(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getFloat64' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getfloat64\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getFloat32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getfloat32()", "content": "## Summary\n\nThe `getFloat32()` method gets a signed 32-bit integer (float) at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getFloat32(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getFloat32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getFloat32(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getFloat32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getfloat32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getUint32()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getuint32()", "content": "## Summary\n\nThe `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at\nthe specified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getUint32(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 32-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getUint32` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getUint32(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getUint32' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getuint32\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getInt16()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getint16()", "content": "## Summary\n\nThe `getInt16()` method gets a signed 16-bit integer (short) at the specified\nbyte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getInt16(byteOffset [, littleEndian])\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\nlittleEndian\n\n     Optional Indicates whether the 16-bit int is stored in [little- or big-endian][2] format. If false or undefined, a big-endian value is read.\n\n### Errors thrown\n\n[`RangeError`][3]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getInt16` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getInt16(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][4]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getInt16' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][7] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][8]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Glossary/Endianness\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[4]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getint16\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/Firefox/Releases/15\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.buffer", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.buffer", "content": "## Summary\n\nThe **`buffer`** accessor property represents the [`ArrayBuffer`][1]\nreferenced by the `DataView` at construction time.\n\n## Syntax\n\n    \n    \n    dataview.buffer\n\n## Description\n\nThe `buffer` property is an accessor property whose set accessor function is\n`undefined`, meaning that you can only read this property. The value is\nestablished when the `DataView` is constructed and cannot be changed.\n\n## Examples\n\n### Using the `buffer` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.buffer; // ArrayBuffer { byteLength: 8 }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.buffer' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][3] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][4]\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-dataview.prototype.buffer\n\n[3]: /en-US/Firefox/Releases/15\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "property"},
{"name": "DataView.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype", "content": "## Summary\n\nThe `**DataView**`**`.prototype`** property represents the prototype for the\n[`DataView`][1] object.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `DataView.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\n`DataView` instances inherit from `DataView.prototype`. As with all\nconstructors, you can change the constructor's prototype object to make\nchanges to all `DataView` instances.\n\n## Properties\n\nDataView.prototype.constructor\n\n     Specifies the function that creates an object's prototype. The initial value is the standard built-in `DataView` constructor.\n[`DataView.prototype.buffer`][2] Read only\n\n     The [`ArrayBuffer`][3] referenced by this view. Fixed at construction time and thus **read only.**\n[`DataView.prototype.byteLength`][4] Read only\n\n     The length (in bytes) of this view from the start of its [`ArrayBuffer`][3]. Fixed at construction time and thus **read only.**\n[`DataView.prototype.byteOffset`][5] Read only\n\n     The offset (in bytes) of this view from the start of its [`ArrayBuffer`][3]. Fixed at construction time and thus **read only.**\n\n## Methods\n\n### Read\n\n[`DataView.prototype.getInt8()`][6]\n\n     Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint8()`][7]\n\n     Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.\n[`DataView.prototype.getInt16()`][8]\n\n     Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint16()`][9]\n\n     Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.\n[`DataView.prototype.getInt32()`][10]\n\n     Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.\n[`DataView.prototype.getUint32()`][11]\n\n     Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.\n[`DataView.prototype.getFloat32()`][12]\n\n     Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.\n[`DataView.prototype.getFloat64()`][13]\n\n     Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.\n\n### Write\n\n[`DataView.prototype.setInt8()`][14]\n\n     Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint8()`][15]\n\n     Stores an unsigned 8-bit integer (unsigned byte) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setInt16()`][16]\n\n     Stores a signed 16-bit integer (short) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint16()`][17]\n\n     Stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setInt32()`][18]\n\n     Stores a signed 32-bit integer (long) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setUint32()`][19]\n\n     Stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setFloat32()`][20]\n\n     Stores a signed 32-bit float (float) value at the specified byte offset from the start of the view.\n[`DataView.prototype.setFloat64()`][21]\n\n     Stores a signed 64-bit float (double) value at the specified byte offset from the start of the view.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype' in that specification.][22]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][23] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64\n\n[22]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype\n\n[23]: /en-US/Firefox/Releases/15\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "property"},
{"name": "SyntaxError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/syntaxerror", "content": "## Summary\n\nThe `**SyntaxError**` object represents an error when trying to interpret\nsyntactically invalid code.\n\n## Description\n\nA `SyntaxError` is thrown when the JavaScript engine encounters tokens or\ntoken order that does not conform to the syntax of the language when parsing\ncode.\n\n## Syntax\n\n    \n    \n    new SyntaxError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n    Optional. Human-readable description of the error\n`fileName` _ _\n\n    Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n    Optional. The line number of the code that caused the exception\n\n## Properties\n\n[`SyntaxError.prototype`][1]\n\n    Allows the addition of properties to a `SyntaxError` object.\n\n## Methods\n\nThe global `SyntaxError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `SyntaxError` instances\n\n### Properties\n\n`SyntaxError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`SyntaxError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`SyntaxError`][3] should provide its own `message` property, in [SpiderMonkey][4], it inherits [`Error.prototype.message`][2].\n[`SyntaxError.prototype.name`][5]\n\n     Error name. Inherited from [`Error`][6].\n[`SyntaxError.prototype.fileName`][7]\n\n     Path to file that raised this error. Inherited from [`Error`][6].\n[`SyntaxError.prototype.lineNumber`][8]\n\n     Line number in file that raised this error. Inherited from [`Error`][6].\n[`SyntaxError.prototype.columnNumber`][9]\n\n     Column number in line that raised this error. Inherited from [`Error`][6].\n[`SyntaxError.prototype.stack`][10]\n\n     Stack trace. Inherited from [`Error`][6].\n\n### Methods\n\nAlthough the [`SyntaxError`][3] prototype object does not contain any methods\nof its own, [`SyntaxError`][3] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'SyntaxError' in that specification.][11]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'SyntaxError' in that specification.][12]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][13].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][6]\n  * [`SyntaxError.prototype`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[4]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[11]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.4\n\n[12]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-syntaxerror\n\n[13]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "DataView.prototype.getUint8()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getuint8()", "content": "## Summary\n\nThe `getUint8()` method gets an unsigned 8-bit integer (unsigned byte) at the\nspecified byte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getUint8(byteOffset)\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\n\n### Errors thrown\n\n[`RangeError`][2]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getUint8` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getUint8(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getUint8' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][6] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getuint8\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.getInt8()", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.getint8()", "content": "## Summary\n\nThe `getInt8()` method gets a signed 8-bit integer (byte) at the specified\nbyte offset from the start of the [`DataView`][1].\n\n## Syntax\n\n    \n    \n    dataview.getInt8(byteOffset)\n\n## Parameters\n\nbyteOffset\n\n     The offset, in byte, from the start of the view where to read the data.\n\n### Errors thrown\n\n[`RangeError`][2]\n\n     Thrown if the `byteOffset` is set such as it would read beyond the end of the view.\n\n## Description\n\nThere is no alignment constraint; multi-byte values may be fetched from any\noffset.\n\n## Examples\n\n### Using the `getInt8` method\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.getInt8(1); // 0\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[Typed Array Specification][3]\n\n</td>  \n<td>\n\nObsolete\n\n</td>  \n<td>\n\nSuperseded by ECMAScript 6.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.getInt8' in that specification.][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition in an ECMA standard.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][5].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][6] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][1]\n  * [`ArrayBuffer`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[3]: https://www.khronos.org/registry/typedarray/specs/latest/#8\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-dataview.prototype.getint8\n\n[5]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[6]: /en-US/Firefox/Releases/15\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "method"},
{"name": "DataView.prototype.byteOffset", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.byteoffset", "content": "## Summary\n\nThe **`byteOffset`** accessor property represents the offset (in bytes) of\nthis view from the start of its [`ArrayBuffer`][1].\n\n## Syntax\n\n    \n    \n    dataview.byteOffset\n\n## Description\n\nThe `byteOffset` property is an accessor property whose set accessor function\nis `undefined`, meaning that you can only read this property. The value is\nestablished when an `DataView` is constructed and cannot be changed.\n\n## Examples\n\n### Using the `byteOffset` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.byteOffset; // 0 (no offset specified)\n    \n    var dataview2 = new DataView(buffer, 3);\n    dataview2.byteOffset; // 3 (as specified when constructing the DataView)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.byteOffset' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][3] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][4]\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-dataview.prototype.byteoffset\n\n[3]: /en-US/Firefox/Releases/15\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "property"},
{"name": "DataView.prototype.byteLength", "parent": "/javascript/javascript_reference/standard_built-in_objects/dataview", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/dataview/dataview.prototype.bytelength", "content": "## Summary\n\nThe **`byteLength`** accessor property represents the length (in bytes) of\nthis view from the start of its [`ArrayBuffer`][1].\n\n## Syntax\n\n    \n    \n    dataview.byteLength\n\n## Description\n\nThe `byteLength` property is an accessor property whose set accessor function\nis `undefined`, meaning that you can only read this property. The value is\nestablished when an `DataView` is constructed and cannot be changed. If the\n`DataView` is not specifying an offset or a `byteLength`, the `byteLength` of\nthe referenced `ArrayBuffer` will be returned.\n\n## Examples\n\n### Using the `byteLength` property\n\n    \n    \n    var buffer = new ArrayBuffer(8);\n    var dataview = new DataView(buffer);\n    dataview.byteLength; // 8 (matches the byteLength of the buffer)\n    \n    var dataview2 = new DataView(buffer, 1, 5);\n    dataview2.byteLength; // 5 (as specified when constructing the DataView)\n    \n    var dataview3 = new DataView(buffer, 2);\n    dataview3.byteLength; // 6 (due to the offset of the constructed DataView)\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'DataView.prototype.byteLength' in that specification.][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n9.0\n\n</td>  \n<td>\n\n[15.0][3] (15.0)\n\n</td>  \n<td>\n\n10\n\n</td>  \n<td>\n\n12.1\n\n</td>  \n<td>\n\n5.1\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n4.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n15.0 (15)\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\n12.0\n\n</td>  \n<td>\n\n4.2\n\n</td> </tr> </table>\n\n## See also\n\n  * [`DataView`][4]\n  * [`ArrayBuffer`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-get-dataview.prototype.bytelength\n\n[3]: /en-US/Firefox/Releases/15\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "DataView"], "type": "property"},
{"name": "ReferenceError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/referenceerror", "content": "## Summary\n\nThe `**ReferenceError**` object represents an error when a non-existent\nvariable is referenced.\n\n## Syntax\n\n    \n    \n    new ReferenceError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n     Optional. Human-readable description of the error\n`fileName` _ _\n\n     Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n     Optional. The line number of the code that caused the exception\n\n## Description\n\nA `ReferenceError` is thrown when trying to dereference a variable that has\nnot been declared.\n\n## Properties\n\n[`ReferenceError.prototype`][1]\n\n     Allows the addition of properties to an `ReferenceError` object.\n\n## Methods\n\nThe global `ReferenceError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `ReferenceError` instances\n\n### Properties\n\n`ReferenceError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`ReferenceError.prototype.message`][2]\n\n     Error name. Although ECMA-262 specifies that `ReferenceError` should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`ReferenceError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`ReferenceError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n### Methods\n\nAlthough the `ReferenceError` prototype object does not contain any methods of\nits own, `ReferenceError` instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'ReferenceError' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'ReferenceError' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][5]\n  * [`ReferenceError.prototype`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.3\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-referenceerror\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "RangeError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/rangeerror", "content": "## Summary\n\nThe `**RangeError**` object indicates an error when a value is not in the set\nor range of allowed values.\n\n## Syntax\n\n    \n    \n    new RangeError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n    Optional. Human-readable description of the error\n`fileName` _ _\n\n    Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n    Optional. The line number of the code that caused the exception\n\n## Description\n\nA `RangeError` is thrown when trying to pass a number as an argument to a\nfunction that does not allow a range that includes that number. This can be\nencountered when to create an array of an illegal length with the [`Array`][1]\nconstructor, or when passing bad values to the numeric methods\n[`Number.toExponential()`][2], [`Number.toFixed()`][3] or\n[`Number.toPrecision()`][4].\n\n## Properties\n\n[`RangeError.prototype`][5]\n\n    Allows the addition of properties to an `RangeError` object.\n\n## Methods\n\nThe global `RangeError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `RangeError` instances\n\n### Properties\n\n`RangeError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`RangeError.prototype.message`][6]\n\n     Error message. Although ECMA-262 specifies that [`RangeError`][7] should provide its own `message` property, in [SpiderMonkey][8], it inherits [`Error.prototype.message`][6].\n[`RangeError.prototype.name`][9]\n\n     Error name. Inherited from [`Error`][10].\n[`RangeError.prototype.fileName`][11]\n\n     Path to file that raised this error. Inherited from [`Error`][10].\n[`RangeError.prototype.lineNumber`][12]\n\n     Line number in file that raised this error. Inherited from [`Error`][10].\n[`RangeError.prototype.columnNumber`][13]\n\n     Column number in line that raised this error. Inherited from [`Error`][10].\n[`RangeError.prototype.stack`][14]\n\n     Stack trace. Inherited from [`Error`][10].\n\n### Methods\n\nAlthough the [`RangeError`][7] prototype object does not contain any methods\nof its own, [`RangeError`][7] instances do inherit some methods through the\nprototype chain.\n\n## Examples\n\n### Example: Using `RangeError`\n\n    \n    \n    var check = function(num) {\n      if (num < MIN || num > MAX) {\n        throw new RangeError('Parameter must be between ' + MIN + ' and ' + MAX);\n      }\n    };\n    \n    try {\n      check(500);\n    }\n    catch (e) {\n      if (e instanceof RangeError) {\n        // Handle range error\n      }\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'RangeError' in that specification.][15]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'RangeError' in that specification.][16]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][17].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][10]\n  * [`RangeError.prototype`][5]\n  * [`Array`][1]\n  * [`Number.toExponential()`][2]\n  * [`Number.toFixed()`][3]\n  * [`Number.toPrecision()`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/prototype\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[8]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[15]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.2\n\n[16]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-rangeerror\n\n[17]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "InternalError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/internalerror", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe **`InternalError` object** indicates an error that occured internally in\nthe JavaScript engine. For example: **\"InternalError**: too much recursion\".\n\n## Syntax\n\n    \n    \n    new InternalError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n    Optional. Human-readable description of the error\n`fileName` _ _\n\n    Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n    Optional. The line number of the code that caused the exception\n\n## Description\n\nAn `InternalError` is thrown whenever an internal error in the JavaScript\nengine occured.\n\n## Properties\n\n[`InternalError.prototype`][1]\n\n    Allows the addition of properties to an `InternalError` object.\n\n## Methods\n\nThe global `InternalError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `InternalError` instances\n\n### Properties\n\n`InternalError.prototype.constructor`\n\n    Specifies the function that created an instance's prototype.\n[`InternalError.prototype.message`][2]\n\n    Error message. Inherited from [`Error`][3].\n[`InternalError.prototype.name`][4]\n\n    Error name. Inherited from [`Error`][3].\n[`InternalError.prototype.fileName`][5]\n\n    Path to file that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.lineNumber`][6]\n\n    Line number in file that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.columnNumber`][7]\n\n    Column number in line that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.stack`][8]\n\n    Stack trace. Inherited from [`Error`][3].\n\n### Methods\n\nAlthough the [`InternalError`][9] prototype object does not contain any\nmethods of its own, [`InternalError`][9] instances do inherit some methods\nthrough the prototype chain.\n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][10].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][3]\n  * [`InternalError.prototype`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[10]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "EvalError", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/evalerror", "content": "## Summary\n\nThe `**EvalError**` object indicates an error regarding the global\n[`eval()`][1] function.\n\n## Syntax\n\n    \n    \n    new EvalError([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n    Optional. Human-readable description of the error\n`fileName` _ _\n\n    Optional. The name of the file containing the code that caused the exception\n`lineNumber` _ _\n\n    Optional. The line number of the code that caused the exception\n\n## Description\n\nAn `EvalError` is thrown when the global [`eval()`][1] function is used\nimproperly.\n\n## Properties\n\n[`EvalError.prototype`][2]\n\n    Allows the addition of properties to an `EvalError` object.\n\n## Methods\n\nThe global `EvalError` contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `EvalError` instances\n\n### Properties\n\n`EvalError.prototype.constructor`\n\n    Specifies the function that created an instance's prototype.\n[`EvalError.prototype.message`][3]\n\n    Error message. Although ECMA-262 specifies that [`EvalError`][4] should provide its own `message` property, in [SpiderMonkey][5], it inherits [`Error.prototype.message`][3].\n[`EvalError.prototype.name`][6]\n\n    Error name. Inherited from [`Error`][7].\n[`EvalError.prototype.fileName`][8]\n\n    Path to file that raised this error. Inherited from [`Error`][7].\n[`EvalError.prototype.lineNumber`][9]\n\n    Line number in file that raised this error. Inherited from [`Error`][7].\n[`EvalError.prototype.columnNumber`][10]\n\n    Column number in line that raised this error. Inherited from [`Error`][7].\n[`EvalError.prototype.stack`][11]\n\n    Stack trace. Inherited from [`Error`][7].\n\n### Methods\n\nAlthough the [`EvalError`][4] prototype object does not contain any methods of\nits own, [`EvalError`][4] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'EvalError' in that specification.][12]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nNot used in this specification. Present for backward compatibility.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'EvalError' in that specification.][13]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nNot used in this specification. Present for backward compatibility.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][14].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error`][7]\n  * [`EvalError.prototype`][2]\n  * [`eval()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_objects/eval\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[5]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[12]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.6.1\n\n[13]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-native-error-types-used-in-this-standard-evalerror\n\n[14]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Error", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/error", "content": "## Summary\n\nThe **`Error`** constructor creates an error object. Instances of `Error`\nobjects are thrown when runtime errors occur. The `Error` object can also be\nused as a base objects for user-defined exceptions. See below for standard\nbuilt-in error types.\n\n## Syntax\n\n    \n    \n    new Error([message[, fileName[, lineNumber]]])\n\n### Parameters\n\n`message`\n\n    Optional. Human-readable description of the error.\n`fileName` _ _\n\n    Optional. The value for the `fileName` property on the created `Error` object. Defaults to the name of the file containing the code that called the `Error()` constructor.\n`lineNumber` _ _\n\n    Optional. The value for the `lineNumber` property on the created `Error` object. Defaults to the line number containing the `Error()` constructor invocation.\n\n## Description\n\nRuntime errors result in new `Error` objects being created and thrown.\n\nThis page documents the use of the `Error` object itself and its use as a\nconstructor function. For a list of properties and methods inherited by\n`Error` instances, see [`Error.prototype`][1].\n\n### Error types\n\nBesides the generic `Error` constructor, there are six other core error\nconstructors in JavaScript. For client-side exceptions, see [Exception\nHandling Statements][2].\n\n[`EvalError`][3]\n\n    Creates an instance representing an error that occurs regarding the global function [`eval()`][4].\n[`InternalError`][5] _ _\n\n    Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. E.g. \"too much recursion\".\n[`RangeError`][6]\n\n    Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.\n[`ReferenceError`][7]\n\n    Creates an instance representing an error that occurs when de-referencing an invalid reference.\n[`SyntaxError`][8]\n\n    Creates an instance representing a syntax error that occurs while parsing code in [`eval()`][4].\n[`TypeError`][9]\n\n    Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.\n[`URIError`][10]\n\n    Creates an instance representing an error that occurs when [`encodeURI()`][11] or [`decodeURl()`][12] are passed invalid parameters.\n\n## Properties\n\n[`Error.prototype`][1]\n\n    Allows the addition of properties to `Error` instances.\n\n## Methods\n\nThe global `Error` object contains no methods of its own, however, it does\ninherit some methods through the prototype chain.\n\n## `Error` instances\n\nAll [`Error`][13] instances and instances of [non-generic errors][14] inherit\nfrom [`Error.prototype`][1]. As with all constructor functions, you can use\nthe prototype of the constructor to add properties or methods to all instances\ncreated with that constructor.\n\n### Properties\n\n### Standard properties\n\n`Error.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`Error.prototype.message`][15]\n\n     Error message.\n[`Error.prototype.name`][16]\n\n     Error name.\n\n### Vendor-specific extensions\n\n**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n#### Microsoft\n\n[`Error.prototype.description`][17]\n\n     Error description. Similar to [`message`][15].\n[`Error.prototype.number`][18]\n\n     Error number.\n\n#### Mozilla\n\n[`Error.prototype.fileName`][19]\n\n     Path to file that raised this error.\n[`Error.prototype.lineNumber`][20]\n\n     Line number in file that raised this error.\n[`Error.prototype.columnNumber`][21]\n\n     Column number in line that raised this error.\n[`Error.prototype.stack`][22]\n\n     Stack trace.\n\n### Methods\n\n[`Error.prototype.toSource()`][23] _ _\n\n     Returns a string containing the source of the specified [`Error`][13] object; you can use this value to create a new object. Overrides the [`Object.prototype.toSource()`][24] method.\n[`Error.prototype.toString()`][25]\n\n     Returns a string representing the specified object. Overrides the [`Object.prototype.toString()`][26] method.\n\n## Examples\n\n### Example: Throwing a generic error\n\nUsually you create an `Error` object with the intention of raising it using\nthe [`throw`][27] keyword. You can handle the error using the\n[`try...catch`][28] construct:\n\n    \n    \n    try {\n      throw new Error('Whoops!');\n    } catch (e) {\n      alert(e.name + ': ' + e.message);\n    }\n    \n\n### Example: Handling a specific error\n\nthis should probably be removed You can choose to handle only specific error\ntypes by testing the error type with the error's [`constructor`][29] property\nor, if you're writing for modern JavaScript engines, [`instanceof`][30]\nkeyword:\n\n    \n    \n    try {\n      foo.bar();\n    } catch (e) {\n      if (e instanceof EvalError) {\n        alert(e.name + ': ' + e.message);\n      } else if (e instanceof RangeError) {\n        alert(e.name + ': ' + e.message);\n      }\n      // ... etc\n    }\n    \n\n### Example: Custom Error Types\n\nYou might want to define your own error types deriving from `Error` to be able\nto `throw new MyError()` and use `instanceof MyError` to check the kind of\nerror in the exception handler. The common way to do this is demonstrated\nbelow.\n\nNote that the thrown `MyError` will report incorrect `lineNumber` and\n`fileName` at least in Firefox.\n\nSee also the [\"What's a good way to extend Error in JavaScript?\" discussion on\nStackoverflow][31].\n\n    \n    \n    // Create a new object, that prototypally inherits from the Error constructor.\n    function MyError(message) {\n      this.name = 'MyError';\n      this.message = message || 'Default Message';\n    }\n    MyError.prototype = new Error();\n    MyError.prototype.constructor = MyError;\n    \n    try {\n      throw new MyError();\n    } catch (e) {\n      console.log(e.name);     // 'MyError'\n      console.log(e.message);  // 'Default Message'\n    }\n    \n    try {\n      throw new MyError('custom message');\n    } catch (e) {\n      console.log(e.name);     // 'MyError'\n      console.log(e.message);  // 'custom message'\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.1.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Error' in that specification.][32]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Error' in that specification.][33]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][34].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][1]\n  * [`throw`][27]\n  * [`try...catch`][28]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Statements#Exception_Handling_Statements\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ErrorError_types\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/description\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/number\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toSource\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Statements/throw\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Statements/try...catch\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[31]: http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript\n\n[32]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11\n\n[33]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-error-objects\n\n[34]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Symbol", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/symbol", "content": "**This is an experimental technology, part of the Harmony (ECMAScript 6) proposal.**  \nBecause this technology's specification has not stabilized, check the\ncompatibility table for usage in various browsers. Also note that the syntax\nand behavior of an experimental technology is subject to change in future\nversion of browsers as the spec changes.\n\n## Summary\n\nA **symbol** is a unique and immutable data type and may be used as an\nidentifier for object properties. The _symbol object_ is an implicit object\nwrapper for the symbol [primitive data type][1].\n\n## Syntax\n\n    \n    \n    Symbol(_[description]_)\n\n### Parameters\n\n`description` Optional\n\n     Optional, string. A description of the symbol which can be used for debugging but not to access the symbol itself.\n\n## Description\n\nTo create a new primitive symbol, you simply write `Symbol()` with an optional\nstring as its description:\n\n    \n    \n    var sym1 = Symbol();\n    var sym2 = Symbol(\"foo\");\n    var sym3 = Symbol(\"foo\");\n    \n\nThe above code creates three new symbols. Note that `Symbol(\"foo\")` does not\ncoerce the string \"foo\" into a symbol. It creates a new symbol each time:\n\n    \n    \n    Symbol(\"foo\") === Symbol(\"foo\"); // false\n\nThe following syntax with the [`new`][2] operator will throw a\n[`TypeError`][3]:\n\n    \n    \n    var sym = new Symbol(); // TypeError\n\nThis prevents authors from creating an explicit `Symbol` wrapper object\ninstead of a new symbol value. Creating an explicit wrapper object around\nprimitive data types is no longer supported starting with ECMAScript 6.\nHowever, existing primitive wrapper objects like `new Boolean`, `new String`\nand `new Number` can still be created for legacy reasons.\n\nAnd if you really want to create a `Symbol` wrapper object, you can use\n`Object()` function:\n\n    \n    \n    var sym = Symbol(\"foo\");\n    typeof sym;     // \"symbol\" \n    var symObj = Object(sym);\n    typeof symObj;  // \"object\"\n    \n\n### Shared symbols in the global symbol registry\n\nThe above syntax using the `Symbol()` function will not create a global symbol\nthat is available in your whole codebase. To create symbols available across\nfiles and in a global scope-like environment, use the methods\n[`Symbol.for()`][4] and [`Symbol.keyFor()`][5] to set and retrieve symbols\nfrom the global symbol registry.\n\n### Finding symbol properties on objects\n\nThe method [`Object.getOwnPropertySymbols()`][6] returns an array of symbols\nand lets you find symbol properties on a given object. Note that every object\nis initialized with no own symbol properties, so that this array will be empty\nunless you've set symbol properties on the object.\n\n## Properties\n\n`Symbol.length`\n\n     Length property whose value is 1.\n[`Symbol.prototype`][7]\n\n     Represents the prototype for the `Symbol` constructor.\n\n### Well-known symbols\n\nIn addition to your own symbols, JavaScript has some built-in symbols which\nrepresent internal language behaviors which were not exposed to developers in\nECMAScript 5 and before. These symbols can be accessed using the following\nproperties:\n\nSymbol.hasInstance\n\n     Specified as @@hasInstance. A method determining if a constructor object recognizes an object as its instance. Used by [`instanceof`][8].\nSymbol.isConcatSpreadable\n\n     Specified as @@isConcatSpreadable. A Boolean value indicating if an object should by flatten to its array elements by [`Array.prototype.concat()`][9].\nSymbol.isRegExp\n\n     Specified as @@isRegExp. A Boolean value indicating if an object may be used as a regular expression.\nSymbol.iterator\n\n     Specified as @@iterator. A method returning the default iterator for an object. Used by [`for...of`][10].\nSymbol.toPrimitive\n\n     Specified as @@toPrimitive. A method converting an object to a primitive value.\nSymbol.toStringTag\n\n     Specified as @@toStringTag. A string value used for the default description of an object. Used by [`Object.prototype.toString()`][11]\nSymbol.unscopables\n\n     Specified as @@unscopables. An Array of string values that are property values. These are excluded from the with environment bindings of the associated objects.\n\n## Methods\n\n[`Symbol.for(key)`][4]\n\n     Searches for existing symbols with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.\n[`Symbol.keyFor(sym)`][5]\n\n     Retrieves a shared symbol key from the global symbol registry for the given symbol.\n\n## `Symbol` prototype\n\nAll Symbols inherit from [`Symbol.prototype`][7].\n\n### Properties\n\n`Symbol.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Symbol`][12] function by default.\n\n### Methods\n\n[`Symbol.prototype.toSource()`][13] _ _\n\n     Returns a string containing the source of the [`Symbol`][12] object. Overrides the [`Object.prototype.toSource()`][14] method.\n[`Symbol.prototype.toString()`][15]\n\n     Returns a string of containing the description of the Symbol. Overrides the [`Object.prototype.toString()`][11] method.\n[`Symbol.prototype.valueOf()`][16]\n\n     Returns the primitive value of the [`Symbol`][12] object. Overrides the [`Object.prototype.valueOf()`][17] method.\n\n## Examples\n\n### Using the `typeof` operator with symbols\n\nThe [`typeof`][18] operator can help you to identify symbols.\n\n    \n    \n    typeof Symbol() === 'symbol'\n    typeof Symbol('foo') === 'symbol'\n    typeof Symbol.iterator === 'symbol'\n    \n\n### Symbol type conversions\n\nSome things to note when working with type conversion of symbols.\n\n  * When trying to convert a symbol to a number, a [`TypeError`][3] will be thrown  \n(e.g. `+sym` or `sym | 0`).\n\n  * When using loose equality, `Object(sym) == sym` returns `true.`\n  * `Symbol(\"foo\") + \"bar\" `throws a [`TypeError`][3] (can't convert symbol to string). This prevents you from silently creating a new string property name from a symbol, for example.\n  * The [\"safer\" `String(sym)` conversion][19] works like a call to [`Symbol.prototype.toString()`][15] with symbols, but note that\u00a0`new String(sym)` will throw.\n\n### Symbols and `for...in` iteration\n\nSymbols are not visible in [`for...in`][20] iterations. In addition,\n[`Object.getOwnPropertyNames()`][21] will not return symbol object properties,\nhowever, you can use [`Object.getOwnPropertySymbols()`][6] to get these.\n\n    \n    \n    var obj = {};\n    \n    obj[Symbol(\"a\")] = \"a\";\n    obj[Symbol.for(\"b\")] = \"b\";\n    obj[\"c\"] = \"c\";\n    obj.d = \"d\";\n    \n    for (var i in obj) {\n       console.log(i); // logs \"c\" and \"d\"\n    }\n\n### Symbols and `JSON.stringify()`\n\nSymbol-keyed properties will be completely ignored when using\n`JSON.stringify()`:\n\n    \n    \n    JSON.stringify({[Symbol(\"foo\")]: \"foo\"});                 \n    // '{}'\n\nFor more details, see [`JSON.stringify()`][22].\n\n### Symbol wrapper objects as property keys\n\nWhen a Symbol wrapper object is used as a property key, this object will be\ncoerced to its wrapped symbol:\n\n    \n    \n    var sym = Symbol(\"foo\");\n    var obj = {[sym]: 1};\n    obj[sym];            // 1\n    obj[Object(sym)];    // still 1\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Symbol' in that specification.][23]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n[33.0][24] (33.0) [1]\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nSymbol.iterator (@@iterator)\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nSymbol.unscopables (@@unscopables)\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nOther well-known symbols\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nSymbol.iterator (@@iterator)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n33.0 (33.0)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nSymbol.unscopables (@@unscopables)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n38\n\n</td>  \n<td>\n\n?\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n25\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr>  \n<tr>  \n<td>\n\nOther well-known symbols\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n[1] Symbols are only available in the Nightly channel for now ([bug\n1041631][25]).\n\n## See also\n\n  * [Glossary: Symbol data type][26]\n  * [`typeof`][18]\n  * [Data types and data structures][27]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/new\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/prototype\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Statements/for...of\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toSource\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Statements/for...in\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n[23]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-symbol-objects\n\n[24]: /en-US/Firefox/Releases/33\n\n[25]: https://bugzilla.mozilla.org/show_bug.cgi?id=1041631\n\n[26]: /en-US/docs/Glossary/Symbol\n\n[27]: /en-US/docs/Web/JavaScript/Data_structures\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Boolean", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/boolean", "content": "## Summary\n\nThe **`Boolean`** object is an object wrapper for a boolean value.\n\n## Constructor\n\n    \n    \n    new Boolean([value])\n\n### Parameters\n\n`value`\n\n    Optional. The initial value of the `Boolean` object.\n\n## Description\n\nThe value passed as the first parameter is converted to a boolean value, if\nnecessary. If value is omitted or is `0`, `-0`, [`null`][1], `false`,\n[`NaN`][2], [`undefined`][3], or the empty string (`\"\"`), the object has an\ninitial value of `false`. All other values, including any object or the string\n`\"false\"`, create an object with an initial value of `true`.\n\nDo not confuse the primitive `Boolean` values `true` and `false` with the\n`true` and `false` values of the `Boolean` object.\n\nAny object whose value is not [`undefined`][3] or [`null`][1], including a\n`Boolean` object whose value is `false`, evaluates to `true` when passed to a\nconditional statement. For example, the condition in the following [`if`][4]\nstatement evaluates to `true`:\n\n    \n    \n    x = new Boolean(false);\n    if (x) {\n      // this code is executed\n    }\n    \n\nThis behavior does not apply to `Boolean` primitives. For example, the\ncondition in the following [`if`][4] statement evaluates to `false`:\n\n    \n    \n    x = false;\n    if (x) {\n      // this code is not executed\n    }\n    \n\nDo not use a `Boolean` object to convert a non-boolean value to a boolean\nvalue. Instead, use `Boolean` as a function to perform this task:\n\n    \n    \n    x = Boolean(expression);     // preferred\n    x = new Boolean(expression); // don't use\n    \n\nIf you specify any object, including a `Boolean` object whose value is\n`false`, as the initial value of a `Boolean` object, the new `Boolean` object\nhas a value of `true`.\n\n    \n    \n    myFalse = new Boolean(false);   // initial value of false\n    g = new Boolean(myFalse);       // initial value of true\n    myString = new String('Hello'); // string object\n    s = new Boolean(myString);      // initial value of true\n    \n\nDo not use a `Boolean` object in place of a `Boolean` primitive.\n\n## Properties\n\n_For properties available on `Boolean` instances, see [Properties of Boolean\ninstances][5]._\n\n`Boolean.length`\n\n    Length property whose value is 1.\n[`Boolean.prototype`][6]\n\n    Represents the prototype for the `Boolean` constructor.\n\nProperties inherited from [`Function`][7]:\n\n[`arity`][8], [`caller`][9], [`constructor`][10], [`length`][11], [`name`][12]\n\n## Methods\n\n_For methods available on `Boolean` instances, see [Methods of Boolean\ninstances][13]._\n\nThe global `Boolean` object contains no methods of its own, however, it does\ninherit some methods through the prototype chain:\n\nMethods inherited from [`Function`][7]:\n\n[`apply`][14], [`call`][15], [`toSource`][16], [`toString`][17]\n\n## `Boolean` instances\n\nAll `Boolean` instances inherit from [`Boolean.prototype`][6]. As with all\nconstructors, the prototype object dictates instances' inherited properties\nand methods.\n\n### Properties\n\n`Boolean.prototype.constructor`\n\n     Returns the function that created an instance's prototype. This is the [`Boolean`][18] function by default.\n\nProperties inherited from [`Object`][19]:\n\n[`__parent__`][20], [`__proto__`][21]\n\n### Methods\n\n[`Boolean.prototype.toSource()`][22] _ _\n\n     Returns a string containing the source of the [`Boolean`][18] object; you can use this string to create an equivalent object. Overrides the [`Object.prototype.toSource()`][23] method.\n[`Boolean.prototype.toString()`][24]\n\n     Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the [`Object.prototype.toString()`][25] method.\n[`Boolean.prototype.valueOf()`][26]\n\n     Returns the primitive value of the [`Boolean`][18] object. Overrides the [`Object.prototype.valueOf()`][27] method.\n\nMethods inherited from [`Object`][19]:\n\n[`__defineGetter__`][28], [`__defineSetter__`][29], [`hasOwnProperty`][30],\n[`isPrototypeOf`][31], [`__lookupGetter__`][32], [`__lookupSetter__`][33],\n[`__noSuchMethod__`][34], [`propertyIsEnumerable`][35],\n[`toLocaleString`][36], [`unwatch`][37], [`watch`][38]\n\n## Examples\n\n### Example: Creating `Boolean` objects with an initial value of `false`\n\n    \n    \n    var bNoParam = new Boolean();\n    var bZero = new Boolean(0);\n    var bNull = new Boolean(null);\n    var bEmptyString = new Boolean('');\n    var bfalse = new Boolean(false);\n    \n\n### Example: Creating `Boolean` objects with an initial value of `true`\n\n    \n    \n    var btrue = new Boolean(true);\n    var btrueString = new Boolean('true');\n    var bfalseString = new Boolean('false');\n    var bSuLin = new Boolean('Su Lin');\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Boolean' in that specification.][39]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Boolean' in that specification.][40]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][41].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n6.0\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Boolean.prototype`][6]\n  * [Boolean data type (Wikipedia)][42]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Statements/if...else\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype#Properties\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/prototype#Methods\n\n[14]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[15]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[16]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[17]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[19]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[20]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[21]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toSource\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[35]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[36]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[37]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[38]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[39]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.6\n\n[40]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-boolean-objects\n\n[41]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[42]: http://en.wikipedia.org/wiki/Boolean_data_type\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Function", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/function", "content": "## Summary\n\nThe **`Function` constructor** creates a new `Function` object. In JavaScript\nevery function is actually a `Function` object.\n\n## Constructor\n\n    \n    \n    new Function ([arg1[, arg2[, ...argN]],] functionBody)\n\n### Parameters\n\n`arg1, arg2, ... arg_N_`\n\n    Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example \"`x`\", \"`theValue`\", or \"`a,b`\".\n`functionBody`\n\n    A string containing the JavaScript statements comprising the function definition.\n\n## Description\n\n`Function` objects created with the `Function` constructor are parsed when the\nfunction is created. This is less efficient than declaring a function and\ncalling it within your code, because functions declared with the function\nstatement are parsed with the rest of the code.\n\nAll arguments passed to the function are treated as the names of the\nidentifiers of the parameters in the function to be created, in the order in\nwhich they are passed.\n\n**Note:** Functions created with the `Function` constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the `Function` constructor was called. This is different from using [`eval`][1] with code for a function expression.\n\nInvoking the `Function` constructor as a function (without using the `new`\noperator) has the same effect as invoking it as a constructor.\n\n## Properties and Methods of `Function`\n\nThe global `Function` object has no methods or properties of its own, however,\nsince it is a function itself it does inherit some methods and properties\nthrough the prototype chain from [`Function.prototype`][2].\n\n## `Function` prototype object\n\n### Properties\n\n[`Function.arguments`][3] _ _\n\n     An array corresponding to the arguments passed to a function. This is deprecated as property of `Function`, use the [`arguments`][4] object available within the function instead.\n<s>[`Function.arity`][5] _ _</s>\n\n     <s>Used to specifiy the number of arguments expected by the function, but has been removed. Use the [`length`][6] property instead.</s>\n[`Function.caller`][7] _ _\n\n     Specifies the function that invoked the currently executing function.\n[`Function.length`][6]\n\n     Specifies the number of arguments expected by the function.\n[`Function.name`][8] _ _\n\n     The name of the function.\n[`Function.displayName`][9] _ _\n\n     The display name of the function.\nFunction.prototype.constructor\n\n     Specifies the function that creates an object's prototype. See [`Object.constructor`][10] for more details.\n\nProperties inherited from [`Object`][11]:\n\n[`__parent__`][12], [`__proto__`][13]\n\n### Methods\n\n[`Function.prototype.apply()`][14]\n\n     Applies the method of another object in the context of a different object (the calling object); arguments can be passed as an Array object.\n[`Function.prototype.bind()`][15]\n\n     Creates a new function which, when called, itself calls this function in the context of the provided value, with a given sequence of arguments preceding any provided when the new function was called.\n[`Function.prototype.call()`][16]\n\n     Calls (executes) a method of another object in the context of a different object (the calling object); arguments can be passed as they are.\n[`Function.prototype.isGenerator()`][17] _ _\n\n     Returns `true` if the function is a [generator][18]; otherwise returns `false`.\n[`Function.prototype.toSource()`][19] _ _\n\n     Returns a string representing the source code of the function. Overrides the [`Object.toSource`][20] method.\n[`Function.prototype.toString()`][21]\n\n     Returns a string representing the source code of the function. Overrides the [`Object.toString`][22] method.\n\nMethods inherited from [`Object`][11]:\n\n[`__defineGetter__`][23], [`__defineSetter__`][24], [`hasOwnProperty`][25],\n[`isPrototypeOf`][26], [`__lookupGetter__`][27], [`__lookupSetter__`][28],\n[`__noSuchMethod__`][29], [`propertyIsEnumerable`][30],\n[`toLocaleString`][31], [`unwatch`][32], [`valueOf`][33], [`watch`][34]\n\n## `Function` instances\n\n`Function` instances inherit methods and properties from\n[`Function.prototype`][2]. As with all constructors, you can change the\nconstructor's prototype object to make changes to all `Function` instances.\n\n## Examples\n\n### Example: Specifying arguments with the `Function` constructor\n\nThe following code creates a `Function` object that takes two arguments.\n\n    \n    \n    // Example can be run directly in your JavaScript console\n    \n    // Create a function that takes two arguments and returns the sum of those arguments\n    var adder = new Function('a', 'b', 'return a + b');\n    \n    // Call the function\n    adder(2, 6);\n    // > 8\n    \n\nThe arguments \"`a`\" and \"`b`\" are formal argument names that are used in the\nfunction body, \"`return a + b`\".\n\n### Example: A recursive shortcut to massively modify the DOM\n\nCreating functions with the `Function` constructor is one of the ways to\ndynamically create an indeterminate number of new objects with some executable\ncode into the global scope from a function. The following example (a recursive\nshortcut to massively modify the DOM) is impossible without the invocation of\nthe `Function` constructor for each new query if you want to avoid closures.\n\n    \n    \n    <!doctype html>\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>MDN Example - a recursive shortcut to massively modify the DOM</title>\n    <script type=\"text/javascript\">\n    var domQuery = (function() {\n      var aDOMFunc = [\n        Element.prototype.removeAttribute,\n        Element.prototype.setAttribute,\n        CSSStyleDeclaration.prototype.removeProperty,\n        CSSStyleDeclaration.prototype.setProperty\n      ];\n    \n      function setSomething(bStyle, sProp, sVal) {\n        var bSet = Boolean(sVal), fAction = aDOMFunc[bSet | bStyle << 1],\n            aArgs = Array.prototype.slice.call(arguments, 1, bSet ? 3 : 2),\n            aNodeList = bStyle ? this.cssNodes : this.nodes;\n    \n        if (bSet && bStyle) { aArgs.push(''); }\n        for (\n          var nItem = 0, nLen = this.nodes.length;\n          nItem < nLen;\n          fAction.apply(aNodeList[nItem++], aArgs)\n        );\n        this.follow = setSomething.caller;\n        return this;\n      }\n    \n      function setStyles(sProp, sVal) { return setSomething.call(this, true, sProp, sVal); }\n      function setAttribs(sProp, sVal) { return setSomething.call(this, false, sProp, sVal); }\n      function getSelectors() { return this.selectors; };\n      function getNodes() { return this.nodes; };\n    \n      return (function(sSelectors) {\n        var oQuery = new Function('return arguments.callee.follow.apply(arguments.callee, arguments);');\n        oQuery.selectors = sSelectors;\n        oQuery.nodes = document.querySelectorAll(sSelectors);\n        oQuery.cssNodes = Array.prototype.map.call(oQuery.nodes, function(oInlineCSS) { return oInlineCSS.style; });\n        oQuery.attributes = setAttribs;\n        oQuery.inlineStyle = setStyles;\n        oQuery.follow = getNodes;\n        oQuery.toString = getSelectors;\n        oQuery.valueOf = getNodes;\n        return oQuery;\n      });\n    })();\n    </script>\n    </head>\n    \n    <body>\n    \n    <div class=\"testClass\">Lorem ipsum</div>\n    <p>Some text</p>\n    <div class=\"testClass\">dolor sit amet</div>\n    \n    <script type=\"text/javascript\">\n    domQuery('.testClass')\n      .attributes('lang', 'en')('title', 'Risus abundat in ore stultorum')\n      .inlineStyle('background-color', 'black')('color', 'white')('width', '100px')('height', '50px');\n    </script>\n    </body>\n    \n    </html>\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.0.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Function' in that specification.][35]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Function' in that specification.][36]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][37].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [function Expression][38]\n  * [function Statement][39]\n  * [Functions and function scope][40]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arguments\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/arity\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/displayName\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[12]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Parent\n\n[13]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Proto\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator\n\n[18]: /en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toSource\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[23]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineGetter\n\n[24]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/DefineSetter\n\n[25]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/HasOwnProperty\n\n[26]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/IsPrototypeOf\n\n[27]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupGetter\n\n[28]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/LookupSetter\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/NoSuchMethod\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/PropertyIsEnumerable\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ToLocaleString\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Unwatch\n\n[33]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/ValueOf\n\n[34]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Watch\n\n[35]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.3\n\n[36]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-function-objects\n\n[37]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Operators/function\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Statements/function\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Object", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/object", "content": "## Summary\n\nThe `**Object**` constructor creates an object wrapper.\n\n## Constructor\n\n    \n    \n    // Object initialiser or literal\n    { _[ nameValuePair1 [, nameValuePair2 [, ...nameValuePairN] ] ]_ }\n    \n    // Called as a constructor\n    new Object( _[ value ]_ )\n\n### Parameters\n\nnameValuePair1, nameValuePair2, ... nameValuePairN\n\n     Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.\n\nvalue\n\n     Any value.\n\n## Description\n\nThe `Object` constructor creates an object wrapper for the given value. If the\nvalue is `null` or [`undefined`][1], it will create and return an empty\nobject, otherwise, it will return an object of a Type that corresponds to the\ngiven value. If the value is an object already, it will return the value.\n\nWhen called in a non-constructor context, `Object` behaves identically to `new\nObject()`.\n\nSee also the [object initializer / literal syntax][2].\n\n## Properties of the `Object` constructor\n\n_For properties available on `Object` instances, see [Properties of Object\ninstances][3]._\n\n`Object.length`\n\n     Has a value of 1.\n[`Object.prototype`][4]\n\n     Allows the addition of properties to all objects of type Object.\n\nProperties inherited from [`Function`][5]:\n\n[`arity`][6], [`caller`][7], [`constructor`][8], [`length`][9], [`name`][10]\n\n## Methods of the `Object` constructor\n\n_For methods available on `Object` instances, see [Methods of Object\ninstances][11]._\n\n[`Object.assign()`][12] _ _\n\n     Creates a new object by copying the values of all enumerable own properties from one or more source objects to a target object.\n[`Object.create()`][13]\n\n     Creates a new object with the specified prototype object and properties.\n[`Object.defineProperty()`][14]\n\n     Adds the named property described by a given descriptor to an object.\n[`Object.defineProperties()`][15]\n\n     Adds the named properties described by the given descriptors to an object.\n[`Object.freeze()`][16]\n\n     Freezes an object: other code can't delete or change any properties.\n[`Object.getOwnPropertyDescriptor()`][17]\n\n     Returns a property descriptor for a named property on an object.\n[`Object.getOwnPropertyNames()`][18]\n\n     Returns an array containing the names of all of the given object's **own** enumerable and non-enumerable properties.\n[`Object.getOwnPropertySymbols()`][19] _ _\n\n     Returns an array of all symbol properties found directly upon a given object.\n[`Object.getPrototypeOf()`][20]\n\n     Returns the prototype of the specified object.\n[`Object.is()`][21] _ _\n\n     Compares if two values are distinguishable (ie. the same)\n[`Object.isExtensible()`][22]\n\n     Determines if extending of an object is allowed.\n[`Object.isFrozen()`][23]\n\n     Determines if an object was frozen.\n[`Object.isSealed()`][24]\n\n     Determines if an object is sealed.\n[`Object.keys()`][25]\n\n     Returns an array containing the names of all of the given object's **own** enumerable properties.\n[`Object.preventExtensions()`][26]\n\n     Prevents any extensions of an object.\n[`Object.seal()`][27]\n\n     Prevents other code from deleting properties of an object.\n[`Object.setPrototypeOf()`][28] _ _\n\n     Sets the prototype (i.e., the internal [`[Prototype]]` property)\n\nMethods inherited from [`Function`][5]:\n\n[`apply`][29], [`call`][30], [`toSource`][31], [`toString`][32]\n\n## `Object` instances and `Object` prototype object\n\nAll objects in JavaScript are descended from `Object`; all objects inherit\nmethods and properties from [`Object.prototype`][4], although they may be\noverridden. For example, other constructors' prototypes override the\n`constructor` property and provide their own `toString` methods. Changes to\nthe `Object` prototype object are propagated to all objects unless the\nproperties and methods subject to those changes are overridden further along\nthe prototype chain.\n\n### Properties\n\n[`Object.prototype.constructor`][33]\n\n     Specifies the function that creates an object's prototype.\n[`Object.prototype.__proto__`][34] _ _\n\n     Points to the object which was used as prototype when the object was instantiated.\n[`Object.prototype.__noSuchMethod__`][35] _ _\n\n     Allows a function to be defined that will be executed when an undefined object member is called as a method.\n<s>[`Object.prototype.__count__`][36] _ _</s>\n\n     <s>Used to return the number of enumerable properties directly on a user-defined object, but has been removed.</s>\n<s>[`Object.prototype.__parent__`][37] _ _</s>\n\n     <s>Used to point to an object's context, but has been removed.</s>\n\n### Methods\n\n[`Object.prototype.__defineGetter__()`][38] _ _ _ _\n\n     Associates a function with a property that, when accessed, executes that function and returns its return value.\n[`Object.prototype.__defineSetter__()`][39] _ _ _ _\n\n     Associates a function with a property that, when set, executes that function which modifies the property.\n[`Object.prototype.__lookupGetter__()`][40] _ _ _ _\n\n     Returns the function associated with the specified property by the [`__defineGetter__`][41] method.\n[`Object.prototype.__lookupSetter__()`][42] _ _ _ _\n\n     Returns the function associated with the specified property by the [`__defineSetter__`][43] method.\n[`Object.prototype.hasOwnProperty()`][44]\n\n     Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.\n[`Object.prototype.isPrototypeOf()`][45]\n\n     Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.\n[`Object.prototype.propertyIsEnumerable()`][46]\n\n     Returns a boolean indicating if the internal [ECMAScript DontEnum attribute][47] is set.\n[`Object.prototype.toSource()`][48] _ _\n\n     Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.\n[`Object.prototype.toLocaleString()`][49]\n\n     Calls [`toString()`][50].\n[`Object.prototype.toString()`][50]\n\n     Returns a string representation of the object.\n[`Object.prototype.unwatch()`][51] _ _\n\n     Removes a watchpoint from a property of the object.\n[`Object.prototype.valueOf()`][52]\n\n     Returns the primitive value of the specified object.\n[`Object.prototype.watch()`][53] _ _\n\n     Adds a watchpoint to a property of the object.\n<s>[`Object.prototype.eval()`][54] _ _</s>\n\n     <s>Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.</s>\n\n## Examples\n\n### Example: Using `Object` given `undefined` and `null` types\n\nThe following examples store an empty `Object` object in `o`:\n\n    \n    \n    var o = new Object();\n    \n    \n    \n    var o = new Object(undefined);\n    \n    \n    \n    var o = new Object(null);\n    \n\n### Example: Using `Object` to create `Boolean` objects\n\nThe following examples store [`Boolean`][55] objects in `o`:\n\n    \n    \n    // equivalent to o = new Boolean(true);\n    var o = new Object(true);\n    \n    \n    \n    // equivalent to o = new Boolean(false);\n    var o = new Object(Boolean());\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.  \nImplemented in JavaScript 1.0\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Object' in that specification.][56]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Object' in that specification.][57]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][58].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer\n\n[3]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype#Properties\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\n\n[5]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[6]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Arity\n\n[7]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Caller\n\n[8]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Constructor\n\n[9]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Length\n\n[10]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Name\n\n[11]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype#Methods\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\n\n[29]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Apply\n\n[30]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Call\n\n[31]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToSource\n\n[32]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/ToString\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__proto__\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__noSuchMethod__\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__count__\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__parent__\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineSetter__\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupGetter__\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineGetter\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/__lookupSetter__\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineSetter\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\n\n[47]: /en-US/docs/ECMAScript_DontEnum_attribute\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/watch\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/eval\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[56]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.2\n\n[57]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-objects\n\n[58]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "unescape()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/unescape()", "content": "**Deprecated**  \nThis feature has been removed from the Web. Though some browsers may still\nsupport it, it is in the process of being dropped. Do not use it in old or new\nprojects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe deprecated `**unescape()**` method computes a new string in which\nhexadecimal escape sequences are replaced with the character that it\nrepresents. The escape sequences might be introduced by a function like\n[`escape`][1]. Because `unescape` is deprecated, use [`decodeURI`][2] or\n[`decodeURIComponent`][3] instead.\n\n**Note:** Do not use `unescape` to decode URIs, use `decodeURI` instead.\n\n## Syntax\n\n    \n    \n    unescape(str)\n\n### Parameters\n\n`str`\n\n     A string to be decoded.\n\n## Description\n\nThe `unescape` function is a property of the _global object_.\n\n## Examples\n\n    \n    \n    unescape(\"abc123\");     // \"abc123\"\n    unescape(\"%E4%F6%FC\");  // \"\u00e4\u00f6\u00fc\"\n    unescape(\"%u0107\");     // \"\u0107\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) Compatibility Annex B\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`decodeURI`][2]\n  * [`decodeURIComponent`][3]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.2\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-unescape-string\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "escape()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/escape()", "content": "**Deprecated**  \nThis feature has been removed from the Web. Though some browsers may still\nsupport it, it is in the process of being dropped. Do not use it in old or new\nprojects. Pages or Web apps using it may break at any time.\n\n## Summary\n\nThe deprecated `**escape()**` method computes a new string in which certain\ncharacters have been replaced by a hexadecimal escape sequence. Use\n[`encodeURI`][1] or [`encodeURIComponent`][2] instead.\n\n## Syntax\n\n    \n    \n    escape(str)\n\n### Parameters\n\n`str`\n\n     A string to be encoded.\n\n## Description\n\nThe `escape` function is a property of the _global object_. Special\ncharacteres are encoded with the exception of: @*_+-./\n\nThe hexadecimal form for characters, whose code unit value is 0xFF or less, is\na two-digit escape sequence: %xx. For characters with a greater code unit, the\nfour-digit format %**u**xxxx is used.\n\n## Examples\n\n    \n    \n    escape(\"abc123\");     // \"abc123\"\n    escape(\"\u00e4\u00f6\u00fc\");        // \"%E4%F6%FC\"\n    escape(\"\u0107\");          // \"%u0107\"\n    \n    // special characters\n    escape(\"@*_+-./\");    // \"@*_+-./\"\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined in the (informative) Compatibility Annex B\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined in the (normative) Annex B for Additional ECMAScript Features for Web\nBrowsers\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`encodeURI`][1]\n  * [`encodeURIComponent`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-B.2.1\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-escape-string\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "encodeURIComponent()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/encodeuricomponent()", "content": "## Summary\n\nThe `**encodeURIComponent()**` method encodes a Uniform Resource Identifier\n(URI) component by replacing each instance of certain characters by one, two,\nthree, or four escape sequences representing the UTF-8 encoding of the\ncharacter (will only be four escape sequences for characters composed of two\n\"surrogate\" characters).\n\n## Syntax\n\n    \n    \n    encodeURIComponent(str);\n\n### Parameters\n\n`str`\n\n     String. A component of a URI.\n\n## Description\n\n`encodeURIComponent` escapes all characters except the following: alphabetic,\ndecimal digits, `\\- _ .\u00a0! ~ * ' ( )`\n\nNote that an [`URIError`][1] will be thrown if one attempts to encode a\nsurrogate which is not part of a high-low pair, e.g.,\n\n    \n    \n    // high-low pair ok\n    alert(encodeURIComponent('\\uD800\\uDFFF'));\n    \n    // lone high surrogate throws \"URIError: malformed URI sequence\"\n    alert(encodeURIComponent('\\uD800'));\n    \n    // lone low surrogate throws \"URIError: malformed URI sequence\"\n    alert(encodeURIComponent('\\uDFFF')); \n    \n\nTo avoid unexpected requests to the server, you should call\n`encodeURIComponent` on any user-entered parameters that will be passed as\npart of a URI. For example, a user could type \"`Thyme &time=again`\" for a\nvariable `comment`. Not using `encodeURIComponent` on this variable will give\n`comment=Thyme%20&time=again`. Note that the ampersand and the equal sign mark\na new key and value pair. So instead of having a POST `comment` key equal to\n\"`Thyme &time=again`\", you have two POST keys, one equal to \"`Thyme `\" and\nanother (`time`) equal to `again`.\n\nFor [`application/x-www-form-urlencoded`][2] (POST), spaces are to be replaced\nby '+', so one may wish to follow a `encodeURIComponent` replacement with an\nadditional replacement of \"%20\" with \"+\".\n\nTo be more stringent in adhering to [RFC 3986][3] (which reserves !, ', (, ),\nand *), even though these characters have no formalized URI delimiting uses,\nthe following can be safely used:\n\n    \n    \n    function fixedEncodeURIComponent (str) {\n      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n        return '%' + c.charCodeAt(0).toString(16);\n      });\n    }\n    \n\n## Examples\n\nThe following example provides the special encoding required within UTF-8\n`Content-Disposition` and `Link` server response header parameters (e.g.,\nUTF-8 filenames):\n\n    \n    \n    var fileName = 'my file(2).txt';\n    var header = \"Content-Disposition: attachment; filename*=UTF-8''\" + encodeRFC5987ValueChars(fileName);\n    \n    console.log(header); \n    // logs \"Content-Disposition: attachment; filename*=UTF-8''my%20file%282%29.txt\"\n    \n    \n    function encodeRFC5987ValueChars (str) {\n    \u00a0\u00a0\u00a0 return encodeURIComponent(str).\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // Note that although RFC3986 reserves \"!\", RFC5987 does not,\n            // so we do not need to escape it\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 replace(/['()]/g, escape). // i.e., %27 %28 %29\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 replace(/\\*/g, '%2A').\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // The following are not required for percent-encoding per RFC5987, \n                //  so we can allow for a little better readability over the wire: |`^\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 replace(/%(?:7C|60|5E)/g, unescape);\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'encodeURIComponent' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'encodeURIComponent' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][6].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`decodeURI`][7]\n  * [`encodeURI`][8]\n  * [`decodeURIComponent`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[2]: http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#application/x-www-form-urlencoded-encoding-algorithm\n\n[3]: http://tools.ietf.org/html/rfc3986\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.4\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-encodeuricomponent-uricomponent\n\n[6]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "encodeURI()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/encodeuri()", "content": "## Summary\n\nThe `**encodeURI()**` method encodes a Uniform Resource Identifier (URI) by\nreplacing each instance of certain characters by one, two, three, or four\nescape sequences representing the UTF-8 encoding of the character (will only\nbe four escape sequences for characters composed of two \"surrogate\"\ncharacters).\n\n## Syntax\n\n    \n    \n    encodeURI(_URI_)\n\n### Parameters\n\n`URI`\n\n     A complete Uniform Resource Identifier.\n\n## Description\n\nAssumes that the URI is a complete URI, so does not encode reserved characters\nthat have special meaning in the URI.\n\n`encodeURI` replaces all characters except the following with the appropriate\nUTF-8 escape sequences:  \n  \n<table>  \n<tr>  \n<td>\n\nType\n\n</td>  \n<td>\n\nIncludes\n\n</td> </tr>  \n<tr>  \n<td>\n\nReserved characters\n\n</td>  \n<td>\n\n`;` `,` `/` `?` `:` `@` `&` `=` `+` `$`\n\n</td> </tr>  \n<tr>  \n<td>\n\nUnescaped characters\n\n</td>  \n<td>\n\nalphabetic, decimal digits, `-` `_` `.` `!` `~` `*` `'` `(` `)`\n\n</td> </tr>  \n<tr>  \n<td>\n\nScore\n\n</td>  \n<td>\n\n`#`\n\n</td> </tr> </table>\n\nNote that `encodeURI` by itself _cannot_ form proper HTTP GET and POST\nrequests, such as for XMLHTTPRequests, because \"&\", \"+\", and \"=\" are not\nencoded, which are treated as special characters in GET and POST requests.\n[`encodeURIComponent`][1], however, does encode these characters.\n\nNote that an [`URIError`][2] will be thrown if one attempts to encode a\nsurrogate which is not part of a high-low pair, e.g.,\n\n    \n    \n    // high-low pair ok\n    alert(encodeURI('\\uD800\\uDFFF'));\n    \n    // lone high surrogate throws \"URIError: malformed URI sequence\"\n    alert(encodeURI('\\uD800'));\n    \n    // lone low surrogate throws \"URIError: malformed URI sequence\"\n    alert(encodeURI('\\uDFFF')); \n\nAlso note that if one wishes to follow the more recent [RFC3986][3] for URL's,\nmaking square brackets reserved (for IPv6) and thus not encoded when forming\nsomething which could be part of a URL (such as a host), the following may\nhelp.\n\n    \n    \n    function fixedEncodeURI (str) {\n        return encodeURI(str).replace(/%5B/g, '[').replace(/%5D/g, ']');\n    }\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`decodeURI`][6]\n  * [`encodeURIComponent`][1]\n  * [`decodeURIComponent`][7]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[3]: http://tools.ietf.org/html/rfc3986\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.3\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-encodeuri-uri\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "decodeURIComponent()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/decodeuricomponent()", "content": "## Summary\n\nThe `**decodeURIComponent()**` method decodes a Uniform Resource Identifier\n(URI) component previously created by [`encodeURIComponent`][1] or by a\nsimilar routine.\n\n## Syntax\n\n    \n    \n    decodeURIComponent(_encodedURI_)\n\n### Parameters\n\n`encodedURI`\n\n     An encoded component of a Uniform Resource Identifier.\n\n## Description\n\nReplaces each escape sequence in the encoded URI component with the character\nthat it represents.\n\n## Examples\n\n### Decoding a Cyrillic URL component\n\n    \n    \n    decodeURIComponent(\"JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n    // \"JavaScript_\u0448\u0435\u043b\u043b\u044b\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`decodeURI`][4]\n  * [`encodeURI`][5]\n  * [`encodeURIComponent`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-decodeuricomponent-encodeduricomponent\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "decodeURI()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/decodeuri()", "content": "## Summary\n\nThe `**decodeURI()**` function decodes a Uniform Resource Identifier (URI)\npreviously created by [`encodeURI`][1] or by a similar routine.\n\n## Syntax\n\n    \n    \n    decodeURI(_encodedURI_)\n\n### Parameters\n\n`encodedURI`\n\n     A complete, encoded Uniform Resource Identifier.\n\n## Description\n\nReplaces each escape sequence in the encoded URI with the character that it\nrepresents, but does not decode escape sequences that could not have been\nintroduced by [`encodeURI`][1]. The character \u201c`#`\u201d is not decoded from escape\nsequences.\n\n## Examples\n\n### Decoding a Cyrillic URL\n\n    \n    \n    decodeURI(\"https://developer.mozilla.org/ru/docs/JavaScript_%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\");\n    // \"https://developer.mozilla.org/ru/docs/JavaScript_\u0448\u0435\u043b\u043b\u044b\"\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`decodeURIComponent`][4]\n  * [`encodeURI`][1]\n  * [`encodeURIComponent`][5]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3.1\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-decodeuri-encodeduri\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "parseInt()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/parseint()", "content": "## Summary\n\nThe `**parseInt()**` function parses a string argument and returns an integer\nof the specified radix or base.\n\n## Syntax\n\n    \n    \n    parseInt(_string_, _radix_);\n\n## Parameters\n\n`string`\n\n     The value to parse. If `string` is not a string, then it is converted to one. Leading whitespace in the string is ignored.\n\n`radix`\n\n     An integer between 2 and 36 that represents the radix of the above mentioned string. **Always specify this parameter** to eliminate reader confusion and to guarantee predictable behavior. Different implementations produce different results when a radix is not specified.\n\n## Description\n\nThe `parseInt` function converts its first argument to a string, parses it,\nand returns an integer or `NaN`. If not `NaN`, the returned value will be the\ndecimal integer representation of the first argument taken as a number in the\nspecified radix (base). For example, a radix of 10 indicates to convert from a\ndecimal number, 8 octal, 16 hexadecimal, and so on. For radices above `10`,\nthe letters of the alphabet indicate numerals greater than `9`. For example,\nfor hexadecimal numbers (base 16), `A` through `F` are used.\n\nIf `parseInt` encounters a character that is not a numeral in the specified\nradix, it ignores it and all succeeding characters and returns the integer\nvalue parsed up to that point. `parseInt` truncates numbers to integer values.\nLeading and trailing spaces are allowed.\n\nIf radix is `undefined` or 0 (or absent), JavaScript assumes the following:\n\n  * If the input `string` begins with \"0x\" or \"0X\", radix is 16 (hexadecimal) and the remainder of the string is parsed.\n  * If the input `string` begins with \"0\", radix is eight (octal) or 10 (decimal).\u00a0 Exactly which radix is chosen is implementation-dependent.\u00a0 ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet.\u00a0 For this reason **always specify a radix when using `parseInt`**.\n  * If the input `string` begins with any other value, the radix is 10 (decimal).\n\nIf the first character cannot be converted to a number, `parseInt` returns\n`NaN`.\n\nFor arithmetic purposes, the `NaN` value is not a number in any radix. You can\ncall the [`isNaN`][1] function to determine if the result of `parseInt` is\n`NaN`. If `NaN` is passed on to arithmetic operations, the operation results\nwill also be `NaN`.\n\nTo convert number to its string literal in a particular radix use\n`intValue.toString(radix)`.\n\n## Examples\n\n### Example: Using `parseInt`\n\nThe following examples all return **`15`**:\n\n    \n    \n    parseInt(\" 0xF\", 16);\n    parseInt(\" F\", 16);\n    parseInt(\"17\", 8);\n    parseInt(021, 8);\n    parseInt(\"015\", 10);\n    parseInt(15.99, 10);\n    parseInt(\"FXX123\", 16);\n    parseInt(\"1111\", 2);\n    parseInt(\"15*3\", 10);\n    parseInt(\"15e2\", 10);\n    parseInt(\"15px\", 10);\n    parseInt(\"12\", 13);\n    \n\nThe following examples all return **`NaN`**:\n\n    \n    \n    parseInt(\"Hello\", 8); // Not a number at all\n    parseInt(\"546\", 2);   // Digits are not valid for binary representations\n    \n\nThe following examples all return **`-15`**:\n\n    \n    \n    parseInt(\"-F\", 16);\n    parseInt(\"-0F\", 16);\n    parseInt(\"-0XF\", 16);\n    parseInt(-15.1, 10)\n    parseInt(\" -17\", 8);\n    parseInt(\" -15\", 10);\n    parseInt(\"-1111\", 2);\n    parseInt(\"-15e1\", 10);\n    parseInt(\"-12\", 13);\n    \n\nThe following example returns **`224`**:\n\n    \n    \n    parseInt(\"0e0\", 16);\n    \n\n## Octal interpretations with no radix\n\nAlthough discouraged by ECMAScript 3 and forbidden by ECMAScript 5, many\nimplementations interpret a numeric string beginning with a leading `0` as\noctal. The following may have an octal result, or it may have a decimal\nresult.\u00a0 **Always specify a radix to avoid this unreliable behavior.**\n\n    \n    \n    parseInt(\"0e0\"); // 0\n    parseInt(\"08\"); // 0, '8' is not an octal digit.\n    \n\n### ECMAScript 5 removes octal interpretation\n\nThe ECMAScript 5 specification of the function `parseInt` no longer allows\nimplementations to treat Strings beginning with a `0` character as octal\nvalues. ECMAScript 5 states:\n\nThe `parseInt` function produces an integer value dictated by interpretation\nof the contents of the string argument according to the specified radix.\nLeading white space in string is ignored. If radix is undefined or `0`, it is\nassumed to be `10` except when the number begins with the character pairs `0x`\nor `0X`, in which case a radix of 16 is assumed. If radix is `16`, number may\nalso optionally begin with the character pairs `0x` or `0X`.\n\nThis differs from ECMAScript 3, which discouraged but allowed octal\ninterpretation.\n\nMany implementations have not adopted this behavior as of 2013, and because\nolder browsers must be supported, **always specify a radix**.\n\n## A stricter parse function\n\nIt is sometimes useful to have a stricter way to parse int values. Regular\nexpressions can help:\n\n    \n    \n    filterInt = function (value) {\n      if(/^(\\-|\\+)?([0-9]+|Infinity)$/.test(value))\n        return Number(value);\n      return NaN;\n    }\n    \n    console.log(filterInt('421'));               // 421\n    console.log(filterInt('-421'));              // -421\n    console.log(filterInt('+421'));              // 421\n    console.log(filterInt('Infinity'));          // Infinity\n    console.log(filterInt('421e+0'));            // NaN\n    console.log(filterInt('421hop'));            // NaN\n    console.log(filterInt('hop1.61803398875'));  // NaN\n    console.log(filterInt('1.61803398875'));     // NaN\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'parseInt' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'parseInt' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`parseFloat()`][5]\n  * [`Number.parseFloat()`][6]\n  * [`Number.parseInt()`][7]\n  * [`isNaN()`][1]\n  * [`Number.toString()`][8]\n  * [`Object.valueOf`][9]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-parseint-string-radix\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "parseFloat()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/parsefloat()", "content": "## Summary\n\nThe `**parseFloat()**` function parses a string argument and returns a\nfloating point number.\n\n## Syntax\n\n    \n    \n    parseFloat(_string_)\n\n### Parameters\n\n`string`\n\n     A string that represents the value you want to parse.\n\n## Description\n\n`parseFloat` is a top-level function and is not associated with any object.\n\n`parseFloat` parses its argument, a string, and returns a floating point\nnumber. If it encounters a character other than a sign (+ or -), numeral\n(0-9), a decimal point, or an exponent, it returns the value up to that point\nand ignores that character and all succeeding characters. Leading and trailing\nspaces are allowed.\n\nIf the first character cannot be converted to a number, `parseFloat` returns\n`NaN`.\n\nFor arithmetic purposes, the `NaN` value is not a number in any radix. You can\ncall the [`isNaN`][1] function to determine if the result of `parseFloat` is\n`NaN`. If `NaN` is passed on to arithmetic operations, the operation results\nwill also be `NaN`.\n\n`parseFloat` can also parse and return the value `Infinity`. You can use the\n[`isFinite`][2] function to determine if the result is a finite number (not\n`Infinity`, `-Infinity`, or `NaN`).\n\n## Examples\n\n### Example: `parseFloat` returning a number\n\nThe following examples all return **3.14**\n\n    \n    \n    parseFloat(\"3.14\");\n    parseFloat(\"314e-2\");\n    parseFloat(\"0.0314E+2\");\n    parseFloat(\"3.14more non-digit characters\");\n    \n\n### Example: `parseFloat` returning NaN\n\nThe following example returns `NaN`\n\n    \n    \n    parseFloat(\"FF2\");\n    \n\n### A stricter parse function\n\nIt is sometime useful to have a stricter way to parse float values, regular\nexpressions can help :\n\n    \n    \n    var filterFloat = function (value) {\n        if(/^(\\-|\\+)?([0-9]+(\\.[0-9]+)?|Infinity)$/\n          .test(value))\n          return Number(value);\n      return NaN;\n    }\n    \n    console.log(filterFloat('421'));               // 421\n    console.log(filterFloat('-421'));              // -421\n    console.log(filterFloat('+421'));              // 421\n    console.log(filterFloat('Infinity'));          // Infinity\n    console.log(filterFloat('1.61803398875'));     // 1.61803398875\n    console.log(filterFloat('421e+0'));            // NaN\n    console.log(filterFloat('421hop'));            // NaN\n    console.log(filterFloat('hop1.61803398875'));  // NaN\n    \n    \n\nNote that this code is an example only; it does not accept valid numbers such\nas `1.` or `.5`.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`parseInt()`][5]\n  * [`Number.parseFloat()`][6]\n  * [`Number.parseInt()`][7]\n  * [`isNaN()`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.3\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-parsefloat-string\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "isNaN()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/isnan()", "content": "## Summary\n\nThe `**isNaN()**` function determines whether a value is [`NaN`][1] or not. Be\ncareful, this function is broken. You may be interested in\n[`Number.isNaN()`][2] as defined in ECMAScript 6 or you can use [`typeof][3]`\nto determine if the value is Not-A-Number.\n\n## Syntax\n\n    \n    \n    isNaN(_testValue_)\n\n### Parameters\n\n`testValue`\n\n     The value to be tested.\n\n## Description\n\n### The necessity of an `isNaN` function\n\nUnlike all other possible values in JavaScript, it is not possible to rely on\nthe equality operators (== and ===) to determine whether a value _is_\n[`NaN`][1] or not, because both `NaN == NaN` and `NaN === NaN` evaluate to\n`false`. Hence, the necessity of an `isNaN` function.\n\n### Origin of `NaN` values\n\n`NaN` values are generated when arithmetic operations result in _undefined_ or\n_unrepresentable_ values. Such values do not necessarily represent overflow\nconditions. A `NaN` also results from attempted coercion to numeric values of\nnon-numeric values for which no primitive numeric value is available.\n\nFor example, dividing zero by zero results in a `NaN` \u2014 but dividing other\nnumbers by zero does not.\n\n### Confusing special-case behavior\n\nSince the very earliest versions of the `isNaN` function specification, its\nbehavior for non-numeric arguments has been confusing. When the argument to\nthe `isNaN` function is not of type [Number][4], the value is first coerced to\na Number. The resulting value is then tested to determine whether it is\n[`NaN`][1]. Thus for non-numbers that when coerced to numeric type result in a\nvalid non-NaN numeric value (notably the empty string and boolean primitives,\nwhich when coerced give numeric values zero or one), the \"false\" returned\nvalue may be unexpected; the empty string, for example, is surely \"not a\nnumber.\" The confusion stems from the fact that the term, \"not a number\", has\na specific meaning for numbers represented as IEEE-794 floating-point values.\nThe function should be interpreted as answering the question, \"is this value,\nwhen coerced to a numeric value, an IEEE-794 'Not A Number' value?\"\n\nThe next version of ECMAScript (ES6) contains the [`Number.isNaN()`][2]\nfunction. `Number.isNaN(x)` will be a reliable way to test whether `x` is\n`NaN` or not. Even with `Number.isNaN`, however, the meaning of `NaN` remains\nthe precise numeric meaning, and not simply, \"not a number\". Alternatively, in\nabsense of `Number.isNaN`, the expression `(x != x)` is a more reliable way to\ntest whether variable `x` is `NaN` or not, as the result is not subject to the\nfalse positives that make `isNaN` unreliable.\n\n## Examples\n\n    \n    \n    isNaN(NaN);       // true\n    isNaN(undefined); // true\n    isNaN({});        // true\n    \n    isNaN(true);      // false\n    isNaN(null);      // false\n    isNaN(37);        // false\n    \n    // strings\n    isNaN(\"37\");      // false: \"37\" is converted to the number 37 which is not NaN\n    isNaN(\"37.37\");   // false: \"37.37\" is converted to the number 37.37 which is not NaN\n    isNaN(\"\");        // false: the empty string is converted to 0 which is not NaN\n    isNaN(\" \");       // false: a string with spaces is converted to 0 which is not NaN\n    \n    // dates\n    isNaN(new Date());                // false\n    isNaN(new Date().toString());     // true\n    \n    // This is a false positive and the reason why isNaN is not entirely reliable\n    isNaN(\"blabla\")   // true: \"blabla\" is converted to a number. \n                      // Parsing this as a number fails and returns NaN\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'isNaN' in that specification.][5]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'isNaN' in that specification.][6]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`NaN`][1]\n  * [`Number.isNaN()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[4]: http://es5.github.com/#x8.5\n\n[5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.4\n\n[6]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isnan-number\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "isFinite()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/isfinite()", "content": "## Summary\n\nThe global `**isFinite()**` function determines whether the passed value is a\nfinite number. If needed, the parameter is first converted to a number.\n\n## Syntax\n\n    \n    \n    isFinite(_testValue_)\n\n### Parameters\n\n`testValue`\n\n     The value to be tested for finiteness.\n\n## Description\n\n`isFinite` is a top-level function and is not associated with any object.\n\nYou can use this function to determine whether a number is a finite number.\nThe `isFinite` function examines the number in its argument. If the argument\nis `NaN`, positive infinity, or negative infinity, this method returns\n`false`; otherwise, it returns `true`.\n\n## Examples\n\n    \n    \n    isFinite(Infinity);  // false\n    isFinite(NaN);       // false\n    isFinite(-Infinity); // false\n    \n    isFinite(0);         // true\n    isFinite(2e64);      // true\n    \n    \n    isFinite(\"0\");       // true, would've been false with the more robust Number.isFinite(\"0\")\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 2nd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][1]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][2]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.isFinite()`][3]\n  * [`Number.NaN()`][4]\n  * [`Number.POSITIVE_INFINITY`][5]\n  * [`Number.NEGATIVE_INFINITY`][6]\n\n[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.5\n\n[2]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-isfinite-number\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "uneval()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/uneval()", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**uneval()**` method creates an string representation of the source code\nof an Object.\n\n## Syntax\n\n    \n    \n    uneval(object)\n\n### Parameters\n\n`object`\n\n     A JavaScript expression or statement.\n\n**Note:** You won't get a valid JSON representation of your Object.\n\n## Description\n\n`uneval()` is a top-level function and is not associated with any object.\n\n## Examples\n\n    \n    \n    var a = 1;\n    uneval(a); // returns a String containing 1\n    \n    var b = \"1\";\n    uneval(b) // returns a String containing \"1\"\n    \n    uneval(function foo(){}); // returns \"(function foo(){})\"\n    \n    \n    var a = uneval(function foo(){return 'hi'});\n    var foo = eval(a);\n    foo(); // returns \"hi\"\n    \n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`eval()`][1]\n  * [`JSON.stringify`][2]\n  * [`JSON.parse`][3]\n  * [`Object.toSource`][4]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "eval()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/eval()", "content": "## Summary\n\nThe `**eval()**` method evaluates JavaScript code represented as a string.\n\n## Syntax\n\n    \n    \n    eval(_string_)\n\n### Parameters\n\n`string`\n\n     A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.\n\n## Description\n\n`eval()` is a function property of the global object.\n\nThe argument of the `eval()` function is a string. If the string represents an\nexpression, `eval()` evaluates the expression. If the argument represents one\nor more JavaScript statements, `eval()`\u00a0evaluates the statements. Do not call\n`eval()` to evaluate an arithmetic expression; JavaScript evaluates arithmetic\nexpressions automatically.\n\nIf you construct an arithmetic expression as a string, you can use `eval()` to\nevaluate it at a later time. For example, suppose you have a variable `x`. You\ncan postpone evaluation of an expression involving `x` by assigning the string\nvalue of the expression, say \"`3 * x + 2`\", to a variable, and then calling\n`eval()` at a later point in your script.\n\nIf the argument of `eval()` is not a string, `eval()` returns the argument\nunchanged. In the following example, the `String` constructor is specified,\nand `eval()` returns a `String` object rather than evaluating the string.\n\n    \n    \n    eval(new String(\"2 + 2\")); // returns a String object containing \"2 + 2\"\n    eval(\"2 + 2\");             // returns 4\n    \n\nYou can work around this limitation in a generic fashion by using\n`toString()`.\n\n    \n    \n    var expression = new String(\"2 + 2\");\n    eval(expression.toString());\n    \n\nYou cannot indirectly use the `eval` function by invoking it via a name other\nthan `eval()`; if you do, a runtime error might occur. For example, you should\nnot use the following code:\n\n    \n    \n    var x = 2;\n    var y = 4;\n    var myEval = eval;\n    myEval(\"x + y\");\n    \n\n## Don't use eval needlessly!\n\n`eval()` is a dangerous function, which executes the code it's passed with the\nprivileges of the caller. If you run `eval()` with a string that could be\naffected by a malicious party, you may end up running malicious code on the\nuser's machine with the permissions of your webpage / extension. More\nimportantly, third party code can see the scope in which `eval()` was invoked,\nwhich can lead to possible attacks in ways to which the similar\n[`Function`][1] is not susceptible.\n\n`eval()` is also generally slower than the alternatives, since it has to\ninvoke the JS interpreter, while many other constructs are optimized by modern\nJS engines.\n\nThere are safer (and faster!) alternatives to `eval()` for common use-cases.\n\n### Accessing member properties\n\nYou should not use `eval()` to convert property names into properties.\nConsider the following example where the property of the object to be\u00a0accessed\nis not known until the code is executed. This can be done with eval:\n\n    \n    \n    var obj = { a: 20, b: 30 };\n    var propname = getPropName();  //returns \"a\" or \"b\"\n    \n    eval( \"var result = obj.\" + propname );\n    \n\nHowever, `eval()` is not necessary here. In fact, its use here is discouraged.\nInstead, use the [member operators][2], which are much faster and safer:\n\n    \n    \n    var obj = { a: 20, b: 30 };\n    var propname = getPropName();  //returns \"a\" or \"b\"\n    var result = obj[ propname ];  //  obj[ \"a\" ] is the same as obj.a \n    \n\n### Use functions instead of evaluating snippets of code\n\nJavaScript has [first-class functions][3], which means you can pass functions\nas arguments to other APIs, store them in variables and objects' properties,\nand so on. Many DOM APIs are designed with this in mind, so you can (and\nshould) write:\n\n    \n    \n    // instead of setTimeout(\" ... \", 1000) use:\n    setTimeout(function() { ... }, 1000); \n    \n    // instead of elt.setAttribute(\"onclick\", \"...\") use:\n    elt.addEventListener(\"click\", function() { ... } , false); \n\n[Closures][4] are also helpful as a way to create parametrized functions\nwithout concatenating strings.\n\n### Parsing JSON (converting strings to JavaScript objects)\n\nIf the string you're calling `eval()` on contains data (for example, an array:\n`\"[1, 2, 3]\"`), as opposed to code, you should consider switching to\n[JSON][5], which allows the string to use a subset of JavaScript syntax to\nrepresent data. See also [Downloading JSON and JavaScript in extensions][6].\n\nNote that since JSON syntax is limited compared to JavaScript syntax, many\nvalid JavaScript literals will not parse as JSON. For example, trailing commas\nare not allowed in JSON, and property names (keys) in object literals must be\nenclosed in quotes. Be sure to use a JSON serializer to generate strings that\nwill be later parsed as JSON.\n\n### Pass data instead of code\n\nFor example, an extension designed to scrape contents of web-pages could have\nthe scraping rules defined in [XPath][7] instead of JavaScript code.\n\n### Run code with limited privileges\n\nIf must run code, consider running it with reduced privileges. This advice\napplies mainly to extensions and XUL applications, which can use\n[Components.utils.evalInSandbox][8] for this.\n\n## Examples\n\nThe following examples display output using [`document.write`][9]. In server-\nside JavaScript, you can display the same output by calling the `write()`\nfunction instead of using `document.write()`.\n\n### Example: Using `eval`\n\nIn the following code, both of the statements containing `eval()` return 42.\nThe first evaluates the string \"`x + y + 1`\"; the second evaluates the string\n\"`42`\".\n\n    \n    \n    var x = 2;\n    var y = 39;\n    var z = \"42\";\n    eval(\"x + y + 1\"); // returns 42\n    eval(z);           // returns 42 \n    \n\n### Example: Using `eval` to evaluate a string of JavaScript statements\n\nThe following example uses `eval()` to evaluate the string `str`. This string\nconsists of JavaScript statements that open an alert dialog box and assign `z`\na value of 42 if `x` is five, and assigns 0 to `z` otherwise. When the second\nstatement is executed, `eval()` will cause these statements to be performed,\nand it will also evaluate the set of statements and return the value that is\nassigned to `z`.\n\n    \n    \n    var x = 5;\n    var str = \"if (x == 5) {alert('z is 42'); z = 42;} else z = 0; \";\n    \n    document.write(\"<P>z is \", eval(str));\n\n### Example: Last expression is evaluated\n\n`eval()` returns the value of the last expression evaluated.\n\n    \n    \n    var str = \"if ( a ) { 1+1; } else { 1+2; }\";\n    var a = true;\n    var b = eval(str);  // returns 2\n     \n    alert(\"b is : \" + b);\n    \n    a = false;\n    b = eval(str);  // returns 3\n    \n    alert(\"b is : \" + b);\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'eval' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'eval' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\n  * Historically `eval()` had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was removed from SpiderMonkey in Gecko 1.9.1 (Firefox 3.5). See [bug\u00a0442333][12].\n\n## See also\n\n  * [`uneval()`][13]\n  * [Member operators][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Member_Operators\n\n[3]: http://en.wikipedia.org/wiki/First-class_function\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Closures\n\n[5]: /en-US/docs/JSON\n\n[6]: /en-US/docs/Downloading_JSON_and_JavaScript_in_extensions\n\n[7]: /en-US/docs/XPath\n\n[8]: /en-US/docs/Components.utils.evalInSandbox\n\n[9]: /en-US/docs/Web/API/document.write\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.1\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-eval-x\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=442333\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "function"},
{"name": "null", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/null", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/null", "content": "## Summary\n\nThe value `null` is a JavaScript literal representing null or an \"empty\"\nvalue, i.e. no object value is present. It is one of JavaScript's [primitive\nvalues][1].\n\n## Syntax\n\n    \n    \n    null \n\n## Description\n\nThe value `null` is a literal (not a property of the global object like\n[`undefined`][2] can be). In APIs, `null` is often retrieved in place where an\nobject can be expected but no object is relevant. When checking for null or\nundefined beware of the [differences between equality (==) and identity (===)\noperators][3] (type-conversion is performed with the former).\n\n    \n    \n    // foo does not exist, it is not defined and has never been initialized:\n    > foo\n    \"ReferenceError: foo is not defined\"\n    \n    // foo is known to exist now but it has no type or value:\n    > var foo = null; foo\n    \"null\"\n    \n\n### Difference between `null` and `undefined`\n\n    \n    \n    typeof null        // object (bug in ECMAScript, should be null)\n    typeof undefined   // undefined\n    null === undefined // false\n    null  == undefined // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'null value' in that specification.][4]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'null value' in that specification.][5]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`undefined`][2]\n  * [`NaN`][6]\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\n[4]: http://www.ecma-international.org/ecma-262/5.1/#sec-4.3.11\n\n[5]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-null-value\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "object"},
{"name": "undefined", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/undefined", "content": "## Summary\n\nThe global `**undefined**` value property represents the value `undefined`. It\nis one of JavaScript's [primitive types][1].  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `undefined`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    undefined\n\n## Description\n\n`undefined` is a property of the _global object_, i.e. it is a variable in\nglobal scope. The initial value of `undefined` is the primitive value\n`undefined`.\n\nIn modern browsers (JavaScript 1.8.5 / Firefox 4+), `undefined` is a non-\nconfigurable, non-writable property per the ECMAScript 5 specification. Even\nwhen this is not the case, avoid overriding it.\n\nA variable that has not been assigned a value is of type undefined. A method\nor statement also returns `undefined` if the variable that is being evaluated\ndoes not have an assigned value. A function returns `undefined` if a value was\nnot [`returned`][2].\n\nSince `undefined` is not a [`reserved word`][3], it can be used as an\n[identifier][4] (variable name) in any scope other than the global scope.\n\n    \n    \n    // logs \"foo string\"\n    (function(){ var undefined = 'foo'; console.log(undefined, typeof undefined); })();\n    \n    // logs \"foo string\"\n    (function(undefined){ console.log(undefined, typeof undefined); })('foo');\n    \n\n## Examples\n\n### Strict equality and `undefined`\n\nYou can use `undefined` and the strict equality and inequality operators to\ndetermine whether a variable has a value. In the following code, the variable\n`x` is not defined, and the `if` statement evaluates to true.\n\n    \n    \n    var x;\n    if (x === undefined) {\n       // these statements execute\n    }\n    else {\n       // these statements do not execute\n    }\n    \n\nNote: The strict equality operator rather than the standard equality operator\nmust be used here, because `x == undefined` also checks whether `x` is `null`,\nwhile strict equality doesn't. `null` is not equivalent to `undefined`. See\n[`comparison operators`][5] for details.\n\n### `Typeof` operator and `undefined`\n\nAlternatively, [`typeof`][6] can be used:\n\n    \n    \n    var x;\n    if (typeof x === 'undefined') {\n       // these statements execute\n    }\n    \n\nOne reason to use [`typeof`][6] is that it does not throw an error if the\nvariable has not been defined.\n\n    \n    \n    // x has not been defined before\n    if (typeof x === 'undefined') { // evaluates to true without errors\n       // these statements execute\n    }\n    \n    if(x === undefined){ // throws a ReferenceError\n    \n    }\n    \n\nHowever, this kind of technique should be avoided. JavaScript is a statically\nscoped language, so knowing if a variable is defined can be read by seeing\nwhether it is defined in an enclosing context. The only exception is the\nglobal scope, but the global scope is bound to the global object, so checking\nthe existence of a variable in the global context can be done by checking the\nexistence of a property on the _global object_ (using the [`in`][7] operator,\nfor instance).\n\n### `Void` operator and `undefined`\n\nThe [`void`][8] operator is a third alternative.\n\n    \n    \n    var x;\n    if (x === void 0) {\n       // these statements execute\n    }\n    \n    // y has not been defined before\n    if (y === void 0) {\n       // throws a ReferenceError (in contrast to `typeof`)\n    }\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.3\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'undefined' in that specification.][9]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'undefined' in that specification.][10]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][11].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n\n\n[1]: /en-US/docs/Glossary/Primitive\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Statements/return\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Reserved_Words\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Values,_variables,_and_literals#Variables\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Operators/typeof\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Operators/in\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Operators/void\n\n[9]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.3\n\n[10]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-undefined\n\n[11]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "object"},
{"name": "SyntaxError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/syntaxerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/syntaxerror/syntaxerror.prototype", "content": "## Summary\n\nThe `**SyntaxError.prototype**` property represents the prototype for the\n[`SyntaxError`][1] constructor.\n\n## Description\n\nAll [`SyntaxError`][1] instances inherit from `SyntaxError.prototype`. You can\nuse the prototype to add properties or methods to all instances.\n\n## Properties\n\n`SyntaxError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`SyntaxError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`SyntaxError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`SyntaxError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`SyntaxError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`SyntaxError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`SyntaxError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`SyntaxError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`SyntaxError`][1] prototype object does not contain any methods\nof its own, [`SyntaxError`][1] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "SyntaxError"], "type": "property"},
{"name": "NaN", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/nan", "content": "## Summary\n\nThe global `**NaN**` property is a value representing Not-A-Number.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `NaN`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nNo\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    NaN\n\n## Description\n\n`NaN` is a property of the _global object_.\n\nThe initial value of `NaN` is Not-A-Number \u2014 the same as the value of\n`Number.NaN`. In modern browsers, `NaN` is a non-configurable, non-writable\nproperty. Even when this is not the case, avoid overriding it.\n\nIt is rather rare to use `NaN` in a program. It is the returned value when\nMath functions fail (`Math.sqrt(-1)`) or when a function trying to parse a\nnumber fails (`parseInt(\"blabla\")`).\n\n### Testing against `NaN`\n\nEquality operator (`==` and `===`) cannot be used to test a value against\n`NaN`. Use [`Number.isNaN()`][1] or [`isNaN()`][2] instead.\n\n    \n    \n    NaN === NaN;        // false\n    Number.NaN === NaN; // false\n    isNaN(NaN);         // true\n    isNaN(Number.NaN);  // true\n    \n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.3\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 5.1th Edition (ECMA-262)][3]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript Language Specification 6th Edition (ECMA-262)][4]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.NaN`][5]\n  * [`Number.isNaN()`][1]\n  * [`isNaN()`][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[3]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.1\n\n[4]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-value-properties-of-the-global-object-nan\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Infinity", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/infinity", "content": "## Summary\n\nThe global `**Infinity**` property is a numeric value representing infinity.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `Infinity`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Syntax\n\n    \n    \n    Infinity \n\n## Description\n\n`Infinity` is a property of the _global object_, i.e. it is a variable in\nglobal scope.\n\nThe initial value of `Infinity` is [`Number.POSITIVE_INFINITY`][1]. The value\n`Infinity` (positive infinity) is greater than any other number. This value\nbehaves mathematically like infinity; for example, any positive number\nmultiplied by `Infinity` is `Infinity`, and anything divided by `Infinity` is\n0.\n\nPer the ECMAScript 5 specification, `Infinity` is read only (implemented in\nJavaScript 1.8.5\u00a0 / Firefox 4).\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition. Implemented in JavaScript 1.3\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'Infinity' in that specification.][2]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'Infinity' in that specification.][3]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][4].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Number.NEGATIVE_INFINITY`][5]\n  * [`Number.POSITIVE_INFINITY`][1]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\n\n[2]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.1.2\n\n[3]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-value-properties-of-the-global-object-infinity\n\n[4]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "class"},
{"name": "Standard built-in objects", "parent": "/javascript/javascript_reference", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects", "content": "## Summary\n\nThis chapter documents all the JavaScript standard built-in objects, along\nwith their methods and properties.\n\nThe term \"global objects\" (or standard built-in objects) here is not to be\nconfused with the _global object_. Here, global objects refer to _objects in\nthe global scope_ (but only if ECMAScript 5 strict mode is not used! Otherwise\nit returns `undefined`). The _global object_ itself can be accessed by the\n[`this`][1] operator in the global scope. In fact, the global scope\n_consists__ of_ the properties of the global object (including inherited\nproperties, if any).\n\nOther objects in the global scope are either [created by the user script][2]\nor provided by the host application. The host objects available in browser\ncontexts are documented in the [API reference][3]. For more information about\nthe distinction between the [DOM][4] and core [JavaScript][5], see [JavaScript\ntechnologies overview][6].\n\n## Standard objects (by category)\n\n### Value properties\n\nGlobal properties returning a simple value.\n\n  * [`Infinity`][7]\n  * [`NaN`][8]\n  * [`undefined`][9]\n  * [`null`][10] literal\n\n### Function properties\n\nGlobal functions returning the result of a specific routine.\n\n  * [`eval()`][11]\n  * [`uneval()`][12] _ _\n  * [`isFinite()`][13]\n  * [`isNaN()`][14]\n  * [`parseFloat()`][15]\n  * [`parseInt()`][16]\n  * [`decodeURI()`][17]\n  * [`decodeURIComponent()`][18]\n  * [`encodeURI()`][19]\n  * [`encodeURIComponent()`][20]\n  * [`escape()`][21] _ _\n  * [`unescape()`][22] _ _\n\n### Fundamental objects\n\nGeneral language objects, functions and errors.\n\n  * [`Object`][23]\n  * [`Function`][24]\n  * [`Boolean`][25]\n  * [`Symbol`][26] _ _\n  * [`Error`][27]\n  * [`EvalError`][28]\n  * [`InternalError`][29]\n  * [`RangeError`][30]\n  * [`ReferenceError`][31]\n  * [`StopIteration`][32]\n  * [`SyntaxError`][33]\n  * [`TypeError`][34]\n  * [`URIError`][35]\n\n### Numbers and dates\n\nObjects dealing with numbers, dates and mathematical calculations.\n\n  * [`Number`][36]\n  * [`Math`][37]\n  * [`Date`][38]\n\n### Text processing\n\nObjects for manipulating texts.\n\n  * [`String`][39]\n  * [`RegExp`][40]\n\n### Indexed collections\n\nCollections ordered by an index. Array-type objects.\n\n  * [`Array`][41]\n  * [`Int8Array`][42]\n  * [`Uint8Array`][43]\n  * [`Uint8ClampedArray`][44]\n  * [`Int16Array`][45]\n  * [`Uint16Array`][46]\n  * [`Int32Array`][47]\n  * [`Uint32Array`][48]\n  * [`Float32Array`][49]\n  * [`Float64Array`][50]\n  * [`ParallelArray`][51] _ _\n\n### Keyed collections\n\nCollections of objects as keys. Elements iterable in insertion order.\n\n  * [`Map`][52] _ _\n  * [`Set`][53] _ _\n  * [`WeakMap`][54] _ _\n  * [`WeakSet`][55] _ _\n\n### Structured data\n\nData buffers and **J**ava**S**cript **O**bject **N**otation.\n\n  * [`ArrayBuffer`][56]\n  * [`DataView`][57]\n  * [`JSON`][58]\n\n### Control abstraction objects\n\n  * [`Iterator`][59] _ _\n  * [`Generator`][60] _ _\n  * [`Promise`][61] _ _\n\n### Reflection\n\n  * [`Reflect`][62] _ _\n  * [`Proxy`][63] _ _\n\n### Internationalization\n\nAdditions to the ECMAScript core for language-sensitive functionalities.\n\n  * [`Intl`][64]\n  * [`Intl.Collator`][65]\n  * [`Intl.DateTimeFormat`][66]\n  * [`Intl.NumberFormat`][67]\n\n### Other\n\n  * [`arguments][68]`\n\n\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Operators/this\n\n[2]: /en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Creating_new_objects\n\n[3]: /en-US/docs/Web/API/Reference\n\n[4]: /en-US/docs/DOM/DOM_Reference\n\n[5]: /en-US/docs/Web/JavaScript\n\n[6]: /en-US/docs/Web/JavaScript/JavaScript_technologies_overview\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/null\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/eval\n\n[12]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\n\n[15]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\n\n[16]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\n\n[17]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\n\n[18]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\n\n[19]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\n\n[20]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n\n[21]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\n\n[22]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/unescape\n\n[23]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[24]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[25]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[26]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\n\n[27]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[28]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[29]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[30]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[31]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[32]: /en-US/docs/Web/JavaScript/Reference/StopIteration\n\n[33]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError\n\n[34]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError\n\n[35]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError\n\n[36]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[37]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Math\n\n[38]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\n\n[39]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[40]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\n[41]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[42]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array\n\n[43]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n\n[44]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray\n\n[45]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array\n\n[46]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array\n\n[47]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\n\n[48]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array\n\n[49]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array\n\n[50]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array\n\n[51]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ParallelArray\n\n[52]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n\n[53]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n[54]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n\n[55]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet\n\n[56]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\n\n[57]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView\n\n[58]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON\n\n[59]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\n\n[60]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\n\n[61]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n\n[62]: /en-US/docs/Web/JavaScript/Reference/Reflect\n\n[63]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n\n[64]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\n\n[65]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Collator\n\n[66]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n\n[67]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n[68]: /en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference"], "type": "others"},
{"name": "EvalError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/evalerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/evalerror/evalerror.prototype", "content": "## Summary\n\nThe `**EvalError.prototype**` property represents the prototype of the\n[`EvalError`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `EvalError.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`EvalError`][1] instances inherit from `EvalError.prototype`. You can use\nthe prototype to add properties or methods to all instances.\n\n## Properties\n\n`EvalError.prototype.constructor`\n\n    Specifies the function that created an instance's prototype.\n[`EvalError.prototype.message`][2]\n\n    Error message. Although ECMA-262 specifies that [`EvalError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`EvalError.prototype.name`][4]\n\n    Error name. Inherited from [`Error`][5].\n[`EvalError.prototype.fileName`][6]\n\n    Path to file that raised this error. Inherited from [`Error`][5].\n[`EvalError.prototype.lineNumber`][7]\n\n    Line number in file that raised this error. Inherited from [`Error`][5].\n[`EvalError.prototype.columnNumber`][8]\n\n    Column number in line that raised this error. Inherited from [`Error`][5].\n[`EvalError.prototype.stack`][9]\n\n    Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`EvalError`][1] prototype object does not contain any methods of\nits own, [`EvalError`][1] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "EvalError"], "type": "property"},
{"name": "eval()", "parent": "/javascript/javascript_reference/standard_built-in_objects", "url": "/en-US/docs/Web/JavaScript/Reference/Global_objects/eval", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/eval()", "content": "## Summary\n\nThe `**eval()**` method evaluates JavaScript code represented as a string.\n\n## Syntax\n\n    \n    \n    eval(_string_)\n\n### Parameters\n\n`string`\n\n     A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects.\n\n## Description\n\n`eval()` is a function property of the global object.\n\nThe argument of the `eval()` function is a string. If the string represents an\nexpression, `eval()` evaluates the expression. If the argument represents one\nor more JavaScript statements, `eval()`\u00a0evaluates the statements. Do not call\n`eval()` to evaluate an arithmetic expression; JavaScript evaluates arithmetic\nexpressions automatically.\n\nIf you construct an arithmetic expression as a string, you can use `eval()` to\nevaluate it at a later time. For example, suppose you have a variable `x`. You\ncan postpone evaluation of an expression involving `x` by assigning the string\nvalue of the expression, say \"`3 * x + 2`\", to a variable, and then calling\n`eval()` at a later point in your script.\n\nIf the argument of `eval()` is not a string, `eval()` returns the argument\nunchanged. In the following example, the `String` constructor is specified,\nand `eval()` returns a `String` object rather than evaluating the string.\n\n    \n    \n    eval(new String(\"2 + 2\")); // returns a String object containing \"2 + 2\"\n    eval(\"2 + 2\");             // returns 4\n    \n\nYou can work around this limitation in a generic fashion by using\n`toString()`.\n\n    \n    \n    var expression = new String(\"2 + 2\");\n    eval(expression.toString());\n    \n\nYou cannot indirectly use the `eval` function by invoking it via a name other\nthan `eval()`; if you do, a runtime error might occur. For example, you should\nnot use the following code:\n\n    \n    \n    var x = 2;\n    var y = 4;\n    var myEval = eval;\n    myEval(\"x + y\");\n    \n\n## Don't use eval needlessly!\n\n`eval()` is a dangerous function, which executes the code it's passed with the\nprivileges of the caller. If you run `eval()` with a string that could be\naffected by a malicious party, you may end up running malicious code on the\nuser's machine with the permissions of your webpage / extension. More\nimportantly, third party code can see the scope in which `eval()` was invoked,\nwhich can lead to possible attacks in ways to which the similar\n[`Function`][1] is not susceptible.\n\n`eval()` is also generally slower than the alternatives, since it has to\ninvoke the JS interpreter, while many other constructs are optimized by modern\nJS engines.\n\nThere are safer (and faster!) alternatives to `eval()` for common use-cases.\n\n### Accessing member properties\n\nYou should not use `eval()` to convert property names into properties.\nConsider the following example where the property of the object to be\u00a0accessed\nis not known until the code is executed. This can be done with eval:\n\n    \n    \n    var obj = { a: 20, b: 30 };\n    var propname = getPropName();  //returns \"a\" or \"b\"\n    \n    eval( \"var result = obj.\" + propname );\n    \n\nHowever, `eval()` is not necessary here. In fact, its use here is discouraged.\nInstead, use the [member operators][2], which are much faster and safer:\n\n    \n    \n    var obj = { a: 20, b: 30 };\n    var propname = getPropName();  //returns \"a\" or \"b\"\n    var result = obj[ propname ];  //  obj[ \"a\" ] is the same as obj.a \n    \n\n### Use functions instead of evaluating snippets of code\n\nJavaScript has [first-class functions][3], which means you can pass functions\nas arguments to other APIs, store them in variables and objects' properties,\nand so on. Many DOM APIs are designed with this in mind, so you can (and\nshould) write:\n\n    \n    \n    // instead of setTimeout(\" ... \", 1000) use:\n    setTimeout(function() { ... }, 1000); \n    \n    // instead of elt.setAttribute(\"onclick\", \"...\") use:\n    elt.addEventListener(\"click\", function() { ... } , false); \n\n[Closures][4] are also helpful as a way to create parametrized functions\nwithout concatenating strings.\n\n### Parsing JSON (converting strings to JavaScript objects)\n\nIf the string you're calling `eval()` on contains data (for example, an array:\n`\"[1, 2, 3]\"`), as opposed to code, you should consider switching to\n[JSON][5], which allows the string to use a subset of JavaScript syntax to\nrepresent data. See also [Downloading JSON and JavaScript in extensions][6].\n\nNote that since JSON syntax is limited compared to JavaScript syntax, many\nvalid JavaScript literals will not parse as JSON. For example, trailing commas\nare not allowed in JSON, and property names (keys) in object literals must be\nenclosed in quotes. Be sure to use a JSON serializer to generate strings that\nwill be later parsed as JSON.\n\n### Pass data instead of code\n\nFor example, an extension designed to scrape contents of web-pages could have\nthe scraping rules defined in [XPath][7] instead of JavaScript code.\n\n### Run code with limited privileges\n\nIf must run code, consider running it with reduced privileges. This advice\napplies mainly to extensions and XUL applications, which can use\n[Components.utils.evalInSandbox][8] for this.\n\n## Examples\n\nThe following examples display output using [`document.write`][9]. In server-\nside JavaScript, you can display the same output by calling the `write()`\nfunction instead of using `document.write()`.\n\n### Example: Using `eval`\n\nIn the following code, both of the statements containing `eval()` return 42.\nThe first evaluates the string \"`x + y + 1`\"; the second evaluates the string\n\"`42`\".\n\n    \n    \n    var x = 2;\n    var y = 39;\n    var z = \"42\";\n    eval(\"x + y + 1\"); // returns 42\n    eval(z);           // returns 42 \n    \n\n### Example: Using `eval` to evaluate a string of JavaScript statements\n\nThe following example uses `eval()` to evaluate the string `str`. This string\nconsists of JavaScript statements that open an alert dialog box and assign `z`\na value of 42 if `x` is five, and assigns 0 to `z` otherwise. When the second\nstatement is executed, `eval()` will cause these statements to be performed,\nand it will also evaluate the set of statements and return the value that is\nassigned to `z`.\n\n    \n    \n    var x = 5;\n    var str = \"if (x == 5) {alert('z is 42'); z = 42;} else z = 0; \";\n    \n    document.write(\"<P>z is \", eval(str));\n\n### Example: Last expression is evaluated\n\n`eval()` returns the value of the last expression evaluated.\n\n    \n    \n    var str = \"if ( a ) { 1+1; } else { 1+2; }\";\n    var a = true;\n    var b = eval(str);  // returns 2\n     \n    alert(\"b is : \" + b);\n    \n    a = false;\n    b = eval(str);  // returns 3\n    \n    alert(\"b is : \" + b);\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 1st Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'eval' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\n\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'eval' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\n\n\n</td> </tr> </table>\n\n## Browser compatibility\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n### Gecko-specific notes\n\n  * Historically `eval()` had an optional second argument, specifying an object in whose context the evaluation was to be performed. This argument was non-standard, and was removed from SpiderMonkey in Gecko 1.9.1 (Firefox 3.5). See [bug\u00a0442333][12].\n\n## See also\n\n  * [`uneval()`][13]\n  * [Member operators][2]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Operators/Member_Operators\n\n[3]: http://en.wikipedia.org/wiki/First-class_function\n\n[4]: /en-US/docs/Web/JavaScript/Guide/Closures\n\n[5]: /en-US/docs/JSON\n\n[6]: /en-US/docs/Downloading_JSON_and_JavaScript_in_extensions\n\n[7]: /en-US/docs/XPath\n\n[8]: /en-US/docs/Components.utils.evalInSandbox\n\n[9]: /en-US/docs/Web/API/document.write\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.2.1\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-eval-x\n\n[12]: https://bugzilla.mozilla.org/show_bug.cgi?id=442333\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects"], "type": "others"},
{"name": "InternalError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/internalerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/internalerror/internalerror.prototype", "content": "**Non-standard**  \nThis feature is non-standard and is not on a standards track. Do not use it on\nproduction sites facing the Web: it will not work for every user. There may\nalso be large incompatibilities between implementations and the behavior may\nchange in the future.\n\n## Summary\n\nThe `**InternalError.prototype**` property represents the prototype of the\n[`InternalError`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `InternalError.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`InternalError`][1] instances inherit from `InternalError.prototype`. You\ncan use the prototype to add properties or methods to all instances.\n\n## Properties\n\n`InternalError.prototype.constructor`\n\n    Specifies the function that created an instance's prototype.\n[`InternalError.prototype.message`][2]\n\n    Error message. Inherited from [`Error`][3].\n[`InternalError.prototype.name`][4]\n\n    Error name. Inherited from [`Error`][3].\n[`InternalError.prototype.fileName`][5]\n\n    Path to file that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.lineNumber`][6]\n\n    Line number in file that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.columnNumber`][7]\n\n    Column number in line that raised this error. Inherited from [`Error`][3].\n[`InternalError.prototype.stack`][8]\n\n    Stack trace. Inherited from [`Error`][3].\n\n## Methods\n\nAlthough the [`InternalError`][1] prototype object does not contain any\nmethods of its own, [`InternalError`][1] instances do inherit some methods\nthrough the prototype chain.\n\n## Specifications\n\nNot part of any specifications.\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][9].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td>  \n<td>\n\nNot\u00a0supported\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][10]\n  * [`Function.prototype`][11]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[9]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[10]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[11]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "InternalError"], "type": "property"},
{"name": "RangeError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/rangeerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/rangeerror/rangeerror.prototype", "content": "## Summary\n\nThe `**RangeError.prototype**` property represents the prototype the\n[`RangeError`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `RangeError.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`RangeError`][1] instances inherit from `RangeError.prototype`. You can\nuse the prototype to add properties or methods to all instances.\n\n## Properties\n\n`RangeError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`RangeError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`RangeError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`RangeError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`RangeError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`RangeError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`RangeError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`RangeError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`RangeError`][1] prototype object does not contain any methods\nof its own, [`RangeError`][1] instances do inherit some methods through the\nprototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "RangeError"], "type": "property"},
{"name": "ReferenceError.prototype", "parent": "/javascript/javascript_reference/standard_built-in_objects/referenceerror", "url": "/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/prototype", "parsed_url": "/javascript/javascript_reference/standard_built-in_objects/referenceerror/referenceerror.prototype", "content": "## Summary\n\nThe `**ReferenceError.prototype**` property represents the prototype for the\n[`ReferenceError`][1] constructor.  \n  \n<table>  \n<tr>  \n<th>\n\nProperty attributes of `ReferenceError.prototype`\n\n</th> </tr>  \n<tr>  \n<td>\n\nWritable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nEnumerable\n\n</td>  \n<td>\n\nno\n\n</td> </tr>  \n<tr>  \n<td>\n\nConfigurable\n\n</td>  \n<td>\n\nno\n\n</td> </tr> </table>\n\n## Description\n\nAll [`ReferenceError`][1] instances inherit from `ReferenceError.prototype`.\nYou can use the prototype to add properties or methods to all instances.\n\n## Properties\n\n`ReferenceError.prototype.constructor`\n\n     Specifies the function that created an instance's prototype.\n[`ReferenceError.prototype.message`][2]\n\n     Error message. Although ECMA-262 specifies that [`ReferenceError`][1] should provide its own `message` property, in [SpiderMonkey][3], it inherits [`Error.prototype.message`][2].\n[`ReferenceError.prototype.name`][4]\n\n     Error name. Inherited from [`Error`][5].\n[`ReferenceError.prototype.fileName`][6]\n\n     Path to file that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.lineNumber`][7]\n\n     Line number in file that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.columnNumber`][8]\n\n     Column number in line that raised this error. Inherited from [`Error`][5].\n[`ReferenceError.prototype.stack`][9]\n\n     Stack trace. Inherited from [`Error`][5].\n\n## Methods\n\nAlthough the [`ReferenceError`][1] prototype object does not contain any\nmethods of its own, [`ReferenceError`][1] instances do inherit some methods\nthrough the prototype chain.\n\n## Specifications  \n  \n<table>  \n<tr>  \n<th>\n\nSpecification\n\n</th>  \n<th>\n\nStatus\n\n</th>  \n<th>\n\nComment\n\n</th> </tr>  \n<tr>  \n<td>\n\nECMAScript 3rd Edition.\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nInitial definition.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 5.1 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][10]\n\n</td>  \n<td>\n\nStandard\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr>  \n<tr>  \n<td>\n\n[ECMAScript 6 (ECMA-262)  \nThe definition of 'NativeError.prototype' in that specification.][11]\n\n</td>  \n<td>\n\nDraft\n\n</td>  \n<td>\n\nDefined as `_NativeError_.prototype`.\n\n</td> </tr> </table>\n\n## Browser compatibility\n\nHelp improve compatibility tables by filling out [ this 11 question\nsurvey][12].\n\n  * Desktop\n  * Mobile  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nChrome\n\n</th>  \n<th>\n\nFirefox (Gecko)\n\n</th>  \n<th>\n\nInternet Explorer\n\n</th>  \n<th>\n\nOpera\n\n</th>  \n<th>\n\nSafari\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>  \n  \n<table>  \n<tr>  \n<th>\n\nFeature\n\n</th>  \n<th>\n\nAndroid\n\n</th>  \n<th>\n\nChrome for Android\n\n</th>  \n<th>\n\nFirefox Mobile (Gecko)\n\n</th>  \n<th>\n\nIE Mobile\n\n</th>  \n<th>\n\nOpera Mobile\n\n</th>  \n<th>\n\nSafari Mobile\n\n</th> </tr>  \n<tr>  \n<td>\n\nBasic support\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td>  \n<td>\n\n(Yes)\n\n</td> </tr> </table>\n\n## See also\n\n  * [`Error.prototype`][13]\n  * [`Function.prototype`][14]\n\n[1]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\n\n[2]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message\n\n[3]: /en-US/docs/Mozilla/Projects/SpiderMonkey\n\n[4]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name\n\n[5]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[6]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName\n\n[7]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/lineNumber\n\n[8]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/columnNumber\n\n[9]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/stack\n\n[10]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.11.7.6\n\n[11]: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-nativeerror.prototype\n\n[12]: http://www.surveygizmo.com/s3/1780174/e8a1839160ab\n\n[13]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/prototype\n\n[14]: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/prototype\n\n", "docset": "JavaScript", "path": ["JavaScript", "JavaScript reference", "Standard built-in objects", "ReferenceError"], "type": "property"}]